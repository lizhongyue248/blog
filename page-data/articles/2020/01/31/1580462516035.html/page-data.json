{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2020/01/31/1580462516035.html","result":{"data":{"asciidoc":{"id":"5369400d-7795-5766-bfc5-ccb3635de020","fields":{"slug":"/articles/2020/01/31/1580462516035.html","birthTime":"2020-01-31T09:21:56.228Z","modifiedTime":"2020-01-31T11:15:06.324Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_jul\">JUL</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_log4j2_slf4j\">Log4j2 + SLF4J</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_使用\">使用</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_总结\">总结</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>目前（2020-1-30）在 <a href=\"https://vertx.io/docs/vertx-core/java/#_logging\">Vert.x 官网日志配置</a>\n的版本还是处于 3.8.x 版本的。在 vertx 3 版本中，我都是直接使用 <code>JUL</code>\n来进行日志配置，因为在默认情况下，vert.x 会使用 Java 默认的日志 <code>JUL</code> 即\n<code>Java Util Log</code>，并读取 <code>resource</code> 下的\n<code>vertx-default-jul-logging.properties</code> 文件并且不需要加任何依赖。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果需要添加其他的日志依赖还需要设置以下相应的环境变量，例如：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">System.setProperty(LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory::class.java.name)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>但是在 vert.x 4 的版本中，<code>io.vertx.core.logging.LoggerFactory</code>\n已经被标记为了 <strong>过时</strong> 状态。具体原因见 <a href=\"https://github.com/eclipse-vertx/vert.x/issues/2774\">Github\nIssue</a>。大意就是 vert.x\n作为一个工具库，公开的日志存在一些移植性上的问题，不提供内部的日志的职责，并且在以后的主要版本中将其用作内部记录器。如果需要使用日志，自行配置使用。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>事实上在现在已经发布的 <code>vert.x 4.0.0-SNAPSHOT</code>\n中，也同样对其进行了说明。而在新的官网文档(4.0.0)中提到：</p>\n</div>\n<div class=\"exampleblock 0 0\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>=== Logging</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Vert.x logs using its internal logging API and supports various logging\nbackends.</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>The logging backend is selected as follows:</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>the backend denoted by the <code>vertx.logger-delegate-factory-class-name</code>\nsystem property if present or,</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>JDK logging when a <code>vertx-default-jul-logging.properties</code> file is in\nthe classpath or,</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>a backend present in the classpath, in the following order of\npreference:</p>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>SLF4J</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Log4J</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Log4J2</p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Otherwise Vert.x defaults to JDK logging.</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>==== Configuring with the system property</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Set the <code>vertx.logger-delegate-factory-class-name</code> system property to:</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>io.vertx.core.logging.SLF4JLogDelegateFactory</code> for SLF4J or,</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>io.vertx.core.logging.Log4jLogDelegateFactory</code> for Log4J or,</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>io.vertx.core.logging.Log4j2LogDelegateFactory</code> for Log4J2 or,</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>io.vertx.core.logging.JULLogDelegateFactory</code> for JDK logging</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>==== Configuring JUL logging</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>A JUL logging configuration file can be specified in the normal JUL way,\nby providing a system property named <code>java.util.logging.config.file</code>\nwith the value being your configuration file. For more information on\nthis and the structure of a JUL config file please consult the JDK\nlogging documentation.</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Vert.x also provides a slightly more convenient way to specify a\nconfiguration file without having to set a system property. Just provide\na JUL config file with the name <code>vertx-default-jul-logging.properties</code>\non your classpath (e.g.&nbsp;inside your fatjar) and Vert.x will use that to\nconfigure JUL.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_jul\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">JUL</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于 <code>JUL</code> 依旧没有改变，只需要添加\n<code>vertx-default-jul-logging.properties</code> 文件即可。我以前项目的配置：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-properties\" data-lang=\"properties\">handlers=java.util.logging.ConsoleHandler,java.util.logging.FileHandler\n# 日志格式化\njava.util.logging.SimpleFormatter.format=%1$tc %4$s: %3$s %n%5$s  %n\njava.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter\njava.util.logging.ConsoleHandler.level=INFO\n# 日志输出设置\njava.util.logging.FileHandler.level=WARNING\njava.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter\njava.util.logging.FileHandler.pattern=%h/vertxLog/Drcom.log\n\n.level=INFO\nio.vertx.ext.web.level=FINEST\nio.vertx.level=INFO\ncom.hazelcast.level=INFO\nio.netty.util.internal.PlatformDependent.level=SEVERE</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>但是众所周知，<code>JUL</code> 的功能不如 Logback/Log4j2 等完善，比如 Output\nHandler 就没有 Logback/Log4j2\n的丰富，有时候需要自己来继承定制，又比如它的配置局限性很大，格式化、控制台颜色、日志输入等都没有太完善的支持。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以我们大可以抛弃使用 <code>JUL</code> 转而使用 <code>Logback</code> 或者\n<code>Log4j2</code>。这次我选择使用的是 <code>Log4j2</code>，他吸取了 <code>Logback</code>\n的优点，并且可以完美配合 <code>SLF4J</code> 来进行使用。</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>为什么一定要使用 <code>SLF4J</code> 呢？</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这就涉及到一个概念，<code>JCL</code> —— <strong>Commons Logging</strong>。<code>JCL</code> 是一个\n<code>Log Facade</code>，只提供 <code>Log API</code>，不提供实现。而 <code>SLF4j</code> 是类似于 <code>JCL</code> 的\n<code>Log Facade</code>，其作者认为 <code>JCL</code> 的 <code>API</code>\n设计得不好，容易让使用者写出性能有问题的代码，所以自己写了一套\n<code>Log Facade</code> 。而有了相应的 <code>Log API</code> 就要有相应的\n<code>Log Implementation</code>，而 <code>Log4j2</code> 设计上很大程度上模仿了\n<code>SLF4J</code>/<code>Logback</code>，性能上也获得了很大的提升。</p>\n</div>\n</blockquote>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_log4j2_slf4j\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Log4j2 + SLF4J</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>毫无疑问，项目中应该只使用一个具体的 <code>Log Implementation</code>。我们选择了\n<code>Log4j2</code>，</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>从 vert.x 4 的官网文档中可以明确知道，他加载的顺序如下：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>系统环境是否设置了\n<code>vertx.logger-delegate-factory-class-name</code>，如果有，就是用设置的值。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>JUL</code> 的配置文件 <code>vertx-default-jul-logging.properties</code> 是否在\n<code>classpath</code> 下</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果上面都没有，就在 <code>classpath</code> 下按照顺序查找以下包是否存在</p>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>SLF4J</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>Log4J</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>Log4J2</code></p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果以上都没有，使用 <code>vert.x</code> 默认的 <code>JUL</code> 配置。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以 <code>vert.x</code> 4 中，是不需要我们去手动设置\n<code>vertx.logger-delegate-factory-class-name</code> 参数了，他会默认去加载\n<code>classpath</code> 下的日志库的。因此我们需要添加相关的依赖。事实上现在\n<code>Log4j2</code> 对 <code>SLF4J</code>\n的支持简直好得不要不要的。以至于连以前添加一个日志需要加 3 - 5\n个依赖的，现在只需要一个。如果你有兴趣翻看过文档的话应该可以看到https://logging.apache.org/log4j/2.0/log4j-slf4j-impl/index.html[这篇]。</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>log4j-slf4j-impl</code> should be used with <code>SLF4J</code> <strong>1.7.x</strong> releases or\nolder.</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>log4j-slf4j18-impl</code> should be used with <code>SLF4J</code> <strong>1.8.x</strong> releases or\nnewer.</p>\n</li>\n</ol>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果我们想用 <code>Log4j2</code> + <code>SLF4J</code> 的组合，直接选择 <code>log4j-slf4j-impl</code> 或者\n<code>log4j-slf4j18-impl</code> 即可。这里当然选用 <code>log4j-slf4j18-impl</code>\n使用最新版本 <code>2.13.0</code>。它包含如下依赖：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>org.slf4j:slf4j-api:1.8.0-alpha2</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>org.apache.logging.log4j:log4j-api:2.13.0</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>org.apache.logging.log4j:log4j-core:2.13.0</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这三个依赖已经包含了我们所有需要引入的东西。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来就是添加相应的配置文件了，配置文件网上一搜有很多的，这是我用的</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Configuration status=\"WARN\" monitorInterval=\"30\"&gt;\n\n  &lt;Properties&gt;\n    &lt;Property name=\"LOG_PATH\" value=\"./logs\"/&gt;\n    &lt;Property name=\"LOG_TMP_FILE\" value=\"./logs/authorization-center-tmp.log\"/&gt;\n    &lt;Property name=\"LOG_INFO_FILE\" value=\"./logs/authorization-center-info.log\"/&gt;\n    &lt;Property name=\"LOG_WARN_FILE\" value=\"./logs/authorization-center-warn.log\"/&gt;\n    &lt;Property name=\"LOG_ERROR_FILE\" value=\"./logs/authorization-center-error.log\"/&gt;\n    &lt;Property name=\"CONSOLE_LAYOUT\"\n              value=\"%style{%d{yyyy-MM-dd HH:mm:ss.SSS}}{Blue,Bright} %highlight{${LOG_LEVEL_PATTERN:-%5p}}{FATAL=bg_red, ERROR=red, WARN=yellow, INFO=green, DEBUG=grey, TRACE=blue} %style{%pid}{magenta} --- %style{[%15.15t] %-40.40c{1.}}{cyan,Bright} : %m%n%ex\"/&gt;\n    &lt;Property name=\"FILE_LAYOUT\"\n              value=\"%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} %pid --- [%15.15t] %-40.40c{1.} : %m%n%ex\"/&gt;\n  &lt;/Properties&gt;\n\n  &lt;Appenders&gt;\n    &lt;Console name=\"Console\" target=\"SYSTEM_OUT\"&gt;\n      &lt;PatternLayout pattern=\"${CONSOLE_LAYOUT}\"/&gt;\n    &lt;/Console&gt;\n    &lt;RollingFile name=\"RollingFileInfo\" fileName=\"${LOG_INFO_FILE}\"\n                 filePattern=\"${LOG_PATH}/info/info.%d{yyyy-MM-dd}.%i.log.gz\"&gt;\n      &lt;ThresholdFilter level=\"info\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/&gt;\n      &lt;PatternLayout pattern=\"${FILE_LAYOUT}\"/&gt;\n      &lt;Policies&gt;\n        &lt;TimeBasedTriggeringPolicy/&gt;\n        &lt;SizeBasedTriggeringPolicy size=\"50MB\"/&gt;\n      &lt;/Policies&gt;\n    &lt;/RollingFile&gt;\n    &lt;RollingFile name=\"RollingFileWarn\" fileName=\"${LOG_WARN_FILE}\"\n                 filePattern=\"${LOG_PATH}/warn/warn.%d{yyyy-MM-dd}.%i.log.gz\"&gt;\n      &lt;ThresholdFilter level=\"warn\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/&gt;\n      &lt;PatternLayout pattern=\"${FILE_LAYOUT}\"/&gt;\n      &lt;Policies&gt;\n        &lt;TimeBasedTriggeringPolicy/&gt;\n        &lt;SizeBasedTriggeringPolicy size=\"50MB\"/&gt;\n      &lt;/Policies&gt;\n    &lt;/RollingFile&gt;\n    &lt;RollingFile name=\"RollingFileError\" fileName=\"${LOG_ERROR_FILE}\"\n                 filePattern=\"${LOG_PATH}/error/error.%d{yyyy-MM-dd}.%i.log.gz\"&gt;\n      &lt;ThresholdFilter level=\"warn\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/&gt;\n      &lt;PatternLayout pattern=\"${FILE_LAYOUT}\"/&gt;\n      &lt;Policies&gt;\n        &lt;TimeBasedTriggeringPolicy/&gt;\n        &lt;SizeBasedTriggeringPolicy size=\"50MB\"/&gt;\n      &lt;/Policies&gt;\n    &lt;/RollingFile&gt;\n  &lt;/Appenders&gt;\n  &lt;Loggers&gt;\n    &lt;Logger name=\"cn.edu.gzmu.center\" level=\"debug\" additivity=\"false\"&gt;\n      &lt;AppenderRef ref=\"Console\"/&gt;\n    &lt;/Logger&gt;\n    &lt;Root level=\"info\"&gt;\n      &lt;AppenderRef ref=\"Console\"/&gt;\n      &lt;AppenderRef ref=\"RollingFileInfo\"/&gt;\n      &lt;AppenderRef ref=\"RollingFileWarn\"/&gt;\n      &lt;AppenderRef ref=\"RollingFileError\"/&gt;\n    &lt;/Root&gt;\n  &lt;/Loggers&gt;\n&lt;/Configuration&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>当然，<code>log4j2</code> 的功能很强大，还有严格模式的 <code>xml</code>、<code>json</code>、<code>yaml</code>\n等配置方式，都是不错的。而且他支持控制台的颜色输出等，比如我配置的颜色是这样的：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2020/01/30/深度截图_选择区域_20200131170626.png\" alt=\"color\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以去看https://logging.apache.org/log4j/2.x/manual/layouts.html[官方文档]\n，非常详细。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_使用\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">使用</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用的时候需要用的是如下两个包：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>io.vertx.core.impl.logging.LoggerFactory</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>io.vertx.core.impl.logging.Logger</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">private val log: Logger = LoggerFactory.getLogger(MainVerticle::class.java.name)\n\n// ......\n\nlog.info(\"Server start......\")</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>或者使用如下包：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>org.slf4j.Logger</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>org.slf4j.LoggerFactory</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用的时候可以使用可变参数</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">log.info(\"Server start on port {}......\", server.getInteger(\"port\", 8888))</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_总结\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">总结</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>vert.x</code> 4 有很多改变，也加了很多新的特性，最大的改变莫过于\n<code>Core futurisation</code> 了。然而对于拥有协程的 <code>Kotlin</code>\n来说，有些地方编码方式没有太大改变。比较多的就是废弃了很多以前的\n<code>API</code>，比如 <code>JWT</code> 相关的，比如 <code>Web</code> 相关的 <code>API</code>\n都有部分被废弃，日志这里也有或多或少的改变。在 3.8.x\n的时候进行逐渐的过度，新项目使用 4.0.0 还是不错的。</p>\n</div>\n</div>\n</div>","document":{"title":"vert.x 4 日志配置"},"pageAttributes":{"category":"vert.x","description":"vert.x 4 日志配置","image":"https://img.hacpai.com/bing/20190603.jpg?imageView2/1/w/960/h/540/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2020/01/31/1580462516035.html","next":{"document":{"title":"vert.x 4 使用插件完善你的项目"},"fields":{"slug":"/articles/2020/02/01/1580550298345.html"}},"previous":{"document":{"title":"Spring Security Oauth2 从零到一完整实践（六）踩坑记录"},"fields":{"slug":"/articles/2020/01/20/1579503807596.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}