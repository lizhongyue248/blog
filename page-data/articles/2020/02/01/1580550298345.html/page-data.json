{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2020/02/01/1580550298345.html","result":{"data":{"asciidoc":{"id":"d5e8dbeb-bbe6-589b-b82a-2a8109a56cda","fields":{"slug":"/articles/2020/02/01/1580550298345.html","birthTime":"2020-02-01T09:44:58.408Z","modifiedTime":"2020-02-09T10:16:25.457Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_在这之前\">在这之前</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_使用_kotlin_dsl_改造项目\">使用 Kotlin DSL 改造项目</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_plugins\">plugins</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_repository\">repository</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_ext\">ext</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_application\">application</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_dependencies\">dependencies</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_compilekotlincompiletestkotlin\">compileKotlin/compileTestKotlin</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_shadowjar\">shadowJar</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_test\">test</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_run\">run</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_最终结果\">最终结果</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_整合_vertx_plugin\">整合 vertx-plugin</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_plugins_2\">plugins</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_简单变化\">简单变化</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_dependencies_2\">dependencies</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_新增\">新增</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_最终结果_2\">最终结果</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_整合_vertx_boot\">整合 vertx-boot</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_添加依赖\">添加依赖</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_添加配置文件\">添加配置文件</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_运行\">运行</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_idea_运行\">IDEA 运行</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_其他\">其他</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_总结\">总结</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>vert.x 一直是一个维护非常积极的项目，从诞生至今一直如此。现在他的 GitHub\n上面 open 的 issues\n也只有一百多个，保持积极处理的状态，而不是堆积一堆。并在在提出相关 issue\n以后，都会积极的回应以及处理。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在 vert.x 中，它的一大特点就是 <code>Verticle</code>。每一个 <code>Verticle</code>\n都有自己的功能，各司其职。并且，他们都可以是事件驱动的。今天我们的主要任务就是改善我们在官网上面生成下来的\nvert.x 项目，通过使用插件来让我们的项目运行简单、部署简单。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们主要用到如下两款插件：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://github.com/jponge/vertx-gradle-plugin\">vertx-plugin</a>：这是官方提供的\nvert.x 的 gradle\n插件。<strong>主要功能是提供完整的依赖管理，以及轻松整合https://github.com/johnrengelman/shadow[shadow]\n,https://docs.gradle.org/current/userguide/application_plugin.html[application]\n等构建工具</strong>。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://github.com/jponge/vertx-boot\">vertx-boot</a>：这虽然不是官方提供的，但是开发者依旧是核心的官方人员。<strong>主要功能是通过配置文件的方式来配置启动我们的`Verticle`，不需要在代码中写死或者命令行传参。</strong></p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>目前（2020-2-1）这两款插件一直在积极的维护中。通过这两款插件，能够极大的让我们的\nvert.x 应用更加灵活，更容易部署。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>当然，现在我开始向 Koltin 转型，所以以下的配置均是使用 Kotlin DSL\n进行书写的 Gradle 文件。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以主要分为三部分：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>修改项目初始化的文件，将 Groovy DSL 的 Gradle 文件 修改为 Kolitn DSL\n的 Gradle 文件。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>整合 <code>vertx-plugin</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>整合 <code>vertx-boot</code></p>\n</li>\n</ol>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>2020.2.6 更新：<code>vert.x</code> 中移除了 deploy 的几个关于类加载的参数，参见\n<a href=\"https://github.com/eclipse-vertx/vert.x/issues/3274\">ISSUE</a>。<code>vertx-boot</code>\n还没有对其更新后的参数进行完整性支持，所以如果使用 <code>vert.x 4</code> 版本， -\n对于 <code>Kotlin</code> 会造成 <code>NoSuchMethodError</code> 错误。 - 对于 <code>Java</code>\n会提示方法过期。</p>\n</div>\n</blockquote>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_在这之前\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">在这之前</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们需要从 <a href=\"https://start.vertx.io/\">vert.x starter</a>\n上面初始化我们的项目。目前提供的有如下四个版本：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3.8.5</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3.7.1</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>4.0.0-milestone4</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>4.0.0-SNAPSHOT</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我并不是用在生产环境上的，所以大可以使用 4.0.0\n版本。而我不选择使用里程碑版本，使用快照版本即可。版本间的具体差别请自行谷歌。值得注意的是，3.x.x\n版本到 4.x.x 版本是大版本更新，有了很多的改变。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同时选择使用 Kotlin 、Gradle 来创建项目，组件选择使用\nWeb，其他随意，高级选项可以选择 Jdk11。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_使用_kotlin_dsl_改造项目\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">使用 Kotlin DSL 改造项目</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>下载初始化后的项目以后，我们的 <code>build.gradle</code> 大概是这样子的：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">plugins {\n  id 'org.jetbrains.kotlin.jvm' version '1.3.20'\n  id 'application'\n  id 'com.github.johnrengelman.shadow' version '5.0.0'\n}\n\ngroup = 'cn.edu.gzmu.center'\nversion = '1.0.0-SNAPSHOT'\n\nrepositories {\n  maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }\n  maven {\n    url 'https://oss.sonatype.org/content/repositories/snapshots'\n    mavenContent {\n      snapshotsOnly()\n    }\n  }\n  mavenCentral()\n  jcenter()\n}\n\next {\n  kotlinVersion = '1.3.20'\n  vertxVersion = '4.0.0-SNAPSHOT'\n  junitJupiterEngineVersion = '5.4.0'\n}\n\napplication {\n  mainClassName = 'io.vertx.core.Launcher'\n}\n\n\ndef mainVerticleName = 'cn.edu.gzmu.center.MainVerticle'\ndef watchForChange = 'src/**/*'\ndef doOnChange = './gradlew classes'\n\ndependencies {\n  implementation \"io.vertx:vertx-web-client:$vertxVersion\"\n  implementation \"io.vertx:vertx-auth-jwt:$vertxVersion\"\n  implementation \"io.vertx:vertx-auth-oauth2:$vertxVersion\"\n  implementation \"io.vertx:vertx-unit:$vertxVersion\"\n  implementation \"io.vertx:vertx-web:$vertxVersion\"\n  implementation \"io.vertx:vertx-config:$vertxVersion\"\n  implementation \"io.vertx:vertx-config-yaml:$vertxVersion\"\n  implementation \"io.vertx:vertx-pg-client:$vertxVersion\"\n  implementation \"io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion\"\n  implementation \"io.vertx:vertx-consul-client:$vertxVersion\"\n  implementation \"io.vertx:vertx-lang-kotlin:$vertxVersion\"\n\n  testImplementation \"io.vertx:vertx-junit5:$vertxVersion\"\n  testRuntimeOnly \"org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion\"\n  testImplementation \"org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion\"\n}\n\ncompileKotlin {\n  kotlinOptions.jvmTarget = '1.8'\n}\n\ncompileTestKotlin {\n  kotlinOptions.jvmTarget = '1.8'\n}\n\n\nshadowJar {\n  archiveClassifier.set('fat')\n  manifest {\n    attributes 'Main-Verticle': mainVerticleName\n  }\n  mergeServiceFiles {\n    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'\n  }\n}\n\ntest {\n  useJUnitPlatform()\n  testLogging {\n    events 'PASSED', 'FAILED', 'SKIPPED'\n  }\n}\n\nrun {\n  args = ['run', mainVerticleName, \"--redeploy=$watchForChange\", \"--launcher-class=$mainClassName\", \"--on-redeploy=$doOnChange\"]\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们的第一步，将它改成我们 Kotlin DSL 写的 Gradle，我们一块一块的来。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>在这之前要将文件`build.gradle` 重命名为 <code>build.gradle.kts</code></strong>。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_plugins\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">plugins</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>plugin 部分很简单，只是单双引号的函数调用的问题：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">plugins {\n  application\n  kotlin(\"jvm\") version \"1.3.20\"\n  id(\"com.github.johnrengelman.shadow\") version \"5.0.0\"\n}\ngroup = \"cn.edu.gzmu.center\"\nversion = \"1.0.0-SNAPSHOT\"</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_repository\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">repository</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>repositories 也是如此，不过我们不用让他拉取快照了。</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">repositories {\n  maven(\"http://maven.aliyun.com/nexus/content/groups/public/\")\n  maven(\"https://oss.sonatype.org/content/repositories/snapshots\")\n  mavenCentral()\n  jcenter()\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_ext\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">ext</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于 Gradle 的 extra 部分较为复杂，在 Koltin DSL 中，设置与获取不太优雅</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">ext {\n    set(\"vertxVersion\", \"4.0.0-SNAPSHOT\")\n}\n//......\n// 使用\nimplementation \"io.vertx:vertx-auth-oauth2:${extra[\"vertxVersion\"]}\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>另外一种方式是通过委托</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">val vertxVersion by extra { \"4.0.0-SNAPSHOT\" }\n\n//......\n// 使用\nimplementation \"io.vertx:vertx-auth-oauth2:$vertxVersion\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们姑且使用第二种方式。</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">// 变量直接把 def 改成 val，单引号改成双引号就可以了。\nval mainVerticleName = \"cn.edu.gzmu.center.MainVerticle\"\n\nval kotlinVersion by extra { \"1.3.20\" }\nval vertxVersion by extra { \"4.0.0-SNAPSHOT\" }\n// 加一个日志进去\nval log4j2Version by extra { \"2.13.0\" }\nval junitJupiterEngineVersion by extra { \"5.4.0\" }</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_application\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">application</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这里就是单双引号的问题</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">application {\n  mainClassName = \"io.vertx.core.Launcher\"\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_dependencies\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">dependencies</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这里就是单双引号的问题，同时要加上括号</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">dependencies {\n  implementation(\"io.vertx:vertx-web-client:$vertxVersion\")\n  implementation(\"io.vertx:vertx-auth-jwt:$vertxVersion\")\n  implementation(\"io.vertx:vertx-auth-oauth2:$vertxVersion\")\n  implementation(\"io.vertx:vertx-unit:$vertxVersion\")\n  implementation(\"io.vertx:vertx-web:$vertxVersion\")\n  implementation(\"io.vertx:vertx-config:$vertxVersion\")\n  implementation(\"io.vertx:vertx-config-yaml:$vertxVersion\")\n  implementation(\"io.vertx:vertx-pg-client:$vertxVersion\")\n  implementation(\"io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion\")\n  implementation(\"io.vertx:vertx-consul-client:$vertxVersion\")\n  implementation(\"io.vertx:vertx-lang-kotlin:$vertxVersion\")\n  // 日志\n  implementation(\"org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Version\")\n\n  testImplementation(\"io.vertx:vertx-junit5:$vertxVersion\")\n  testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion\")\n  testImplementation(\"org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion\")\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_compilekotlincompiletestkotlin\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">compileKotlin/compileTestKotlin</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这里需要引入一个类，同时使用委托。官网强制要求这样写的</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\n// ......\n\nval compileKotlin: KotlinCompile by tasks\n\ncompileKotlin.kotlinOptions {\n  jvmTarget = \"1.8\"\n}\nval compileTestKotlin: KotlinCompile by tasks\n\ncompileTestKotlin.kotlinOptions {\n  jvmTarget = \"1.8\"\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_shadowjar\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">shadowJar</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个就是一个 task 而已：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">tasks.shadowJar {\n  archiveClassifier.set(\"fat\")\n  manifest {\n    // 需要使用 map\n    attributes(mapOf(\"Main-Verticle\" to mainVerticleName ))\n  }\n  mergeServiceFiles {\n    include(\"META-INF/services/io.vertx.core.spi.VerticleFactory\")\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_test\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">test</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这里也是一个 task，需要引入一下 <code>Test</code> 的枚举：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import org.gradle.api.tasks.testing.logging.TestLogEvent.*\n\n// ......\n\ntasks.withType&lt;Test&gt; {\n  useJUnitPlatform()\n  testLogging {\n    events = mutableSetOf(PASSED, FAILED, SKIPPED)\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_run\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">run</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最后就是 run 了，这里我们换一个 task 的写法：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">tasks {\n  // 前面的 def 变量我拿到这里了\n  val watchForChange = \"src/**/*\"\n  val doOnChange = \"./gradlew classes\"\n  // JavaExec 类型 task\n  \"run\"(JavaExec::class) {\n    // 运行参数\n    args(\"run\", mainVerticleName,\n      \"--redeploy=$watchForChange\",\n      \"--launcher-class=${application.mainClassName}\",\n      \"--on-redeploy=$doOnChange\")\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_最终结果\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">最终结果</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最后我们得到的 <code>build.gradle.kts</code> 如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\nimport org.gradle.api.tasks.testing.logging.TestLogEvent.*\n\nplugins {\n  application\n  kotlin(\"jvm\") version \"1.3.20\"\n  id(\"com.github.johnrengelman.shadow\") version \"5.0.0\"\n}\n\ngroup = \"cn.edu.gzmu.center\"\nversion = \"1.0.0-SNAPSHOT\"\n\nrepositories {\n  maven(\"http://maven.aliyun.com/nexus/content/groups/public/\")\n  maven(\"https://oss.sonatype.org/content/repositories/snapshots\")\n  mavenCentral()\n  jcenter()\n}\n\n\napplication {\n  mainClassName = \"io.vertx.core.Launcher\"\n}\nval mainVerticleName = \"cn.edu.gzmu.center.MainVerticle\"\n\nval kotlinVersion by extra { \"1.3.20\" }\nval vertxVersion by extra { \"4.0.0-SNAPSHOT\" }\nval log4j2Version by extra { \"2.13.0\" }\nval junitJupiterEngineVersion by extra { \"5.4.0\" }\n\ndependencies {\n  implementation(\"io.vertx:vertx-web-client:$vertxVersion\")\n  implementation(\"io.vertx:vertx-auth-jwt:$vertxVersion\")\n  implementation(\"io.vertx:vertx-auth-oauth2:$vertxVersion\")\n  implementation(\"io.vertx:vertx-unit:$vertxVersion\")\n  implementation(\"io.vertx:vertx-web:$vertxVersion\")\n  implementation(\"io.vertx:vertx-config:$vertxVersion\")\n  implementation(\"io.vertx:vertx-config-yaml:$vertxVersion\")\n  implementation(\"io.vertx:vertx-pg-client:$vertxVersion\")\n  implementation(\"io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion\")\n  implementation(\"io.vertx:vertx-consul-client:$vertxVersion\")\n  implementation(\"io.vertx:vertx-lang-kotlin:$vertxVersion\")\n  implementation(\"org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Version\")\n\n  testImplementation(\"io.vertx:vertx-junit5:$vertxVersion\")\n  testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion\")\n  testImplementation(\"org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion\")\n}\n\nval compileKotlin: KotlinCompile by tasks\n\ncompileKotlin.kotlinOptions {\n  jvmTarget = \"1.8\"\n}\nval compileTestKotlin: KotlinCompile by tasks\n\ncompileTestKotlin.kotlinOptions {\n  jvmTarget = \"1.8\"\n}\n\n\ntasks.shadowJar {\n  archiveClassifier.set(\"fat\")\n  manifest {\n    attributes(mapOf(\"Main-Verticle\" to mainVerticleName ))\n  }\n  mergeServiceFiles {\n    include(\"META-INF/services/io.vertx.core.spi.VerticleFactory\")\n  }\n}\n\ntasks.withType&lt;Test&gt; {\n  useJUnitPlatform()\n  testLogging {\n    events = mutableSetOf(PASSED, FAILED, SKIPPED)\n  }\n}\n\ntasks {\n  val watchForChange = \"src/**/*\"\n  val doOnChange = \"./gradlew classes\"\n  \"run\"(JavaExec::class) {\n    args(\"run\", mainVerticleName,\n      \"--redeploy=$watchForChange\",\n      \"--launcher-class=${application.mainClassName}\",\n      \"--on-redeploy=$doOnChange\")\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>IDEA 中 <code>reimport</code>，一下，然后等待加载。运行原来的 <code>MainVerticle</code> 和\nGradle 的 shadow 命令试试能不能正常运行和打包。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_整合_vertx_plugin\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">整合 vertx-plugin</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以看到，我们的整个文件比较冗长，有差不多 90\n行的配置。并且很多地方特别难看，比如版本号那里。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在 Spring boot 的 Gradle 项目里，我们所有的 Spring 相关的依赖都交给了\n<code>io.spring.dependency-management</code> 插件来管理。那么 vert.x\n应该也有这么一个东西，也就是\n<a href=\"https://github.com/jponge/vertx-gradle-plugin\">vertx-plugin</a>。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们接下来将它整合到项目中去。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_plugins_2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">plugins</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>因为 vertx-plugin 已经为我们整合了多款插件，包括 <code>application</code>\n、<code>shadow</code>，所以我们删除他们</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">plugins {\n  kotlin(\"jvm\") version \"1.3.20\"\n  id(\"io.vertx.vertx-plugin\") version \"1.0.1\"\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_简单变化\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">简单变化</h3>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>repositories：不变</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>application：已经内置，直接移除</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>extra：</p>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>val vertxVersion by extra { \"4.0.0-SNAPSHOT\" }</code> 移除，交给插件管理。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>val junitJupiterEngineVersion by extra { \"5.4.0\" }</code>\n移除，交给插件管理。</p>\n</li>\n</ul>\n</div>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>shadowJar：移除，交给插件管理</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>run：移除，交给插件管理</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_dependencies_2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">dependencies</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>移除版本号与单元测试依赖，插件自动添加</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">dependencies {\n  implementation(\"io.vertx:vertx-web-client\")\n  implementation(\"io.vertx:vertx-auth-jwt\")\n  implementation(\"io.vertx:vertx-auth-oauth2\")\n  implementation(\"io.vertx:vertx-unit\")\n  implementation(\"io.vertx:vertx-web\")\n  implementation(\"io.vertx:vertx-config\")\n  implementation(\"io.vertx:vertx-config-yaml\")\n  implementation(\"io.vertx:vertx-pg-client\")\n  implementation(\"io.vertx:vertx-lang-kotlin-coroutines\")\n  implementation(\"io.vertx:vertx-consul-client\")\n  implementation(\"io.vertx:vertx-lang-kotlin\")\n  implementation(\"org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Version\")\n  testImplementation(\"io.vertx:vertx-junit5\")\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_新增\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">新增</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>新增两个，一个是指定插件运行环境（可以省略），另外一个是插件配置</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">tasks.withType&lt;KotlinCompile&gt; {\n  kotlinOptions {\n    freeCompilerArgs = listOf(\"-Xjsr305=strict\")\n    jvmTarget = \"1.8\"\n  }\n}\n\nvertx {\n  // 运行的主要 Verticle\n  mainVerticle = \"cn.edu.gzmu.center.WebVerticle\"\n  // 运行的版本号，默认 3.8.3\n  vertxVersion = \"4.0.0-SNAPSHOT\"\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_最终结果_2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">最终结果</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最后我们得到新的 <code>build.gradle.kts</code></p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\nimport org.gradle.api.tasks.testing.logging.TestLogEvent.*\n\nplugins {\n  kotlin(\"jvm\") version \"1.3.20\"\n  id(\"io.vertx.vertx-plugin\") version \"1.0.1\"\n}\n\ngroup = \"cn.edu.gzmu.center\"\nversion = \"1.0.0-SNAPSHOT\"\n\nrepositories {\n  maven(\"http://maven.aliyun.com/nexus/content/groups/public/\")\n  maven(\"https://oss.sonatype.org/content/repositories/snapshots\")\n  mavenCentral()\n  jcenter()\n}\n\nval mainVerticleName = \"cn.edu.gzmu.center.MainVerticle\"\nval kotlinVersion by extra { \"1.3.20\" }\nval log4j2Version by extra { \"2.13.0\" }\n\ndependencies {\n  implementation(\"io.vertx:vertx-web-client\")\n  implementation(\"io.vertx:vertx-auth-jwt\")\n  implementation(\"io.vertx:vertx-auth-oauth2\")\n  implementation(\"io.vertx:vertx-unit\")\n  implementation(\"io.vertx:vertx-web\")\n  implementation(\"io.vertx:vertx-config\")\n  implementation(\"io.vertx:vertx-config-yaml\")\n  implementation(\"io.vertx:vertx-pg-client\")\n  implementation(\"io.vertx:vertx-lang-kotlin-coroutines\")\n  implementation(\"io.vertx:vertx-consul-client\")\n  implementation(\"io.vertx:vertx-lang-kotlin\")\n  implementation(\"org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Version\")\n  testImplementation(\"io.vertx:vertx-junit5\")\n}\n\nval compileKotlin: KotlinCompile by tasks\ncompileKotlin.kotlinOptions {\n  jvmTarget = \"1.8\"\n}\n\nval compileTestKotlin: KotlinCompile by tasks\ncompileTestKotlin.kotlinOptions {\n  jvmTarget = \"1.8\"\n}\n\ntasks.withType&lt;Test&gt; {\n  useJUnitPlatform()\n  testLogging {\n    events = mutableSetOf(PASSED, FAILED, SKIPPED)\n  }\n}\n\ntasks.withType&lt;KotlinCompile&gt; {\n  kotlinOptions {\n    freeCompilerArgs = listOf(\"-Xjsr305=strict\")\n    jvmTarget = \"1.8\"\n  }\n}\n\nvertx {\n  mainVerticle = \"cn.edu.gzmu.center.verticle.WebVerticle\"\n  vertxVersion = \"4.0.0-SNAPSHOT\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最终只有 65\n行代码。同时版本交给了插件来进行管理，方便省心。并且默认就配置了热部署和热\ndebug。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自动添加了如下命令：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>run</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>runShadow</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>startShadowScripts</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>vertxDebug</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>vertxRun</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们可以直接使用 vertx 提供的 vertxRun 和 vertxDebug ，运行\n<code>./gradlew vertxRun</code> 即可热运行，实时更新。很棒！</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_整合_vertx_boot\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">整合 vertx-boot</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在我们整合了 vertx-plugin 以后，已经很方便了。但是还是需要我们提供一个\n<code>mainVerticle</code>，然后在 <code>mainVerticle</code> 里面配置我们要启动的\n<code>Verticle</code>，还要在代码中配置其参数。所以是较为麻烦的，那么我们如何改变呢？这里就用到了\n<a href=\"https://github.com/jponge/vertx-boot\">vertx-boot</a> 这个库。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>他最重要的作用就是提供了一个配置文件让我们来配置我们要启动的\n<code>Verticle</code>，可以怼他进行高级配置，比如 <code>Verticle</code>\n最大的特性就是直接可以集群部署。那么我们就可以直接指定他集群部署的实例数目；再比如我们可以指定它的启动配置等等。还支持高级配置，例如将它配置成\n<code>worker verticle</code>。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以接下来我们来引入这个库，只需要两步就可以完成：</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_添加依赖\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">添加依赖</h3>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">val vertxBootVersion by extra { \"1.1.2\" }\n\n// ......\n\nimplementation(\"io.github.jponge:vertx-boot:$vertxBootVersion\")</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_添加配置文件\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">添加配置文件</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在 <code>resource</code> 下添加 <code>application.conf</code></p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">vertx-boot {\n  verticles {\n    web {\n      name = \"cn.edu.gzmu.center.verticle.WebVerticle\"\n      instance = 3 // 创建 3 个实例\n    }\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_运行\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">运行</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们修改 <code>build.gradle.kts</code> 的 <code>vertx</code> 函数：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">vertx {\n  // 必须为这个\n  mainVerticle = \"io.github.jponge.vertx.boot.BootVerticle\"\n  vertxVersion = \"4.0.0-SNAPSHOT\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后运行 <code>./gradlew vertxRun</code> 即可看到效果！</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_idea_运行\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">IDEA 运行</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果我们希望使用 IDEA 运行，也非常简单！创建一个 main 函数即可</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">fun main() {\n  Vertx.vertx().deployVerticle(\"io.github.jponge.vertx.boot.BootVerticle\")\n  // 或\n  // Vertx.vertx().deployVerticle(BootVerticle::class.java.name)\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后运行这个 main 函数即可！</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_其他\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">其他</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>初始化的项目默认使用的 Kotlin 是 <code>1.3.20</code>，我们可以将它改为最新的\n<code>1.3.61</code>。同时使用的是 JDK11,让他编译后的字节码是 <code>11</code>\n的（<strong>注：这个特性只有在`1.3.30` 以后版本中可以使用</strong>。）</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">val compileKotlin: KotlinCompile by tasks\ncompileKotlin.kotlinOptions {\n  // Target version of the generated JVM bytecode (1.6, 1.8, 9, 10, 11 or 12), default is 1.6\n  jvmTarget = \"11\"\n}\n\nval compileTestKotlin: KotlinCompile by tasks\ncompileTestKotlin.kotlinOptions {\n  // Target version of the generated JVM bytecode (1.6, 1.8, 9, 10, 11 or 12), default is 1.6\n  jvmTarget = \"11\"\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_总结\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">总结</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>vert.x\n的国内生态真的不怎么样，用的人凤毛麟角，资料更是少之又少。但是他确实足够轻量，足够棒。在他上面可以实现很多东西，相比于\nSpring 的开发模式，vert.x\n更加锻炼一个人、更加考验一个人。并且在多个方面都让自己思维上有不少的进步。这两款插件国内都没有任何介绍，都是自己不断翻文档，一步一步的摸索找到的，然后啃文档弄上去。其中比较复杂的其实是\nGroovy DSL 转 Koltin DSL 的过程，大多资料用的都是\nGroovy，所以学习起来还是有点吃力的。不过 vert.x 真的棒，配合 Koltin\n协程简直爽翻了！</p>\n</div>\n</div>\n</div>","document":{"title":"vert.x 4 使用插件完善你的项目"},"pageAttributes":{"category":"vert.x","description":"vert.x 一直是一个维护非常积极的项目，从诞生至今一直如此。现在他的 GitHub 上面 open 的 issues 也只有一百多个，保持积极处理的状态，而不是堆积一堆。并在在提出相关 issue 以后，都会积极的回应以及处理。","image":"https://img.hacpai.com/bing/20180117.jpg?imageView2/1/w/960/h/540/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2020/02/01/1580550298345.html","next":{"document":{"title":"kotlin 1.3.70 中 kotlinx.serialization 升级到 0.20.0"},"fields":{"slug":"/articles/2020/03/11/1583919686142.html"}},"previous":{"document":{"title":"vert.x 4 日志配置"},"fields":{"slug":"/articles/2020/01/31/1580462516035.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}