{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2020/08/25/1598370094047.html","result":{"data":{"asciidoc":{"id":"2bb001a5-c2c2-561b-a69f-bea98aff5af5","fields":{"slug":"/articles/2020/08/25/1598370094047.html","birthTime":"2020-08-25T15:41:34.100Z","modifiedTime":"2020-08-25T15:42:00.551Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_spring_security_oauth2_authorization_server_初体验\">Spring Security OAuth2 Authorization Server 初体验</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_在这之前\">在这之前</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_授权服务器\">授权服务器</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_客户端模式\">客户端模式</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_jwk_端点\">JWK 端点</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_总结\">总结</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_spring_security_oauth2_authorization_server_初体验\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Spring Security OAuth2 Authorization Server 初体验</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>好久没有写 Spring Security OAuth2\n的文章了，这段时间成长了很多，也发现以前文中存在的一些问题。后面慢慢改成。但是还是很激动的有好消息！</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这周六，最让人兴奋的就是 Spring Security OAuth2 Authorization Server\n发布了 <a href=\"https://spring.io/blog/2020/08/21/get-the-very-first-bits-of-spring-authorization-server-0-0-1\">初版本\n0.0.1</a>了！终于盼来了！从当初的宣布不再维护，到听取社区意见进行重写，再到今天发布\n0.0.1\n第一个小版本，八九个月了，还在使用以前的授权服务器，现在终于有新的东西了！而且还是基于最新的\nSpring Security 构建，可以直接无缝接入 Spring Security 中的 OAuth\nLogin、OAuth Resource Server。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>虽然不能在生产环境适用，但我们可以先来尝尝鲜！目前已经可以使用的功能如下：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>OAuth 2.0 Authorization Code\nGrant — <a href=\"https://tools.ietf.org/html/rfc6749#section-4.1\">RFC 6749</a> —\n授权吗模式</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>OAuth 2.0 Client Credentials\nGrant — <a href=\"https://tools.ietf.org/html/rfc6749#section-4.4\">RFC 6749</a> -\n客户端令牌模式</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>JSON Web Token (JWT) — <a href=\"https://tools.ietf.org/html/rfc7519\">RFC 7519</a> -\nJWT 令牌支持</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>JSON Web Signature (JWS) — <a href=\"https://tools.ietf.org/html/rfc7515\">RFC\n7515</a> -JWS 令牌支持</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>JSON Web Key (JWK) — <a href=\"https://tools.ietf.org/html/rfc7517\">RFC 7517</a> -\nJWK 端点支持</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Key Management for providing key(s) when signing a JWT (JWS) — Jwt key\n管理</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>主要涉及到的 RFC</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://tools.ietf.org/html/rfc6749\">RFC-6749 The OAuth 2.0\nAuthorization Framework</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://tools.ietf.org/html/rfc7515\">RFC-7515 JSON Web Signature (JWS)</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://tools.ietf.org/html/rfc7517\">RFC-7517 JSON Web Key (JWK)</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://tools.ietf.org/html/rfc7518\">RFC-7518 JSON Web Algorithms\n(JWA)</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://tools.ietf.org/html/rfc7519\">RFC-7519 JSON Web Token (JWT)</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>当然对于每个RFC中都是部分实现，还没有完全实现。但是不影响我们体验。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这篇文章适合具有 OAuth2 基础以及 Spring Security 基础的童鞋阅读。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_在这之前\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">在这之前</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>初始化项目，使用 Gradle 进行构建</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">implementation(\"org.springframework.boot:spring-boot-starter-web\")\nimplementation(\"org.springframework.security.experimental:spring-security-oauth2-authorization-server:0.0.1\"</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_授权服务器\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">授权服务器</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>由于是初版，并没有注解来完成自动化配置，事实上 OAuth\n模块迁移以后，都不使用注解来完成自动化配置了。</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@SpringBootApplication\npublic class AuthorizationServerJavaApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(AuthorizationServerJavaApplication.class, args);\n  }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>添加一个安全配置并导入默认配置</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * Spring security config from authorization server.\n *\n * @author echo\n * @date 2020/8/23 13:56:02\n */\n@Configuration\n@Import(OAuth2AuthorizationServerConfiguration.class)\npublic class SecurityConfig  {\n\n  /**\n   * Give a client repository.\n   *\n   * @return RegisteredClientRepository\n   */\n  @Bean\n  public RegisteredClientRepository registeredClientRepository() {\n    RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())\n        .clientId(\"messaging-client\")\n        .clientSecret(\"secret\")\n        .clientAuthenticationMethod(ClientAuthenticationMethod.BASIC)\n        // Authorization Code Grant Type\n        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n        // Client Credentials Grant Type\n        .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\n        .redirectUri(\"http://example.com\")\n        .scope(\"message.read\")\n        .scope(\"message.write\")\n        .build();\n    return new InMemoryRegisteredClientRepository(registeredClient);\n  }\n\n  /**\n   * Give a default key manager.\n   * @return keyManager\n   */\n  @Bean\n  public KeyManager keyManager() {\n    return new StaticKeyGeneratingKeyManager();\n  }\n\n  /**\n   * Give a user.\n   * @return UserDetailsService\n   */\n  @Bean\n  public UserDetailsService users() {\n    UserDetails user = User.withDefaultPasswordEncoder()\n        .username(\"user1\")\n        .password(\"password\")\n        .roles(\"USER\")\n        .build();\n    return new InMemoryUserDetailsManager(user);\n  }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们在配置文件中做了如下几件事：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置一个内存级的 <code>ClientRepository</code>，他实现了\n<code>RegisteredClientRepository</code> 接口，可以通过实现这个接口完成其他的 store\n进行存储客户端信息。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置一个静态的\n<code>KeyManaget</code>，初版没有只提供了一个，他的作用应该是为了管理多个 Key\n的情况，对不同的应用使用不同的 Key 进行管理而不是所有的 OAuth2\n客户端都使用同一个。这个是以前的授权服务器所没有的东西。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置一个默认的用户信息的 <code>Service</code>，这个属于 <code>Spring Security</code>\n的基础了，提供查询用户的服务。</p>\n</li>\n</ol>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_授权码模式\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">授权码模式</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>运行项目，然后按照授权码模式进行请求：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>请求\n<a href=\"http://127.0.0.1:8080/oauth2/authorize?client_id=messaging-client&amp;redirect_uri=http://example.com&amp;response_type=code&amp;scope=message.read，在\" class=\"bare\">http://127.0.0.1:8080/oauth2/authorize?client_id=messaging-client&amp;redirect_uri=http://example.com&amp;response_type=code&amp;scope=message.read，在</a>\nURL 参数中进行指定客户端 id、授权类型、请求 scope 等。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用用户 <code>user1</code> 进行登陆。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>登陆成功后重定向到指定地址 example.com，其中包含 code 参数如下：</p>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"http://example.com/?code=Yfwoy3Lkuu_pdLPG0ttn50ezbHeDmDLZJrGsZEwuwrY%3D\" class=\"bare\">http://example.com/?code=Yfwoy3Lkuu_pdLPG0ttn50ezbHeDmDLZJrGsZEwuwrY%3D</a></p>\n</li>\n</ul>\n</div>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>获取 code 参数 <code>Yfwoy3Lkuu_pdLPG0ttn50ezbHeDmDLZJrGsZEwuwrY%3D</code>，<strong>进行\nURL 解码</strong>，一定要解码，否则找不到。解码后\n<code>Yfwoy3Lkuu_pdLPG0ttn50ezbHeDmDLZJrGsZEwuwr=</code>。通过 POST 请求，获取\ntoken。</p>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>编码的这里是一个坑，按照常理应该是由\n进行解码的，不然每个客户端都需要自己来解码一遍肯定是不对的。已经提了一个\n<a href=\"https://github.com/spring-projects-experimental/spring-authorization-server/issues/102\">issue</a></p>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://b3logfile.com/file/2020/08/solofetchupload2401606585440275624-b0493a47.png\" alt=\"Authorization\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://b3logfile.com/file/2020/08/solofetchupload6968077758085459537-5e7e7c1f.png\" alt=\"image-20200825212051607\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_客户端模式\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">客户端模式</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>客户端模式没有什么好说的了，只验证请求头中的授权信息和 scope 而已。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://b3logfile.com/file/2020/08/solofetchupload2906726793585363159-4b997cba.png\" alt=\"image-20200825212631184\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>获取 token</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://b3logfile.com/file/2020/08/solofetchupload869172233136295980-242f2021.png\" alt=\"image-20200825212700050\">\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_jwk_端点\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">JWK 端点</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在新版中，我们不需要自己去配置 JWK\n端点了，已经帮我们弄好了，可以直接访问 <code>/oauth2/jwks</code> 查看</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n    \"keys\":[\n        {\n            \"kty\":\"RSA\",\n            \"e\":\"AQAB\",\n            \"use\":\"sig\",\n            \"kid\":\"fff84a76-437e-4198-8b99-e80171afa6fb\",\n            \"alg\":\"RS256\",\n            \"n\":\"pfeYq-vtmSwnI0FWveVyCB8jcrsgnY81RDr00yfggj8bPe6T53yNO4ghoY4f3noSGuU1vcT_7dUIGOcFT6A2SN0Omyta5XaMNGJfLZd9QSGApi4zbsaizXsbRPRkAGlcdq3SCYTylHcSP2hhL_Kxco4ZGCdbKHJEQY0mIQyAGZDLm_VPVGjpImuuzLhF3BPGJQbIR7H7qBjPkJPsHfflXV2jndQi-QWckRi_oIU2wEzLSHFKFAOzWotJbd-4LDiedM_SN9834NO2TdZULbcwuY2_i09BKxHP6I6FzQbAQLsDI484UdLa5pZjJ9mJxIZp0Da6AzFHSHtO4oKoR0muew\"\n        }\n    ]\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>简单解释下：</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 50%;\">\n<col style=\"width: 50%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">Key</th>\n<th class=\"tableblock halign-left valign-top\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">kty（Key Type）</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">标识与密钥一起使用的加密算法族，如<code>RSA''或</code>EC''。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">use（Public Key Use）</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">标识公钥的预期用途。``use''参数用于指示是否使用公钥加密数据或验证数据上的签名。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">kid（Key ID）</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">用于匹配特定密钥。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">alg（Algorithm）</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">标识要与密钥一起使用的算法。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">e</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">RSA Key 的公共指数</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">n</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">RSA 私钥参数</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>JWK RSA 参考 <a href=\"https://tools.ietf.org/html/rfc7517#section-9.3\">RSA Private\nKey Representations and Blinding</a>。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>其主要定义来自\n<a href=\"https://github.com/spring-projects-experimental/spring-authorization-server/blob/master/oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/JwkSetEndpointFilter.java#L98\">org.springframework.security.oauth2.server.authorization.web.JwkSetEndpointFilter</a>。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>未使用 JWK 前进行验证 token</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://b3logfile.com/file/2020/08/solofetchupload255189275893034017-eb2a0623.png\" alt=\"image-20200825231353232\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用 JWK 进行验证 Token（在右下脚输入后，会自动更新左边的 JWS）</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://b3logfile.com/file/2020/08/solofetchupload2789815987656918357-fa395e92.png\" alt=\"image-20200825231558186\">\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_总结\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">总结</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>先说说现在我发现的两个问题吧，见\n<a href=\"https://github.com/spring-projects-experimental/spring-authorization-server/issues/102\">issue\n102</a>.</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>回调地址中的 <code>code</code> 是经过 URL\n编码的，但是他并没有为我们解，需要每个客户端进行解码。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>请求 <code>/oauth2/token</code> 端点时，不能够携带 <code>client_id</code>\n参数，如果携带了他授权的类型就是客户端的了， 源码中\n<a href=\"https://github.com/spring-projects-experimental/spring-authorization-server/blob/master/oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProvider.java#L88\">getPrincipal()</a>\n得到的类型就是 <code>String</code> 的了。在\n<a href=\"https://tools.ietf.org/html/rfc6749#section-4.1.3\">RFC-6749\nsection-4.1.3</a>. 中提到</p>\n</li>\n</ol>\n</div>\n<div class=\"exampleblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>REQUIRED, if the client is not authenticating\nwith the authorization server as described in Section 3.2.1.</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果在请求头中设置了客户端令牌，那么这个参数可以不需要。但是当我传递正确的客户端id的时候他应该忽视或者对他进行验证，而不是抛出错误给我，因为我的方式是没有问题的。</p>\n</div>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>其他的慢慢测看看。而这次默认的就是使用了JWT作为签名，生成 JWS 作为\ntoken。JWE 可能还需要等一段时间。</p>\n</div>\n</div>\n</div>\n</div>","document":{"title":"Spring Security OAuth2 Authorization Server 初体验"},"pageAttributes":{"category":"spring","description":"好久没有写 Spring Security OAuth2的文章了，这段时间成长了很多，也发现以前文中存在的一些问题。后面慢慢改成。但是还是很激动的有好消息！","image":"https://b3logfile.com/bing/20200415.jpg?imageView2/1/w/960/h/540/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2020/08/25/1598370094047.html","next":{"document":{"title":"spring boot restful API 从零到一完整实践"},"fields":{"slug":"/articles/2019/01/05/1546684795983.html"}},"previous":{"document":{"title":"Phpstorm + Docker / Docker Compose + xdebug 环境搭建"},"fields":{"slug":"/articles/2020/08/01/1596268325013.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}