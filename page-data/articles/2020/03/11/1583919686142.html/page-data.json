{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2020/03/11/1583919686142.html","result":{"data":{"asciidoc":{"id":"d9572901-d7b9-5534-852e-7d10c242c7d1","fields":{"slug":"/articles/2020/03/11/1583919686142.html","birthTime":"2020-03-11T09:41:26.317Z","modifiedTime":"2020-03-11T09:43:22.128Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_json_nonstric\">Json.nonstric</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_serialdescriptor\">SerialDescriptor</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_bultins_package\">bultins package</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>月初的时候 Kotlin 1.3.70\n<a href=\"https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/\">正式发布</a>了，这不得不说是一个非常好的消息，带来的不仅是标准库新的功能，同时让我们写起来也更加舒服，现在对\n<code>.gradle.kts</code>\n也更加友好了，具体可以查看它的发布文档。随之而然的，就是相应的生态进行更新了，不得不提的就是\n <a href=\"https://github.com/Kotlin/kotlinx.serialization\">kotlinx.serialization</a>\n这个库了。他为我们序列化提供了极大的方便，而他与 1.3.70 对应的版本是\n <a href=\"https://github.com/Kotlin/kotlinx.serialization/blob/master/CHANGELOG.md#0200—​2020-03-04\">0.20.0</a>。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果你还在使用 v0.14.0 版本，可能会报以下错误：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">java.lang.NoSuchMethodError: No direct method (ILkotlinx/serialization/SerializationConstructorMarker;)V in class Lcom/xxxx/common/core/Model; or its super classes (declaration of 'com.xxxx.common.core.Model' appears in /data/app/com.xxxx.demo-PV-n86-hzEl-eyc8UqbACQ==/base.apk!classes7.dex)\n10-11 15:30:10.048 E/AndroidRuntime(25760): at com.xxxx.reg.data.User.(Unknown Source:9)\n10-11 15:30:10.048 E/AndroidRuntime(25760): at com.xxxx.reg.data.User$$serializer.deserialize(Unknown Source:624)\n10-11 15:30:10.048 E/AndroidRuntime(25760): at com.xxxx.reg.data.User$$serializer.deserialize(User.kt:17)\n10-11 15:30:10.048 E/AndroidRuntime(25760): at kotlinx.serialization.json.internal.PolymorphicKt.decodeSerializableValuePolymorphic(Polymorphic.kt:33)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>升级到 v0.20.0 就可以了。当然在这个版本中发生了不小的改变，将它过期的\napi 总结一下。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_json_nonstric\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Json.nonstric</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>默认情况下，他开启 <code>nonstric</code> 模式的，也就是解析的 <code>key</code>\n必须完全符合实体类的要求，不能够多出其他的字段。但是很多时候我们不希望这样，在以前的版本中是这样配置的：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">private val json = Json(JsonConfiguration(strictMode = false))</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>但是在 0.20.0 中，已经不能够这样配置了，参见 <a href=\"https://github.com/Kotlin/kotlinx.serialization/blob/master/runtime/commonMain/src/kotlinx/serialization/json/JsonConfiguration.kt#L112\">github</a></p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>strictMode</code> 分割为 <code>ignoreUnknownKeys</code>、<code>isLenient`和\n`serializeSpecialFloatingPointValues</code>，</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>unquoted</code> 重命名为 <code>unquotedPrint</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在新的版本中我们需要如下使用：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">private val json = Json(\n  JsonConfiguration.Default.copy(\n    ignoreUnknownKeys = true,\n    isLenient = true,\n    serializeSpecialFloatingPointValues = true,\n    useArrayPolymorphism = true\n  )\n)</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_serialdescriptor\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">SerialDescriptor</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们在对某些数据结构进行序列化和反序列化的时候应该写过如下的代码：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">@Serializer(forClass = LocalDateTime::class)\nclass LocalDateTimeSerializer : KSerializer&lt;LocalDateTime&gt; {\n\n  override val descriptor: SerialDescriptor = StringDescriptor\n  private val formatter: DateTimeFormatter =\n    DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").withLocale(Locale.SIMPLIFIED_CHINESE)\n\n  override fun deserialize(decoder: Decoder): LocalDateTime =\n    LocalDateTime.parse(decoder.decodeString(), formatter)\n\n  override fun serialize(encoder: Encoder, obj: LocalDateTime) {\n    encoder.encodeString(formatter.format(obj))\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过实现 <code>serialize</code> 和 <code>descriptor</code>\n方法就可以完成自定义的序列化。但是在 0.20.0 版本中 <code>StringDescriptor</code>\n被标记为过时了，相应的以下基本数据类型的都被标记了过时：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>IntDescriptor</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>UnitDescriptor</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>BooleanDescriptor</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>ByteDescriptor</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>ShortDescriptor</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>LongDescriptor</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>FloatDescriptor</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>DoubleDescriptor</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>CharDescriptor</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>StringDescriptor</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>源码中的注解如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">@Deprecated(message = message,\n    replaceWith = ReplaceWith(\"PrimitiveDescriptor(\\\"yourSerializerUniqueName\\\", PrimitiveKind.STRING)\"))\nobject StringDescriptor : Migration()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们需要使用 <code>PrimitiveDescriptor</code>\n来进行替代，参考 <a href=\"https://github.com/Kotlin/kotlinx.serialization/blob/146a0d08ed87a97cf5435a89fcafd3aa639c106e/runtime/commonMain/src/kotlinx/serialization/SerialDescriptorBuilder.kt#L60\">github</a>：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">override val descriptor: SerialDescriptor = PrimitiveDescriptor(\"LocalDateTimeTz\", PrimitiveKind.STRING)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>需要注意的是这个字符串的 <code>key</code>\n需要是唯一的。不然的话可能会造成他无法找到等问题。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_bultins_package\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">bultins package</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>另外，一些功能已移至 bultins package 包。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>例如：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import kotlinx.serialization.list\nUser.serializer().list\n// 替换为\nimport kotlinx.serialization.builtins.list\nUser.serializer().list</code></pre>\n</div>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-kotlin\" data-lang=\"kotlin\">import kotlinx.serialization.internal.StringSerializer\nStringSerializer()\n// 替换为\nimport kotlinx.serialization.builtins.serializer\nString.serializer()</code></pre>\n</div>\n</div>\n</div>\n</div>","document":{"title":"kotlin 1.3.70 中 kotlinx.serialization 升级到 0.20.0"},"pageAttributes":{"category":"kotlin","description":"月初的时候 Kotlin 1.3.70 正式发布 这不得不说是一个非常好的消息，带来的不仅是标准库新的功能，同时让我们写起来也更加舒服，现在对.gradle.kts 更加友好了.","image":"https://img.hacpai.com/bing/20180821.jpg?imageView2/1/w/960/h/540/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2020/03/11/1583919686142.html","next":{"document":{"title":"Spring Reactive Mongodb Jpa Auditing 审计"},"fields":{"slug":"/articles/2020/04/09/1586446987932.html"}},"previous":{"document":{"title":"vert.x 4 使用插件完善你的项目"},"fields":{"slug":"/articles/2020/02/01/1580550298345.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}