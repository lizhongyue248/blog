{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2018/10/12/1546344581866.html","result":{"data":{"asciidoc":{"id":"5ec8ca93-a9d4-5e78-a649-09ba3496047a","fields":{"slug":"/articles/2018/10/12/1546344581866.html","birthTime":"2018-10-11T23:09:00.000Z","modifiedTime":"2019-01-01T13:00:46.164Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_技术选型\">技术选型</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_使用\">使用</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_运行简述\">运行简述</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_登录注册\">登录注册</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_增删改查简述\">增删改查简述</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_其他简述\">其他简述</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_总结\">总结</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>前段时间一直在看 spring\nboot，但是一直没有动手去实战。这段时间才有时间，正好趁着学校 需要交一个\njava 增删改查登录注册 的实例，原要求要使用 servlet + jsp 来做，但是因为\n自己以前写 servlet\n挺多了，如果不去看源码再写进步应该不大，所以想着使用以前一直想学的\nspring boot 做一套，所以才有了这个 demo。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>一开始打算使用前后段分离,前端用 nginx 反向代理静态页面，然后使用 redis\n存储 session， 后端就是 spring-boot 提供 RestFul 风格提供 API\n调用即可。但是最近事情真的多，所以做 了一个 ``阉割版''\n的，前后端半分离，为什么叫做半分离呢？因为我初始化页面还是使用了模板引擎\n但是请求的时候依旧使用 ajax 调用 api\n接口动态生成页面元素，不过前端依旧没有脱离后端独立 部署运行。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_技术选型\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">技术选型</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>开发工具： IntelliJ IDEA</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>核心框架： spring-boot</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>模板引擎： thymeleaf</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>构建工具： maven 3.3.9</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>构建插件： mvnw</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>数据库： mysql</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>持久层： spring-data-jpa</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>验证码： kaptcha</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>缓存： redis</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>前端： jquery3 + bootstrap4 + bootbox4</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_使用\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">使用</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在你的 IDE 中导入项目，然后使用 maven 导入依赖，如果 maven\n版本相差过大导致程序不能正常 运行，可以使用 mvnw 插件自动下载符合的\nmaven 版本，windows 请运行 <code>mvnw.cmd</code>，linux 或 mac 请运行 <code>mvnw</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置文件见\n<code>src/main/resources/application.yml</code>，修改自己的数据库链接和 redis\n链接， <strong>如果链接信息填写正确，数据库会自动建表，无需导入 sql。</strong></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后运行 <code>src/main/java/cn/echocow/web/WebApplication.java</code> 即可</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_运行简述\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">运行简述</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_登录注册\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">登录注册</h3>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>入口处进入 <code>/index</code> 即 <code>MainController</code> 的 <code>index</code> 方法,\n判断是否登录，没有登录就不 设置任何东西直接跳转到 <code>index.html</code>, 使用\nthymeleaf 判断有用户，没有就显示登录注册按钮。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>点击登录， <code>/login</code> 即 <code>MainController</code> 的 <code>login</code>\n方法，直接跳转到登录页面 <code>login.html</code>, 同时图形验证码请求 <code>/captcha</code> 即\n<code>UtilController</code> 获取验证码图片。填写完成后使用 form 表单直接 POST\n提交到 <code>/login</code> 即 <code>MainController</code> 的 <code>postLogin</code>\n方法，在里面进行验证登录。</p>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果登录失败，携带 <code>msg</code> 返回页面，同时前端模板引擎判断 <code>msg</code>\n是否显示并提示。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果登录成功直接跳转</p>\n</li>\n</ul>\n</div>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>登录成功后，又跳转 <code>1</code> 中的 <code>/index</code> 即 <code>MainController</code> 的 <code>index</code>\n方法，由于登录了， 所以请求后端数据，然后携带后端数据返回 <code>index.html</code>\n页面，前端模板引擎判断然后显示列表。登录流\n程即跑通了，注册、退出都是同理。</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_增删改查简述\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">增删改查简述</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在增删改查中</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>增、查使用的是 模板引擎</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>删、改使用的是 ajax 提交，然后用 jq 控制元素的显示与删除</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>为什么这么做？</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>不管嘛。。。反正我喜欢。。。就像前面说的，一开始想前后端分离，但是又涉及到了认证、授权、跨域一堆问题，\n然后又没时间，所以决定用模板引擎，为啥后面又用 ajax\n了呢。。。因为要跳转页面实在不想让他有那么多跳转， 写多了 ajax\n后真的会有依赖，异步真的是个好东西，可能这就是我为啥会喜欢 vert.x\n的原因吧。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_其他简述\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">其他简述</h3>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>config 配置类，其中配置了登录拦截器、验证码生成</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>controller 控制器，里面包含拦截器和 api</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>entity 实体类，包括了统一响应</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>repository jpa、crud 接口实现</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>service 服务提供</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_总结\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">总结</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>感觉比起来还是比较喜欢 vert.x 前面写了个基于 vert.x 的易班应用\n<a href=\"https://github.com/GZMZ-YIBAN/YBSport-vertx\">易运动</a>\n,感觉还是喜欢那种开发方式。不过真的，spring\n的生态链实在太强大，基本上我遇到的问题网上都能够找到完美的\n解决方案，虽然质量参差不齐，但是总归比 vert.x 一搜不到一页来得爽太多。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>无 xml 配置简直让我爱不释手，注解基本解决了大多问题，不论是 servlet 3.1\n还是 servlet 4.0 都感觉没 有 spring boot 来得爽，果然 java EE 后端被\nspring 系列占有大部分市场是有原因的。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>期末的时候打算使用 vue + spring boot\n做个后台管理系统，如果有时间会引入第三方登录，一直很想做的一个\n东西。这段时间太忙，只能匆匆做一个交给老师了，质量不是很高，很多东西没有做，比如全局异常捕获都没做。。。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://github.com/lizhongyue248/SpringBootPractice\">Github</a></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>© 2017-2018 By: <a href=\"https://www.echocow.cn\">EchoCow</a></p>\n</div>\n</div>\n</div>","document":{"title":"基于 spring boot + thymeleaf + jpa 增删改查登录注册demo"},"pageAttributes":{"category":"归档","description":"基于 spring boot + thymeleaf + jpa 增删改查登录注册demo","image":"https://img.hacpai.com/bing/20171225.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2018/10/12/1546344581866.html","next":{"document":{"title":"基于 vertx web 应用 YBSport-vertx"},"fields":{"slug":"/articles/2018/10/18/1546344582189.html"}},"previous":{"document":{"title":"drcom 校园网教师帐号爆破工具"},"fields":{"slug":"/articles/2018/09/29/1546344583151.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}