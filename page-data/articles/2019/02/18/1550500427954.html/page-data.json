{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2019/02/18/1550500427954.html","result":{"data":{"asciidoc":{"id":"d3f12aa6-7c3e-5269-a0a4-6c450ebad366","fields":{"slug":"/articles/2019/02/18/1550500427954.html","birthTime":"2019-02-18T15:18:26.200Z","modifiedTime":"2019-02-21T11:18:13.592Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_能带给你什么\">能带给你什么</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_技术选型\">技术选型</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_带来的烦恼\">带来的烦恼</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_mysql_多对多的无限查询问题\">mysql 多对多的无限查询问题</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_redis_序列化问题\">redis 序列化问题</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_公共部分抽取\">公共部分抽取</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_baseentity\">BaseEntity</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_baserepository\">BaseRepository</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_baseservice\">BaseService</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_baseserviceimpl\">BaseServiceImpl</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_basecontroller\">BaseController</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_为什么不用_spring_data_rest\">为什么不用 spring data rest</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_感受\">感受</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>真的很心累，说实话自己真的不想重构，因为自己真的很喜欢 spring data\njpa，他的简洁方便再加上 jdk 1.8\n的特性，真的不忍心将他从我项目中剥离，但是他的多对多问题真的给我带来了太多的烦恼，自己能力不足以解决这些问题，一路下来，磕磕碰碰，最终却还是不得不放弃它，又爱又恨。这篇博客，记录一下到目前为止自己不太满意的的一个项目吧，他在刚才已经被mybatis完全替换，为他保留一个分支。</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>项目地址：https://github.com/lizhongyue248/xiaoming[XIAOMING]</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>分支地址：https://github.com/lizhongyue248/xiaoming/tree/master[XIAOMING-JPA]</p>\n</div>\n</blockquote>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_能带给你什么\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">能带给你什么</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring data jpa 无限查询的一些解决办法</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring data redis 新的配置方式</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring boot restful 公共部分抽取</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_技术选型\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">技术选型</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>核心框架：spring boot</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>持久层：spring data jpa</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>数据库：mysql</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>安全：spring security oauth2</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>加密：jwt</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>缓存：redis</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_带来的烦恼\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">带来的烦恼</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>mysql 多对多的无限查询问题</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>redis 序列化问题</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_mysql_多对多的无限查询问题\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">mysql 多对多的无限查询问题</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>就像所描述那样，<code>sys_user</code> 表里面有 <code>roles</code> 字段存放所有权限，\n<code>sys_role</code> 里面有 <code>users</code> 字段。如下</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>public class SysUser extends BaseEntity implements UserDetails {\n\n    // ...\n\n    /**\n     * 当前用户的权限\n     */\n    @ManyToMany(fetch = FetchType.EAGER)\n    @JsonIgnoreProperties(value = \"users\")\n    @JoinTable(name = \"sys_user_role\",\n            joinColumns = {@JoinColumn(name = \"user_id\", nullable = false)},\n            inverseJoinColumns = {@JoinColumn(name = \"role_id\", nullable = false)})\n    private List&lt;SysRole&gt; roles;\n\n    // ...\n}</pre>\n</div>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>public class SysRole extends BaseEntity {\n\n    // ...\n\n    /**\n     * 当前角色的菜单\n     */\n    @JsonIgnoreProperties(value = \"roles\")\n    @ManyToMany(cascade = CascadeType.MERGE, fetch = FetchType.EAGER)\n    @JoinTable(name = \"sys_permission_role\", joinColumns = @JoinColumn(name = \"role_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"permission_id\"))\n    private List&lt;SysPermission&gt; permissions = new ArrayList&lt;&gt;();\n\n    /**\n     * 当前角色对应的用户\n     * 双向映射造成数据重复查询死循环问题\n     */\n    @ManyToMany(mappedBy = \"roles\")\n    private List&lt;SysUser&gt; users = new ArrayList&lt;&gt;();\n\n}</pre>\n</div>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>public class SysPermission extends BaseEntity {\n    // ...\n\n    /**\n     * 菜单角色\n     * 双向映射造成数据重复查询死循环问题\n     */\n    @ManyToMany(mappedBy = \"permissions\")\n    private List&lt;SysRole&gt; roles = new ArrayList&lt;&gt;();\n}</pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>存放拥有当前角色的所有用户，然后带来的结果是，他们两一直互相无限查询，打印无数\nsql 语句最后<strong>堆栈溢出</strong>。尝试过很多解决办法，大概有如下几种： -\n<code>@JsonIgnore</code>\n注解，但是在数据库查询出来的时候会忽略掉此字段，所以不可行。 -\n<code>@JsonIgnoreProperties</code> 注解，奇怪的是时而有效时而无效。 -\n<code>@Proxy(lazy = false)</code> 注解，无效 - <code>fetch = FetchType.EAGER</code>\n属性，需要在配置文件中添加如下配置才有小，不然要产生一个 什么 bag 异常</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>jpa:\n  properties:\n    hibernate:\n      enable_lazy_load_no_trans: true</pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>但是会带来`N+1` 问题，查询效率有所降低，不过小项目无所谓=0= -\n<code>@ToString(exclude = {\"users\", \"permissions\"})</code> 同时需要生成的 tostring\n方法忽略掉这些字段，不然在使用时会报\n<code>LazyInitializationException …​ no session</code> 错误。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_redis_序列化问题\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">redis 序列化问题</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我缓存选择的是 redis 缓存，而在将他存入的时候遇到了一个 spring data jpa\n分页查询无法序列化的问题，因为他没有默认的无参构造，因而我的分页查询无法使用\nredis 缓存。为啥不自己写一个？懒=-=</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>redis 的 <code>CacheManager</code> 网上搜到的方式大多不管用，我的方式如下：</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>    @Bean\n    @Override\n    public CacheManager cacheManager() {\n        // 配置在这里配置\n        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()\n                .entryTtl(Duration.ofHours(12)) // 过期时间\n                .prefixKeysWith(applicationProperties.getName()) // 缓存前缀\n                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(keySerializer())) // 序列化键\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(valueSerializer())) // 序列化值\n                .disableCachingNullValues();\n        // 创建缓存管理器\n        return RedisCacheManager\n                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(connectionFactory))\n                .cacheDefaults(redisCacheConfiguration)\n                .transactionAware()\n                .build();\n    }</pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自己也写了 <code>gson</code> 和 <code>FastJson</code> 的序列化，有兴趣的可以看看 github 项目的\n<code>RedisConfig</code></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>然而真正让我放弃 spring data jpa\n的原因，其实是因为在我前几天修改后，尝试查询，第一次查询成功并存入redis，然后再次查询他就报序列化错误，我尝试解决了三天，实在找不到解决的办法了，也在\n<a href=\"https://stackoverflow.com/questions/54722546/sprng-boot-jpa-redis-lazyinitializationexception\">stackoverflow</a>\n发起提问但是依旧没有办法解决，所以只有完全放弃 spring data jpa 换成\nmybatis试试了。</strong></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_公共部分抽取\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">公共部分抽取</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于一个 restful 风格的项目，他的 controller、service、repository\n层都是有公共的部分的，如果不抽取，需要写很多重复的代码，作为一个合(zhuang)格(bi)的\nJAVA\n程序员，肯定是不容许他的存在，更何况还会带来一处修改处处修改的尴尬，所以对他进行了公共部分抽取。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_baseentity\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">BaseEntity</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>提取实体类的公共字段</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>package cn.echocow.xiaoming.base;\n\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;\nimport com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.annotation.CreatedBy;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedBy;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n\n/**\n * 实体类基类\n *\n * @author Echo\n * @version 1.0\n * @date 2019-02-02 22:03\n */\n@Getter\n@Setter\n@MappedSuperclass // 重点\n@EntityListeners(AuditingEntityListener.class) // 自动填充创建、修改时间和创建、修改用户\npublic abstract class BaseEntity implements Serializable {\n\n    /**\n     * id 主键\n     */\n    @Id\n    @Column(name = \"id\", nullable = false)\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    /**\n     * 排序\n     */\n    @OrderColumn(name = \"sort\")\n    private Integer sort;\n\n    /**\n     * 创建时间\n     */\n    @JsonDeserialize(using = LocalDateTimeDeserializer.class)\n    @JsonSerialize(using = LocalDateTimeSerializer.class)\n    @CreatedDate\n    @Column(name = \"create_time\", nullable = false, columnDefinition = \"datetime not null default now() comment '创建时间'\")\n    private LocalDateTime createTime;\n\n    /**\n     * 创建用户\n     */\n    @CreatedBy\n    @Column(name = \"create_user\")\n    private String createUser;\n\n    /**\n     * 修改时间\n     */\n    @JsonDeserialize(using = LocalDateTimeDeserializer.class)\n    @JsonSerialize(using = LocalDateTimeSerializer.class)\n    @LastModifiedDate\n    @Column(name = \"modify_time\", nullable = false, columnDefinition = \"datetime not null default now() comment '修改时间'\")\n    private LocalDateTime modifyTime;\n\n    /**\n     * 修改用户\n     */\n    @LastModifiedBy\n    @Column(name = \"modify_user\")\n    private String modifyUser;\n\n    /**\n     * 备注\n     */\n    @Column(name = \"remark\")\n    private String remark;\n\n}</pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_baserepository\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">BaseRepository</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>公共的仓库基类，一般适用于对公共字段的条件查询等。</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>package cn.echocow.xiaoming.base;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.NoRepositoryBean;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * 资源仓库基类\n *\n * @author Echo\n * @version 1.0\n * @date 2019-02-02 20:25\n */\n@NoRepositoryBean\npublic interface BaseRepository&lt;T, ID&gt; extends JpaRepository&lt;T, ID&gt;, JpaSpecificationExecutor&lt;T&gt; {\n\n    /**\n     * 批量删除\n     *\n     * @param ids ids\n     */\n    @Modifying\n    @Transactional(rollbackFor = Exception.class)\n    @Query(\"delete from #{#entityName} e where e.id in (:ids)\")\n    void deleteBatch(@Param(\"ids\")List&lt;Long&gt; ids);\n}</pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_baseservice\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">BaseService</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>service 公共接口</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>package cn.echocow.xiaoming.base;\n\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * 服务接口基类\n *\n * @author Echo\n * @version 1.0\n * @date 2019-02-02 20:25\n */\npublic interface BaseService&lt;T extends BaseEntity, ID extends Serializable, R extends BaseRepository&lt;T, ID&gt;&gt; {\n\n    /**\n     * 通过 id 更新实体\n     *\n     * @param id     id\n     * @param entity 实体\n     * @return 更新后的实体\n     */\n    T update(ID id, T entity);\n\n    /**\n     * 保存实体\n     *\n     * @param entity 实体对象\n     * @return 保存后的实体\n     */\n    T save(T entity);\n\n    /**\n     * 通过 id 查询\n     *\n     * @param id id\n     * @return 实体\n     */\n    T findById(ID id);\n\n    /**\n     * 通过 id 删除\n     *\n     * @param id id\n     */\n    void deleteById(ID id);\n\n    /**\n     * 判断是否存在指定 id 对象\n     *\n     * @param id id\n     * @return 结果\n     */\n    boolean exists(ID id);\n\n    /**\n     * 查询所有\n     *\n     * @return 集合\n     */\n    List&lt;T&gt; findAll();\n\n    /**\n     * 分页查询\n     *\n     * @param pageable 分页\n     * @return 结果\n     */\n    Page&lt;T&gt; findAll(Pageable pageable);\n\n    /**\n     * 批量删除\n     *\n     * @param ids id 集合\n     */\n    void deleteBatch(List&lt;Long&gt; ids);\n}</pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_baseserviceimpl\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">BaseServiceImpl</h3>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>package cn.echocow.xiaoming.base.impl;\n\nimport cn.echocow.xiaoming.utils.CustomBeanUtils;\nimport cn.echocow.xiaoming.base.BaseEntity;\nimport cn.echocow.xiaoming.base.BaseRepository;\nimport cn.echocow.xiaoming.base.BaseService;\nimport cn.echocow.xiaoming.exception.ResourceNoFoundException;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cache.annotation.CacheConfig;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.CachePut;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.util.Assert;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * 服务实现基类\n *\n * @author Echo\n * @version 1.0\n * @date 2019-02-02 20:26\n */\n@CacheConfig(cacheNames = {\"baseService\"}, keyGenerator = \"cacheKeyGenerator\")\npublic abstract class BaseServiceImpl&lt;T extends BaseEntity, ID extends Serializable, R extends BaseRepository&lt;T, ID&gt;&gt; implements BaseService&lt;T, ID, R&gt; {\n\n    @Autowired\n    protected R baseRepository;\n\n    @Override\n    @CachePut\n    public T update(ID id, T entity) {\n        T exist = baseRepository.findById(id).orElseThrow(() -&gt;\n                new ResourceNoFoundException(String.format(\"the resource by id %s not found!\", id)));\n        BeanUtils.copyProperties(entity, exist, CustomBeanUtils.getNullPropertyNames(entity));\n        return exist;\n    }\n\n    @Override\n    @CacheEvict\n    public T save(T entity) {\n        return baseRepository.save(entity);\n    }\n\n    @Override\n    @Cacheable\n    public T findById(ID id) {\n        return baseRepository.findById(id).orElseThrow(() -&gt;\n                new ResourceNoFoundException(String.format(\"the resource by id %s not found!\", id))\n        );\n    }\n\n    @Override\n    @CacheEvict(allEntries = true)\n    public void deleteById(ID id) {\n        if (!baseRepository.existsById(id)) {\n            throw new ResourceNoFoundException(String.format(\"the resource by id %s not found!\", id));\n        }\n        baseRepository.deleteById(id);\n    }\n\n    @Override\n    @Cacheable\n    public boolean exists(ID id) {\n        return baseRepository.existsById(id);\n    }\n\n    @Override\n    @Cacheable\n    public List&lt;T&gt; findAll() {\n        return baseRepository.findAll();\n    }\n\n    @Override\n    public Page&lt;T&gt; findAll(Pageable pageable) {\n        return baseRepository.findAll(pageable);\n    }\n\n    @Override\n    @CacheEvict(allEntries = true)\n    public void deleteBatch(List&lt;Long&gt; ids) {\n        Assert.notNull(ids, \"ids can not is null!\");\n        baseRepository.deleteBatch(ids);\n    }\n}</pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_basecontroller\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">BaseController</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最重要的，restful 风格基类 controller</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>RestResource 是对单个资源的封装，使用 spring boot hateoas 生成对应的\nhateoas</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>RestResources 是对多个资源集合的封装，使用 spring boot hateoas\n生成对应的 hateoas</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>package cn.echocow.xiaoming.base;\n\nimport cn.echocow.xiaoming.exception.InvalidRequestException;\nimport cn.echocow.xiaoming.resource.ApplicationResource;\nimport cn.echocow.xiaoming.resource.PageSimple;\nimport cn.echocow.xiaoming.resource.RestResource;\nimport cn.echocow.xiaoming.resource.RestResources;\nimport cn.echocow.xiaoming.resource.annotation.PageResult;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.hateoas.Resources;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author Echo\n * @version 1.0\n * @date 2019-02-03 21:43\n */\npublic abstract class BaseController&lt;T extends BaseEntity, S extends BaseService&gt; {\n\n    @Autowired\n    private S baseService;\n\n    /**\n     * 获取控制器，通过反射添加 rest hateoas\n     *\n     * @return 控制器\n     */\n    public abstract Class getControllerClass();\n\n    /**\n     * 保存一个资源\n     * POST    /{entity}\n     *\n     * @param entity        实体\n     * @param bindingResult 检验结果\n     * @return http 响应\n     */\n    @PostMapping\n    public HttpEntity&lt;?&gt; saveResource(@Valid @RequestBody T entity, BindingResult bindingResult) {\n        if (bindingResult.hasErrors()) {\n            throw new InvalidRequestException(\"Invalid parameter\", bindingResult);\n        }\n        entity.setId(null);\n        return new ResponseEntity&lt;&gt;(new RestResource&lt;&gt;(baseService.save(entity), getControllerClass()), HttpStatus.CREATED);\n    }\n\n    /**\n     * 删除指定 id 的资源\n     * DELETE   /sysUsers/{id}\n     *\n     * @param id 资源 id\n     * @return http 响应\n     */\n    @DeleteMapping(\"/{id}\")\n    public HttpEntity&lt;?&gt; deleteResource(@PathVariable Long id) {\n        baseService.deleteById(id);\n        return new ResponseEntity&lt;&gt;(new ApplicationResource(), HttpStatus.NO_CONTENT);\n    }\n\n    /**\n     * 更新一个资源，提供当前资源的所有信息\n     * PUT    /{entity}/{id}\n     *\n     * @param id            资源 id\n     * @param entity        更新后的资源\n     * @param bindingResult 参数校验\n     * @return http 响应\n     */\n    @PutMapping(\"/{id}\")\n    public HttpEntity&lt;?&gt; putResource(@PathVariable Long id, @Valid @RequestBody T entity, BindingResult bindingResult) {\n        if (bindingResult.hasErrors()) {\n            throw new InvalidRequestException(\"Invalid parameter\", bindingResult);\n        }\n        return patchResource(id, entity);\n    }\n\n    /**\n     * 更新一个资源，提供当前资源的部分信息\n     * PATCH    /{entity}/{id}\n     *\n     * @param id     资源 id\n     * @param entity 更新后的资源\n     * @return http 响应\n     */\n    @PatchMapping(\"/{id}\")\n    public HttpEntity&lt;?&gt; patchResource(@PathVariable Long id, @RequestBody T entity) {\n        return ResponseEntity.ok(new RestResource&lt;&gt;(baseService.update(id, entity), getControllerClass()));\n    }\n\n    /**\n     * 获取指定 id 的资源\n     * Get    /{entity}/{id}\n     *\n     * @param id 资源 id\n     * @return http 响应\n     */\n    @GetMapping(\"/{id}\")\n    public HttpEntity&lt;?&gt; getResource(@PathVariable Long id) {\n        return ResponseEntity.ok(new RestResource&lt;&gt;(baseService.findById(id), getControllerClass()));\n    }\n\n    /**\n     * 获取所有资源/分页，可以直接使用 Pageable 来接受，忘记改了=-=\n     *\n     * @param page 页码\n     * @param size 大小\n     * @return http 响应\n     */\n    @GetMapping\n    @PageResult\n    public HttpEntity&lt;?&gt; getAllOrPagesResources(\n            @RequestParam(required = false) Integer page,\n            @RequestParam(required = false) Integer size) {\n        if (page == null || size == null || page &lt;= 0 || size &lt;= 0) {\n            List&lt;T&gt; all = baseService.findAll();\n            return ResponseEntity.ok(new Resources&lt;&gt;(all.stream()\n                    .map(entity -&gt; new RestResource&lt;&gt;(entity, getControllerClass()))\n                    .collect(Collectors.toList())));\n        }\n        Page&lt;T&gt; result = baseService.findAll(PageRequest.of(--page, size));\n        RestResources&lt;RestResource&gt; resources = new RestResources&lt;&gt;(result.stream()\n                .map(entity -&gt; new RestResource&lt;&gt;(entity, getControllerClass()))\n                .collect(Collectors.toList()));\n        resources.setPage(new PageSimple(result.getSize(), result.getNumber() + 1, result.getTotalElements(),\n                result.getTotalPages(), result.hasPrevious(), result.hasNext()));\n        return ResponseEntity.ok(resources);\n    }\n\n}</pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后基础的 rest 风格就完成了。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_为什么不用_spring_data_rest\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">为什么不用 spring data rest</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>他不能用缓存！！！他不能用缓存！！！他不能用缓存！！！我找了一段时间的资料，都没找到，难受。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>为了加 hateoas 真的累死我了，到后面还不满意，分页的 hateoas 我用 aop\n进行的单独封装，通过添加注解进行拦截再次封装，不过尝试了很多很多办法，最后只能使用字符串拼接。</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>package cn.echocow.xiaoming.aop;\n\nimport cn.echocow.xiaoming.resource.RestResources;\nimport cn.echocow.xiaoming.resource.annotation.PageResult;\nimport cn.echocow.xiaoming.resource.PageSimple;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.hateoas.Link;\nimport org.springframework.hateoas.mvc.ControllerLinkBuilder;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Component;\n\n/**\n * 对于分页的集合，进行添加分页信息\n *\n * @author Echo\n * @version 1.0\n * @date 2019-02-02 15:55\n */\n@Component\n@Aspect\npublic class RestResultAop {\n\n    @Pointcut(\"@annotation(cn.echocow.xiaoming.resource.annotation.PageResult)\")\n    public void pageResult() { }\n\n    @AfterReturning(value = \"pageResult()\", returning = \"result\")\n    public void doAfterReturningAdvice1(JoinPoint joinPoint, Object result) {\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        PageResult annotation = signature.getMethod().getAnnotation(PageResult.class);\n        if (annotation == null) {\n            return;\n        }\n        try {\n            ResponseEntity res = (ResponseEntity) result;\n            if (!res.hasBody()) {\n                return;\n            }\n            if (!(res.getBody() instanceof RestResources)) {\n                return;\n            }\n            RestResources resources = (RestResources) res.getBody();\n            if (resources == null) {\n                return;\n            }\n            PageSimple pageInfo = resources.getPage();\n            if (pageInfo == null) {\n                return;\n            }\n            Integer size = pageInfo.getSize();\n            Integer page = pageInfo.getNumber();\n            // 尝试多次，只能手动封装\n            String uri = ControllerLinkBuilder.linkTo(joinPoint.getTarget().getClass()).toString();\n            resources.add(new Link(uri + \"?page=\" + page + \"&amp;size=\" + size).withSelfRel());\n            if (pageInfo.hasPrevioud()) {\n                resources.add(new Link(uri + \"?page=\" + (page - 1) + \"&amp;size=\" + size).withRel(Link.REL_PREVIOUS));\n            }\n            if (pageInfo.hasNext()) {\n                resources.add(new Link(uri + \"?page=\" + (page + 1) + \"&amp;size=\" + size).withRel(Link.REL_NEXT));\n            }\n            resources.add(new Link(uri + \"?page=\" + 1 + \"&amp;size=\" + size).withRel(Link.REL_FIRST));\n            resources.add(new Link(uri + \"?page=\" + pageInfo.getTotalPages() + \"&amp;size=\" + size).withRel(Link.REL_LAST));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_感受\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">感受</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>因为前面说的一个https://stackoverflow.com/questions/54722546/sprng-boot-jpa-redis-lazyinitializationexception[redis\n的问题]不得不放弃，自己还是太菜了。这是最后一个项目，完成了他，自己就要开始考研道路，估计基本不会再去写项目了。不想留下遗憾，他的结构也是我比较满意的，不过是实话，不太喜欢分层架构，跟喜欢一捅到底的架构，不过也希望这个项目不会让自己失望，加油！</p>\n</div>\n</div>\n</div>","document":{"title":"记录一下即将重构的项目 spring boot + restful"},"pageAttributes":{"category":"归档","description":"记录一下即将重构的项目 spring boot + restful","image":"https://img.hacpai.com/bing/20181206.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2019/02/18/1550500427954.html","next":{"document":{"title":"submail 短信接口以及 spring boot 集成"},"fields":{"slug":"/articles/2019/02/22/1550766482735.html"}},"previous":{"document":{"title":"vue 加 Material Design 等于 vuetify"},"fields":{"slug":"/articles/2019/01/27/1548583400911.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}