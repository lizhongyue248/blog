{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2019/01/02/1546395090197.html","result":{"data":{"asciidoc":{"id":"e526db0d-fd1f-5b2e-80eb-34d7f1d07aab","fields":{"slug":"/articles/2019/01/02/1546395090197.html","birthTime":"2019-01-02T02:25:38.298Z","modifiedTime":"2019-01-02T07:02:13.326Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_springmvcinitializer\">SpringMvcInitializer</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_configrootconfig\">config/RootConfig</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_configwebconfig\">config/WebConfig</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_configsecurityconfig\">config/SecurityConfig</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_configspringsecurityinitializer\">config/SpringSecurityInitializer</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_webhellocontroller\">web/HelloController</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_pagesadmin_html\">pages/admin.html</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_pageshello_html\">pages/hello.html</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>以前自己一直被安全的问题困扰，对这方面知识欠缺，最近学习了 spring\nsecurity，发现其实也别有一番洞天。写了一个简单\ndemo放在博客上，以便随用随取。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>目录结构如图</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/74b6f15719c44d858fbd0aedc0d79751___20190102101236.png\" alt=\"__20190102101236png\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>附上对应的文件，已经写好了注释</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_springmvcinitializer\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">SpringMvcInitializer</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.spring;\n\nimport cn.echocow.spring.config.RootConfig;\nimport cn.echocow.spring.config.WebConfig;\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\n/**\n * 继承 AbstractAnnotationConfigDispatcherServletInitializer，在 servlet 3.0 环境中\n * 容器会在类路径中查找实现 ServletContainInitializer 接口的类，如果发现就使用他来配置 servlet\n * spring 提供了这个借口实现，名为 SpringServletContainerInitializer，这个类又会查找实现\n * WebApplicationInitializer 的类并将配置的任务交给他来完成，spring 3.2 引入一个基础实现，也就是\n * AbstractAnnotationConfigDispatcherServletInitializer，当继承后，一旦部署就会自动被发现\n * 简单地说相当于web.xml文件\n * @author Echo\n * @version 1.0\n * @date 2019-01-01 13:34\n */\npublic class SpringMvcInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n  /**\n   * 应用程序上下文配置文件，可以是多个，即相当于多个xml文件配置\n   * 返回的带有 @Configuration 的类一般定义 ContextLoaderListener 应用上下文中的 bean\n   * 此处一般配置应用中的其它 bean，通常是驱动应用后端的中间件或数据层组件\n   * @return 类\n   */\n   @Override\n   protected Class&lt;?&gt;[] getRootConfigClasses() {\n     return new Class&lt;?&gt;[]{RootConfig.class};\n   }\n\n  /**\n   * 获取应用程序上下文配置文件，即配置类\n   * 如果所有配置已经在 RootConfig 中配置，则可以设为null\n   * 返回的带有 @Configuration 的类一般定义 DispatcherServlet 应用上下文中的 bean\n   * 加载包含 web 组件的 bean，如控制器、视图解析器以及处理器映射等\n   * @return 类\n   */\n   @Override\n   protected Class&lt;?&gt;[] getServletConfigClasses() {\n     return new Class&lt;?&gt;[]{WebConfig.class};\n   }\n\n  /**\n   * 即将 DispatcherServlet 映射到 “/”，表示处理所有进入应用的请求。可以为多个。\n   * @return 类\n   */\n   @Override\n   protected String[] getServletMappings() {\n     return new String[]{\"/\"};\n   }\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_configrootconfig\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">config/RootConfig</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.spring.config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.FilterType;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\n\n/**\n * 相当于spring的xml配置文件,排除掉有 EnableWebMvc 注解的类，因为它会被自动发现\n *\n * @author Echo\n * @version 1.0\n * @date 2019-01-01 13:33\n *\n @Configuration\n @ComponentScan(basePackages = { \"cn.echocow.spring\" },\n       excludeFilters = {\n            @ComponentScan.Filter(type = FilterType.ANNOTATION, value = EnableWebMvc.class)\n       })\n public class RootConfig {\n\n }</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_configwebconfig\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">config/WebConfig</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.spring.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.thymeleaf.spring5.SpringTemplateEngine;\nimport org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;\nimport org.thymeleaf.spring5.view.ThymeleafViewResolver;\n\n/**\n * 配置 spring mvc\n *\n * @author Echo\n * @version 1.0\n * @date 2019-01-01 15:53\n */\n@EnableWebMvc\n@Configuration\n@ComponentScan({\"cn.echocow.spring.*\"})\npublic class WebConfig {\n  /**\n   * 配置模板解析\n   * @return 模板解析\n   */\n  @Bean\n  public SpringResourceTemplateResolver springResourceTemplateResolver() {\n    SpringResourceTemplateResolver springResourceTemplateResolver = new SpringResourceTemplateResolver();\n    springResourceTemplateResolver.setPrefix(\"/WEB-INF/pages/\");\n    springResourceTemplateResolver.setSuffix(\".html\");\n    springResourceTemplateResolver.setTemplateMode(\"HTML\");\n    springResourceTemplateResolver.setCacheable(false);\n    springResourceTemplateResolver.setCharacterEncoding(\"UTF-8\");\n    return springResourceTemplateResolver;\n  }\n\n  /**\n   * 配置模板引擎\n   * @return 模板引擎\n   */\n   @Bean\n   public SpringTemplateEngine springTemplateEngine() {\n     SpringTemplateEngine springTemplateEngine = new SpringTemplateEngine();\n     springTemplateEngine.setTemplateResolver(springResourceTemplateResolver());\n     return springTemplateEngine;\n   }\n\n  /**\n   * 模板配置\n   * @return 模板配置\n   */\n   @Bean\n   public ThymeleafViewResolver thymeleafViewResolver() {\n     ThymeleafViewResolver thymeleafViewResolver = new ThymeleafViewResolver();\n     thymeleafViewResolver.setTemplateEngine(springTemplateEngine());\n     thymeleafViewResolver.setCharacterEncoding(\"UTF-8\");\n     return thymeleafViewResolver;\n   }\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_configsecurityconfig\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">config/SecurityConfig</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.spring.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n/**\n * 安全配置类 @EnableWebSecurity 启动 web 安全，此类必须继承 WebSecurityConfigurerAdapter\n * 相当于spring-security.xml中的配置\n *\n * @author Echo\n * @version 1.0\n * @date 2019-01-01 13:33\n */\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n  /**\n   * 在内存中设置三个用户\n   * @param auth 授权\n   * @throws Exception 异常\n   */\n   @Autowired\n  public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n    auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder()).\n                withUser(\"hongxf\").password(new BCryptPasswordEncoder().encode(\"123456\")).roles(\"USER\");\n    auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder()).\n                withUser(\"admin\").password(new BCryptPasswordEncoder().encode(\"123456\")).roles(\"ADMIN\");\n    auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder()).\n                withUser(\"dba\").password(new BCryptPasswordEncoder().encode(\"123456\")).roles(\"DBA\");\n  }\n\n  /**\n   * 配置权限要求\n   * @param http http\n   * @throws Exception 授权\n   */\n   @Override\n   protected void configure(HttpSecurity http) throws Exception {\n     http.authorizeRequests()\n         .antMatchers(\"/admin/**\").access(\"hasRole('ROLE_ADMIN')\")\n         .antMatchers(\"/dba/**\").access(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DBA')\")\n         .and().formLogin();\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_configspringsecurityinitializer\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">config/SpringSecurityInitializer</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.spring.config;\n\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\n\n/**\n * 继承AbstractSecurityWebApplicationInitializer类编写类文件SpringSecurityInitializer\n * spring 会发现他，并用它在 web 容器中注册 DelegatingFilterProxy\n * 可以选择重载他的 appendFilters 或 insertFilters 方法来注册自己选择的 filter\n * 只注册 DelegatingFilterProxy，就不用重载。\n * DelegatingFilterProxy 会拦截发往应用中的所有的请求，并委托给 id 为 springSecurityFilterChain bean\n * 启动时，会自动创建这些 bean\n * 相当于在web.xml中配置spring security的filter\n *\n * @author Echo\n * @version 1.0\n * @date 2019-01-01 13:34\n */\n public class SpringSecurityInitializer extends AbstractSecurityWebApplicationInitializer {\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_webhellocontroller\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">web/HelloController</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.spring.web;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\n\n/**\n * @author Echo\n * @version 1.0\n * @date 2019-01-01 13:34\n */\n@Controller\npublic class HelloController {\n  @RequestMapping(value = { \"/\", \"/welcome\" }, method = RequestMethod.GET)\n  public ModelAndView welcomePage() {\n    ModelAndView model = new ModelAndView();\n    model.addObject(\"title\", \"Spring Security Hello World\");\n    model.addObject(\"message\", \"This is welcome page!\");\n    model.setViewName(\"hello\");\n    return model;\n  }\n  @RequestMapping(value = \"/admin\", method = RequestMethod.GET)\n  public ModelAndView adminPage() {\n    ModelAndView model = new ModelAndView();\n    model.addObject(\"title\", \"Spring Security Hello World\");\n    model.addObject(\"message\", \"This is protected page - Admin Page!\");\n    model.setViewName(\"admin\");\n    return model;\n  }\n  @RequestMapping(value = \"/dba\", method = RequestMethod.GET)\n  public ModelAndView dbaPage() {\n    ModelAndView model = new ModelAndView();\n    model.addObject(\"title\", \"Spring Security Hello World\");\n    model.addObject(\"message\", \"This is protected page - Database Page!\");\n    model.setViewName(\"admin\");\n    return model;\n  }\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_pagesadmin_html\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">pages/admin.html</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-html\" data-lang=\"html\">&lt;html&gt;\n&lt;html lang=\"zh\" xmlns=\"http://www.w3.org/1999/xhtml\"\n  xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n &lt;meta charset=\"UTF-8\"&gt;\n &lt;title&gt;admin&lt;title&gt;\n&lt;head&gt;\n&lt;body&gt;\n&lt;h1 th:text=\"|标题: ${title}|\"&gt;Title : XXX&lt;h1&gt;\n&lt;h1 th:text=\"|信息: ${message}|\"&gt;Message : XXX&lt;h1&gt;\n&lt;body&gt;\n&lt;html&gt;</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_pageshello_html\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">pages/hello.html</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-html\" data-lang=\"html\">&lt;html&gt;\n&lt;html lang=\"zh\" xmlns=\"http://www.w3.org/1999/xhtml\"\n  xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n &lt;meta charset=\"UTF-8\"&gt;\n &lt;title&gt;hello&lt;title&gt;\n&lt;head&gt;\n&lt;body&gt;\n&lt;h1 th:text=\"|标题: ${title}|\"&gt;Title : XXX&lt;h1&gt;\n&lt;h1 th:text=\"|信息: ${message}|\"&gt;Message : XXX&lt;h1&gt;\n&lt;body&gt;\n&lt;html&gt;</code></pre>\n</div>\n</div>\n</div>\n</div>","document":{"title":"spring security + gradle + spring mvc 模板化配置"},"pageAttributes":{"category":"spring","description":"spring security + gradle + spring mvc 模板化配置","image":"https://img.hacpai.com/bing/20190205.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2019/01/02/1546395090197.html","next":{"document":{"title":"再见 manjaro，你好 deepin"},"fields":{"slug":"/articles/2019/01/02/1546399233990.html"}},"previous":{"document":{"title":"新年新气象，博客迁移，迎来 solo！"},"fields":{"slug":"/articles/2019/01/01/1546349681570.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}