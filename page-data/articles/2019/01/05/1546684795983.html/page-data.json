{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2019/01/05/1546684795983.html","result":{"data":{"asciidoc":{"id":"e14deba7-0698-5317-aa73-db0dc583d4b9","fields":{"slug":"/articles/2019/01/05/1546684795983.html","birthTime":"2019-01-08T06:59:45.014Z","modifiedTime":"2019-01-08T07:47:04.261Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_restful\">RESTFul</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_这篇文章能够带给你什么\">这篇文章能够带给你什么</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_需要做好的规划\">需要做好的规划</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_api_基本设计\">Api 基本设计</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_api_数据准备\">Api 数据准备</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_api_url_设计\">Api Url 设计</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_技术选型\">技术选型</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_环境搭建\">环境搭建</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_初始化\">初始化</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_数据准备\">数据准备</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_测试工具\">测试工具</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_初步实现\">初步实现</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_第一步实现\">第一步：实现</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_第二步统一异常处理\">第二步，统一异常处理</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_使用_spring_data_rest\">使用 spring data rest</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_引入依赖\">引入依赖</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_初体验\">初体验</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_发生了什么\">发生了什么</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_添加一个_v2_版本的_restful\">添加一个 v2 版本的 restful</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_关于_spring_data_rest\">关于 spring data rest</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_关于测试\">关于测试</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_感触\">感触</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_参考链接\">参考链接</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自己第一次接触 restful 是在学习 vue\n的时候，第一次看见的时候，真的打心底里的喜欢。不仅是因为其一致的规范性，还有他的简单明了，都让我眼前一亮的感觉。现在对于一些程序，都是提倡的前后端分离，各干各的互不相干，事实上我也非常喜欢这种方式，虽然我希望的是成为一个全栈的工程师。但是前后端的分离却带来了一些质的飞跃，一方面业务上的逻辑不会太耦合，另一方面让更专业的人处理更专业的事，效率和质量上都会高上许多。Restful\nApi 是目前比较成熟的一套互联网应用程序的 API\n设计理论，就是作为其中一种统一的机制出现，方便不同的前端设备与后端进行通信。今天就利用\nspring boot 的多个组件，来实现以下 restful 风格的 api，从自己使用\ncontroller 到使用框架开始一步一步搭建。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_restful\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">RESTFul</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>RESTFUl\n一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件（源自 <a href=\"https://baike.baidu.com/item/RESTful/4406165?fr=aladdin\">百度百科</a>）。这是一篇如何使用\nspring boot 来进行构建一个 restful Api\n的记录，他的概念和核心我不再赘述，具体可查看文末的参考链接。在这之前，我们需要对我们\nApi 进行一个简单的设计。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_这篇文章能够带给你什么\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">这篇文章能够带给你什么</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如何设计一个 Restful 风格的 Api</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>项目开发的数据初始化</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过 spring boot 实现 Api，v1 版本</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过 spring boot 进行统一异常处理</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过 spring data rest 实现 Api，v2 版本</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过 spring data rest 进行参数校验</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自定义 spring data rest 查询、删除等方法</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接口测试工具以及测试spring mvc</p>\n</li>\n</ol>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>所有代码均已上传到\n<a href=\"https://github.com/lizhongyue248/spring-boot-restful-api\">github</a></strong></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>博客地址： <a href=\"https://echocow.cn/articles/2019/01/05/1546684795983.html\">spring\nboot restful API 从零到一完整实践</a></strong></p>\n</div>\n</blockquote>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_需要做好的规划\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">需要做好的规划</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_api_基本设计\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Api 基本设计</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>1、 我们 api 足够简单，我们为他准备一个基础路径，即</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-markup\" data-lang=\"markup\">http://localhost:8080/api/</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>2、 我们 api 有多个版本，这里暂且定为一个v1版本，即</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-markup\" data-lang=\"markup\">http://localhost:8080/api/v1</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。 <a href=\"https://developer.github.com/v3/media/#request-specific-version\">Github</a>采用这种做法。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3、 我们选用五个常用的HTTP动词</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>GET（SELECT）：从服务器取出资源（一项或多项）。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>POST（CREATE）：在服务器新建一个资源。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>DELETE（DELETE）：从服务器删除资源。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>4、 服务器向用户返回的状态码和提示信息，我们用到的有以下一些</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>204 NO CONTENT - [DELETE]：用户删除数据成功。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>404 NOT FOUND - 用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>500 INTERNAL SERVER ERROR - 服务器发生错误，用户将无法判断发出的请求是否成功。</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_api_数据准备\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Api 数据准备</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们需要为数据准备一个实体，我将使用一个书单（Book）对象作为实体，他的具体属性如下：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>id</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>name 书名</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>author 作者</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>description 描述</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>status 状态</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_api_url_设计\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Api Url 设计</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>按照我们提供的五个动词，分别设计多个 api 如下：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>GET /api/v1/books 所有书单</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>GET /api/v1/books/{id} 获取一条书单</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>POST /api/v1/books 新建一条书单</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>PUT /api/v1/books/{id} 更新一条书单，提供全部信息</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>PATCH /api/v1/books/{id} 更新一条书单，提供部分信息</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>DELETE /api/v1/books/{id} 删除一条书单</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>DELETE /api/v1/books 删除所有书单，危险操作</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_技术选型\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">技术选型</h3>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>核心框架：spring boot</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>web： spring boot web</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>数据库：mysql</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>构建工具：gradle</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>应用框架：spring boot data jpa</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>restful：spring data rest</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>工具支持：spring boot devtools</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>测试框架：junit5、spring boot test</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>开发工具：idea</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_环境搭建\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">环境搭建</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>首先我们要先通过 idea 对项目进行初始化</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_初始化\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">初始化</h3>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>新建项目</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/1cf250f196d3424da1c2d7c4011a2659__sunawtX11XDialogPeer_20190105191714.png\" alt=\"新建项目\"></span></p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\" start=\"2\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>填写基本属性</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/ee1555cf87bc4cde9ac182408eab08c6__sunawtX11XDialogPeer_20190105191934.png\" alt=\"填写基本属性\"></span></p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\" start=\"3\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>选择依赖</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/99b95787f4d9486691946ad183c866ea__sunawtX11XDialogPeer_20190105192653.png\" alt=\"选择依赖\"></span></p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\" start=\"4\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>设置 gradle</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/af6c9b055e9043acbb5b6641be6d35c2__sunawtX11XDialogPeer_20190105192740.png\" alt=\"设置 gradle\"></span></p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\" start=\"5\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>等待构建依赖的同时，修改一下仓库地址，不然下载很慢，如果一直下不下载就修改好仓库地址后重新打开idea让他自动重下。这就是为啥不喜欢直接建spring\n的 gradle 项目的原因，他会自动导入，个人喜欢直接建 gradle\n项目然后手动导入依赖。但是对于 spring 来说他也确实方便。</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/64a8fe853f3b4535a43880edbfca7f0c__sunawtX11XFramePeer_20190105212711.png\" alt=\"修改仓库地址\"></span></p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\" start=\"5\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置 spring boot 项目</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/c0e2a8e7136e480abd24412a1b46f020__sunawtX11XFramePeer_20190105213053.png\" alt=\"配置\"></span></p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\">spring:\n  application:\n    name: restful-api\n  datasource:\n    url: jdbc:mysql://localhost:3306/spring\n    username: root\n    password: 123456\n    platform: mysql\n  jpa:\n    show-sql: true\n hibernate:\n      ddl-auto: create\nserver:\n  servlet:\n    context-path: /api</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样我们就完成一个项目的初始化，接下来进行数据的准备</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_数据准备\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">数据准备</h3>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>为什么要这一步？因为我们期望每次启动项目。数据都是一致的，这样会方便我们很多。比如有时候测试删除的时候，把数据全部删除完了，又要手动添加数据，比如你执行过了很多更新操作，造成数据乱七八糟的，不方便以后的测试，所以最好的办法就是每次启东时重新建表，重新插入指定的数据。并且在写测试类的时候，可以直接对期望结果，这样也会方便测试。当然，只针对开发环境。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>1、 按照我们前面给出 Book 对象，建立实体类。\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/fa4e69192fc149d598fb3e668328c4f2__sunawtX11XFramePeer_20190105213745.png\" alt=\"Book\"></span></p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.restfulapi.entity;\n\nimport lombok.Data;\nimport org.hibernate.annotations.ColumnDefault;\nimport javax.persistence.*;\nimport javax.validation.constraints.NotNull;\n\n/**\n * 书籍的实体类\n *\n * @author Echo\n * @version 1.0\n * @date 2019-01-05 21:36\n */\n@Entity\n@Data\npublic class Book {\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  @Column(insertable = false, length = 20, nullable = false)\n  public Long id;\n  @NotNull\n  @Column(columnDefinition = \"varchar(50) comment '书名'\")\n  public String name;\n  @NotNull\n  @Column(columnDefinition = \"varchar(25) comment '作者'\")\n  public String author;\n  @Column(columnDefinition = \"varchar(255) comment '描述'\")\n  public String description;\n  @NotNull\n  @ColumnDefault(\"1\")\n  @Column(columnDefinition = \"tinyint(1) comment '是否存在'\")\n  public Boolean status;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>2、 建立生成数据的 sql 文件\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/ad4fc674b062494f80f09caf0d644eb9__sunawtX11XFramePeer_20190105214010.png\" alt=\"_sunawtX11XFramePeer_20190105214010png\"></span></p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-sql\" data-lang=\"sql\">INSERT INTO spring.book (id, author, description, name, status) VALUES (1, '孟宁', '本书从理解计算机硬件的核心工作机制（存储程序计算机和函数调用堆栈）和用户态程序如何通过系统调用陷入内核（中断异常）入手，通过上下两个方向双向夹击的策略，并利用实际可运行程序的反汇编代码从实践的角度理解操作系统内核，分析Linux内核源代码，从系统调用陷入内核、进程调度与进程切换开始，最后返回到用户态进程。', '庖丁解牛Linux内核分析', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (2, '孙亮', '大数据时代为机器学习的应用提供了广阔的空间，各行各业涉及数据分析的工作都需要使用机器学习算法。本书围绕实际数据分析的流程展开，着重介绍数据探索、数据预处理和常用的机器学习算法模型。本书从解决实际问题的角度出发，介绍回归算法、分类算法、推荐算法、排序算法和集成学习算法。在介绍每种机器学习算法模型时，书中不但阐述基本原理，而且讨论模型的评价与选择。为方便读者学习各种算法，本书介绍了R语言中相应的软件包并给出了示例程序。', '实用机器学习', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (3, '托马斯·哈斯尔万特', '本书以基础的统计学知识和假设检验为重点，简明扼要地讲述了Python在数据分析、可视化和统计建模中的应用。主要包括Python的简单介绍、研究设计、数据管理、概率分布、不同数据类型的假设检验、广义线性模型、生存分析和贝叶斯统计学等从入门到高级的内容。', 'Python统计分析', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (4, '甘迪文', '《Windows黑客编程技术详解》介绍的是黑客编程的基础技术，涉及用户层下的Windows编程和内核层下的Rootkit编程。本书分为用户篇和内核篇两部分，用户篇包括11章，配套49个示例程序源码；内核篇包括7章，配套28个示例程序源码。本书介绍的每个技术都有详细的实现原理，以及对应的示例代码（配套代码均支持32位和64位Windows 7、Windows 8.1及Windows 10系统），旨在帮助初学者建立起黑客编程技术的基础。', 'Windows黑客编程技术详解', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (5, '科里•奥尔索夫', '本书作者是一名自学成才的程序员，经过一年的自学，掌握了编程技能并在eBay找到了一份软件工程师的工作。本书是作者结合个人经验写作而成，旨在帮助读者从外行成长为一名专业的Python程序员。', 'Python编程无师自通——专业程序员的养成', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (6, '威廉·史密斯', '本书由浅入深地详细讲解了计算机存储使用的多种数据结构。本书首先讲解了初级的数据结构（如表、栈、队列和堆等），具体包括它们的工作原理、功能实现以及典型的应用程序等；然后讨论了数据结构，如泛型集合、排序、搜索和递归等；最后介绍了如何在日常应用中使用这些数据结构。', '程序员学数据结构', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (7, '张鑫旭', '本书从前端开发人员的需求出发，以“流”为线索，从结构、内容到美化装饰等方面，全面且深入地讲解前端开发人员必须了解和掌握的大量的CSS知识点。同时，作者结合多年的从业经验，通过大量的实战案例，详尽解析CSS的相关知识与常见问题。作者还为本书开发了专门的配套网站，进行实例展示、问题答疑。', 'CSS世界', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (8, '理查德·格里姆斯', '作为一门广为人知的编程语言，C++已经诞生30多年了，这期间也出现并流行过许多种编程语言，但是C++是经得起考验的。如此经典的编程语言，值得每一位编程领域的新人认真学习，也适合有经验的程序员细细品味。', 'C++编程自学宝典', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (9, '萨沙·戈德斯汀', '本书详细解释了影响应用程序性能的Windows、CLR和物理硬件的内部结构，并为读者提供了衡量代码如何独立于外部因素执行操作的知识和工具。书中提供了大量的C#代码示例和技巧，将帮助读者zui大限度地提高算法和应用程序的性能，提高个人竞争优势，使用更低的成本获取更多的用户。', '.NET性能优化', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (10, '李伟', '《C++模板元编程实战：一个深度学习框架的初步实现》以一个深度学习框架的初步实现为例，讨论如何在一个相对较大的项目中深入应用元编程，为系统性能优化提供更多的可能。', 'C++模板元编程实战：一个深度学习框架的初步实现', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (11, 'Ben Klemens 克莱蒙', '本书展现了传统C语言教科书所不具有相关技术。全书分', 'C程序设计新思维（第2版）', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (12, '王云', '本书遵循由浅入深、循序渐进的原则，讲解单片机开发经典案例。本书以YL51单片机开发板为平台，通过案例逐个讲解开发板上各个器件模块的使用及其编程方法，包括单片机最小系统、数码管显示原理、中断与定时器、数模\\\\模数转换工作原理、LCD液晶显示、串行口通信、步进电机驱动原理、PWM脉宽调制与直流电机等内容。', '51单片机C语言程序设计教程', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (13, '胡振波', '本书是一本介绍通用CPU设计的入门书，以通俗的语言系统介绍了CPU和RISC-V架构，力求为读者揭开CPU设计的神秘面纱，打开计算机体系结构的大门。', '手把手教你设计CPU——RISC-V处理器篇', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (14, '克劳斯·福勒', '本书旨在通过实际的Python 3.0代码示例展示Python与数学应用程序的紧密联系，介绍将Python中的各种概念用于科学计算的方法。', 'Python 3.0科学计算指南', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (15, '路彦雄', '《文本上的算法 深入浅出自然语言处理》结合-作者多年学习和从事自然语言处理相关工作的经验，力图用生动形象的方式深入浅出地介绍自然语言处理的理论、方法和技术。本书抛弃掉繁琐的证明，提取出算法的核心，帮助读者尽快地掌握自然语言处理所必需的知识和技能。', '文本上的算法——深入浅出自然语言处理', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (16, '胡世杰', '本书从云存储的需求出发讲述对象存储的原理，循序渐进地建立起一个分布式对象存储的架构，并且将软件实现出来。全书共8章，分别涉及对象存储简介、可扩展分布式系统、元数据服务、数据校验和去重、数据冗余处理、断点续传、数据压缩和数据维护等。本书选择用来实现分布式对象存储软件的编程语言是当前流行的Go语言。', '分布式对象存储——原理、架构及Go语言实现', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (17, '徐子珊', '《趣题学算法》适于作为程序员的参考书，高校各专业学生学习“数据结构”“算法设计分析”“程序设计”等课程的扩展读物，也可以作为上述课程的实验或课程设计的材料，还可以作为准备参加国内或国际程序设计赛事的读者的赛前训练材料。', '趣题学算法', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (18, '鲁什迪·夏姆斯', '现如今，数据科学已经成为一个热门的技术领域，它涵盖了人工智能的各个方面，例如数据处理、信息检索、机器学习、自然语言处理、数据可视化等。而Java作为一门经典的编程语言，在数据科学领域也有着杰出的表现。', 'Java数据科学指南', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (19, '罗炳森', '结构化查询语言（Structured Query Language，SQL）是一种功能强大的数据库语言。它基于关系代数运算，功能丰富、语言简洁、使用方便灵活，已成为关系数据库的标准语言。', 'SQL优化核心思想', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (20, '弗兰克·D.卢娜', 'Direct3D是微软公司DirectX SDK集成开发包中的重要组成部分，是编写高性能3D图形应用程序的渲染库，适用于多媒体、娱乐、即时3D动画等广泛和实用的3D图形计算领域。', 'DirectX 12 3D 游戏开发实战', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (21, '巴阿尔丁•阿扎米', 'Kibana是广泛地应用在数据检索和数据可视化领域的ELK中的一员。本书专门介绍Kibana，通过不同的用例场景，带领读者全面体验Kibana的可视化功能。', 'Kibana数据可视化', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (22, '郝佳', '《Spring源码深度解析（第2版）》从核心实现、企业应用和Spring Boot这3个方面，由浅入深、由易到难地对Spring源码展开了系统的讲解，包括Spring 整体架构和环境搭建、容器的基本实现、默认标签的解析、自定义标签的解析、bean的加载、容器的功能扩展、AOP、数据库连接JDBC、整合MyBatis、事务、SpringMVC、远程服务、Spring消息、Spring Boot体系原理等内容。', 'Spring源码深度解析（第2版）', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (23, 'Jon Bentley', '书的内容围绕程序设计人员面对的一系列实际问题展开。作者JonBentley以其独有的洞察力和创造力，引导读者理解这些问题并学会解决方法，而这些正是程序员实际编程生涯中到关重要的。', '编程珠玑（第2版•修订版）', 1);\nINSERT INTO spring.book (id, author, description, name, status) VALUES (24, 'Mickey W. Mantle', '这是一本系统阐述面对混乱而容易失控的技术开发团队时，如何管理、建设和强化团队，成功交付开发成果的大作。两位作者Mickey W. Mantle和Ron Lichty以合起来近70年的开发管理经验为基础，通过深刻的观察和分析，找到了软件开发管理的核心问题——人的管理，并围绕如何真正理解程序员、找到合适的程序员、与程序员沟通这几个核心话题，一步步展开，扩展到如何以人为本地进行团队建设、管理和项目管理。', '告别失控：软件开发团队管理必读', 1);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3、 利用 idea 的数据库管理工具直接管理数据库\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/6d4916e39b8d4602bca9959cc21fb315__sunawtX11XFramePeer_20190105214128.png\" alt=\"数据库\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>4、 启动应用进行测试，查看一下是否创建对应的表和数据\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/482a7e8a9ea7464a9dab6741ece8c37b__sunawtX11XFramePeer_20190105214506.png\" alt=\"启动测试\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样就完成我们需要的环境，下面进行一些必要的测试工具安装。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_测试工具\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">测试工具</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们需要一些接口测试工具来进行辅助开发，以便更快的得到及时反馈,以下工具选择根据需要即可。\n1. <a href=\"https://www.getpostman.com/apps\">postman\n一款功能全面且强大的接口测试工具</a> 2.\n<a href=\"https://plugins.jetbrains.com/plugin/10292-restfultoolkit\">idea plugin\nRestfulToolkit 一套 RESTful 服务开发辅助工具集。</a> 3. 使用\nspring-boot-starter-test 进行 mockMvc 测试 4. 其它…</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_初步实现\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">初步实现</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在这一步，我们会通过 rest controller 的方式进行创建一个 Restful 风格的\napi。所以在这之前，我们要暂时不引入 spring boot 提供的 rest ，即\nbuild.gradle 中的 <code>spring-boot-starter-data-rest</code>\n依赖,为什么？后面就知道啦。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/2f4b96bdb97040fa87593b88da1605fe___20190105215444.png\" alt=\"后面就知道啦\">\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_第一步实现\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">第一步：实现</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>1、 建立 BookRepository，对数据库进访问\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/451b676cde3a4bf7ac2f39b9e80cb7ca__sunawtX11XFramePeer_20190105215825.png\" alt=\"对数据库进访问\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>2、 建立 BookController</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>为什么不要 service？在开发过程中，我们都是\ncontroller、service、repository 三层的，在这里我将它省去了\nservice。一方面因为我没有太多的复杂的逻辑要处理，加了service反而让我多写几个类甚至几个接口，另一方面，在实际开发的过程中也完全没有必要按照这么个设计来，自己开发得爽，代码易读性高，质量棒就行了，没必要拿着一套死不放。小型应用中，没有复杂的逻辑，我基本不会去写\nservice 层的。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/681265dce3714d94ba99296fce66eb37__sunawtX11XFramePeer_20190105220057.png\" alt=\"建立controller\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3、 书写具体逻辑\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/14abc1e30c774e829cddda7f2a2efb81__sunawtX11XFramePeer_20190105220547.png\" alt=\"1\"></span></p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/da149cd90e4a43ebbabfc3f52f163297__sunawtX11XFramePeer_20190105220733.png\" alt=\"2\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/78e7945cbcbf4b6eb21d0f200723161b__sunawtX11XFramePeer_20190105220741.png\" alt=\"3\">\n</div>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.restfulapi.controller;\n\nimport cn.echocow.restfulapi.entity.Book;\nimport cn.echocow.restfulapi.repository.BookRepository;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.BeanWrapper;\nimport org.springframework.beans.BeanWrapperImpl;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.beans.PropertyDescriptor;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * rest 风格 api\n *\n * GET     /api/v1/books        所有书单\n * GET     /api/v1/books/{id}   获取一条书单\n * POST    /api/v1/books        新建一条书单\n * PUT     /api/v1/books/{id}   更新一条书单，提供全部信息\n * PATCH   /api/v1/books/{id}   更新一条书单，提供部分信息\n * DELETE  /api/v1/books/{id}   删除一条书单\n * DELETE  /API/v1/books        删除所有书单\n *\n * @author Echo\n * @version 1.0\n * @date 2019-01-05 21:59\n */\n@RestController\n@RequestMapping(\"/v1\")\npublic class BookController {\n  private final BookRepository bookRepository;\n  @Autowired\n  public BookController(BookRepository bookRepository) {\n    this.bookRepository = bookRepository;\n  }\n\n  /**\n   * 获取所有书单\n   * GET     /api/v1/books        所有书单\n   *\n   * @return http 响应\n   */\n  @GetMapping(\"/books\")\n  public HttpEntity&lt;?&gt; books() {\n    return new ResponseEntity&lt;&gt;(bookRepository.findAll(), HttpStatus.OK);\n  }\n\n  /**\n   * 获取一个书单 * GET     /api/v1/books/{id}   获取一条书单 * * @param id id\n   * @return http 响应\n   */  @GetMapping(\"/books/{id}\")\n  public HttpEntity&lt;?&gt; booksOne(@PathVariable Long id) {\n    return new ResponseEntity&lt;&gt;(bookRepository.findById(id).get(), HttpStatus.OK);\n  }\n\n  /**\n   * 添加一个书单\n   * POST    /api/v1/books        新建一条书单\n   *\n   * @param book 书单\n   * @return http 响应\n   */\n  @PostMapping(\"/books\")\n  public HttpEntity&lt;?&gt; booksAdd(@Valid @RequestBody Book book, BindingResult bindingResult) {\n    book.setId(null);\n    return new ResponseEntity&lt;&gt;(bookRepository.save(book), HttpStatus.CREATED);\n  }\n\n  /**\n   * 更新一个书单,提供一个书单的全部信息\n   * PUT     /api/v1/books/{id}   更新一条书单，提供全部信息\n   *\n   * @param id 更新的id\n   * @param book 更新后的书单\n   * @return http 响应\n   */\n  @PutMapping(\"/books/{id}\")\n  public HttpEntity&lt;?&gt; booksPut(@Valid @PathVariable Long id, @RequestBody Book book, BindingResult bindingResult) {\n    Book exist = bookRepository.findById(id).get();\n    book.setId(exist.getId());\n    return new ResponseEntity&lt;&gt;(bookRepository.save(book), HttpStatus.OK);\n  }\n\n  /**\n   * 更新一个书单,提供一个书单的部分信息\n   * PATCH   /api/v1/books/{id}   更新一条书单，提供部分信息\n   *\n   * @param id 更新的id\n   * @param book 更新后的书单\n   * @return http 响应\n   */\n  @PatchMapping(\"/books/{id}\")\n  public HttpEntity&lt;?&gt; booksPatch(@PathVariable Long id, @RequestBody Book book) {\n    Book exist = bookRepository.findById(id).get();\n    BeanWrapper beanWrapper = new BeanWrapperImpl(book);\n    PropertyDescriptor[] propertyDescriptors = beanWrapper.getPropertyDescriptors();\n    List&lt;String&gt; nullPropertyNames = new ArrayList&lt;&gt;();\n    for (PropertyDescriptor pd : propertyDescriptors) {\n      if (beanWrapper.getPropertyValue(pd.getName()) == null) {\n         nullPropertyNames.add(pd.getName());\n      }\n    }\n    BeanUtils.copyProperties(book, exist, nullPropertyNames.toArray(new String[nullPropertyNames.size()]));\n    return new ResponseEntity&lt;&gt;(bookRepository.save(exist), HttpStatus.OK);\n  }\n\n  /**\n   * 删除一个书单\n   * DELETE  /api/v1/books/{id}   删除一条书单\n   *\n   * @param id id\n   * @return http 响应\n   */\n  @DeleteMapping(\"/books/{id}\")\n  public HttpEntity&lt;?&gt; booksDeleteOne(@PathVariable Long id) {\n    Book exist = bookRepository.findById(id).get();\n    bookRepository.deleteById(exist.getId());\n    return new ResponseEntity&lt;&gt;(HttpStatus.NO_CONTENT);\n  }\n\n  /**\n   * 删除所有书单\n   * DELETE  /API/v1/books        删除所有书单\n   *\n   * @return http 响应\n   */\n  @DeleteMapping(\"/books\")\n  public HttpEntity&lt;?&gt; booksDeleteAll() {\n    List&lt;Book&gt; books = bookRepository.findAll();\n    bookRepository.deleteAll();\n    return new ResponseEntity&lt;&gt;(HttpStatus.NO_CONTENT);\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>4、 进行测试\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/d43c2995597d45c3b3b32b828f647d75__sunawtX11XFramePeer_20190105221416.png\" alt=\"http://localhost:8080/api/v1/books 测试\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>其余的测试都是成功的,但是都是理想的情况,如果发生其他的情况呢?比如,我查询不存在书籍呢?</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>5、 进行错误测试:找不到资源</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个时候这个工具就不够用了,因为我们需要获取到他的状态码,所以我们需要使用\npostman 了.\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/8d1da695d9fc491995f0c597804d03b7__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105221953.png\" alt=\"找不到资源\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>6、 进行错误测试:字段不符合、</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们在 Book 的实体中的 name 字段加入了 <code>@NotNull</code>\n注解,也就是非空验证。那么当客户端给的是错误的时候，会给出什么呢？\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/7e55b7e1ec144abb9c48ca1a9c0d0900__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105222450.png\" alt=\"字段不符合\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以这就涉及到统一异常处理了。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_第二步统一异常处理\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">第二步，统一异常处理</h3>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_指定统一异常处理规范\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">指定统一异常处理规范</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在我们遇到了两个问题，一个是 not found，应该给出 404，一个是 INVALID\nREQUEST，应该给出 400.所以他们应该相应返回如下</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>404</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">status:404\n\ndata(可选):\n{\n  \"msg\" : \"Not found books!\"\n}</code></pre>\n</div>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>400</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">status:400\n\ndata(可选):\n{\n  \"msg\" : \"invalid parameter\",\n  \"errors\": [\n    {\n      \"resource\":\"传过来的实体名称\",\n      \"field\":\"字段\",\n      \"code\":\"代码\",\n      \"message\",\"信息\"\n    },{\n      \"resource\":\"传过来的实体名称\",\n      \"field\":\"字段\",\n      \"code\":\"代码\",\n      \"message\",\"信息\"\n    }\n  ]\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_异常处理\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">异常处理</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>1、 如果大家细心应该可以注意到在 controller 之中，idea\n给我们报了很多警告，对于我来说是绝对不允许这些警告出现的，而这些警告也是提醒了我们的可能会出现的错误所在。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/7bb71108a4774046be61bb4305da6af9__sunawtX11XFramePeer_20190105222747.png\" alt=\"controller\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><em>Optional</em> 类 是 Java 8\n新特性，是一个可以为null的容器对象。这里的提示的意思就是我们没有对获取到的\nOptional\n进行非空校验，校验他里面是否为空，这就是我们需要改进的地方。<strong>解决办法很简单，就是判断，当他为空的时候，抛出一个异常即可。</strong>所以我们需要自定义自己的异常信息。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>2、 自定义异常</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/07cca1aa09c94b73ad1c262415aff085__sunawtX11XFramePeer_20190105223726.png\" alt=\"ResourceNoFoundException\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/3bd738cdd2db494ea4d885bfca86578c__sunawtX11XFramePeer_20190105223732.png\" alt=\"InvalidRequestException\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3、 抛出异常</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在可能出现异常的地方，抛出异常。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/afa09c54e24e484a9661a465377fc640__sunawtX11XFramePeer_20190105224308.png\" alt=\"抛出异常\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同时可以看到，右侧的警告全都没了，太爽！消除警告原则！</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>4、 重启，进行测试</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/6aca0ffcb1a94cc5a37693e693e18eb0__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105221953.png\" alt=\"进行测试\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>发现还是有点差距，这个就需要我们对响应进行封装了。我们查看控制台可以发现，抛出的使我们自定义的异常了。</p>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_封装错误信息\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">封装错误信息</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>1、 我们需要添加几个信息封装的类，作为响应返回的实体</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/5015e3b2d75d42edb0d8dce653e5d861__sunawtX11XFramePeer_20190105225300.png\" alt=\"ErrorResource\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/725a1d8e38864a4b918387c52db61db9__sunawtX11XFramePeer_20190105225306.png\" alt=\"FieldResource\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/bf7c83e3e64d4b51bcadbabf5b3cc74a__sunawtX11XFramePeer_20190105225314.png\" alt=\"InvalidErrorResource\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>2、 添加一个全局异常处理，用来拦截所有的异常信息并进行封装。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/a9eb908088c942cca1633c2780422430__sunawtX11XFramePeer_20190105225717.png\" alt=\"拦截所有的异常信息并进行封装\">\n</div>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.restfulapi.handle;\n\nimport cn.echocow.restfulapi.exception.InvalidRequestException;\nimport cn.echocow.restfulapi.exception.ResourceNoFoundException;\nimport cn.echocow.restfulapi.resource.ErrorResource;\nimport cn.echocow.restfulapi.resource.FieldResource;\nimport cn.echocow.restfulapi.resource.InvalidErrorResource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * 对异常进行拦截然后封装到响应体\n *\n * @author Echo\n * @version 1.0\n * @date 2019-01-05 22:59\n */\n@RestControllerAdvice\npublic class ApiExceptionHandler {\n\n  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n  @ExceptionHandler(ResourceNoFoundException.class)\n  public HttpEntity&lt;?&gt; handleNotFound(ResourceNoFoundException e) {\n    ErrorResource errorResource = new ErrorResource(e.getMessage());\n    logger.error(errorResource.toString());\n    return new ResponseEntity&lt;&gt;(errorResource, HttpStatus.NOT_FOUND);\n  }\n\n  @ExceptionHandler(InvalidRequestException.class)\n  public HttpEntity&lt;?&gt; handleInvalidRequest(InvalidRequestException e) {\n    Errors errors = e.getErrors();\n    List&lt;FieldResource&gt; fieldResources = new ArrayList&lt;&gt;();\n    List&lt;FieldError&gt; fieldErrors = errors.getFieldErrors();\n    for (FieldError fieldError : fieldErrors) {\n      fieldResources.add(\n          new FieldResource(fieldError.getObjectName(),\n          fieldError.getField(),\n          fieldError.getCode(),\n          fieldError.getDefaultMessage())\n      );\n  }\n    InvalidErrorResource invalidErrorResource = new InvalidErrorResource(e.getMessage(), fieldResources);\n    logger.error(invalidErrorResource.toString());\n    return new ResponseEntity&lt;&gt;(invalidErrorResource, HttpStatus.BAD_REQUEST);\n  }\n\n  @ExceptionHandler(Exception.class)\n  public HttpEntity&lt;?&gt; handleException(Exception e){\n    logger.error(e.getMessage());\n    return new ResponseEntity&lt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3、 进行测试</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/25d2b143226c4ab8aac761b85e881432__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105221953.png\" alt=\"出现错误\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/62ffcebf2c8642678321e148402dbca4___20190105231339.png\" alt=\"解决\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>4、 再次测试</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/a142a8c51c14451a95dfd59b49251dea__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105231459.png\" alt=\"再次测试\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样就完成我们统一异常的处理。 第一版的 restful api\n也就开发完毕～！当然，这只是一个简单的 restful\napi，为什么说他简单？那就是他缺少了一个 Hypermedia\nAPI！这是什么？可以访问 <a href=\"https://api.github.com/\">github 的 restful api</a>\n就可以看到这么一个效果了。想要自己手动实现这个，自己能力还有些不足，不过欢迎大家交流学习。</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_使用_spring_data_rest\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">使用 spring data rest</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>上面我们自己使用 spring boot 实现了一个 restful 的\napi。我们从三层，变为了两层。不过前面提到了我们没有使用的的一个依赖，spring-boot-starter-data-rest，现在，我们就基于它，来开发一个\nrestful api，相信我，你会很惊讶的。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_引入依赖\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">引入依赖</h3>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/025e4ac4161046de9560066b7c28977a__sunawtX11XFramePeer_20190105232540.png\" alt=\"_sunawtX11XFramePeer_20190105232540png\">\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_初体验\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">初体验</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>1、 然后你不需要修改任何代码，请直接访问 <a href=\"http://localhost:8080/api/\" class=\"bare\">http://localhost:8080/api/</a></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>你会看到这么一个页面</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/4c57e6b2abd2402a92078388a507dd39___20190105232804.png\" alt=\"你会看到这么一个页面\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>2、 然后你试着访问他给你的两个链接看看</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/f283fe5780934066845334c3c1c6c157___20190105233750.png\" alt=\"然后你试着访问他给你的两个链接看看\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>完美+2！同时还给出了我们需要的 Hypermedia API！</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>不过值得注意，他的路径没有 v1 了</strong></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3、 测试一下 api</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/db537f6b37a84cef9bef90c4fdb578a6__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235043.png\" alt=\"get\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/e742dcb8cd444b5b8eb3b7a173ff1f84__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235058.png\" alt=\"get\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/1e2850ef657a4f1ba173992ce22d82da__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235115.png\" alt=\"put\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/40990ce9fc904c1ebdec9994c71add4b__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235127.png\" alt=\"delete\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>4、 测试一下异常情况</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/f0f8d81b5b8744a2920087b2e6077e6c__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235259.png\" alt=\"404\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/58afe28634924c7080c052f97bd59534__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235337.png\" alt=\"400\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>出现了意外状况，400 的期望，来了\n500。。如何处理呢？在这之前，我们了解下吧。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_发生了什么\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">发生了什么</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我，，，我也不知道啊=-=我就加了一个依赖，然后只要带有 <code>@Repository</code>\n注解且继承了 <code>Repository</code>\n及其他的子接口的接口的方法都暴露出去了。至于为什么我也不清楚，因为应该是使用了\n<code>@RepositoryRestResource</code>\n注解的才应该会被暴露出去，我到现在还不能明白。这就是为啥前面要大家暂时不用那个依赖的原因。不过不碍事，我们继续。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_添加一个_v2_版本的_restful\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">添加一个 v2 版本的 restful</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>1、 添加 BookRestRepository</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/c779af7e12e74a28869b9aea2c1e1a59__sunawtX11XFramePeer_20190106012444.png\" alt=\"BookRestRepository\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>2、 设置基础路径</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/4610cd26fe99456c8d39b390055e8c92__sunawtX11XFramePeer_20190106012738.png\" alt=\"设置基础路径\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3、 测试访问</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/653c4c84167247d79adb7d78cecbc300__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190106013118.png\" alt=\"测试访问\">\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_关于_spring_data_rest\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">关于 spring data rest</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>神奇的在于他的注解，关于 rest 的注解主要有四个</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>@RestController 完全自定义控制器，完全交由自己处理</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>@RepositoryRestResource 完全使用已设置的Spring Data\nREST配置，不需要自定义控制</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>@RepositoryRestController 希望使用已设置的Spring Data\nREST配置，但是部分需要自定义</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>@BasePathAwareController\n如果您对特定于实体的操作不感兴趣但仍希望在basePath下构建自定义操作，例如Spring\nMVC视图，资源等，请使用@BasePathAwareController（资料太少完全没人用的感觉）</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果完全使用 spring data rest\n进行处理就会暴露出我们继承的接口的方法。对于 Repository\n接口主要有三个子接口，分别是 CrudRepository、\nJpaRepository、PagingAndSortingRepository,他们的关系如下</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/df8271d33a7b48a191bbce456d70e015___20190108095946.png\" alt=\"__20190108095946png\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以看到， CrudRepository 提供基础的\n增删改查，PagingAndSortingRepository 又提供了分页和排序，JpaRepository\n多继承了一个 QueryByExampleExecutor，用来对 QBE 的支持，对于 restful api\n来说，只需继承 PagingAndSortingRepository 即可。</p>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_处理参数校验\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">处理参数校验</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>前面我们测试了一下，如果我们的参数不合法，比如名称为null，他直接返回 500\n的错误，我们期望的是 400 bad\nrequest，那么我们如何修改呢？传统的controller-service-dao模式中，处理业务数据时，可以在service或者controller中处理，但是使用Spring\ndata\nrest时，由于框架自己生成相关接口，处理相关业务就要实现监听才行。有多种方式实现监听操作，我选择其中一种进行演示：通过实现\nRepositoryRestConfigurer 进行参数校验</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>1、 创建 BookValidator ，实现 Validator 接口</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/7343feb284ed45b38a0b4472a94e71fc__sunawtX11XFramePeer_20190108111013.png\" alt=\"BookValidator\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>2、 创建 RepositoryRestConfig，实现 RepositoryRestConfigurer 接口，覆盖\nconfigureValidatingRepositoryEventListener 方法</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/9cf30d72db5f4047917956de98355eb9__sunawtX11XFramePeer_20190108111115.png\" alt=\"RepositoryRestConfig\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>3、 让 BookRestRepository 继承 PagingAndSortingRepository</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/5a156227af6a4c469831d92f4fe2bf9d__sunawtX11XFramePeer_20190108111216.png\" alt=\"BookRestRepository\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>4、 运行测试</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/3fe843e3490a45c5937958b0f7a4870c__sunawtX11XFramePeer_20190108111359.png\" alt=\"运行测试\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>5、 对比异常</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/391e8d141c7948fc882776b478ddbb6d__sunawtX11XFramePeer_20190108111754.png\" alt=\"对比异常\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>6、 那么接下来就好办了，我们处理的异常的方式就和我们处理\nInvalidRequestException 异常的方式一样的了。为什么一开始不直接用它的\nRepositoryConstraintViolationException 呢？因为他是属于 spring data rest\n下的，前面我们并没有引入这个包，所以不能使用，现在引入了，自然可以使用了，并且可以删除我们以前的那个\nInvalidRequestException（我暂时不删除）</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/5afdff176e4e42278ea8f5124fa29f79__sunawtX11XFramePeer_20190108112257.png\" alt=\"处理异常\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>7、 再次测试</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/9bf9be7e0c2a4553895183e518a76768__sunawtX11XFramePeer_20190108112543.png\" alt=\"再次测试\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>8、 查错</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/dd99a3d9cd9a4505ad4cb204a0f6e78f__sunawtX11XFramePeer_20190108112842.png\" alt=\"查错\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>9、 再次测试</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/67587e8fbd004abeac1563917d6d0259__sunawtX11XFramePeer_20190108112936.png\" alt=\"再次测试\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>10、 这样就完成了，那么测试一下更新的时候呢？</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/e01fb9efe8294a67a51f2aa3955c0902__sunawtX11XFramePeer_20190108113149.png\" alt=\"测试一下更新\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样一个参数的校验和异常处理就完成了！</p>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_方法自定义\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">方法自定义</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们在实际时候，有很多他的方法我们是不希望暴露出来的，比如删除方法，如果我们不希望暴露出来，怎么办呢？</p>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_隐藏方法\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">隐藏方法</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>很简单，一个注解搞定！\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/0a07ae1ca6d9464fa21f6496c38f0f5f__sunawtX11XFramePeer_20190108113858.png\" alt=\"隐藏方法\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>为什么这里会报 500\n错误，这里其实并不需要我们再次进行处理，其原因在于我们配置的全局异常处理导致的</strong></p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/f40896d2e65749fd9ec4d8ff89c05431__sunawtX11XFramePeer_20190108114706.png\" alt=\"统一异常处理\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以处理方式很简单，指定一下他要拦截的 controller 即可</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/46e268e8939f41cda577ea7b77be9e38__sunawtX11XFramePeer_20190108115504.png\" alt=\"controller\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/107c475d2e3c4565b07d73f62e7f1395__sunawtX11XFramePeer_20190108115558.png\" alt=\"测试\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/2db1f9635871403eac953e1d815db874__sunawtX11XFramePeer_20190108115810.png\" alt=\"测试\">\n</div>\n</div>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_修改方法\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">修改方法</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>但是在实际开发中，删除是要的有的，但是我们一般并不是真正的删除数据，而是通过修改他的\nisEnabled 或者 status 达到删除的目的，这个时候就要我们自定义删除方法了。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/75dc5e3d85df4de9b90344a4988defde__sunawtX11XFramePeer_20190108123753.png\" alt=\"修改方法\">\n</div>\n</div>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_隐藏字段\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">隐藏字段</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>查询的数据中，把实体的所有属性查出来了，那么我们要怎么隐藏其中的属性呢？很简单，一个注解即可</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/42576f7dcb054844ab05b84cdde36e97__sunawtX11XFramePeer_20190108124021.png\" alt=\"_sunawtX11XFramePeer_20190108124021png\">\n</div>\n</div>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_自定义查询方法\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">自定义查询方法</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>一种简单的实现就是直接利用 jpa，然后暴露出去即可，如下：\n<span class=\"image\"><img src=\"https://resources.echocow.cn//file/2019/01/3b9994f7f7c74f7e8aba058f7b6f2cce__sunawtX11XFramePeer_20190108142720.png\" alt=\"然后暴露出去即可\"></span></p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/24345e49bf3f4eb8ae3bc6f8ee016744__sunawtX11XFramePeer_20190108142947.png\" alt=\"然后暴露出去即可\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>当然，这样你会发现他的url就是带有参数的了，这样也可以的。但是如果不想这样呢？比如根据作者来查询我希望的\nurl 是 <code>/api/v2/books/authors/{name}</code>，那么就要用到扩充了。也就是\n<code>@RepositoryRestController</code> 注解，当然你也可以直接使用 <code>@RestController</code>\n注解的。然后在里面添加方法即可，我就不再赘述啦！</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_关于测试\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">关于测试</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们前面使用到了 2 种测试，使用 idea\n的插件，功能有限，还有就是使用强大的 postman，那么如何使用 spring boot\n的 test 测试呢？</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在这之前确保你已经安装了如下依赖</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-markup\" data-lang=\"markup\">testImplementation('org.springframework.boot:spring-boot-starter-test')</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>他自带的是 junit4，你也可以使用 junit5，也是非常方便的。现在我们先使用\njunit4 进行测试。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/99648fea469047efae037dab43971bae__sunawtX11XFramePeer_20190108144243.png\" alt=\"_sunawtX11XFramePeer_20190108144243png\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样我们便完成了一个接口的测试，你可以通过 <code>andExpect</code>\n详细的测试关于获取到的json对象的信息，你也可以接受一个返回值后进行打印查看。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果使用 junit5 呢？大体相同的</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn//file/2019/01/8424aa58232e42a98d93f3c77f35063f__sunawtX11XFramePeer_20190108144503.png\" alt=\"_sunawtX11XFramePeer_20190108144503png\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>不过要注意的是，因为在应用内进行测试，所以我们不需要添加 <code>/api</code> 了。</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>为什么要这样？直接用 postman 不好吗？开发的时候，我们可以使用 postman\n一个一个测试，但是如果你想一整套的演示测试，这样一个一个的请求一个个测试是不是很麻烦？所以你可以将他直接书写到一个类中，比如书写一个\nBookV1Test 类，然后开发完 V1\n版本的，直接运行整个类，他会依次运行所有的方法，并且由于我们前面配置了测试时数据固定，不可变了，所以你可以对所有的获取到的数据进行预测，每次测试时运行的数据都是一致的，那么你就可以观察是否得到期望的值。一次性可以测试完所有的接口，是非常方便的（好像postman也有）。好就好在别人拿代码过去可以直接运行测试类查看结果了。但是我比较懒所以只写一个，大家知道就行了。</p>\n</div>\n</blockquote>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_感触\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">感触</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自己写文章总是拖拖拉拉，2019年的第一篇技术性文章（哪里有技术含量了？学渣的自我安慰。）上周六开始写的，到了周二才完工，中间无数事情打断，自己也找各种借口。而且写出来还不是很满意。不过收获颇多，在学习的时候就发现，对于spring\ndata\nrest百度的资料都是重复性的，价值不大的一堆东西，迫不得已要科学上网使用Google，但大多时候答案都不是自己想要的。对于国内的环境，一些新的技术流入真的会有一定阻碍，需要自己不断去摸索，这个过程无疑有时候是难熬的特别是英文水平有限的时候。在这个过程中遇到的无数问题大多都是从官网上的文档中得到的答案而不是百度或者google。相比起来学习一门技术最好的文档莫过于官网了，一篇小小的博客自己也遇到很多问题，或许还有很多地方没有说清楚，自己也会努力改正的。代码中也有很多瑕疵也有很多值得优化的地方。后面也会慢慢努力，提高自己书写能力，同时也欢迎大家和我交流学习。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_参考链接\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">参考链接</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\">理解 RESTFul 架构\n阮一峰</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\">RESTful API\n设计指南 阮一峰</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html\">RESTful\nAPI 最佳实践 阮一峰</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://docs.spring.io/spring-data/rest/docs/current/reference/html/\">spring\ndata rest</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"spring boot restful API 从零到一完整实践"},"pageAttributes":{"category":"spring","description":"spring boot restful API 从零到一完整实践","image":"https://img.hacpai.com/bing/20180804.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100","sort":"-1"}}},"pageContext":{"slug":"/articles/2019/01/05/1546684795983.html","next":null,"previous":{"document":{"title":"Spring Security OAuth2 Authorization Server 初体验"},"fields":{"slug":"/articles/2020/08/25/1598370094047.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}