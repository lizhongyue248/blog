{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2019/03/23/1553311043768.html","result":{"data":{"asciidoc":{"id":"fc931a45-359a-5a7e-8fac-4bf50cd976b3","fields":{"slug":"/articles/2019/03/23/1553311043768.html","birthTime":"2019-03-23T03:17:23.950Z","modifiedTime":"2019-03-24T14:39:25.674Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_回顾\">回顾</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_listov_替换原则lsp\">Listov 替换原则（LSP）</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_一个违反_lsp_的简单例子\">一个违反 LSP 的简单例子</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_微妙的违反_lsp_的例子\">微妙的违反 LSP 的例子</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_基于契约设计dbc\">基于契约设计（DBC）</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_抽取公共部分的方法代替继承\">抽取公共部分的方法代替继承</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_其他\">其他</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_依赖倒置原则dip\">依赖倒置原则（DIP）</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_接口隔离原则isp\">接口隔离原则（ISP）</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_总结\">总结</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_参考链接\">参考链接</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>有时候觉得读书真的很有用，在文字中的感觉很美好，特别是喜欢朗读出来的感觉，越发的那样，越发能够体验书的境遇。这周的计划依旧被自己推迟，总是拖延症，不知不觉又到了周六，疲惫十分。不过依旧觉得不能放弃继续看这本书。世间太美，诱人的东西太多，有多少人可以面不改色呢？有时候觉得一个人的时候，才是自己变化最大的时候。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_回顾\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">回顾</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>上一周的两个原则 ——\nSRP、OCP。都是十分简单但是却偏偏难以满足的，需要不断地去实践。相比较来说，SRP\n更好理解，书中的 OCP 是 C 的例子，始终有些懵，网上找了写 java\n其他的例子，也是理解了部分。不过这种的代码，依旧是 C\n的例子，但是比起来却好理解了一些。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_listov_替换原则lsp\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Listov 替换原则（LSP）</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>子类型必须能够替换掉他们的基类型。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>替换性质：若对每个类型 S 的对象 o1，都存在一个类型 T 的对象\no2，使得在所有针对 T 编写的程序 P 中，用 o1 替换 o2 后，程序 P\n行为功能不变，则 S 是 T 的子类型。</strong></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>违反 LSP 原则是很严重的，因这常常会导致明显违反 OCP\n原则，就像一条连锁链一样。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_一个违反_lsp_的简单例子\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">一个违反 LSP 的简单例子</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>书中的代码使用 C++ 完成，我采用 java 类似的完成了一下如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">// Point.java\npublic class Point {\n    double x;\n    double y;\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">// Shape.java ，书中代码使用了枚举，java 可以省略，因为他有更好的判断类型的方式\n// 构造函数使用默认即可\npublic class Shape {\n\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">// Circle.java  我全部暴露出去，省掉 get/set 方法\npublic class Circle extends Shape {\n    public Point itsCenter;\n    public double itsRadius;\n\n    public void draw() {\n        System.out.println(\"circle\");\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">// Square.java 同上\npublic class Square extends Shape {\n    public Point itsTopLeft;\n    public double itsSide;\n\n    public void draw() {\n        System.out.println(\"square\");\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">// ShapeTest.java\nclass ShapeTest {\n\n    @Test\n    void testDrawShape() {\n        drawShapeV1(new Circle());\n    }\n\n    // 按照书上的这样写，先假设这样写。\n    private void drawShapeV1(Shape shape) {\n        if (shape instanceof Circle) {\n            ((Circle) shape).draw();ShapeTest\n        } else if (shape instanceof Square) {\n            ((Square) shape).draw();\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样的模型，<code>drawShape</code> 函数也就违反 OCP，因为他必须知道所有的 <code>Shape</code>\n的派生类，一旦有变化就要来修改此函数，但是我是仿照书上的 C++\n的代码写的，这是一个很明显违反了 LSP 的例子。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_微妙的违反_lsp_的例子\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">微妙的违反 LSP 的例子</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>下面我们来看一个更为微妙的违反了 LSP\n的方式。现在已有一个正在运行的矩形如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">// Rectangle.java\npublic class Rectangle {\n    private Point itsTopLeft;\n    private double itsWidth;\n    private double itsHeight;\n\n    public double getItsWidth() {\n        return itsWidth;\n    }\n\n    public void setItsWidth(double itsWidth) {\n        this.itsWidth = itsWidth;\n    }\n\n    public double getItsHeight() {\n        return itsHeight;\n    }\n\n    public void setItsHeight(double itsHeight) {\n        this.itsHeight = itsHeight;\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果我们现在要添加正方形呢？从一般意义上来讲，一个正方形就是一个矩形，所以把\n<code>Square</code> 类视为从 <code>Rectangle</code> 类派生是合乎逻辑的。他们存在一种 IS-A\n的关系。当然，IS-A\n这种用法有时会被认为是面向对象分析（OOA）基本技术之一。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>当我们在编写代码的时候会注意到一些问题，比如，对于 <code>Square</code>\n来说，其实并不同时需要 <code>itsHeight</code> 和\n<code>itsWidth</code>，但是由于继承的关系，他依旧会获得这两个属性，这显然是一种浪费。我们暂且不在乎内存的问题，换一个角度上看，当\n<code>Square</code> 会同事继承 <code>setItsWidth</code> 和 <code>setItsHeight</code>\n函数，这两个函数其实并不适用于正方形，因为他的长和宽都是相等的，现在我们作出些许改变：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class Square extends Rectangle {\n    @Override\n    public void setItsWidth(double itsWidth) {\n        super.setItsWidth(itsWidth);\n        super.setItsHeight(itsWidth);\n    }\n\n    @Override\n    public void setItsHeight(double itsHeight) {\n        super.setItsHeight(itsHeight);\n        super.setItsWidth(itsHeight);\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在长宽同时改变，保持了 <code>Square</code>\n几何上的不变性。接下来我们考虑下面的这个函数。</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">void f(Rectangle r){\n    r.setItsWidth(32);\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在 java 中这个函数是没有问题，但是在 c++ 中就要将他们声明为 虚函数\n才能正确运行，因而不再讨论。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样的设计似乎是正确的，但是我们考虑下面的这个函数。</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>void f(Rectangle r){\n    r.setItsWidth(5);\n    r.setItsHeight(4);\n    assertEquals(20);\n}</pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个函数认为传递过来的一定是 <code>Rectangle</code>，并调用了他的两个方法，对于\n<code>Rectangle</code> 来说是正确的，但是如果是 <code>Square</code> 来说确断言错误。函数 <code>f</code>\n对于 <code>Square/Rectangle</code> 层次结构来说是脆弱的。<code>f</code>\n的编写者完全可以对和这个不变的性质进行断言，倒是 <code>Square</code>\n违反了这个不变性。然而 <code>Square</code> 并没有违反正方形的不变性，违反的应该是\n<code>Rectangle</code> 的不变性。。。。（绕晕了=-=）</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>LSP\n让我们得出一个非常重要的结论，一个模型，如果独立地看，并不具有真正意义上的有效性。模型的有效性只能通过他的客户程序来表现。</p>\n</div>\n</blockquote>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_基于契约设计dbc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">基于契约设计（DBC）</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>许多开发人员可能会对``合理假设''行为方式的概念感到不安，有一种技术可以使合理的假设明确化，从而支持了\nLSP，他被称为基于契约设计（DBC）。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>简单的说就是为一个方法增加一个<strong>前置</strong>条件和一个<strong>后置</strong>条件，前置条件必须为真，执行完毕后，该方法要保证后置条件为真。对于\n<code>Rectangle</code> 的 <code>setItsWidth</code> 的后置条件可以是：</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>    assert ((this.itsWidth == itsWidth) &amp;&amp; (this.itsHeight == old.itsHeight));</pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>后面的介绍有点懵，一段文字中一会儿出现换句话，一会儿出现也就是说。按照我的理解，对于派生类，其前置条件应该更弱，后置条件应该更强。对于\n<code>Square</code> 来说，他的 <code>setItsWidth</code> 方法违反了基类定下的契约。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>不过对于 C++ 和 java 来说，并没有此项语言特征。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>但是我们可以选择在单元测试中指定契约，比如 <code>@BeforeEach</code> 这些 <code>junit</code>\n注解。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_抽取公共部分的方法代替继承\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">抽取公共部分的方法代替继承</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在书中举了一个曾经实际开发的一个例子，不过是用 C++\n实现，所以有点晕，不过理解了倒是不难。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>提取公共部分是一个设计工具，最好在代码不是很多的应用。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_其他\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">其他</h3>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>完成功能少于其基类的派生类通常是不能替换其基类的，因此就违反了 LSP。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>派生类中存在 <em>退化函数</em> 并不总是表示违反了\nLSP，但是当存在这种情况时，还是值得注意一下的。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>派生类不应该抛出<em>异常</em>。</p>\n</li>\n</ul>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>术语 <code>IS-A''\n的含义国语宽泛以至于不能作为子类型的定义。子类型的正确定义是\n</code>可替换性的''，这里的可替换性可以通过显式或者隐式的契约来定义。</p>\n</div>\n</blockquote>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_依赖倒置原则dip\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">依赖倒置原则（DIP）</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>决不能再让国家的重大利益依赖于那些会动摇人类薄弱意志的众多可能性。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>高层模块不应该依赖于底层模块，二者都应该依赖于抽象。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>抽象不应该依赖于细节，细节应该依赖于抽象。</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>举个例子来说，假如我们设计一辆汽车，那么我们需要如下步骤：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>先设计轮子</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>根据轮子大小设计底盘</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接着根据底盘设计车身</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最后根据车身设计好整个汽车</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如上就出现了一个 <em>依赖</em>\n的关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/3/24/v2-c68248bb5d9b4d64d22600571e996446_hd.jpg\" alt=\"example\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改；同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改——整个设计几乎都得改！</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置过来了：轮子依赖底盘，\n底盘依赖车身， 车身依赖汽车。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/3/24/v2-e64bf72c5c04412f626b21753aa9e1a1_hd.jpg\" alt=\"example\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘，车身，汽车的设计了。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这就是依赖倒置原则——把原本的高层建筑依赖底层建筑<code>倒置''过来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。这样就不会出现前面的</code>牵一发动全身''的情况。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>其实刚开始看到这个模式的时候想到的第一个词就是：<strong>面向接口编程</strong>。在 java\n中的表现可以看成下面的几点：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象产生的。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接口或抽象类不依赖于实现类。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>实现类依赖接口或抽象类。</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过找出那些不随具体细节的改变而改变的真理，即抽象。找出这些抽象，倒置这些依赖关系，他就是面向对象的设计的核心。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring 中的 依赖注入\n正是一种依赖倒置的方法，他依据的依赖倒置的一种实现思路——控制反转（IOC）。通过上层控制下层，<strong>把底层类作为参数传入上层类，实现上层类对下层类的“控制</strong>”。这正是一个\nDIP 的典型例子。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_接口隔离原则isp\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">接口隔离原则（ISP）</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>不应该强迫客户依赖于他们不用的方法。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果强迫客户程序依赖于那些他们不使用的方法，那么这些客户程序就面临着由于这些未使用方法的改变所带来的变更。这无意中导致了所有客户程序之间的耦合。换句话说，如果一个客户程序依赖于一个含有他不使用的方法的类，但是其他的客户程序却要使用该方法，那么当其他客户要求这个类改变时，就会影响到这个客户程序。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如何理解呢？</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>客户端需要什么接口，就依赖什么接口，不需要的就不要给他。如果依赖了他不需要的接口，那么就代表着他有着未使用的冗余，并且还会因为其他的变更带来其他的危险。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接口应该分离。这个和单一职责有点相似，也就是一个接口就去满足一个类似的功能即可，不应该为他去负责更多的功能。不过单一职责原则主要是类与方法，而接口隔离原则却是对接口而言的。</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>那么在Java中怎么体现呢？</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>一个类实现多个接口。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>功能尽可能的简单单一</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个原则相对来说还是比较好理解的，因为在写代码的时候也多次发现一些使用的地方，所以体会较深且理解比较透彻。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_总结\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">总结</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这周的其实相比起上周的比较简单，对于 Listov 其实 java\n是有很好的支持，天生没有虚函数的概念的存在还是十分友好的。而后面的依赖倒置原则则是归功于使用\nspring\n后的体会，以至于理解很快，随后医德接口隔离原则则是多次见到一些实现且已经了解过单一职责原则的基础上理解会很快。这周还是很轻松的，不过回顾了一下，面向对象设计的五大原则<strong>SOLID</strong>（<strong>单一职责、开闭原则、里氏替换、接口隔离</strong>以及*依赖反转*）中最难贯彻以及实现的就是<strong>开闭原则</strong>和*单一职责*，还是需要不断的实战来进行学习。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_参考链接\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">参考链接</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://www.zhihu.com/people/sevenvidia/activities\">知乎</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://en.wikipedia.org/wiki/SOLID\">维基百科</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"[阅读] 敏捷软件开发 —— 敏捷设计（二）"},"pageAttributes":{"category":"阅读","description":"[阅读] 敏捷软件开发 —— 敏捷设计（二）","image":"https://img.hacpai.com/bing/20180915.jpg?imageView2/1/w/960/h/540/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2019/03/23/1553311043768.html","next":{"document":{"title":"[阅读] 敏捷软件开发 —— 薪水支付案例研究（一）"},"fields":{"slug":"/articles/2019/04/03/1554263896709.html"}},"previous":{"document":{"title":"[阅读] 敏捷软件开发 —— 敏捷设计（一）"},"fields":{"slug":"/articles/2019/03/16/1552732721283.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}