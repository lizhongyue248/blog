{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2019/07/14/1563096109753.html","result":{"data":{"asciidoc":{"id":"f6b7d1de-d9f9-559e-95be-caded6f6430d","fields":{"slug":"/articles/2019/07/14/1563096109753.html","birthTime":"2019-07-14T09:21:49.805Z","modifiedTime":"2020-04-25T06:27:49.182Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_系列文章\">系列文章</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_spring_security_oauth2_授权服务器\">spring security oauth2 授权服务器</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_基于内存的客户端信息与令牌存储\">基于内存的客户端信息与令牌存储</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_基于_mysql_的客户端信息与令牌存储\">基于 mysql 的客户端信息与令牌存储</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_基于_redis_的令牌存储\">基于 redis 的令牌存储</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_基于_jwt_的令牌生成与配置\">基于 jwt 的令牌生成与配置</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_授权服务器小扩展\">授权服务器小扩展</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_总结\">总结</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_参考资料\">参考资料</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>注意注意：本文章适用于5.3以前的spring security以及spring boot 2.3.x\n以前的 oauth，以下内容应该为过时！spring 提供新的 oauth2\n授权服务器，目前正在https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update[实验性阶段]，同时资源服务器由\noauth 模块迁移到 spring security 之内。</strong></p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>前面说了自动配置，现在就是来说自定义配置啦，这个是十分重要的一节，可以说\noauth2\n的核心就是授权服务器了，所有的角色都是围绕着授权服务器而运作的，这里基本包含了资源服务器的所有配置。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>注意：spring security oauth2 模块已经过期，见\n<a href=\"https://github.com/spring-projects/spring-security-oauth#-deprecation-notice-\">github</a>。</strong></p>\n</div>\n<div class=\"exampleblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>GitHub 地址： <a href=\"https://github.com/lizhongyue248/spring-security-oauth2-demo\">spring-security-oauth2-demo</a></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>博客地址： <a href=\"https://echocow.cn\">echocow.cn</a></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_系列文章\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">系列文章</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/14/1563082088646.html\">较为详细的学习\noauth2 的四种模式其中的两种授权模式</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/14/1563082247386.html\">spring boot\noauth2 自动配置实现</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring security oauth2 授权服务器配置</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/20/1563611848587.html\">spring\nsecurity oauth2 资源服务器配置</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/30/1564498598952.html\">spring\nsecurity oauth2 自定义授权模式（手机、邮箱等）</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2020/01/20/1579503807596.html\">spring\nsecurity oauth2 踩坑记录</a></p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_spring_security_oauth2_授权服务器\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">spring security oauth2 授权服务器</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们首先再次回顾下授权服务器的详细作用：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>客户端的验证与授权</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>令牌的生成与发放</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>令牌的校验与更新</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以我们以下的操作都会围绕 <strong>客户端</strong> 与 <strong>令牌</strong> 来完成。</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>注意：以下授权服务器全默认在 8000 端口运行！！！</strong></p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在我们需要进行的就是授权服务器配置实现，我们完成项目的初始化，和之前创建完全一样，创建完成后，<strong>我们把\n8080 端口修改为 8000 端口</strong>，然后项目结构如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709212205.png\" alt=\"new\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同时添加一下如下依赖</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security.oauth.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-oauth2-autoconfigure&lt;/artifactId&gt;\n        &lt;version&gt;${spring.boot.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>既然是授权服务器，那么我们也就不用把它注册为资源服务器了，因为我们不对外暴露任何资源，仅仅只是为了令牌的下发，不需要做资源保护。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在我们配置授权服务器之前，需要先进行我们前面遇到过的配置 spring security\nweb 安全，复制一下上一次的配置，就不截图了，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.oauth.authorization.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\n\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    /**\n     * 密码加密方式，spring 5 后必须对密码进行加密\n     *\n     * @return BCryptPasswordEncoder\n     */\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    /**\n     * 创建两个内存用户\n     * 用户名 user 密码 123456 角色 ROLE_USER\n     * 用户名 admin 密码 admin 角色 ROLE_ADMIN\n     *\n     * @return InMemoryUserDetailsManager\n     */\n    @Bean\n    @Override\n    public UserDetailsService userDetailsService() {\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(User.withUsername(\"user\")\n                .password(passwordEncoder().encode(\"123456\"))\n                .authorities(\"ROLE_USER\").build());\n        manager.createUser(User.withUsername(\"admin\")\n                .password(passwordEncoder().encode(\"admin\"))\n                .authorities(\"ROLE_ADMIN\").build());\n        return manager;\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>上一部分我们知道 <code>spring-security-oauth2-autoconfigure</code>\n是自动配置的包，通过陪配置文件就可以完成一个授权服务器和资源服务器，现在我们需要来自定义他的授权服务器该怎么做呢？我们需要做的就是配置属于我们自己的\n`AuthorizationServerConfigurer`了，当 spring\n扫描到我们实现的配置以后，他就不回去自动配置 oauth2\n了。为什么这么说呢？可以通过查看他的自动配置的源码你就会发现为什么，如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713151107.png\" alt=\"bean\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以，如果我们配置了 <code>AuthorizationServerConfigurer</code>\n的bean，它是不会执行自动配置的。我们现在需要自定义，所以就要来实现一下这个接口。当然，spring\n提供了相应的适配器来供我们实现这个接口的，他就是\n<code>AuthorizationServerConfigurerAdapter</code>，我们只要继承这个类即可。我们来看看里面的三个配置方法：</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 34%;\">\n<col style=\"width: 33%;\">\n<col style=\"width: 33%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">方法名</th>\n<th class=\"tableblock halign-left valign-top\">参数</th>\n<th class=\"tableblock halign-left valign-top\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">configure</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">AuthorizationServerSecurityConfigurer</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">配置授权服务器的安全信息，比如 ssl 配置、checktoken\n是否允许访问，是否允许客户端的表单身份验证等。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">configure</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">ClientDetailsServiceConfigurer</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">配置客户端的\nservice，也就是应用怎么获取到客户端的信息，一般来说是从内存或者数据库中获取，已经提供了他们的默认实现，你也可以自定义。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">configure</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">AuthorizationServerEndpointsConfigurer</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">配置授权服务器各个端点的非安全功能，如令牌存储，令牌自定义，用户批准和授权类型。如果需要密码授权模式，需要提供\n<code>AuthenticationManager</code> 的 bean。</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以为了方便，我们先在我们的 <code>SecurityConfig</code> 配置中创建一个\n<code>AuthenticationManager</code> Bean，直接调用父类的方法获取即可，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 认证管理\n *\n * @return 认证管理对象\n * @throws Exception 认证异常信息\n */\n@Override\n@Bean  // 重点是这行，父类并没有将它注册为一个 Bean\npublic AuthenticationManager authenticationManagerBean() throws Exception {\n    return super.authenticationManagerBean();\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来就是我们配置我们自己的授权服务器了，我们要完成如下的几种授权服务器配置</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>基于内存的客户端信息与令牌存储</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>基于 mysql 的客户端信息与令牌存储</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>基于 redis 的令牌存储</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>基于 jwt 的令牌生成与配置</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权服务器小扩展</p>\n</li>\n</ul>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>以上可以自由组合，例如 mysql 客户端配合 redis 令牌存储等。</strong></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>由于内容过多，防止由于依赖的问题导致不好运行查看效果，我每一种方式，都将它放在新的模块之中，模块的创建将会省略不写。分别为\n内存、mysql、redis、jwt 四个模块</strong></p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>不过在那之前，我们需要准备一个已经继承\n<code>AuthorizationServerConfigurerAdapter</code>\n的配置类，同时上面提到过，如果需要密码模式，我们要提供\n<code>AuthenticationManager</code> 的\nbean，所以我们在这里提前进行配置下，后面就不再进行赘述，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Configuration\n@RequiredArgsConstructor\n@EnableAuthorizationServer\npublic class Oauth2AuthorizationServerConfig\n    extends AuthorizationServerConfigurerAdapter {\n\n    private final @NonNull AuthenticationManager authenticationManager;\n\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n        endpoints.authenticationManager(this.authenticationManager);\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在的项目结构如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713164716.png\" alt=\"authconfig\">\n</div>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>注意，为了方便，后面的测试均使用密码模式进行测试！</p>\n</div>\n</blockquote>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_基于内存的客户端信息与令牌存储\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">基于内存的客户端信息与令牌存储</h3>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>代码参见项目模块 spring-security-oauth2-authorization</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们将在内存中存储和读取客户端信息以及下发的令牌信息：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>优点</strong>：速度快，读取速度和写入速度都很快，配置也极其方便。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>缺点</strong>：扩展性差，需要在代码中配置，重启应用后已经下发的令牌失效。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>适用场景</strong>：小型不易改变的应用，授权服务器和资源服务器一体的应用。</p>\n</li>\n</ul>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_客户端信息\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">客户端信息</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于客户端信息的配置，你完全可以通过\n<code>org.springframework.boot.autoconfigure.security.oauth2.authserver.OAuth2AuthorizationServerConfiguration</code>\n这个类学习到，对于客户端的配置我们主要实现对参数为\n<code>ClientDetailsServiceConfigurer</code> 的方法配置，我们分来两个方式来学习：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>直接代码写死配置客户端信息</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>读取配置文件中的客户端信息</p>\n</li>\n</ol>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_代码配置\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">代码配置</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们需要以下几步完成配置</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>构建内存存储的 <code>ClientDetailsService</code> 实现类（spring security oauth\n已经提供）。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>利用构建出来的进行配置客户端。</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以我们先进行第一步，我们获取他的建造者：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">InMemoryClientDetailsServiceBuilder builder = clients.inMemory();</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后通过他构建一个内存客户端：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">builder\n        // 构建一个 id 为 oauth2 的客户端\n        .withClient(\"oauth2\")\n        // 设置她的密钥，加密后的\n        .secret(\"$2a$10$wlgcx61faSJ8O5I4nLiovO9T36HBQgh4RhOQAYNORCzvANlInVlw2\")\n        // 设置允许访问的资源 id\n        .resourceIds(\"oauth2\")\n        // 授权的类型\n        .authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\")\n        // 可以授权的角色\n        .authorities(\"ROLE_ADMIN\", \"ROLE_USER\")\n        // 授权的范围\n        .scopes(\"all\")\n        // token 有效期\n        .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))\n        // 刷新 token 的有效期\n        .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))\n        // 授权码模式的重定向地址\n        .redirectUris(\"http://example.com\");</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>看起来她配置的东西和我们在配置文件中写的东西是基本一致的，不过密码现在是加密后的了，如何获取呢？我是写了一个测试类如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">package cn.echocow.oauth.authorization;\n\nimport org.junit.Test;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n/**\n * 获取加密后的密码\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 19-7-13 下午4:36\n */\npublic class PasswordTest {\n\n    @Test\n    public void password() {\n        // 每次打印的结果都不一样，不影响\n        System.out.println(new BCryptPasswordEncoder().encode(\"oauth2\"));\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后将打印的密码填入即可，<strong>不过值得注意的是，她每次的加密结果都是不一样的</strong>。现在的文件如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713164857.png\" alt=\"file\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们启动然后测试一下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713165430.png\" alt=\"test\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个就从内存中存存储和读取客户端信息了，如果多个客户端呢？复制一遍就好啦</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713165639.png\" alt=\"more\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>亦或者完全使用链式结构如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713170359.png\" alt=\"all\">\n</div>\n</div>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_配置文件配置\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">配置文件配置</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于配置文件配置其实他已经有了默认的实现了，但是只能对一个客户端进行配置，我们需要多个的时候怎么办呢？就需要我们来扩展了，这个实现其实很简单，就是一个配置类和一个循环的实现，我们来捋一下步骤。</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>读取配置文件，多个客户端信息</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>逐个配置客户端信息</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>先来书写配置类，使用 lombok 自动生成 get/set 等方法：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Data\n@Configuration\n@ConfigurationProperties(\"application.security.oauth\")\npublic class ClientDetails {\n    private List&lt;BaseClientDetails&gt; client;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>书写配置文件：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">application:\n  security:\n    oauth:\n      client[0]:\n        registered-redirect-uri: http://example.com\n        # 客户端 id\n        client-id: client1\n        # 客户端密钥\n        client-secret: $2a$10$wlgcx61faSJ8O5I4nLiovO9T36HBQgh4RhOQAYNORCzvANlInVlw2\n        # 授权范围\n        scope: all\n        # token 有效期\n        access-token-validity-seconds: 6000\n        # 刷新 token 的有效期\n        refresh-token-validity-seconds: 6000\n        # 允许的授权类型\n        grant-type: authorization_code,password,refresh_token\n        # 可以访问的资源 id\n        resource-ids: oauth2\n      client[1]:\n        registered-redirect-uri: http://example.com\n        # 客户端 id\n        client-id: client2\n        # 客户端密钥\n        client-secret: $2a$10$wlgcx61faSJ8O5I4nLiovO9T36HBQgh4RhOQAYNORCzvANlInVlw2\n        # 授权范围\n        scope: all\n        # token 有效期\n        access-token-validity-seconds: 6000\n        # 刷新 token 的有效期\n        refresh-token-validity-seconds: 6000\n        # 允许的授权类型\n        grant-type: authorization_code,password,refresh_token\n        # 可以访问的资源 id\n        resource-ids: oauth2</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>为了防止混淆，我单独写了一个方法来配置，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">private void configClient(ClientDetailsServiceConfigurer clients) throws Exception {\n        InMemoryClientDetailsServiceBuilder builder = clients.inMemory();\n        for (BaseClientDetails client : clientDetails.getClient()) {\n            ClientDetailsServiceBuilder&lt;InMemoryClientDetailsServiceBuilder&gt;.ClientBuilder clientBuilder =\n                    builder.withClient(client.getClientId());\n            clientBuilder\n                    .secret(client.getClientSecret())\n                    .resourceIds(client.getResourceIds().toArray(new String[0]))\n                    .authorizedGrantTypes(client.getAuthorizedGrantTypes().toArray(new String[0]))\n                    .authorities(\n                            AuthorityUtils.authorityListToSet(client.getAuthorities())\n                                    .toArray(new String[0]))\n                    .scopes(client.getScope().toArray(new String[0]));\n            if (client.getAutoApproveScopes() != null) {\n                clientBuilder.autoApprove(\n                        client.getAutoApproveScopes().toArray(new String[0]));\n            }\n            if (client.getAccessTokenValiditySeconds() != null) {\n                clientBuilder.accessTokenValiditySeconds(\n                        client.getAccessTokenValiditySeconds());\n            }\n            if (client.getRefreshTokenValiditySeconds() != null) {\n                clientBuilder.refreshTokenValiditySeconds(\n                        client.getRefreshTokenValiditySeconds());\n            }\n            if (client.getRegisteredRedirectUri() != null) {\n                clientBuilder.redirectUris(\n                        client.getRegisteredRedirectUri().toArray(new String[0]));\n            }\n        }\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最终如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713174017.png\" alt=\"result\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后运行测试一下两个客户端</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713174157.png\" alt=\"2\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713174105.png\" alt=\"1\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样也实现了效果</p>\n</div>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_令牌存储\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">令牌存储</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>其实他默认的令牌存储就是使用到内存存储，所以我们无需配置～何以见得呢？我们来简单分析一下。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在前面我们说过 <code>AuthorizationServerConfigurer</code>\n的三个配置方法，其中就有一个参数为\n<code>AuthorizationServerEndpointsConfigurer</code>\n类型的配置方法，它可以配置我们令牌信息，所以我们就要把目标放在他的上面看看，去找一找他是如何配置的。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>他的核心配置类是\n<code>org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration</code>，这个类内容很多，我们只关注他是默认配置的为什么是内存的，首先找到一个工厂类：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713175120.png\" alt=\"factory\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们跟进去看看：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713175259.png\" alt=\"default\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713175517.png\" alt=\"再进去看看\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713175828.png\" alt=\"image\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样我们就找到她是如何默认创建的了。</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_基于_mysql_的客户端信息与令牌存储\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">基于 mysql 的客户端信息与令牌存储</h3>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>代码参见项目模块 spring-security-oauth2-authorization-mysql</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>模块创建步骤省略</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们将在 mysql 中存储和读取客户端信息以及下发的令牌信息：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>优点</strong>：扩展性极高，不用修改代码与重启就可以完成客户端管理，安全性高。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>缺点</strong>：使用数据库速度过慢，多客户端高并发情况下可能会造成性能瓶颈</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>适用场景</strong>：中大型项目，独立且完整的授权服务器。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在这之前你要添加如下的 mysql 和 jdbc 依赖</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置文件如下，我的 mysql 版本为 8.0 ，url 参数请自行修改</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">server:\n  port: 8000\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://127.0.0.1:3306/auth?useUnicode=true&amp;characterEncoding=UTF-8&amp;useOldAliasMetadataBehavior=true&amp;autoReconnect=true&amp;serverTimezone=UTC\n    username: root\n    password: 123456\n    # 用来初始化数据库的，如果不存在表就自动创建\n    initialization-mode: ALWAYS\n    schema: classpath:ddl.sql</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>导入\n<a href=\"https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql\">官方提供</a>\n的 h2 的表，由于官方使用的是 h2 的数据库，有些字段类型不对，我修改成\nmysql 的后如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-sql\" data-lang=\"sql\">-- used in tests that use MYSQL\ncreate table if not exists oauth_client_details (\n  client_id VARCHAR(256) PRIMARY KEY,\n  resource_ids VARCHAR(256),\n  client_secret VARCHAR(256),\n  scope VARCHAR(256),\n  authorized_grant_types VARCHAR(256),\n  web_server_redirect_uri VARCHAR(256),\n  authorities VARCHAR(256),\n  access_token_validity INTEGER,\n  refresh_token_validity INTEGER,\n  additional_information VARCHAR(4096),\n  autoapprove VARCHAR(256)\n);\n\ncreate table if not exists oauth_client_token (\n  token_id VARCHAR(256),\n  token BLOB,\n  authentication_id VARCHAR(256) PRIMARY KEY,\n  user_name VARCHAR(256),\n  client_id VARCHAR(256)\n);\n\ncreate table if not exists oauth_access_token (\n  token_id VARCHAR(256),\n  token BLOB,\n  authentication_id VARCHAR(256) PRIMARY KEY,\n  user_name VARCHAR(256),\n  client_id VARCHAR(256),\n  authentication BLOB,\n  refresh_token VARCHAR(256)\n);\n\ncreate table if not exists oauth_refresh_token (\n  token_id VARCHAR(256),\n  token BLOB,\n  authentication BLOB\n);\n\ncreate table if not exists oauth_code (\n  code VARCHAR(256), authentication BLOB\n);\n\ncreate table if not exists oauth_approvals (\n    userId VARCHAR(256),\n    clientId VARCHAR(256),\n    scope VARCHAR(256),\n    status VARCHAR(10),\n    expiresAt TIMESTAMP,\n    lastModifiedAt TIMESTAMP\n);\n\n\n-- customized oauth_client_details table\ncreate table if not exists ClientDetails (\n  appId VARCHAR(256) PRIMARY KEY,\n  resourceIds VARCHAR(256),\n  appSecret VARCHAR(256),\n  scope VARCHAR(256),\n  grantTypes VARCHAR(256),\n  redirectUrl VARCHAR(256),\n  authorities VARCHAR(256),\n  access_token_validity INTEGER,\n  refresh_token_validity INTEGER,\n  additionalInformation VARCHAR(4096),\n  autoApproveScopes VARCHAR(256)\n);</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>先给大家介绍一下几张表的具体意思和结构：</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>oauth_client_details ==⇒ 客户端信息</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 34%;\">\n<col style=\"width: 33%;\">\n<col style=\"width: 33%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">列名</th>\n<th class=\"tableblock halign-left valign-top\">类型</th>\n<th class=\"tableblock halign-left valign-top\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">client_id（主键）</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">主键,必须唯一,不能为空.\n用于唯一标识每一个客户端(client);\n在注册时必须填写(也可由服务端自动生成).\n对于不同的grant_type,该字段都是必须的.\n在实际应用中的另一个名称叫appKey,与client_id是同一个概念.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">resource_ids</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">客户端所能访问的资源id集合,多个资源时用逗号(,)分隔</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">client_secret</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">用于指定客户端(client)的访问密匙;\n在注册时必须填写(也可由服务端自动生成).\n对于不同的grant_type,该字段都是必须的.\n在实际应用中的另一个名称叫appSecret,与client_secret是同一个概念.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">scope</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">指定客户端申请的权限范围,可选值包括read,write,trust;若有多个权限范围用逗号(,)分隔,如:\n``read,write''.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">authorized_grant_types</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">指定客户端支持的grant_type,可选值包括authorization_code,password,refresh_token,implicit,client_credentials,若支持多个grant_type用逗号(,)分隔,如:\n``authorization_code,password''.\n在实际应用中,当注册时,该字段是一般由服务器端指定的,而不是由申请者去选择的,</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">web_server_redirect_uri</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">客户端的重定向URI,可为空,\n当grant_type为authorization_code或implicit时,\n在Oauth的流程中会使用并检查与注册时填写的redirect_uri是否一致.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">authorities</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">指定客户端所拥有的Spring\nSecurity的权限值,可选, 若有多个权限值,用逗号(,)分隔, 如: ``ROLE_ADMIN''</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">access_token_validity</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">INTEGER</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">设定客户端的access_token的有效时间值(单位:秒),可选,\n若不设定值则使用默认的有效时间值(60 * 60 * 12, 12小时).</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">refresh_token_validity</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">INTEGER</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">设定客户端的refresh_token的有效时间值(单位:秒),可选,\n若不设定值则使用默认的有效时间值(60 * 60 * 12, 12小时).</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">additional_information</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(4096)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">这是一个预留的字段,在Oauth的流程中没有实际的使用,可选,但若设置值,必须是JSON格式的数据,在实际应用中,\n可以用该字段来存储关于客户端的一些其他信息</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">autoapprove</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">设置用户是否自动Approval操作, 默认值为\n`false', 可选值包括 `true',`false',\n`read',`write'.该字段只适用于grant_type=``authorization_code''的情况,当用户登录成功后,若该值为’true’或支持的scope值,则会跳过用户Approve的页面,直接授权.</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>oauth_client_token ==⇒ 客户端系统中存储从服务端获取的 token 数据</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 15%;\">\n<col style=\"width: 15%;\">\n<col style=\"width: 70%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">字段名</th>\n<th class=\"tableblock halign-left valign-top\">字段类型</th>\n<th class=\"tableblock halign-left valign-top\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">token_id</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">从服务器端获取到的access_token的值.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">token</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">BLOB</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">这是一个二进制的字段,\n存储的数据是OAuth2AccessToken.java对象序列化后的二进制数据.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">authentication_id</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">该字段具有唯一性,\n是根据当前的username(如果有),client_id与scope通过MD5加密生成的.\n具体实现请参考DefaultClientKeyGenerator.java类.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">user_name</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">登录时的用户名</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">client_id</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">客户端 id</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>oauth_access_token ==⇒ 生成的 token 数据</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 15%;\">\n<col style=\"width: 15%;\">\n<col style=\"width: 70%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">字段名</th>\n<th class=\"tableblock halign-left valign-top\">字段类型</th>\n<th class=\"tableblock halign-left valign-top\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">token_id</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">从服务器端获取到的access_token的值.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">token</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">BLOB</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">存储将OAuth2AccessToken.java对象序列化后的二进制数据,\n是真实的AccessToken的数据值.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">authentication_id</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">该字段具有唯一性,\n其值是根据当前的username(如果有),client_id与scope通过MD5加密生成的.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">user_name</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">登录时的用户名,\n若客户端没有用户名(如grant_type=``client_credentials''),则该值等于client_id</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">client_id</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">客户端 id</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">authentication</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">BLOB</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">存储将 OAuth2Authentication\n对象序列化后的二进制数据.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">refresh_token</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">该字段的值是将refresh_token的值通过MD5加密后存储的.</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>oauth_refresh_token ==⇒ 刷新 token</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 15%;\">\n<col style=\"width: 15%;\">\n<col style=\"width: 70%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">字段名</th>\n<th class=\"tableblock halign-left valign-top\">字段类型</th>\n<th class=\"tableblock halign-left valign-top\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">token_id</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">该字段的值是将refresh_token的值通过MD5加密后存储的.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">token</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">BLOB</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">存储将OAuth2RefreshToken.java对象序列化后的二进制数据.</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">authentication</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">BLOB</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">存储将OAuth2Authentication.java对象序列化后的二进制数据.</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>oauth_code ==⇒ 服务端生成的 code 值</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3334%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">字段名</th>\n<th class=\"tableblock halign-left valign-top\">字段类型</th>\n<th class=\"tableblock halign-left valign-top\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">code</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">存储服务端系统生成的code的值(未加密).</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>oauth_approvals ==⇒ 授权同意信息</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3334%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">字段名</th>\n<th class=\"tableblock halign-left valign-top\">字段类型</th>\n<th class=\"tableblock halign-left valign-top\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">userId</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">用户 id</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">clientId</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">客户端 id</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">scope</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(256)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">请求的范围</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">status</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">VARCHAR(10)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">授权的状态</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">expiresAt</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">TIMESTAMP</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">时间</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">lastModifiedAt</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">TIMESTAMP</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">最后修改的时间</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最后一张 ClientDetails 是我们要自定义他的 表\n的情况，在我们需要自定义的时候使用，但是目前我们暂时不去自定义，所以无用。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以你现在的项目结构应该如下</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713182417.png\" alt=\"mysql\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>记得启动测试一下，确定不报错。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来我们就是来进行配置了，同样的，分为客户端信息配置和令牌配置</p>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_客户端信息_2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">客户端信息</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同样，对于客户端的配置我们主要实现对参数为\n<code>ClientDetailsServiceConfigurer</code> 的方法进行配置，我们需要完成以下两步：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>构建一个 jdbc 的 <code>ClientDetailsService</code>，通过他来链接数据库。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>将它配置进 <code>ClientDetailsServiceConfigurer</code> 之中。</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们首先先来配置一个 jdbc 的 <code>ClientDetailsService</code>\n，非常简单，因为他已经提供了默认的实现了的，构建方式如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">// 数据源\nprivate final @NonNull DataSource dataSource;\n\n/**\n * 声明 ClientDetails实现\n *\n * @return ClientDetailsService\n */\n@Bean\npublic ClientDetailsService clientDetails() {\n    return new JdbcClientDetailsService(dataSource);\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后将他配置进 <code>ClientDetailsServiceConfigurer</code> 之中，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\npublic void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n    clients.withClientDetails(clientDetails());\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713194015.png\" alt=\"config\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们启动并添加一条客户端信息</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713193812.png\" alt=\"添加一条数据\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>用密码模式测试一下</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713194118.png\" alt=\"test\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们用授权码模式测试一下，访问地址\n<a href=\"http://localhost:8000/oauth/authorize?response_type=code&amp;client_id=oauth2&amp;redirect_uri=http://example.com&amp;scope=all\" class=\"bare\">http://localhost:8000/oauth/authorize?response_type=code&amp;client_id=oauth2&amp;redirect_uri=http://example.com&amp;scope=all</a>\n然后登录</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713194247.png\" alt=\"login\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713194303.png\" alt=\"code\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样就获取到授权码了，这样就完成了客户端的 mysql 存储，但是现在 token\n还是存在内存中的，下面我们将它存在数据库中。</p>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_令牌存储_2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">令牌存储</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们使用 mysql\n对令牌进行存储有个最大的好处，就是在授权服务器重启后，以前下发的令牌依旧有效，不用让用户重复登录。和客户端一样配置十分简单，它主要配置参数为\n`AuthorizationServerEndpointsConfigurer 的`配置方法。同样也只需要两步：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>构建一个 jdbc 的 <code>TokenStore</code>，通过他来链接数据库。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>将它配置进 <code>AuthorizationServerEndpointsConfigurer</code> 之中。</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们先来完成第一步，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 声明 jdbc TokenStore实现\n *\n * @return JdbcTokenStore\n */\n@Bean\npublic TokenStore jdbcTokenStore() {\n    return new JdbcTokenStore(dataSource);\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后完成第二步，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\npublic void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n    endpoints.authenticationManager(this.authenticationManager)\n        .tokenStore(jdbcTokenStore());\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以现在应该是这样的</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713195102.png\" alt=\"now\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>运行测试一下，先请求下 token</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190713195157.png\" alt=\"token\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>看一下表有没有 token 存进去</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190713195304.png\" alt=\"data\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>会发现两张表的数据存进去了，来看看授权码呢？</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713195501.png\" alt=\"code\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713195644.png\" alt=\"get\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这就完成使用 mysql 存储令牌的配置。</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_基于_redis_的令牌存储\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">基于 redis 的令牌存储</h3>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>代码参见项目模块 spring-security-oauth2-authorization-redis</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>模块创建步骤省略</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们将在<strong>内存中存储和读取客户端信息</strong>以及<strong>在 redis 中存储令牌信息</strong>：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>优点</strong>：速度快，项目重启 token 依旧有效且适用于分布式场景。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>缺点</strong>：想不到。。。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>适用场景</strong>：通用。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在这之前你要添加如下的 redis 依赖</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同时修改你的配置文件：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">server:\n  port: 8000\n\n#如果有密码记得设置，没有就不管\n#spring:\n  #redis:\n    #password: 123456</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后复制一下第一个模块的内存客户端，现在的项目结构如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713200959.png\" alt=\"next\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同样我们只需要两步，配置token store，让他生效即可</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713210312.png\" alt=\"config\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>运行测试一下</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713210045.png\" alt=\"请求\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>查看下 redis</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713210107.png\" alt=\"redis\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样我们就将 token 存粗进 redis 内了！</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_基于_jwt_的令牌生成与配置\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">基于 jwt 的令牌生成与配置</h3>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>代码参见项目模块 spring-security-oauth2-authorization-jwt</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>模块创建步骤省略</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们将在<strong>内存中存储和读取客户端信息</strong>与<strong>存储令牌信息</strong>，使用 jwt\n规范化 token：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>优点</strong>：jwt 可以加密，可以携带更多的信息。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>缺点</strong>：token 会变得比较长</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>适用场景</strong>：通用。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>具体什么是 jwt，可以参考 <a href=\"https://www.jianshu.com/p/576dbf44b2ae\">什么是\nJWT – JSON WEB TOKEN</a> 这篇文章，很不错。我们要实现的就是将现在的\n<code>access_token</code> 和 <code>refresh_token</code> 两个字段使用 jwt 代替。jwt的第三部分\n<code>signature</code> 是一个签证信息，这个签证信息由三部分组成：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>header (base64后的)</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>payload (base64后的)</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>secret</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个部分需要base64加密后的header和base64加密后的payload使用\n<code>.`连接组成的字符串，然后通过header中声明的加密方式进行加盐 `secret</code>\n组合加密，然后就构成了jwt的第三部分。而 <code>secret</code>\n进行组合加密就涉及到两种加密方式：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对称加密：又称私钥加密，即信息的发送方和接收方用一个密钥去加密和解密数据。它的最大优势是加/解密速度快，适合于对大数据量进行加密，对称加密的一大缺点是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在发送密钥的过程中，密钥有很大的风险会被黑客们拦截。现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人。而在\nspring security 之中的相应的实现类是\n<code>org.springframework.security.jwt.crypto.sign.MacSigner</code></p>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Signer  jwtSigner = new MacSigner(\"hand\");//默认HMACSHA256 算法加密\nSigner  jwtSigner = new MacSigner(\"HMACSHA256\",\"hand\");//手动设置算法</code></pre>\n</div>\n</div>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>非对称加密：又称公钥密钥加密。非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public\nkey）和私钥（private\nkey）。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。在\nspring security 之中的相应实现是\n<code>org.springframework.security.jwt.crypto.sign.RsaSigner</code></p>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(new ClassPathResource(\"mytool.jks\"), \"mypass\".toCharArray());\nKeyPair demo = keyStoreKeyFactory.getKeyPair(\"mytool\");\nSigner jwtSigner = new RsaSigner((RSAPrivateKey)demo.getPrivate());</code></pre>\n</div>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们从三个方面学习：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用对称密钥生成 jwt 令牌</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用非对称密钥生成 jwt 令牌</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>为 jwt 添加更多的信息</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在现在的模块中添加如下依赖：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security.oauth.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-oauth2-autoconfigure&lt;/artifactId&gt;\n        &lt;version&gt;${spring.boot.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置文件如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">server:\n  port: 8000</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>初始化的结构应该如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713213749.png\" alt=\"client\">\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_使用对称密钥生成_jwt_令牌\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">使用对称密钥生成 jwt 令牌</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>从前面几次经验来看，应该知道要配置一个令牌的存储，最为核心的就是配置相应的\n<code>TokenStore</code> 了。配置 jwt 也是一样需要配置一个 <code>JwtTokenStore</code>，前面的\n<code>JdbcTokenStore</code> 需要的是数据源，那现在的 jwt\n需要的是什么呢？他需要一个叫做 <strong>令牌转换器</strong> 的东西，有了他我们才能够生成\njwt 格式的 token，所以我们需要如下几步：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>创建 <strong>令牌转换器</strong></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>创建 <code>JwtTokenStore</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置进 <code>AuthorizationServerEndpointsConfigurer</code></p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们先来第一步，配置令牌转换器。令牌转换器就是帮助程序在 JWT\n编码的令牌和 OAuth\n身份验证信息之间进行转换，既然我们选择对称密钥，那么我们就直接设置即可，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\npublic void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n    // 3. 配置进 AuthorizationServerEndpointsConfigurer\n    endpoints.authenticationManager(this.authenticationManager)\n        .tokenStore(tokenStore())\n        .accessTokenConverter(jwtAccessTokenConverter());\n}\n\n/**\n * 1. 令牌转换器，对称密钥加密\n *\n * @return JwtAccessTokenConverter\n */\n@Bean\npublic JwtAccessTokenConverter jwtAccessTokenConverter() {\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n    converter.setSigningKey(\"oauth2\");\n    return converter;\n}\n\n/**\n * 2. token store 实现\n *\n * @return JwtTokenStore\n */\n@Bean\npublic TokenStore tokenStore() {\n    return new JwtTokenStore(jwtAccessTokenConverter());\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>截图如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713221159.png\" alt=\"show\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>前面说了要用的是\n<code>MacSigner</code>，那么这里为什么没用呢？原因自然是已经为我们实现了，我们来看看他怎么实现的：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713221421.png\" alt=\"see\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713221459.png\" alt=\"see\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我么启动测试一下！</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713221619.png\" alt=\"test\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们去检验一下，检验网址：jwt.io</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713222003.png\" alt=\"jwt\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样就完成了对称加密的 jwt 生成</p>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_使用非对称密钥生成_jwt_令牌\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">使用非对称密钥生成 jwt 令牌</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>大多时候，我们更加需要的是一个安全的授权服务器，所以更加愿意选择\n非对称加密 来生成 jwt 令牌，现在我们来完成这件事，需要如下步骤：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>生成密钥对</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>创建 <strong>令牌转换器</strong></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>创建 <code>JwtTokenStore</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置进 <code>AuthorizationServerEndpointsConfigurer</code></p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们首先利用 keytool 进行密钥对的生成</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">➜  resources git:(master) ✗ pwd\n/home/echo/IdeaProjects/spring-security-oauth2-demo/spring-security-oauth2-authorization-jwt/src/main/resources\n➜  resources git:(master) ✗ keytool -genkey -alias oauth2 -keyalg RSA -keystore oauth2.jks -keysize 2048\n输入密钥库口令:\n再次输入新口令:\n您的名字与姓氏是什么?\n  [Unknown]:  oauth2\n您的组织单位名称是什么?\n  [Unknown]:  oauth2\n您的组织名称是什么?\n  [Unknown]:  oauth2\n您所在的城市或区域名称是什么?\n  [Unknown]:  oauth2\n您所在的省/市/自治区名称是什么?\n  [Unknown]:  oauth2\n该单位的双字母国家/地区代码是什么?\n  [Unknown]:  oauth2\nCN=oauth2, OU=oauth2, O=oauth2, L=oauth2, ST=oauth2, C=oauth2是否正确?\n  [否]:  y\n\n输入 &lt;oauth2&gt; 的密钥口令\n        (如果和密钥库口令相同, 按回车):\n再次输入新口令:\n\nWarning:\nJKS 密钥库使用专用格式。建议使用 \"keytool -importkeystore -srckeystore oauth2.jks -destkeystore oauth2.jks -deststoretype pkcs12\" 迁移到行业标准格式 PKCS12。\n➜  resources git:(master) ✗ keytool -importkeystore -srckeystore oauth2.jks -destkeystore oauth2.jks -deststoretype pkcs12\n输入源密钥库口令:\n已成功导入别名 oauth2 的条目。\n已完成导入命令: 1 个条目成功导入, 0 个条目失败或取消\n\nWarning:\n已将 \"oauth2.jks\" 迁移到 Non JKS/JCEKS。将 JKS 密钥库作为 \"oauth2.jks.old\" 进行了备份。</code></pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713223524.png\" alt=\"keytool\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>下面就是生成公钥：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">keytool -list -rfc --keystore oauth2.jks | openssl x509 -inform pem -pubkey</code></pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713223957.png\" alt=\"public\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在应该有如下两个文件</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713224200.png\" alt=\"files\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来配置增强器这些</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\npublic void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n    endpoints.authenticationManager(this.authenticationManager)\n        .tokenStore(tokenStore())\n        .accessTokenConverter(jwtAccessTokenConverter());\n}\n\n/**\n * 令牌转换器，非/对称密钥加密\n *\n * @return JwtAccessTokenConverter\n */\n@Bean\npublic JwtAccessTokenConverter jwtAccessTokenConverter() {\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n    //  对称密钥加密\n    //  converter.setSigningKey(\"oauth2\");\n    KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(\n        new ClassPathResource(\"oauth2.jks\"), \"123456\".toCharArray());\n    converter.setKeyPair(keyStoreKeyFactory.getKeyPair(\"oauth2\"));\n    return converter;\n}\n\n/**\n * token store 实现\n *\n * @return JwtTokenStore\n */\n@Bean\npublic TokenStore tokenStore() {\n    return new JwtTokenStore(jwtAccessTokenConverter());\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713224547.png\" alt=\"config\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后接下来我们进行测试，请求数据：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713225046.png\" alt=\"res\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>进行校验</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713225329.png\" alt=\"v\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>请注意提示框内的提示信息</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Public Key or Certificate. Enter it in plain text only if you want to\nverify a token</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>公钥或证书。仅当您想验证令牌时，才以纯文本形式输入它</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Private Key. Enter it in plain text only if you want to generate a new\ntoken. The key never leaves your browser.</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>私钥。只有在希望生成新令牌时，才以纯文本形式输入它。密钥永远不会离开浏览器。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以我们只需要去复制公钥给他即可！～</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713230009.png\" alt=\"get\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713230056.png\" alt=\"ok\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样 jwt\n的非对称加密其实就完成了！～这样如果资源服务器要请求我们资源，必须要有授权服务器的公钥才能够成功通过认证得到用户信息～！</p>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_为_jwt_添加更多的信息\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">为 jwt 添加更多的信息</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>前面我们提到的一个优点就是能够添加许多自定义信息，我们就来添加一下这个自定义信息。这个时候我们就需要一个\n<strong>令牌增强器</strong>（前面的粗心打错了，，，图片改不了不好意思凑合看啦～）我们需要一个类来实现\n<code>TokenEnhancer</code> 接口，我们分为如下几步：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>实现 <code>TokenEnhancer</code> 接口</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用一个复合令牌增强器\n<code>TokenEnhancerChain</code>，循环遍历将其委托给增强器。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置进 <code>AuthorizationServerEndpointsConfigurer</code></p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\npublic class InfoTokenEnhancer implements TokenEnhancer {\n    @Override\n    public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {\n        // 创建一个自定义信息\n        Map&lt;String, Object&gt; additionalInfo = new HashMap&lt;&gt;(1);\n        // 设置值\n        additionalInfo.put(\"organization\", authentication.getName());\n        // 存进去\n        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);\n        // 返回\n        return accessToken;\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713232921.png\" alt=\"impl\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于不是很复杂的逻辑，我更加喜欢使用 lambda 来写一个匿名内部类的方式：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Bean\npublic TokenEnhancer tokenEnhancer() {\n    return (accessToken, authentication) -&gt; {\n        Map&lt;String, Object&gt; additionalInfo = new HashMap&lt;&gt;(1);\n        additionalInfo.put(\"organization\", authentication.getName());\n        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);\n        return accessToken;\n    };\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后需要配置使用一个复合令牌增强器\n<code>TokenEnhancerChain</code>，循环遍历将其委托给增强器：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();\ntokenEnhancerChain.setTokenEnhancers(\n    Arrays.asList(tokenEnhancer(), jwtAccessTokenConverter()));\n\nendpoints.tokenStore(tokenStore())\n    .tokenEnhancer(tokenEnhancerChain)\n    .authenticationManager(authenticationManager);</code></pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713233524.png\" alt=\"security\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们启动来测试一下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713233802.png\" alt=\"test\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样就完成了增强器！</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>这就是 jwt 的所有内容啦～他完全可以和 redis 令牌存储、mysql\n令牌存储一起使用！</strong></p>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_授权服务器小扩展\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">授权服务器小扩展</h3>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>代码参见项目模块 spring-security-oauth2-authorization-expansion</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>模块创建步骤省略</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>之前我们一直都是 <strong>配置如何获取客户端信息</strong> 和\n<strong>令牌的生成与存储</strong>，但其实我们还有些小的问题没有解决：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>/oauth/check_token 端点的开放</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>refresh_token 授权类型</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权码模式登录页面的自定义</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权码模式授权页面的自定义</p>\n</li>\n</ol>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>为什么叫做小扩展，因为这些问题都是不需要太多的代码就能够实现的。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在这之前我们完成模块的初始化，添加如下依赖：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security.oauth.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-oauth2-autoconfigure&lt;/artifactId&gt;\n        &lt;version&gt;${spring.boot.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置文件如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">server:\n  port: 8000</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>复制第一个项目的配置如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714001850.png\" alt=\"next\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>确保能够启动成功且在 8000 端口</p>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_oauthcheck_token_端点的开放\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">/oauth/check_token 端点的开放</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个端点的开放就要用到我们前面一直没有用的第三个方法了，参数为\n<code>AuthorizationServerSecurityConfigurer</code> 的方法，只要一句话就可以了：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\npublic void configure(AuthorizationServerSecurityConfigurer security) {\n    security\n        .checkTokenAccess(\"isAuthenticated()\");\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>利用权限表达式放行即可，测试：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714003016.png\" alt=\"check\">\n</div>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_refresh_token_授权类型\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">refresh_token 授权类型</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果我们直接去尝试，我们看看回报什么错</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714003147.png\" alt=\"image\"></span></p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714003202.png\" alt=\"token\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714003224.png\" alt=\"refresh\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们明明已经把它注册为组件了，但是还是找不到。主要原因是因为授权服务器的这里的安全需要我们自己手动注入一次，我简单看啦一波源码，发现他放在\n<code>SharedObject</code> 里面的 <code>UserDetailsService</code>\n并不是我们自己构建的，可以尝试 debug\n<code>org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration</code>\n第 83\n行，尝试几次不再授权服务器中修改都不行，只有在授权服务器中的配置修改：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\npublic void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n    endpoints.authenticationManager(this.authenticationManager)\n        .userDetailsService(userDetailsService);\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>修改后请求刷新：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714010710.png\" alt=\"refresh\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样才能成功</p>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_授权码模式登录页面的自定义\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">授权码模式登录页面的自定义</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>其实这一部分就是和 spring security\n配置自定义登录页面是一样的，如果以前使用过 spring security\n应该很快就能明白。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于授权码模式，我们重定向过去以后会有一个默认的登录页面</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714134901.png\" alt=\"login\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>但是这个登录页面有时候我们想去自定义，其实有两种方式来完成修改：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>直接使用静态文件</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用模板引擎</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>不过我们这里只说静态文件，使用模板引擎放在下面和自定义授权页面一起说。</p>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_自定义表单登录\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">自定义表单登录</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们分为两步完成：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置路径与请求</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>填充页面与修改</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们如何配置呢？其实这里使用的就是 spring security 的知识了，spring\nsecurity\n如何配置，这里就如何配置所以应该配置的类是我们之前一直复制下来的\n<code>SecurityConfig</code>：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http.formLogin()\n        // 登录页面名称，他会去寻找 resources 下的 resources 和 static 目录\n        .loginPage(\"/login.html\")\n        // 登录表单提交的路径\n        .loginProcessingUrl(\"/authorization/form\")\n        .and()\n        // 关闭 csrf 防护，因为对于我们的所有请求来说，都是需要携带身份信息的\n        .csrf().disable();\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这里要关闭 csrf 防护，关于 csrf 防护请看\n<a href=\"https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369\">这篇文章</a>，在里面提到有效防护\ncsrf 的一种方式是 <strong>在请求地址中添加 token\n并验证</strong>，我们的类似，请求地址中添加了客户端名称和回调地址进行了验证，所以可以不用单行\ncsrf 攻击问题。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们需要创建一个静态的登录页面，我从网上随便下了一个模板，存放到\n<code>resources/static</code> 目录（也可以是\n<code>resources/resources`目录，但是路径里面两个 `resources</code>\n很是奇怪，所以使用 <code>static</code>），如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714150345.png\" alt=\"html\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们运行试一下，请求授权码模式的地址如下：</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>http://localhost:8000/oauth/authorize?response_type=code&amp;client_id=oauth2&amp;redirect_uri=http://example.com≻ope=all</pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714150816.png\" alt=\"login\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>就跳转到了我们自定义的登录页面。登录尝试：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714150928.png\" alt=\"success\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>登录成功了，但是又是丑得一的授权页面，这个我们，现在我们换一个方式，使用\n模板引擎 的方式自定义。同时如何修改授权页面</p>\n</div>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_其他的登录方式\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">其他的登录方式</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring security 一样，除了表单处理，还会有其他的方式，比如\nbasic，也就是对话框登录。只需要配置一步即可：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http.httpBasic();\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714170733.png\" alt=\"basic\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_授权码模式授权页面的自定义\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">授权码模式授权页面的自定义</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于授权码模式的授权页面，我们必须使用模板引擎，因为他的基础还是 spring\nsecurity，所以摆脱不论 session\n的安全管理机制，使用模板引擎的方式有什么好处呢？</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以传递模板变量自定义很多地方</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以自定义认证逻辑</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们使用模板引擎完成两件事</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自定义登录页面</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自定义授权页面</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在这之前我们要选择一个模板引擎，我选择 <code>thymeleaf</code>，其他的如\n<code>freemarker</code> 同理，添加依赖如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>添加唉 templates 目录</p>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_登录页面\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">登录页面</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们前面说到模板引擎的一个好处就是可以配置模板变量，那么我们就来试一试自定义登录的路径。我们创建一个配置类\n<code>SecurityProperties</code>，读取配置文件：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Data\n@Configuration\n@ConfigurationProperties(\"application.security.oauth\")\npublic class SecurityProperties {\n\n    /**\n     * 登录请求的路径，默认值 /authorization/form\n     */\n    private String loginProcessingUrl = \"/authorization/form\";\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>把配置类放在安全配置之中，然后配置上去，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">private final @NonNull SecurityProperties securityProperties;\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n\n    //        静态登录页面的配置\n    http.formLogin()\n        // 登录页面名称，他会去寻找 resources 下的 resources 和 static 目录\n        // 静态页面\n        //.loginPage(\"/login.html\")\n        // 模板引擎\n        .loginPage(\"/oauth/login\")\n        // 登录表单提交的路径\n        // 静态页面\n        // .loginProcessingUrl(\"/authorization/form\")\n        // 模板引擎\n        .loginProcessingUrl(securityProperties.getLoginProcessingUrl());\n    //                .and()\n    // 关闭 csrf 防护，因为对于我们的所有请求来说，都是需要携带身份信息的\n    //                .csrf().disable();\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这次我们选择开启 csrf\n防护，因为我们现在可以有效的控制她，当然，不开启其实影响也不大。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们需要一个 <code>OauthController</code> 用来接收请求以及渲染模板</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Controller\n@RequestMapping(\"/oauth\")\n@RequiredArgsConstructor\npublic class OauthController {\n\n    private final @NonNull SecurityProperties securityProperties;\n\n    @GetMapping(\"login\")\n    public String loginView(Model model) {\n        model.addAttribute(\"action\", securityProperties.getLoginProcessingUrl());\n        return \"form-login\";\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>添加登录页面，这里就要用到模板引擎的知识了，这个就靠大家自己下去查查资料什么的了，我的如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714161400.png\" alt=\"login\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样其实就配置完成登录页面了，我们配置完授权页面一起测试把</p>\n</div>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_授权页面\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">授权页面</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们需要自定义授权的控制器。我们要做的就是写一个相同的端点\n<code>/oauth/confirm_access</code> 进行覆盖，所以就需要另外一个\n<code>controller</code>，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Controller\n@SessionAttributes(\"authorizationRequest\")  // 重要！\npublic class AuthorizationController {\n    @RequestMapping(\"/oauth/confirm_access\")\n    public ModelAndView getAccessConfirmation(Map&lt;String, Object&gt; model, HttpServletRequest request) throws Exception {\n        AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(\"authorizationRequest\");\n        ModelAndView view = new ModelAndView();\n        view.setViewName(\"authorization\");\n        view.addObject(\"clientId\", authorizationRequest.getClientId());\n        return view;\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714162324.png\" alt=\"controller\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>添加页面</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714162555.png\" alt=\"page\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>当然你也可以让他使用选择的方式，选择是否授权，我的这里没有提供拒绝的选项，</p>\n</div>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_测试\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">测试</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们运行测试一下，访问路径：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">http://localhost:8000/oauth/authorize?response_type=code&amp;client_id=oauth2&amp;redirect_uri=http://example.com≻ope=all</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn/file/2019/07/14/Peek+2019-07-14+16-48.gif\" alt=\"image\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>发现上面报错，转化 json 后如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n    \"error\" :\"access_denied\",\n    \"error_description\" : \"User denied access\"\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>用户拒绝访问，也就是用户没有同意授权，但是明明是确定授权，问题出来哪儿呢？</p>\n</div>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_解决问题\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">解决问题</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于授权控制器，它提供了一套默认的实现，具体参见\n<code>org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint#authorize</code>，有兴趣的小伙伴可以\ndebug\n一下。问题也就是在这里，我们传递的参数过去，但是却没有声明她同意的范围，也就是\n<code>scope</code> 字段，那么现在就需要传递一个 scope 同意授权的字段过去了，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Controller\n@SessionAttributes(\"authorizationRequest\")\npublic class AuthorizationController {\n    @RequestMapping(\"/oauth/confirm_access\")\n    public ModelAndView getAccessConfirmation(Map&lt;String, Object&gt; model, HttpServletRequest request) throws Exception {\n        AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(\"authorizationRequest\");\n        ModelAndView view = new ModelAndView();\n        view.setViewName(\"authorization\");\n        view.addObject(\"clientId\", authorizationRequest.getClientId());\n        // 传递 scope 过去,Set 集合\n        view.addObject(\"scopes\", authorizationRequest.getScope());\n        // 拼接一下名字\n        view.addObject(\"scopeName\", String.join(\",\", authorizationRequest.getScope()));\n        return view;\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>表单添加</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-html\" data-lang=\"html\">&lt;div class=\"wrap-input100 validate-input m-b-23\"&gt;\n    &lt;input type=\"hidden\" name=\"user_oauth_approval\" value=\"true\"&gt;\n    &lt;div style=\"display: none\" th:each=\"scope : ${scopes}\"&gt;\n        &lt;input type=\"hidden\" th:name=\"'scope.' + ${scope}\" value=\"true\"&gt;\n    &lt;/div&gt;\n    &lt;input type=\"hidden\" name=\"_csrf\" th:value=\"${_csrf.token}\"/&gt;\n&lt;/div&gt;</code></pre>\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714170307.png\" alt=\"add\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后再来测试一下</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn/file/2019/07/14/Peek+2019-07-14+17-05.gif\" alt=\"image\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样就完成啦～！</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_总结\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">总结</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这基本就是授权服务器的所有配置了，当然，只是实践性阶段，并没有涉及太多源码，后面会考虑要不要写一篇源码的说明的，但是担心自己能力不够，所以还是没敢写上去。不过这一节内容挺多的，基本上适合各种场景了，我们需要做的就是按照自己的要求来配置，其实配置文件不多不是很复杂，熟悉了就好。下面一节我们就要进入资源服务器的配置啦～！相比来说会简单一点，但是资源服务器是离不开授权服务器的，所以两者是有关系的，慢慢来吧，估计要三天左右才能写完，存货已经没啦～</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_参考资料\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">参考资料</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"http://andaily.com/spring-oauth-server/db_table_description.html\">spring\nsecurity oauth2 数据表结构</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html\">JSON\nWeb Token 入门教程 阮一峰</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://www.jianshu.com/p/576dbf44b2ae\">什么是 JWT – JSON WEB TOKEN</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369\">CSRF攻击与防御</a></p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Spring Security Oauth2 从零到一完整实践（三）授权服务器"},"pageAttributes":{"category":"spring","description":"Spring Security Oauth2 从零到一完整实践（三）授权服务器","image":"https://img.hacpai.com/bing/20180702.jpg?imageView2/1/w/960/h/540/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2019/07/14/1563096109753.html","next":{"document":{"title":"manjaro 诡异错误：键盘失灵"},"fields":{"slug":"/articles/2019/07/21/1563700292254.html"}},"previous":{"document":{"title":"Spring Security Oauth2 从零到一完整实践（二）自动配置实现"},"fields":{"slug":"/articles/2019/07/14/1563082247386.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}