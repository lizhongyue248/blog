{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2019/07/20/1563611848587.html","result":{"data":{"asciidoc":{"id":"bec1d21e-7e01-5e15-8d3f-cea022f9db05","fields":{"slug":"/articles/2019/07/20/1563611848587.html","birthTime":"2019-12-30T03:34:40.995Z","modifiedTime":"2020-04-25T06:26:21.289Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_系列文章\">系列文章</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_spring_security_oauth2_资源服务器\">Spring security oauth2 资源服务器</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_在这之前\">在这之前</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_基于普通加密的资源服务器\">基于普通加密的资源服务器</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_基于_jwt_加密的资源服务器\">基于 Jwt 加密的资源服务器</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_对称密钥\">对称密钥</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_非对称密钥\">非对称密钥</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_总结\">总结</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>注意注意：本文章适用于5.3以前的spring security以及spring boot 2.3.x\n以前的 oauth，以下内容应该为过时！spring 提供新的 oauth2\n授权服务器，目前正在https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update[实验性阶段]，同时资源服务器由\noauth 模块迁移到 spring security 之内。</strong></p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们使用安全框架的最大意义就在于保护我们的资源，让我们的资源能够在我们希望他被访问到的时候才能够被访问，而存放我们资源的地方就是资源服务器。前面已经说过，资源服务器是围绕着授权服务器进行的，在\noauth2\n中当有了授权服务器以后，才会有资源服务器，这样说虽然有点绝对，但是如果没有授权服务器，资源服务器其实也就没有太大的存在意义的了，那么还不如就作为一个普通的\nWeb\n应用即可。我们现在的任务就是来学习如何自定义配置我们的资源服务器，同以前一样，我们通过实践的方式来了解他。</p>\n</div>\n<div class=\"exampleblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>GitHub 地址： <a href=\"https://github.com/lizhongyue248/spring-security-oauth2-demo\">spring-security-oauth2-demo</a></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>博客地址： <a href=\"https://echocow.cn\">echocow.cn</a></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_系列文章\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">系列文章</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/14/1563082088646.html\">较为详细的学习\noauth2 的四种模式其中的两种授权模式</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/14/1563082247386.html\">spring boot\noauth2 自动配置实现</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/14/1563096109754.html\">spring\nsecurity oauth2 授权服务器配置</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring security oauth2 资源服务器配置</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/30/1564498598952.html\" class=\"bare\">https://echocow.cn/articles/2019/07/30/1564498598952.html</a><sub class=\"spring\nsecurity oauth2 自定义授权模式（手机、邮箱等）\">~</sub>~</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2020/01/20/1579503807596.html\">spring\nsecurity oauth2 踩坑记录</a></p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_spring_security_oauth2_资源服务器\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Spring security oauth2 资源服务器</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>一般来说资源服务器同时也是我们的客户端，为什么这么说呢？因为客户端存在的前提就是需要有资源服务器提供资源，这个关系往往都是一对一的，对于\nWeb 应用，他们之间应该有如下关系：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>客户端：前端应用，携带 client id 去请求授权服务器获取授权码。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>资源服务器：后端应用，一般会在这里存放 client\nsecret，这样用户就不会得到 client 相关的密钥或者凭证，使用 client id 和\nclient secret\n向授权服务器对凭证进行验证和解析，所以通常来说资源服务器也是作为客户端的存在。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>专门的资源服务器为客户端提供受保护的资源。而且在请求令牌凭证的时候，就已经指定了当前客户端信息，但是对于前端应用，为了安全不会存放\nclient\nsecret，因为前端基本是全部暴露在用户面前的，所以资源服务器也充当客户端，用来存放相应的客户端信息。在请求资源的时候也需要说明客户端信息，这个时候的客户端信息为了安全，都是存放在授权服务器之中的，所以可以理解成如下图：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190718170329.png\" alt=\"授权码模式\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以这就是为什么授权码模式安全性最高的原因之一，一方面他拥有严密的流程，另一方面他的授权是在授权服务器上完成，客户端只需要提供\nclient id 就可以而不需要其他的，用户也就只知道 client id 而不知 client\nsecret\n了；所以更加安全。如果是密码模式，<strong>你需要自定义自己的一套登录流程然后向授权服务器请求授权才可以</strong>，不能够直接让用户从前端应用向授权服务器请求授权，因为完全可以从请求头中截取你的客户端信息。密码模式如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190718174912.png\" alt=\"不安全的密码模式\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190718175533.png\" alt=\"密码模式\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>所以我们在配置资源服务器的时候需要同时配置一个客户端</strong>。我们来再次看看资源服务器的详细步骤：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>向授权服务器请求获取 token（即凭证）</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>向授权服务器验证并解析 token 获取用户信息</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>资源服务器验证用户是否有权限访问此资源</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这一切都是以一台授权服务器为前提的，所以我们需要先为他准备一台授权服务器。我们可以直接使用我们上篇文章说到的那些授权服务器，不过有些许改变。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_在这之前\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">在这之前</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在这之前我们需要为已经有的授权服务器添加一个非常主要的端点：<strong>check_token</strong></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在所有的授权模块中（如： <code>spring-security-oauth2-authorization</code> ）的\n<code>Oauth2AuthorizationServerConfig</code>\n授权服务器配置添加如下方法，具体作用参见上一篇文章的最后一部分。</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\npublic void configure(AuthorizationServerSecurityConfigurer security) {\n    security\n        .checkTokenAccess(\"isAuthenticated()\");\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样我们就能够访问 <code>check_token</code>\n端点，<strong>资源服务器就能够向授权服务器验证并解析 token 获取用户信息</strong>。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来我们来创建我们资源服务器模块，创建方式和授权服务器中是一样的，不再赘述。模块名称为\n<code>spring-security-oauth2-resource</code>\n，同授权服务器一样，资源服务器的关键接口为 <code>ResourceServerConfigurer</code>\n，而他的适配器为 <code>ResourceServerConfigurerAdapter</code>\n，我们只需要继承他的适配器即可，他有如下两个方法：</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 10%;\">\n<col style=\"width: 15%;\">\n<col style=\"width: 75%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">方法名</th>\n<th class=\"tableblock halign-left valign-top\">参数类型</th>\n<th class=\"tableblock halign-left valign-top\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">configure</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">ResourceServerSecurityConfigurer</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">资源服务器的属性配置，默认值应该适用于许多应用程序，但可能至少要更改资源\nID。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">configure</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">HttpSecurity</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">使用此项配置安全资源的访问规则。默认情况下，不在 <code>“/oauth/**”</code>\n中的所有资源是受保护的。这个其实就是和 <code>`spring security</code>\n的配置方式是一样的。</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>相比起授权服务器好理解许多。同时需要明白的一点是，对于资源服务器，提供了两种验证与解析令牌的方式：</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 10%;\">\n<col style=\"width: 10%;\">\n<col style=\"width: 25%;\">\n<col style=\"width: 55%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">解析方式</th>\n<th class=\"tableblock halign-left valign-top\">实现类</th>\n<th class=\"tableblock halign-left valign-top\">优点</th>\n<th class=\"tableblock halign-left valign-top\">缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">本地解析</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>DefaultTokenServices</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">解析快速，不需要发送任何请求，可以配置令牌存储等。</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">一旦授权服务器令牌解析方式发生调整，本地也要进行调整。向资源服务器/客户端提供令牌解析方式是极其不安全的行为。</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">远程解析</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><code>RemoteTokenServices</code></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">资源服务器配置大大减少，方便快捷，自适应授权服务器变化。</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">受网络的影响，一旦两个服务器不再一个局域网内，效率会大大降低。</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然而在实际的授权服务器中，我们将会采用的是第二种 远程解析\n的方式，最主要的原因是因为他足够安全。所以我们主要分为两个部分来学习资源服务器：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>基于普通加密的资源服务器</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>基于 jwt 加密的资源服务器</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_基于普通加密的资源服务器\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">基于普通加密的资源服务器</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对应的授权服务器模块为：spring-security-oauth2-authorization</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对应的资源服务器模块为：spring-security-oauth2-resource</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权服务器需添加 check_token 端点支持。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>资源服务器依赖如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.security.oauth.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-security-oauth2-autoconfigure&lt;/artifactId&gt;\n            &lt;version&gt;${spring.boot.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们先创建一个启动类如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@SpringBootApplication\npublic class ResourceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ResourceApplication.class, args);\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>而作为资源服务器，我们肯定是需要准备一个受保护的资源的，所以我们创建一个\n<code>controller</code> 如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@RestController\n@RequestMapping(\"/auth\")\npublic class OauthController {\n\n    /**\n     * 获取当前登录的用户信息\n     *\n     * @param principal 用户信息\n     * @return http 响应\n     */\n    @GetMapping(\"/me\")\n    public HttpEntity&lt;?&gt; oauthMe(Principal principal) {\n        return ResponseEntity.ok(principal);\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同授权服务器一样，资源服务器的关键接口为 <code>ResourceServerConfigurer</code>\n，而他的适配器为 <code>ResourceServerConfigurerAdapter</code>\n，我们只需要继承他的适配器即可，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Configuration\n@EnableResourceServer\npublic class Oauth2ResourceServerConfig extends ResourceServerConfigurerAdapter {\n\n    @Override\n    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {\n        // 设置资源服务器的 id\n        resources.resourceId(\"oauth2\");\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最后来添加我们的配置文件 <code>application.yml</code> ，分别指定了如下参数：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>资源服务器的启动端口在 <code>9000</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>资源服务器检查和解析用户信息的路径在\n<code><a href=\"http://localhost:8000/oauth/check_token\" class=\"bare\">http://localhost:8000/oauth/check_token</a></code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>客户端获取令牌的位置 <code><a href=\"http://localhost:8000/oauth/token\" class=\"bare\">http://localhost:8000/oauth/token</a></code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>客户端信息</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">server:\n  port: 9000\n\nsecurity:\n  oauth2:\n    resource:\n      token-info-uri: http://localhost:8000/oauth/check_token\n    client:\n      access-token-uri: http://localhost:8000/oauth/token\n      client-id: oauth2\n      client-secret: oauth2 # 这里必须是加密前的密钥\n      grant-type: authorization_code,password,refresh_token\n      scope: all</code></pre>\n</div>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>Q：在授权服务器中，我们继承了`AuthorizationServerConfigurerAdapter`\n并注入之后，在配置文件中的配置就不会自动生效了，在授权服务器之中同理，那么我们为什么还要配置\n<code>token-info-uri</code> 呢？</strong></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>A：主要原因是因为 <code>token-info-uri</code>\n不仅是在资源服务器中使用的。我们资源服务器在向授权服务器发送请求的时候需要一个\n<code>RestTemplate</code> (具体作用请自行百度)，而 <code>spring oauth2</code> 将创建的这个\n<code>RestTemplate</code> 存放在了\n<code>org.springframework.security.oauth2.provider.token.RemoteTokenServices</code>\n内，在这里又使用了 <code>token-info-uri</code> ，具体源码见\n<code>org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfiguration</code>\n如下：</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以看到他创建的时候又使用了我们的 <code>token-info-uri</code>\n，所以这里我们配置出来的是为了配置这个自动的远程服务，我们用来发送的请求都是它来完成的。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>Q：上一步的源码中看到了给他设置了 客户端 id 和\n客户端密钥，但是在资源服务器的配置中我们并没有配置，而是配置的是 client\n客户端的配置，他怎么设置进去的呢？</strong></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>A：我们还是从源码说起，直接上图：</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以看到是有这两个属性的，但是使用 <code>@JsonIgnore</code> 进行忽视了，同时没有\n<code>set</code>\n方法，所以我们无法设置，那么它是来自于哪里呢？那就只有构造函数了，在哪儿设置的呢？源码如下：</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以看到注入了 <code>client</code> 的配置文件然后直接把 <code>id</code> 和 <code>secret</code>\n使用构造方法放进去了，所以我们配置 <code>client</code> 就可以了 ～！</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以我们现在的目录结构应该如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720135426.png\" alt=\"files\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们启动测试一下，启动两个项目，</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们直接访问一下受保护的资源看看：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720140745.png\" alt=\"get\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>401 未授权，我们需要提供相应的授权凭证。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们现在要获取凭证，也就是\ntoken，第一步要先去获取授权码，获取授权码的过程是在授权服务器中完成的，访问如下路径：localhost:8000/oauth/authorize?response_type=code&amp;client_id=oauth2&amp;redirect_uri=http://example.com&amp;scope=all</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后登录授权流程就不截图啦，和授权服务器是一样的，这个过程你应该要注意的是\nurl ，他一直在的是 <code>8000</code> 端口的服务器上，最后取到授权码：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720140224.png\" alt=\"code\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>携带授权码去获取 token</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>注意：在实际应用中，回调地址应该自动接收获取到授权码然后发送给资源服务器，资源服务器请求授权服务器获取\ntoken，这个过程应该要在资源服务器完成，对用户不可见</strong>。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720140237.png\" alt=\"token\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后携带 token 去请求我们的资源服务器资源</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720140334.png\" alt=\"token\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样我们就请求到了具体的数据啦，这就是使用了远程的方式，变得非常简单！不需要配置任何\ntoken 相关的东西 ～</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_基于_jwt_加密的资源服务器\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">基于 Jwt 加密的资源服务器</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对应的授权服务器模块为：spring-security-oauth2-authorization-jwt</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对应的资源服务器模块为：spring-security-oauth2-resource-jwt</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>同样，在授权服务器中我们要添加 check_token 端点的访问权限。</strong></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们先来初始化我们的项目，其实就是把上一个的复制过来即可 =-=\n不过对于资源的 id 改成了从配置文件读取，配置文件如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">server:\n  port: 9000\n\nsecurity:\n  oauth2:\n    resource:\n      token-info-uri: http://localhost:8000/oauth/check_token\n      id: oauth2\n    client:\n      access-token-uri: http://localhost:8000/oauth/token\n      client-id: oauth2\n      client-secret: oauth2\n      grant-type: authorization_code,password,refresh_token\n      scope: all</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最终项目结构如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720150340.png\" alt=\"config\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>而同样，对于 jwt\n有两种，分别是对称密钥加密以及非对称密钥加密，我们也要一个一个来。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_对称密钥\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">对称密钥</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们首先改一下授权服务器使用对称密钥加密，\n<code>Oauth2AuthorizationServerConfig</code> 如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 令牌转换器，非/对称密钥加密\n *\n * @return JwtAccessTokenConverter\n */\n@Bean\npublic JwtAccessTokenConverter jwtAccessTokenConverter() {\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n    //  对称密钥加密\n    converter.setSigningKey(\"oauth2\");\n    //  非对称密钥加密\n    //  KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(\n    //          new ClassPathResource(\"oauth2.jks\"), \"123456\".toCharArray());\n    //  converter.setKeyPair(keyStoreKeyFactory.getKeyPair(\"oauth2\"));\n    return converter;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于 jwt 有两种配置方式</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自动配置</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>手动配置</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自动配置很简单，配置文件添加：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">security:\n  oauth2:\n    resource:\n      jwt:\n        key-value: oauth2</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>就可以了。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于手动配置，也很简单，添加如下 bean 然后配置进去即可</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置一个本地的令牌转化器，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Bean\npublic JwtAccessTokenConverter jwtAccessTokenConverter() {\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n    converter.setSigningKey(\"oauth2\");\n    return converter;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后将它配置进去</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 远程服务\n */\nprivate @NonNull RemoteTokenServices remoteTokenServices;\n\n/**\n * 配置文件\n */\nprivate @NonNull ResourceServerProperties resourceServerProperties;\n\n@Override\npublic void configure(ResourceServerSecurityConfigurer resources) throws Exception {\n    remoteTokenServices.setAccessTokenConverter(jwtAccessTokenConverter());\n    // 设置资源服务器的 id,从配置文件中读取\n    resources.resourceId(resourceServerProperties.getResourceId())\n        .tokenServices(remoteTokenServices);\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>截图如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720152104.png\" alt=\"next\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们测试一下，使用密码模式请求 token：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720152151.png\" alt=\"get\">\n</div>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720152156.png\" alt=\"get\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样就成功了。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_非对称密钥\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">非对称密钥</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们首先改一下授权服务器使用非对称密钥加密，\n<code>Oauth2AuthorizationServerConfig</code> 如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 令牌转换器，非/对称密钥加密\n *\n * @return JwtAccessTokenConverter\n */\n@Bean\npublic JwtAccessTokenConverter jwtAccessTokenConverter() {\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n    //  对称密钥加密\n    //  converter.setSigningKey(\"oauth2\");\n    //  非对称密钥加密\n    KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(\n        new ClassPathResource(\"oauth2.jks\"), \"123456\".toCharArray());\n    converter.setKeyPair(keyStoreKeyFactory.getKeyPair(\"oauth2\"));\n    return converter;\n}\n\n/**\n * 资源服务器所需，后面会讲\n * 具体作用见本系列的第二篇文章授权服务器最后一部分\n * 具体原因见本系列的第三篇文章资源服务器\n *\n * @param security security\n */\n@Override\npublic void configure(AuthorizationServerSecurityConfigurer security) {\n    security\n        // 能够验证和解析 token\n        .checkTokenAccess(\"isAuthenticated()\")\n        // 能够访问我们的公钥\n        .tokenKeyAccess(\"isAuthenticated()\");\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这里我们需要 <code>tokenKeyAccess(\"isAuthenticated()\")</code> 能够访问\n<code>/oauth/token_key</code> 端点，启动授权服务器可以直接通过浏览器访问\n<a href=\"http://localhost:8000/oauth/token_key\" class=\"bare\">http://localhost:8000/oauth/token_key</a></p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720154348.png\" alt=\"key\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于资源服务器，我们需要授权服务器提供给我们公钥，我们能够通过请求获取到授权服务器的\n公钥了，有两种方式获取公钥：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权服务器下发，本地存储，本地读取</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>直接从授权服务器请求获取</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>当然，我们也有两种方式</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自动配置</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>手动配置</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自动配置就是添加配置文件即可：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">server:\n  port: 9000\n\nsecurity:\n  oauth2:\n    resource:\n      token-info-uri: http://localhost:8000/oauth/check_token\n      id: oauth2\n      jwt:\n        key-uri: http://localhost:8000/oauth/token_key\n        # 如果没有配置这项，会自动联网获取\n        key-value: |\n          -----BEGIN PUBLIC KEY-----\n          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiNMiywFLjao8P86kkhwu\n          49Ycys35RRZaKgqZ6JNtbgFq5dCA2kBtdArhm2GS2zplOyPGDlog3r9Ka2jA33Pf\n          A9vl60zq1oI1AAAd8CLnyTvIekCnpwaGeBfYFv++LwhWPPT617XVhmF46c25F29t\n          tMnGuzHzqKprysgdfBaIXUKZkMeVudGSLPgR0RjZvcM8MMs1cZ1rAISRgIT/D1RL\n          Do/HhQkKOvhW2IrQgrqrgu+R/V+7AqS6dz/YAdroYpcBoXKSai+HtZ6yTDxrWdxh\n          pbaTCvW2M/IObYVZaHpdOYNTufOzR6+w4SXagT++OopWEQ8w1vLKQzHk+uTrBfzQ\n          kQIDAQAB\n          -----END PUBLIC KEY-----\n    client:\n      access-token-uri: http://localhost:8000/oauth/token\n      client-id: oauth2\n      client-secret: oauth2\n      grant-type: authorization_code,password,refresh_token\n      scope: all</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>手动配置比较麻烦。。。配置如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Override\n    public void configure(ResourceServerSecurityConfigurer resources) {\n        resources.resourceId(resourceServerProperties.getResourceId())\n                .tokenServices(tokenServices());\n    }\n\n    @Bean\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(jwtAccessTokenConverter());\n    }\n\n    @Bean\n    public JwtAccessTokenConverter jwtAccessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setVerifierKey(getPubKey());\n        return converter;\n    }\n\n    @Bean\n    @Primary\n    public DefaultTokenServices tokenServices() {\n        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();\n        defaultTokenServices.setTokenStore(tokenStore());\n        return defaultTokenServices;\n    }\n\n    private String getPubKey() {\n       return StringUtils.isEmpty(resourceServerProperties.getJwt().getKeyValue())\n               ? getKeyFromAuthorizationServer()\n               : resourceServerProperties.getJwt().getKeyValue();\n    }\n\n    private String getKeyFromAuthorizationServer() {\n        ObjectMapper objectMapper = new ObjectMapper();\n        HttpHeaders httpHeaders = new HttpHeaders();\n        httpHeaders.add(\"Authorization\", encodeClient());\n        HttpEntity&lt;String&gt; requestEntity = new HttpEntity&lt;&gt;(null, httpHeaders);\n        String pubKey = new RestTemplate()\n                .getForObject(resourceServerProperties.getJwt().getKeyUri(), String.class, requestEntity);\n        try {\n            Map map = objectMapper.readValue(pubKey, Map.class);\n            System.out.println(\"联网公钥\");\n            return map.get(\"value\").toString();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private String encodeClient() {\n        return \"Basic \" + Base64.getEncoder().encodeToString((resourceServerProperties.getClientId()\n                + \":\" + resourceServerProperties.getClientSecret()).getBytes());\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>示例里面没有写，我写在了另外一个示例项目里面，参见\n<a href=\"https://github.com/gzmuSoft/resource-server\">资源服务器示例</a>。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>测试就不测试了。。。效果一样的。。好累了的说。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_总结\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">总结</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>资源服务器简单太多拉，因为需要做的复杂操作都在授权服务器上去做了，所以资源服务器其实事情没多少，但是里面的自动配置还是帮我们完成了很多事情。简单太多了，接下来就涉及到源码的一些东西了，这次拖了一周才写完，主要是要写开题报告，而且云顶之亦真香哈哈哈。</p>\n</div>\n</div>\n</div>","document":{"title":"Spring Security Oauth2 从零到一完整实践（四）资源服务器"},"pageAttributes":{"category":"spring","description":"Spring Security Oauth2 从零到一完整实践（四）资源服务器","image":"https://img.hacpai.com/bing/20180622.jpg?imageView2/1/w/960/h/540/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2019/07/20/1563611848587.html","next":{"document":{"title":"2019，最后的轻狂"},"fields":{"slug":"/articles/2019/12/31/1577769144050.html"}},"previous":{"document":{"title":"Spring Security Oauth2 从零到一完整实践（五） 自定义授权模式（手机、邮箱等）"},"fields":{"slug":"/articles/2019/07/30/1564498598952.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}