{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2019/07/30/1564498598952.html","result":{"data":{"asciidoc":{"id":"11089f9a-7efd-5384-88a9-906ffae647ab","fields":{"slug":"/articles/2019/07/30/1564498598952.html","birthTime":"2019-07-30T14:56:39.003Z","modifiedTime":"2020-04-25T06:27:10.706Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_系列文章\">系列文章</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_spring_security_oauth2_授权模式\">Spring security oauth2 授权模式</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_验证码\">验证码</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_自定义端点\">自定义端点</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_添加授权模式\">添加授权模式</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_验证码_2\">验证码</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_获取验证码\">获取验证码</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_验证验证码\">验证验证码</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_小修改\">小修改</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_回顾\">回顾</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_自定义端点_2\">自定义端点</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_url_设计\">URL 设计</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_自定义_controller\">自定义 <code>controller</code></a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_按照_spring_security_的流程\">按照 <code>spring security</code> 的流程</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_推荐添加授权模式\">推荐：添加授权模式</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_添加验证码验证\">添加验证码验证</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_总结\">总结</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>注意注意：本文章适用于5.3以前的spring security以及spring boot 2.3.x\n以前的 oauth，以下内容应该为过时！spring 提供新的 oauth2\n授权服务器，目前正在https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update[实验性阶段]，同时资源服务器由\noauth 模块迁移到 spring security 之内。</strong></p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>很多时候我们需要做自定义的操作，这些自定义的操作能够让框架更加的符合我们的项目需求。那么对于\nSpring secruity oauth2\n来说，自定义的过程是怎么样的呢？这一节我们就来详细探讨下。</p>\n</div>\n<div class=\"exampleblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>GitHub 地址： <a href=\"https://github.com/lizhongyue248/spring-security-oauth2-demo\">spring-security-oauth2-demo</a></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>博客地址： <a href=\"https://echocow.cn\">echocow.cn</a></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_系列文章\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">系列文章</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/14/1563082088646.html\">较为详细的学习\noauth2 的四种模式其中的两种授权模式</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/14/1563082247386.html\">spring boot\noauth2 自动配置实现</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/14/1563096109754.html\">spring\nsecurity oauth2 授权服务器配置</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2019/07/20/1563611848587.html\">spring\nsecurity oauth2 资源服务器配置</a></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring security oauth2 自定义授权模式（手机、邮箱等）</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><a href=\"https://echocow.cn/articles/2020/01/20/1579503807596.html\">spring\nsecurity oauth2 踩坑记录</a></p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_spring_security_oauth2_授权模式\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Spring security oauth2 授权模式</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在我们前面学习与使用授权服务器的时候，我们使用到他的授权端点的三种授权模式</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权码模式</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>密码模式</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>刷新授权（注意：RFC 中只有四种，是没有这个的，这是 Spring security\noauth2 自己添加的）</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>除了这三种还有两种授权模式：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>客户端模式</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>简化模式</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>当然这两种授权模式要不太过简单不够安全要不就是只适合一些特殊场景，所以我没有提到。那么我们希望再添加自己的授权模式呢？比如我们希望通过手机或者邮箱来完成认证（手机验证码、邮箱验证码），这个怎么完成呢？对于这种情况，我们提供两种方式来完成：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>添加自定义端点，单独的授权</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>原有基础上，添加授权模式，强烈推荐</p>\n</li>\n</ol>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>内容较长，如果你只希望知道如何添加授权模式，可以直接查看最后的\n<a href=\"https://echocow.cn/articles/2019/07/30/1564498598952.html#b3_solo_h2_18\">推荐：添加授权模式</a></p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>两种方式各有好坏，不过在那之前，我们需要做一件事：验证码。对于手机或者邮箱，我们都是只能够通过验证码的方式进行验证，最主要的原因是用来确认用户身份的。在数据手机或者邮箱后，要提供相应的手机验证码和邮箱验证码进行验证方可，所以\n<strong>发送-验证</strong> 这个过程 是必不可少，我们接下来就来一步一步的分析，</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_验证码\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">验证码</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>手机和邮箱登录的过程无非就是需要用户填入手机号或者邮箱号，然后我们下发一条短信或者一封邮件，内容就是验证码，然后授权授权服务器验证用户输入的验证码是否是我们发送的即可</strong>。我们用一张图来诠释前后端分离的情况下验证码的流程</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726173141.png\" alt=\"验证码\">\n</div>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>用户请求得到登录页面，前端负责</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>用户填写手机号完毕</p>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>点击前端获取验证码按钮</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>向资源服务器发出验证码获取请求</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>资源服务器在内网<strong>携带客户端信息</strong>向授权服务器请求验证码</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权服务器生成验证码然后存入 Redis 或者内存中</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>返回生成结果(可省，一般来说，我们需要向一个运营商申请短信接口，在发短信验证码时如果等待发送结果会造成用户等待时间过长，所以一般不进行等待，如果获取失败，就让用户再获取一次即可)</p>\n</li>\n</ol>\n</div>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>用户获取验证码，完成表单填写</p>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>资源服务器<strong>携带客户端</strong>信息向授权服务器请求验证</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>返回结果</p>\n</li>\n</ol>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个过程比较复杂的就是需要授权服务器作为一个中间人，为什么要这样呢？<strong>在上一篇文章中其实就提过，就是为了保护我们应用的\n客户端信息（即加密后的客户端 id\n和客户端密钥）</strong>。资源服务器是在我们服务器上的，所以由资源服务器发起请求是不会暴露的，但是如果在前端发起就会暴露在用户面前了。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个过程在授权服务器中需要完成什么呢？</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>获取验证码</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>验证验证码</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们来看看第一步的流程图</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726181157.png\" alt=\"one\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这一步很简单，就是一个 Controller\n就可以完成。但是我们可以发现，出来类型不同，他们其他的房的操作都是相同的，包括生成验证码，存入验证码。那么其实不同的就是如何生成的问题了，这就可以将它抽象出来了。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们来看看第二步的流程图</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726181417.png\" alt=\"two\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这一步相对来说多一些流程，我们需要判断一下当前登录的请求是否是需要验证验证码的，然后选择和事验证码处理器金喜处理与验证，当我们验证通过了以后，才将它放行出去，如果不通过直接打回去就可以了。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>具体实现后面我们具体再说。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_自定义端点\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">自定义端点</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如何理解自定义端点呢？很简单，就是我们直接新建一个端点。我们可以通过过滤器或者控制器直接创建一个新的端点，然后当他需要手机授权的时候访问这个端点即可，在此端点中完成整个验证、生成凭证的过程。比如我们需要的两个端点</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>手机授权的端点我们设置为 <code>/oauth/sms</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>邮箱授权的端点我们设置为 <code>/oauth/email</code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>那么当我们需要进行授权的时候直接请求相应的授权端口即可。自定义端点我们提供两种方式实现：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自己定义 <code>controller</code> 完成</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>按照 <code>spring security</code> 的流程完成授权</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>第一种方式是最简单最快捷的方式，第二种方式比较规范化。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_添加授权模式\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">添加授权模式</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>添加授权模式就是在原来的端点 <code>/oauth/token</code>\n上，我们需要添加新的授权类型，即 <code>grant_type</code> 参数应该要多一个 <code>sms</code>\n或者 <code>email</code> 。这个十分好理解，例如对于授权码模式，我们参数如下：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>grant_type —— 必须为 <code>authorization_code</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>code</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>redirect_uri</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>client_id</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>scope</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于我们的 sms 或者 email 应该如下：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>grant_type —— 必须为 <code>sms</code> 或者 <code>email</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>code</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>client_id</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>scope</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个是最为标准的实现。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_验证码_2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">验证码</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>前面说到，验证码需要两个步骤才能够完成：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>获取验证码</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>验证验证码</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们一步一步的来，不过在那之前我们需要创建一个新的模块来完成任务。我们的扩展主要是要在授权服务器上完成的，所以我们就需要创建一个授权服务器。</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>本节代码见模块：spring-security-oauth2-authorization-more-grant-type</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>模块添加如下依赖：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security.oauth.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-oauth2-autoconfigure&lt;/artifactId&gt;\n        &lt;version&gt;${spring.boot.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们需要添加 Redis 依赖，来对验证码进行存储。我们的代码可以直接把\n<code>spring-security-oauth2-authorization</code>\n模块的复制过来改一下就可以，初始的代码结构如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190727220838.png\" alt=\"all\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>记得启动一下项目确保她不会报错且 8000 端口能够正常访问，\n接下来我们再来完成我们接下来的事儿。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_获取验证码\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">获取验证码</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们再来回顾一下流程图：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726181157.png\" alt=\"one\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>按照流程图我们需要如下几步：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>提供验证码处理器</strong></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>获取验证码类型</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们一步一步的完成</p>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_提供验证码处理器\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">提供验证码处理器</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们需要提供相应的验证码处理器来对验证码进行处理，我们前面提到流程的时候说过，<strong>整个验证码的过程除了会因为验证码类型不同会选用不同的处理器去完成，其余的操作都一样的</strong>。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以我们可以考虑使用设计模式来增加我们系统的扩展性。需要考虑如下的点：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>面向接口编程</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>开放封闭原则</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>提供相同行为的不同实现</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>提取公共部分代码，子类扩展不同部分</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>前面三点很好的符合了 <strong>策略设计模式</strong> 的特点，而第四点则是比较适合\n<strong>模板方法模式</strong>，那么我们就将他们结合来用，来完成我们的验证码处理器。两种设计模式的具体作用请自行查找。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们先准备一个接口，即\n<strong>抽象策略</strong>，各种不同的验证码类型以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，用来进行验证码处理：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public interface ValidateCodeProcessor {\n\n    /**\n     * 创建验证码\n     *\n     * @param request 请求\n     * @throws Exception 异常\n     */\n    void create(ServletWebRequest request) throws Exception;\n\n    /**\n     * 验证验证码\n     *\n     * @param request 请求\n     */\n    void validate(ServletWebRequest request);\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们定义一个抽象的 <strong>模板方法</strong>\n来实现这个抽象策略，<strong>对于公共部分，就是我们的生成和保存操作，最后的发送操作是需要我们自己去自定义的</strong>，所以我们交由子类来实现：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 模板方法实现抽象策略\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/28 下午9:48\n */\npublic abstract class AbstractValidateCodeProcessor implements ValidateCodeProcessor {\n    @Override\n    public void create(ServletWebRequest request) throws Exception {\n        String validateCode = generate(request);\n        save(request, validateCode);\n        send(request, validateCode);\n    }\n\n    @Override\n    public void validate(ServletWebRequest request) {\n\n    }\n\n    /**\n     * 发送验证码，由子类实现\n     *\n     * @param request      请求\n     * @param validateCode 验证码\n     */\n    protected abstract void send(ServletWebRequest request, String validateCode);\n\n    /**\n     * 保存验证码，保存到 redis 中\n     *\n     * @param request      请求\n     * @param validateCode 验证码\n     */\n    private void save(ServletWebRequest request, String validateCode) {\n\n    }\n\n    /**\n     * 生成验证码\n     *\n     * @param request 请求\n     * @return 验证码\n     */\n    private String generate(ServletWebRequest request) {\n        return null;\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于不同的实现，比如手机验证码，就来继承这个抽象的策略就行了，也就是\n<strong>具体策略</strong>，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\n@RequiredArgsConstructor\npublic class SmsValidateCodeProcessor extends AbstractValidateCodeProcessor {\n\n    @Override\n    protected void send(ServletWebRequest request, String validateCode) {\n        System.out.println(request.getHeader(\"sms\") +\n                \"手机验证码发送成功，验证码为：\" + validateCode);\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于邮箱验证码呢？同样的，继承这个抽象策略就好了，他就是另外一种\n<strong>具体策略</strong>，如下</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\n@RequiredArgsConstructor\npublic class EmailValidateCodeProcessor extends AbstractValidateCodeProcessor {\n\n    @Override\n    protected void send(ServletWebRequest request, String validateCode) {\n        System.out.println(request.getHeader(\"email\") +\n                \"邮箱验证码发送成功，验证码为：\" + validateCode);\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>具体策略我就做了打印，因为我并没有引入相应的 API 和依赖</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在的代码如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728221036.png\" alt=\"code\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>接下来我们需要做的事情就是完善抽象策略中的公共方法</strong>，包括：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>生成验证码</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>保存验证码</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>验证验证码（后面再说）</p>\n</li>\n</ol>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_生成验证码\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">生成验证码</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>遵循面向对象的单一职责原则，对象不应该承担太多职责，我们为了解除耦合，独立出他的接口来，创建一个接口如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 验证码生成\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/28 下午10:17\n */\npublic interface ValidateCodeGenerator {\n    /**\n     * 生成验证码\n     *\n     * @param request 请求\n     * @return 生成结果\n     */\n    String generate(ServletWebRequest request);\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后对于不同的验证码使用不同的生成策略，先引入一个以前写的随机字符串生成器如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 随机生成 验证码\n *\n * @author echo\n * @version 1.0\n * @date 19-5-20 15:45\n */\npublic class RandomCode {\n    private static final char[] MORE_CHAR = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n    private static final Random RANDOM = new Random();\n\n    /**\n     * 随机生成验证码\n     *\n     * @param length 长度\n     * @param end    结束长度\n     * @return 结果\n     */\n    private static String random(Integer length, Integer end) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i &lt; length; i++) {\n            result.append(MORE_CHAR[RANDOM.nextInt(end)]);\n        }\n        return result.toString();\n    }\n\n    /**\n     * 随机生成验证码\n     *\n     * @param length  长度\n     * @param onlyNum 是否只要数字\n     * @return 结果\n     */\n    public static String random(Integer length, Boolean onlyNum) {\n        return onlyNum ? random(length, 10) : random(length, MORE_CHAR.length);\n    }\n\n    /**\n     * 随机生成验证码\n     *\n     * @param length 长度\n     * @return 结果\n     */\n    public static String random(Integer length) {\n        return random(length, false);\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>创建 <code>ValidateCodeGenerator</code> 的手机、邮箱实现类如下</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 手机验证码生成器\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/28 下午10:23\n */\n@Component\npublic class SmsValidateCodeGenerator implements ValidateCodeGenerator {\n\n    @Override\n    public String generate(ServletWebRequest request) {\n        // 定义手机验证码生成策略，可以使用 request 中从请求动态获取生成策略\n        // 可以从配置文件中读取生成策略\n        return RandomCode.random(4, true);\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 邮箱验证码生成器\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/28 下午10:23\n */\n@Component\npublic class EmailValidateCodeGenerator implements ValidateCodeGenerator {\n\n    @Override\n    public String generate(ServletWebRequest request) {\n        return RandomCode.random(6);\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>修改抽象策略中的生成方法如下：（代码很简单就不赘述了）</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    /**\n     * 收集系统中所有的 {@link ValidateCodeGenerator} 接口实现。\n     */\n    @Autowired\n    private Map&lt;String, ValidateCodeGenerator&gt; validateCodeGenerators;\n\n\n    /**\n     * 生成验证码\n     *\n     * @param request 请求\n     * @return 验证码\n     */\n    private String generate(ServletWebRequest request) {\n        String type = getValidateCodeType(request);\n        String componentName = type + ValidateCodeGenerator.class.getSimpleName();\n        ValidateCodeGenerator generator = validateCodeGenerators.get(componentName);\n        if (Objects.isNull(generator)) {\n            throw new ValidateCodeException(\"验证码生成器 \" + componentName + \" 不存在。\");\n        }\n        return generator.generate(request);\n    }\n\n    /**\n     * 根据请求 url 获取验证码类型\n     *\n     * @return 结果\n     */\n    private String getValidateCodeType(String uri) {\n        String uri = request.getRequest().getRequestURI();\n        int index = uri.lastIndexOf(\"/\") + 1;\n        return uri.substring(index).toLowerCase();\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>当然，我自定义了一个异常，专门处理验证码的：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/28 下午10:34\n */\npublic class ValidateCodeException extends RuntimeException {\n    public ValidationException(String message) {\n        super(message);\n    }\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect4\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h5 id=\"_保存验证码\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">保存验证码</h5>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这里就无非是操作 Redis 了，写一个 <code>repository</code> 就可以了：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 验证码资源处理\n *\n * @author echo\n * @date 2019/7/28 下午10:44\n */\npublic interface ValidateCodeRepository {\n\n    /**\n     * 保存\n     *\n     * @param request 请求\n     * @param code    验证码\n     * @param type    类型\n     */\n    void save(ServletWebRequest request, String code, String type);\n\n    /**\n     * 获取\n     *\n     * @param request 请求\n     * @param type    类型\n     * @return 验证码\n     */\n    String get(ServletWebRequest request, String type);\n\n    /**\n     * 移除\n     *\n     * @param request 请求\n     * @param type    类型\n     */\n    void remove(ServletWebRequest request, String type);\n\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后一个实现类，代码很简单，就不赘述了。</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * redis 验证码操作\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/28 下午10:44\n */\n@Component\n@RequiredArgsConstructor\npublic class ValidateCodeRepositoryImpl implements ValidateCodeRepository {\n\n    private final @NonNull RedisTemplate&lt;String, String&gt; redisTemplate;\n\n    @Override\n    public void save(ServletWebRequest request, String code, String type) {\n        redisTemplate.opsForValue().set(buildKey(request, type), code,\n                //  有效期可以从配置文件中读取或者请求中读取\n                Duration.ofMinutes(10).getSeconds(), TimeUnit.SECONDS);\n    }\n\n    @Override\n    public String get(ServletWebRequest request, String type) {\n        return redisTemplate.opsForValue().get(buildKey(request, type));\n    }\n\n    @Override\n    public void remove(ServletWebRequest request, String type) {\n        redisTemplate.delete(buildKey(request, type));\n    }\n\n    private String buildKey(ServletWebRequest request, String type) {\n        String deviceId = request.getHeader(type);\n        if (StringUtils.isEmpty(deviceId)) {\n            throw new ValidateCodeException(\"请求中不存在邮箱号\");\n        }\n        return \"code:\" + type + \":\" +  deviceId;\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后注入到抽象策略中直接使用就好了：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    @Autowired\n    private ValidateCodeRepository validateCodeRepository;\n\n    /**\n     * 保存验证码，保存到 redis 中\n     *\n     * @param request      请求\n     * @param validateCode 验证码\n     */\n    private void save(ServletWebRequest request, String validateCode) {\n        validateCodeRepository.save(request,validateCode,getValidateCodeType(request));\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样我们的验证码处理器就算完成一部分了，关于对验证码进行验证我们后面再说，现在我们的目录结构应该是这样的：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728225506.png\" alt=\"code\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_获取验证码类型\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">获取验证码类型</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这一步非常简单，提供一个 控制器 即可，我们先编写一个空的控制器如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 动态获取验证码\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/28 下午10:57\n */\n@RestController\n@RequiredArgsConstructor\npublic class ValidateCodeController {\n\n    /**\n     * 通过 type 进行查询到对应的处理器\n     * 同时创建验证码\n     *\n     * @param request  请求\n     * @param response 响应\n     * @param type     验证码类型\n     * @throws Exception 异常\n     */\n    @GetMapping(\"/code/{type}\")\n    public void creatCode(HttpServletRequest request, HttpServletResponse response,\n                          @PathVariable String type) throws Exception {\n        //\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>但是我们怎么指导是哪个来具体策略来处理呢？这里其实就是策略模式中的\n<strong>环境类</strong>，在这里决定使用哪一个具体的策略，我们创建一个 <strong>策略分发器</strong>\n来完成这件事，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 验证码处理分发\n *\n * 通过传递过来的类型，从已经依赖注入容器中搜寻符合名称的组件。\n * 直接通过名称获取对应的 {@link ValidateCodeProcessor} 实现类\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/28 下午10:59\n */\n@Component\n@RequiredArgsConstructor\npublic class ValidateCodeProcessorHolder {\n\n    private final @NonNull Map&lt;String, ValidateCodeProcessor&gt; validateCodeProcessors;\n\n    /**\n     * 通过验证码类型查找\n     *\n     * @param type 验证码类型\n     * @return 验证码处理器\n     */\n    ValidateCodeProcessor findValidateCodeProcessor(String type) {\n        String name = type.toLowerCase() + ValidateCodeProcessor.class.getSimpleName();\n        ValidateCodeProcessor processor = validateCodeProcessors.get(name);\n        if (Objects.isNull(processor)){\n            throw new ValidateCodeException(\"验证码处理器\" + name + \"不存在\");\n        }\n        return processor;\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们在控制器那里调用一下就可以了：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    private final @NonNull ValidateCodeProcessorHolder validateCodeProcessorHolder;\n\n    /**\n     * 通过 type 进行查询到对应的处理器\n     * 同时创建验证码\n     *\n     * @param request  请求\n     * @param response 响应\n     * @param type     验证码类型\n     * @throws Exception 异常\n     */\n    @GetMapping(\"/code/{type}\")\n    public void createCode(HttpServletRequest request, HttpServletResponse response,\n                          @PathVariable String type) throws Exception {\n        validateCodeProcessorHolder.findValidateCodeProcessor(type)\n                .create(new ServletWebRequest(request, response));\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们测试一下访问：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728230609.png\" alt=\"get\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后查看控制台</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728230619.png\" alt=\"console\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>再去看看 Redis</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728230634.png\" alt=\"reids\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以看到验证码已经保存进去并且生成了的。</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_验证验证码\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">验证验证码</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来我们需要做的就是验证验证码的过程了，再来回顾一遍流程图</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726181417.png\" alt=\"two\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以我们需要通过过滤器来实现，如果是手机或邮箱登录请求，我们就需要检验是否有验证码；如果不是，就放行。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以第一步我们就需要创建这么一个过滤器：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 验证码过滤器。\n *\n * &lt;p&gt;继承于 {@link OncePerRequestFilter} 确保在一次请求只通过一次filter&lt;/p&gt;\n * &lt;p&gt;需要配置指定拦截路径，默认拦截 POST 请求&lt;/p&gt;\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/28 下午11:15\n */\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class ValidateCodeFilter extends OncePerRequestFilter {\n\n    private final @NonNull ValidateCodeProcessorHolder validateCodeProcessorHolder;\n    private Map&lt;String, String&gt; urlMap = new HashMap&lt;&gt;();\n    private AntPathMatcher antPathMatcher = new AntPathMatcher();\n\n    @Override\n    public void afterPropertiesSet() throws ServletException {\n        super.afterPropertiesSet();\n        // 路径拦截\n        urlMap.put(\"/oauth/sms\", \"sms\");\n        urlMap.put(\"/oauth/email\", \"email\");\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String validateCodeType = getValidateCodeType(request);\n        if (!StringUtils.isEmpty(validateCodeType)) {\n            try {\n                log.info(\"请求需要验证！验证请求：\" + request.getRequestURI() + \" 验证类型：\" + validateCodeType);\n                validateCodeProcessorHolder.findValidateCodeProcessor(validateCodeType)\n                        .validate(new ServletWebRequest(request, response));\n            } catch (Exception e) {\n                e.printStackTrace();\n                return;\n            }\n        }\n        filterChain.doFilter(request, response);\n    }\n\n    private String getValidateCodeType(HttpServletRequest request) {\n        if (HttpMethod.POST.matches(request.getMethod())) {\n            Set&lt;String&gt; urls = urlMap.keySet();\n            for (String url : urls) {\n                // 如果路径匹配，就回去他的类型，也就是 map 的 value\n                if (antPathMatcher.match(url, request.getRequestURI())) {\n                    return urlMap.get(url);\n                }\n            }\n        }\n        return null;\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来我们就要去完成 验证 的具体逻辑了，回到我们的 <strong>抽象策略</strong> 中来：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    @Override\n    public void validate(ServletWebRequest request) {\n        String type = getValidateCodeType(request);\n        String code = validateCodeRepository.get(request, type);\n        // 验证码是否存在\n        if (Objects.isNull(code)) {\n            throw new ValidateCodeException(\"获取验证码失败，请检查输入是否正确或重新发送！\");\n        }\n        // 验证码输入是否正确\n        if (!code.equalsIgnoreCase(request.getParameter(\"code\"))) {\n            throw new ValidateCodeException(\"验证码不正确，请重新输入！\");\n        }\n        // 验证通过后，清除验证码\n        validateCodeRepository.remove(request, type);\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>非常简单的验证逻辑，最后我们创建一个控制器来测试：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@RestController\n@RequestMapping(\"/oauth\")\npublic class Oauth2Controller {\n\n    @PostMapping(\"/sms\")\n    public HttpEntity&lt;?&gt; sms() {\n        return ResponseEntity.ok(\"ok\");\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来就是把我们写好的过滤器添加到 Spring security 中的过滤链里去：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    private final @NonNull ValidateCodeFilter validateCodeFilter;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .authorizeRequests()\n                // 添加路径\n                .antMatchers(\"/oauth/sms\").access(\"permitAll()\")\n                .antMatchers(\"/oauth/email\").access(\"permitAll()\")\n                .antMatchers(\"/code/*\").permitAll()\n                .anyRequest()\n                .authenticated()\n                // 务必关闭 csrf，否则除了 get 请求，都会报 403 错误\n                .and()\n                .csrf().disable();\n\n        // 添加过滤器\n        http\n                .addFilterBefore(validateCodeFilter, AbstractPreAuthenticatedProcessingFilter.class);\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们来测试一下，先是启动后，请求验证码：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173032.png\" alt=\"1\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>去控制台看看验证码多少</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173059.png\" alt=\"2\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后携带者设备号和验证码去请求一下测试接口 <code>/oauth/sms</code></p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173121.png\" alt=\"3\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>验证码<span class=\"image\"><img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173137.png\" alt=\"2\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>成功</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173148.png\" alt=\"3\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>看看控制台：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173207.png\" alt=\"5\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来我们再请求一次看看：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173240.png\" alt=\"6\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以看到控制台报错了</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><span class=\"image\"><img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173306.png\" alt=\"image\"></span></p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们对于异常处理可以创建一个授权失败的异常处理器，然后将它用来接收所有的授权失败的异常。这个我们后面再来说。现在的代码结构如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729180157.png\" alt=\"all\">\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_小修改\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">小修改</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来我们要修改前面的一个地方，前面我们的手机号和邮箱号是从请求头中获取的，我们应该从请求体中获取，修改\n<code>ValidateCodeRepositoryImpl</code> 类</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    private String buildKey(ServletWebRequest request, String type) {\n        String deviceId = request.getParameter(type);\n        if (StringUtils.isEmpty(deviceId)) {\n            throw new ValidateCodeException(\"请求中不存在 \" + type);\n        }\n        return \"code:\" + type + \":\" + deviceId;\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>再修改具体的策略如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\npublic class EmailValidateCodeProcessor extends AbstractValidateCodeProcessor {\n\n    @Override\n    protected void send(ServletWebRequest request, String validateCode) {\n        System.out.println(request.getParameter(\"email\") +\n                \"邮箱验证码发送成功，验证码为：\" + validateCode);\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Component\npublic class SmsValidateCodeProcessor extends AbstractValidateCodeProcessor {\n\n    @Override\n    protected void send(ServletWebRequest request, String validateCode) {\n        System.out.println(request.getParameter(\"sms\") +\n                \"手机验证码发送成功，验证码为：\" + validateCode);\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样我们就修改完毕了。另外我们修改一下现在的测试 <code>controller</code>\n，以防止后面的冲突了。修改 <code>Oauth2Controller</code> 为\n<code>SmsValidateCodeController</code> ，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@RestController\n@RequestMapping(\"/auth\")\npublic class SmsValidateCodeController {\n\n    @PostMapping(\"/sms\")\n    public HttpEntity&lt;?&gt; sms() {\n        return ResponseEntity.ok(\"ok\");\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>修改安全配置 <code>SecurityConfig</code></p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .authorizeRequests()\n                .antMatchers(\"/code/*\").access(\"permitAll()\")\n                .antMatchers(\"/auth/sms\").access(\"permitAll()\")\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable();\n\n\n        http\n                .addFilterBefore(validateCodeFilter, AbstractPreAuthenticatedProcessingFilter.class);\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后 <code>ValidateCodeFilter</code> 过滤器中的路径拦截也修改一下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    @Override\n    public void afterPropertiesSet() throws ServletException {\n        super.afterPropertiesSet();\n        // 路径拦截\n        urlMap.put(\"/auth/sms\", \"sms\");\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>修改完毕后务必再测试一次！现在的目录结构如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729182947.png\" alt=\"now\">\n</div>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_回顾\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">回顾</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在我们的验证码也算完成了，回顾一下，我们的类图是这样的</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190729174454.png\" alt=\"uml\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们整理下如下图：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190729175414.png\" alt=\"uml\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个过程就好理解了：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>ValidateCodeController</code>\n：决策器，用来决定使用哪一个抽象策略的，同时接收用户请求。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>ValidateCodeProcessor</code> ：抽象策略接口</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>AbstractValidateCodeProcessor</code>\n：抽象策略实现类，定义了模板方法和抽象策略</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><code>ValidateCodeGenerator</code> ：抽象策略接口，不同的实现类是不同的具体策略</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>其余的都是具体的实现类了。这样我们的一个可扩展的验证码就完成了，当我们需要扩展新的验证码时就简单多了，直接实现新的\n<code>AbstractValidateCodeProcessor</code> 子类和 <code>ValidateCodeGenerator</code>\n接口就可以了。后面我们会做一些改变，具体后面再说。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在我们已经有的验证码端点如下：</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3333%;\">\n<col style=\"width: 33.3334%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\">类型</th>\n<th class=\"tableblock halign-left valign-top\">请求 url</th>\n<th class=\"tableblock halign-left valign-top\">请求参数-请求体</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">获取手机验证码</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">/code/sms</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">sms</p></td>\n</tr>\n<tr>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">获取邮箱验证码</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">/code/email</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">email</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_自定义端点_2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">自定义端点</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们接下来需要的是添加手机和邮箱登录，我们首先采取的是自定义端点的方式，也就是添加新的端点来接收手机和邮箱验证码的请求。我们前面说到，有两种方式来进行实现</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>定义 <code>controller</code> 完成</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>按照 <code>spring security oauth2</code> 的流程完成授权</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>第一种较为容易理解且简单，第二种则比较规范化，完全按照他的规范来实现。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_url_设计\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">URL 设计</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在那之前我们要先进行 url 的设计。</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于我们自己定义 <code>controller</code> 来完成的端点</p>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>手机登录： <code>/custom/sms</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>邮箱登录： <code>/custom/email</code></p>\n</li>\n</ul>\n</div>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于按照 <code>spring security</code> 的流程来完成的端点</p>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>手机登录： <code>/oauth/sms</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>邮箱登录： <code>/oauth/email</code></p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们来一个一个学习和尝试。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_自定义_controller\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">自定义 <code>controller</code></h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>顾名思义，我们需要自己创建 <code>controller</code>\n来完成授权，我们先完成不使用验证码的，也就是不加入过滤器中的。创建如下\n<code>controller</code> ：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 自定义 controller 授权端点\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/29 下午6:40\n */\n@Slf4j\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/custom\")\npublic class CustomToken {\n\n    @PostMapping(\"/{type}\")\n    public HttpEntity&lt;?&gt; auth(HttpServletRequest request, @PathVariable String type) {\n        return ResponseEntity.ok(type);\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们这个请求应该是要被验证码的过滤器给拦截的，但是我们现在先不拦截以方便测试。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>如果请求能够到达这个`controller`\n那就代表着他已经通过了验证码过滤器验证了，这个时候的请求是已经登录成功了的，所以我们应该直接给他下发\ntoken</strong>。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>下发 token 的前提就是创建 token，这个 token\n怎么创建的呢？我们来看源码，他的 token 创建的核心类是\n<code>org.springframework.security.oauth2.provider.token.DefaultTokenServices</code>\n在这里你可以找到一个 <code>createAccessToken</code>\n方法。但是这个方法需要我们传递一个类型为 <code>OAuth2Authentication</code>\n的参数；而构建 <code>OAuth2Authentication</code> 我们需要 <code>OAuth2Request</code> 和\n<code>Authentication</code> 这两个参数；而构建 <code>OAuth2Request</code> 需要使用\n<code>TokenRequest#createOAuth2Request</code> 进行构建，构建 <code>Authentication</code>\n需要我们去用它的子类 <code>UsernamePasswordAuthenticationToken</code>\n来构建；而构建 <code>TokenRequest</code> 需要客户端信息，构建\n<code>UsernamePasswordAuthenticationToken</code> 需要 <code>UserDetails</code> ；而构建\n<code>UserDetails</code> 需要 <code>UserDetailsService</code> ，然后注入即可。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个过程有点复杂，我们用一张图来解释：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190729214030.png\" alt=\"all\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以步骤应该如下：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>从请求中获取客户端信息，然后通过 <code>ClientDetailsService</code> 构建为\n<code>ClientDetails</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过上一步的 <code>ClientDetails</code> 构建令牌请求 <code>TokenRequest</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过第一、二步的 <code>ClientDetails</code> 和 <code>TokenRequest</code> 构建 oauth2\n令牌请求 <code>OAuth2Request</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过 <code>UserDetailsService</code> 获取当前手机/邮箱号对应用户信息\n<code>UserDetails</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过 <code>UserDetails</code> 构建 <code>Authentication</code> 的实现类\n<code>UsernamePasswordAuthenticationToken</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过第三、五步的 <code>OAuth2Request</code> 和 <code>Authentication</code> 构建 oauth2\n身份验证授权 <code>OAuth2Authentication</code></p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过上一步的 <code>OAuth2Authentication</code> 和\n<code>AuthorizationServerTokenServices</code> 创建 <code>token</code></p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这些从源码就可以看得出来，只是有些地方层次比较深，需要仔细一点去看看他的具体实现类。由于这个系列以实践为主，所以不会带大家一步一步去找和阅读源码。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在我们开始来写代码，修改我们的类最后如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Slf4j\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/custom\")\npublic class CustomToken {\n\n    private final @NonNull UserDetailsService userDetailsService;\n    private final @NonNull ClientDetailsService clientDetailsService;\n    private final @NonNull PasswordEncoder passwordEncoder;\n    private final @NonNull AuthorizationServerTokenServices authorizationServerTokenServices;\n\n    @PostMapping(\"/{type}\")\n    public HttpEntity&lt;?&gt; auth(HttpServletRequest request, @PathVariable String type) {\n        // 判断是否是我们自定义的授权类型\n        if (!type.equalsIgnoreCase(\"sms\") &amp;&amp; !type.equalsIgnoreCase(\"email\")) {\n            throw new UnsupportedGrantTypeException(\"Unsupported grant type: \" + type);\n        }\n\n        log.info(type + \" login succeed！\");\n        // 1. 获取客户端认证信息\n        String header = request.getHeader(\"Authorization\");\n        if (header == null || !header.toLowerCase().startsWith(\"basic \")) {\n            throw new UnapprovedClientAuthenticationException(\"请求头中无客户端信息\");\n        }\n\n        // 解密请求头\n        String[] client = extractAndDecodeHeader(header);\n        if (client.length != 2) {\n            throw new BadCredentialsException(\"Invalid basic authentication token\");\n        }\n        String clientId = client[0];\n        String clientSecret = client[1];\n\n        // 获取客户端信息进行对比判断\n        ClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);\n        if (clientDetails == null) {\n            throw new UnapprovedClientAuthenticationException(\"客户端信息不存在：\" + clientId);\n        } else if (!passwordEncoder.matches(clientSecret, clientDetails.getClientSecret())) {\n            throw new UnapprovedClientAuthenticationException(\"客户端密钥不匹配\" + clientSecret);\n        }\n        // 2. 构建令牌请求\n        TokenRequest tokenRequest = new TokenRequest(new HashMap&lt;&gt;(0), clientId, clientDetails.getScope(), \"custom\");\n        // 3. 创建 oauth2 令牌请求\n        OAuth2Request oAuth2Request = tokenRequest.createOAuth2Request(clientDetails);\n        // 4. 获取当前用户信息\n        UserDetails userDetails = userDetailsService.loadUserByUsername(request.getParameter(type));\n        // 5. 构建用户授权令牌\n        Authentication authentication = new UsernamePasswordAuthenticationToken(\n                userDetails.getUsername(), userDetails.getPassword(), userDetails.getAuthorities());\n        // 6. 构建 oauth2 身份验证令牌\n        OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(oAuth2Request, authentication);\n        // 7. 创建令牌\n        OAuth2AccessToken accessToken = authorizationServerTokenServices.createAccessToken(oAuth2Authentication);\n        return ResponseEntity.ok(accessToken);\n    }\n\n\n    /**\n     * 对请求头进行解密以及解析\n     *\n     * @param header 请求头\n     * @return 客户端信息\n     */\n    private String[] extractAndDecodeHeader(String header) {\n        byte[] base64Token = header.substring(6).getBytes(StandardCharsets.UTF_8);\n        byte[] decoded;\n        try {\n            decoded = Base64.getDecoder().decode(base64Token);\n        } catch (IllegalArgumentException e) {\n            throw new BadCredentialsException(\n                    \"Failed to decode basic authentication token\");\n        }\n        String token = new String(decoded, StandardCharsets.UTF_8);\n        int delimiter = token.indexOf(\":\");\n\n        if (delimiter == -1) {\n            throw new BadCredentialsException(\"Invalid basic authentication token\");\n        }\n        return new String[]{token.substring(0, delimiter), token.substring(delimiter + 1)};\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>每一步代码我都做了详细的解释，就不赘述了。</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Q：为什么有些异常信息是英文的，有些异常信息是中文的？</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>A：英文的是 Spring\n原本就有的，也就是当出现同样的错误的时候是相同的描述；中文的是因为由我自己自定义的异常信息，Spring\n里是没有的，我希望更加详细，所以使用中文的。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们添加一个手机用户，在 <code>SecurityConfig</code> 中配置：</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>更好的设计是：我们创建 UserDetailsService 的实现类时，自定义一个\n<code>SmsUserDetailsService</code> 接口，然实现他的抽象方法 <code>loadUserBySms</code>\n，通过这个方法来加载手机用户，这样会更好。不过这已经属于这篇教程之外的东西了，这里从简。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    @Bean\n    @Override\n    public UserDetailsService userDetailsService() {\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(User.withUsername(\"user\")\n                .password(passwordEncoder().encode(\"123456\"))\n                .authorities(\"ROLE_USER\").build());\n        manager.createUser(User.withUsername(\"admin\")\n                .password(passwordEncoder().encode(\"admin\"))\n                .authorities(\"ROLE_ADMIN\").build());\n        manager.createUser(User.withUsername(\"13712341234\")\n                .password(passwordEncoder().encode(\"123456\"))\n                .authorities(\"ROLE_ADMIN\").build());\n        return manager;\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>此时没有添加验证码过滤，我们来测试一下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729220020.png\" alt=\"test\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>已经获取到了，这种方式就算完成了。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_按照_spring_security_的流程\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">按照 <code>spring security</code> 的流程</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>请确保在看这种模式之前，你能够理解上一种授权模式的整个流程，这节不再赘述</strong>\n。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>请注意：这里是按照 <code>spring security</code> 的流程，并不是\n<code>spring security oauth2</code> 的流程来实现的，不能弄混淆。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这里就比较复杂，对于上一种方式，我们只要理清如何生成令牌就好了，但是着一种方式要在理清上一种方式的基础上，扩展\nSpring security oauth2\n的授权模式；也就是还需要我们去了解到他是如何决策使用哪一种授权模式的。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同样，我会直接带大家来如何使用。在 Spring security\n中，实现登录校验与授权的过程核心是使用过滤器，通过过滤器对登录请求进行拦截，当是登录请求时，就做处理。而我们过滤器需要继承\n<code>org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter</code>\n这个类，它是<strong>基于浏览器的 HTTP\n身份验证请求的抽象处理器</strong>，我们可以参考他的子类\n<code>UsernamePasswordAuthenticationFilter</code>\n来写我们自己的过滤器。在那之前，我画一张图，让大家更好的理解整个授权过程：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190730123909.png\" alt=\"auth\">\n</div>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>过滤器拦截请求，验证请求参数，构建相应的令牌对象\n<code>SmsAuthenticationToken</code> 。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权管理器 <code>AuthenticationManager</code> 的子类 <code>ProviderManager</code>\n对令牌进行授权。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权的时候会去查找 <code>AuthenticationProvider</code> 的实现类，我们提供了\n<code>SmsAuthenticationProvider</code> 来实现。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过在 <code>AuthenticationProvider</code> 使用 <code>UserDetailsService</code>\n查找用户信息，如果找到就授权成功。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>授权成功后，将授权信息交给授权成功处理器\n<code>AuthenticationSuccessHandler</code> 进行处理，构建 token。</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这个过程相比起来要复杂一点，因为我们需要自己建一些实现类，总结下来如下：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>继承 <code>AbstractAuthenticationProcessingFilter</code> 的过滤器</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>继承 <code>AbstractAuthenticationToken</code> 的令牌请求</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>实现 <code>AuthenticationProvider</code> 的授权提供者</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>继承 <code>AbstractAuthenticationToken</code> 的成功处理器</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置过滤器、成功处理器等</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们一步一步的来，先是过滤器：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 短信登录授权过滤器\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/29 下午10:50\n */\npublic class SmsAuthenticationFilter extends AbstractAuthenticationProcessingFilter {\n\n    SmsAuthenticationFilter() {\n        // 需要拦截的路径\n        super(new AntPathRequestMatcher(\"/oauth/sms\", HttpMethod.POST.name()));\n    }\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request,\n                                                HttpServletResponse response) throws AuthenticationException {\n        if (!HttpMethod.POST.matches(request.getMethod())) {\n            throw new AuthenticationServiceException(\n                    \"Authentication method not supported: \" + request.getMethod());\n        }\n        // 获取参数\n        String sms = obtainSms(request);\n        sms = sms == null ? \"\" : sms.trim();\n        // 我们需要创建我们自己的授权 token\n        SmsAuthenticationToken authRequest = new SmsAuthenticationToken(sms);\n        setDetails(request, authRequest);\n        // 授权管理器对请求进行授权\n        return this.getAuthenticationManager().authenticate(authRequest);\n    }\n\n    /**\n     * 获取请求中的 sms 值\n     *\n     * @param request 正在为其创建身份验证请求\n     * @return 请求中的 sms 值\n     */\n    private String obtainSms(HttpServletRequest request) {\n        return request.getParameter(\"sms\");\n    }\n\n    /**\n     * 提供以便子类可以配置放入 authentication request 的 details 属性的内容\n     *\n     * @param request     正在为其创建身份验证请求\n     * @param authRequest 应设置其详细信息的身份验证请求对象\n     */\n    private void setDetails(HttpServletRequest request,\n                            SmsAuthenticationToken authRequest) {\n        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>再是创建我们自己的授权请求 <code>SmsAuthenticationToken</code></p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 这里你完全可以使用 {@link UsernamePasswordAuthenticationToken}，他完全满足需求\n * 只是为了简单和统一，我改个名字并且去掉了 凭证 这个字段\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/29 下午10:53\n */\npublic class SmsAuthenticationToken extends AbstractAuthenticationToken {\n\n    private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;\n\n    private final Object principal;\n\n    SmsAuthenticationToken(Object phone) {\n        super(null);\n        this.principal = phone;\n        setAuthenticated(false);\n    }\n\n    SmsAuthenticationToken(Object principal, Collection&lt;? extends GrantedAuthority&gt; authorities) {\n        super(authorities);\n        this.principal = principal;\n        super.setAuthenticated(true);\n    }\n\n    @Override\n    public Object getCredentials() {\n        return null;\n    }\n\n    @Override\n    public Object getPrincipal() {\n        return this.principal;\n    }\n\n    @Override\n    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n        if (isAuthenticated) {\n            throw new IllegalArgumentException(\n                    \"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead\");\n        }\n        super.setAuthenticated(false);\n    }\n\n    @Override\n    public void eraseCredentials() {\n        super.eraseCredentials();\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来就是授权提供者 <code>SmsAuthenticationProvider</code></p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 授权提供者\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/29 下午10:57\n */\n@Setter\npublic class SmsAuthenticationProvider implements AuthenticationProvider {\n\n    private UserDetailsService userDetailsService;\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        SmsAuthenticationToken authenticationToken = (SmsAuthenticationToken) authentication;\n        // 获取用户信息\n        UserDetails user = userDetailsService.loadUserByUsername(authenticationToken.getPrincipal().toString());\n        if (user == null) {\n            throw new InternalAuthenticationServiceException(\"无效认证\");\n        }\n        SmsAuthenticationToken authenticationResult = new SmsAuthenticationToken(user, user.getAuthorities());\n        authenticationResult.setDetails(authenticationToken.getDetails());\n        return authenticationResult;\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; authentication) {\n        // 通过类型进行匹配\n        return SmsAuthenticationToken.class.isAssignableFrom(authentication);\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最后就是授权成功处理器，在这里生成\ntoken，所以直接复制上一种模式的生成方法即可：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/29 下午11:03\n */\n@Slf4j\n@Component\n@SuppressWarnings(\"Duplicates\")\n@RequiredArgsConstructor\npublic class SmsSuccessHandler implements AuthenticationSuccessHandler {\n\n    private final @NonNull ClientDetailsService clientDetailsService;\n    private final @NonNull PasswordEncoder passwordEncoder;\n    private final @NonNull AuthorizationServerTokenServices authorizationServerTokenServices;\n    private final @NonNull ObjectMapper objectMapper;\n\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException {\n\n        log.info(\"Login succeed！\");\n        // 1. 获取客户端认证信息\n        String header = request.getHeader(\"Authorization\");\n        if (header == null || !header.toLowerCase().startsWith(\"basic \")) {\n            throw new UnapprovedClientAuthenticationException(\"请求头中无客户端信息\");\n        }\n\n        // 解密请求头\n        String[] client = extractAndDecodeHeader(header);\n        if (client.length != 2) {\n            throw new BadCredentialsException(\"Invalid basic authentication token\");\n        }\n        String clientId = client[0];\n        String clientSecret = client[1];\n\n        // 获取客户端信息进行对比判断\n        ClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);\n        if (clientDetails == null) {\n            throw new UnapprovedClientAuthenticationException(\"客户端信息不存在：\" + clientId);\n        } else if (!passwordEncoder.matches(clientSecret, clientDetails.getClientSecret())) {\n            throw new UnapprovedClientAuthenticationException(\"客户端密钥不匹配\" + clientSecret);\n        }\n        // 2. 构建令牌请求\n        TokenRequest tokenRequest = new TokenRequest(new HashMap&lt;&gt;(0), clientId, clientDetails.getScope(), \"custom\");\n        // 3. 创建 oauth2 令牌请求\n        OAuth2Request oAuth2Request = tokenRequest.createOAuth2Request(clientDetails);\n        // 4. 获取当前用户信息（省略，前面已经获取过了）\n        // 5. 构建用户授权令牌 (省略，已经传过来了)\n        // 6. 构建 oauth2 身份验证令牌\n        OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(oAuth2Request, authentication);\n        // 7. 创建令牌\n        OAuth2AccessToken accessToken = authorizationServerTokenServices.createAccessToken(oAuth2Authentication);\n\n        // 直接结束\n        response.setContentType(\"application/json;charset=utf-8\");\n        response.getWriter().write(objectMapper.writeValueAsString(accessToken));\n    }\n\n\n    /**\n     * 对请求头进行解密以及解析\n     *\n     * @param header 请求头\n     * @return 客户端信息\n     */\n    private String[] extractAndDecodeHeader(String header) {\n        byte[] base64Token = header.substring(6).getBytes(StandardCharsets.UTF_8);\n        byte[] decoded;\n        try {\n            decoded = Base64.getDecoder().decode(base64Token);\n        } catch (IllegalArgumentException e) {\n            throw new BadCredentialsException(\n                    \"Failed to decode basic authentication token\");\n        }\n        String token = new String(decoded, StandardCharsets.UTF_8);\n        int delimiter = token.indexOf(\":\");\n\n        if (delimiter == -1) {\n            throw new BadCredentialsException(\"Invalid basic authentication token\");\n        }\n        return new String[]{token.substring(0, delimiter), token.substring(delimiter + 1)};\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来就是将它配置进去，我们独立出他的配置\n<code>SmsAuthenticationSecurityConfig</code></p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * sms 配置\n *\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/29 下午11:33\n */\n@Component\npublic class SmsAuthenticationSecurityConfig\n        extends SecurityConfigurerAdapter&lt;DefaultSecurityFilterChain, HttpSecurity&gt; {\n\n    @Autowired\n    @SuppressWarnings(\"all\")\n    private  UserDetailsService userDetailsService;\n    @Autowired\n    @SuppressWarnings(\"all\")\n    private SmsSuccessHandler smsSuccessHandler;\n\n    @Override\n    public void configure(HttpSecurity http)  {\n        // 过滤器\n        SmsAuthenticationFilter smsAuthenticationFilter = new SmsAuthenticationFilter();\n        smsAuthenticationFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager.class));\n        smsAuthenticationFilter.setAuthenticationSuccessHandler(smsSuccessHandler);\n\n        // 授权提供者\n        SmsAuthenticationProvider smsAuthenticationProvider = new SmsAuthenticationProvider();\n        smsAuthenticationProvider.setUserDetailsService(userDetailsService);\n\n        // 过滤器\n        http.authenticationProvider(smsAuthenticationProvider)\n                .addFilterAfter(smsAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>Q：为什么这里使用字段注入呢？</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>A：不使用构造器注入最主要的原因在于会造成依赖环，因为我们这里注入了\n<code>UserDetailsService</code> ，而在使用的时候， <code>SmsSuccessHandler</code>\n里面也同样注入了 <code>UserDetailsService</code> 而后面我们需要在 安全配置\n<code>SecurityConfig</code> 中引入 <code>SmsAuthenticationSecurityConfig</code> ，\n<code>UserDetailsService</code> 是在 <code>SecurityConfig</code>\n创建的，这个时候就会有一个依赖环的问题了。是使用的先呢？还是创建的先？Spring\n就不知道了，但是构造器注入是 Bean 初始化的时候给的，那个时候不一定有\n<code>UserDetailsService</code> ，所以使用字段注入，他会在有的时候自动注入进去。</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来安全配置 <code>SecurityConfig</code> ：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    private final @NonNull SmsAuthenticationSecurityConfig smsAuthenticationSecurityConfig;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                // 添加进去即可\n                .apply(smsAuthenticationSecurityConfig)\n                .and()\n                .authorizeRequests()\n                .antMatchers(\"/code/*\").permitAll()\n                .antMatchers(\"/auth/sms\").permitAll()\n                .antMatchers(\"/custom/**\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .formLogin()\n                .and()\n                .httpBasic();\n\n\n        http\n                .addFilterBefore(validateCodeFilter, AbstractPreAuthenticatedProcessingFilter.class);\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>运行测试一下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190730130906.png\" alt=\"test\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>可以看到已经 OK 了\n～！邮箱验证码登录也是类似，完全可以考虑两个结合起来，也是不难的，就不赘述了。现在的代码结构如下：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190730132103.png\" alt=\"now\">\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_推荐添加授权模式\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">推荐：添加授权模式</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于已有的路径 <code>/oauth/token</code>\n，他拥有五种授权模式，我们需要在这五种之上，添加两种授权模式：</p>\n</div>\n<div class=\"ulist\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ul data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>sms</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>email</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>而授权模式的核心接口是 <code>TokenGranter</code> ，他拥有一个抽象实现类\n<code>AbstractTokenGranter</code> ，我们需要自定义新的 <code>grant type</code>\n，就再写一个他的子类即可，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * @author &lt;a href=\"https://echocow.cn\"&gt;EchoCow&lt;/a&gt;\n * @date 2019/7/30 下午1:33\n */\npublic class SmsTokenGranter extends AbstractTokenGranter {\n    private static final String GRANT_TYPE = \"sms\";\n    private UserDetailsService userDetailsService;\n\n    /**\n     * 构造方法提供一些必要的注入的参数\n     * 通过这些参数来完成我们父类的构建\n     *\n     * @param tokenServices tokenServices\n     * @param clientDetailsService clientDetailsService\n     * @param oAuth2RequestFactory oAuth2RequestFactory\n     * @param userDetailsService userDetailsService\n     */\n    public SmsTokenGranter(AuthorizationServerTokenServices tokenServices,\n                           ClientDetailsService clientDetailsService,\n                           OAuth2RequestFactory oAuth2RequestFactory,\n                           UserDetailsService userDetailsService) {\n        super(tokenServices, clientDetailsService, oAuth2RequestFactory, GRANT_TYPE);\n        this.userDetailsService = userDetailsService;\n    }\n\n    /**\n     * 在这里查询我们用户，构建用户的授权信息\n     *\n     * @param client 客户端\n     * @param tokenRequest tokenRequest\n     * @return OAuth2Authentication\n     */\n    @Override\n    protected OAuth2Authentication getOAuth2Authentication(ClientDetails client, TokenRequest tokenRequest) {\n        Map&lt;String, String&gt; params = tokenRequest.getRequestParameters();\n        String sms = params.getOrDefault(\"sms\", \"\");\n        // 获取用户信息\n        UserDetails userDetails = userDetailsService.loadUserByUsername(sms);\n        if (Objects.isNull(userDetails)) {\n            throw new UsernameNotFoundException(\"用户不存在\");\n        }\n        // 构建用户授权信息\n        Authentication user = new UsernamePasswordAuthenticationToken(userDetails.getUsername(),\n                userDetails.getPassword(), userDetails.getAuthorities());\n        return new OAuth2Authentication(tokenRequest.createOAuth2Request(client), user);\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接下来我们把它添加到配置类 <code>Oauth2AuthorizationServerConfig</code> 中去</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    private final @NonNull UserDetailsService userDetailsService;\n\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients.inMemory()\n                .withClient(\"oauth2\")\n                    .secret(\"$2a$10$uLCAqDwHD9SpYlYSnjtrXemXtlgSvZCNlOwbW/Egh0wufp93QjBUC\")\n                    .resourceIds(\"oauth2\")\n                    // 注意，这里要添加我们的 sms 授权方式\n                    .authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\", \"sms\")\n                    .authorities(\"ROLE_ADMIN\", \"ROLE_USER\")\n                    .scopes(\"all\")\n                    .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))\n                    .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))\n                    .redirectUris(\"http://example.com\")\n                .and()\n                .withClient(\"test\")\n                    .secret(\"$2a$10$wlgcx61faSJ8O5I4nLiovO9T36HBQgh4RhOQAYNORCzvANlInVlw2\")\n                    .resourceIds(\"oauth2\")\n                    // 注意，这里要添加我们的 sms 授权方式\n                    .authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\", \"sms\")\n                    .authorities(\"ROLE_ADMIN\", \"ROLE_USER\")\n                    .scopes(\"all\")\n                    .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))\n                    .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))\n                    .redirectUris(\"http://example.com\");\n    }\n\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n        endpoints.authenticationManager(this.authenticationManager);\n        // 添加进去\n        endpoints.tokenGranter(tokenGranter(endpoints));\n    }\n\n    /**\n     * 重点\n     * 先获取已经有的五种授权，然后添加我们自己的进去\n     *\n     * @param endpoints AuthorizationServerEndpointsConfigurer\n     * @return TokenGranter\n     */\n    private TokenGranter tokenGranter(final AuthorizationServerEndpointsConfigurer endpoints) {\n        List&lt;TokenGranter&gt; granters = new ArrayList&lt;&gt;(Collections.singletonList(endpoints.getTokenGranter()));\n        granters.add(new SmsTokenGranter(endpoints.getTokenServices(), endpoints.getClientDetailsService(),\n                endpoints.getOAuth2RequestFactory(), userDetailsService));\n        return new CompositeTokenGranter(granters);\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>测试一下</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190730220005.png\" alt=\"test\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>邮箱授权同样的道理，不再赘述。</p>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_添加验证码验证\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">添加验证码验证</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在已经有了新的授权模式，我们要对他把已经写好的验证码验证添加进去。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自定义 controller 的方式很简单，就在 <code>ValidateCodeFilter</code> 的\n<code>afterPropertiesSet</code> 方法中添加路径即可，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    @Override\n    public void afterPropertiesSet() throws ServletException {\n        super.afterPropertiesSet();\n        // 路径拦截\n        urlMap.put(\"/auth/sms\", \"sms\");\n        urlMap.put(\"/custom/sms\", \"sms\");\n        urlMap.put(\"/oauth/sms\", \"sms\");\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果是按照 <code>spring security oauth2</code> 的流程，我们就需要再加一个过滤器了</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class ValidateCodeGranterFilter extends OncePerRequestFilter {\n\n    private final @NonNull ValidateCodeProcessorHolder validateCodeProcessorHolder;\n    private RequestMatcher requestMatcher = new AntPathRequestMatcher(\"/oauth/token\", HttpMethod.POST.name());\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        if (requestMatcher.matches(request)){\n            String grantType = getGrantType(request);\n            if (\"sms\".equalsIgnoreCase(grantType) || \"email\".equalsIgnoreCase(grantType)){\n                try {\n                    log.info(\"请求需要验证！验证请求：\" + request.getRequestURI() + \" 验证类型：\" + grantType);\n                    validateCodeProcessorHolder.findValidateCodeProcessor(grantType)\n                            .validate(new ServletWebRequest(request, response));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    return;\n                }\n            }\n        }\n        filterChain.doFilter(request, response);\n    }\n\n    private String getGrantType(HttpServletRequest request) {\n        return request.getParameter(\"grant_type\");\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同时需要修改一下 <code>AbstractValidateCodeProcessor</code>\n获取授权类型的方法，如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">    /**\n     * 根据请求 url 获取验证码类型\n     *\n     * @return 结果\n     */\n    private String getValidateCodeType(ServletWebRequest request) {\n        String uri = request.getRequest().getRequestURI();\n        if (uri.contains(\"/oauth/token\")) {\n            return request.getParameter(\"grant_type\");\n        } else {\n            int index = uri.lastIndexOf(\"/\") + 1;\n            return uri.substring(index).toLowerCase();\n        }\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样就可以了，就不用测试了。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>到此为止，我们的这节终于写完了！现在的代码结构如下！</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190730224714.png\" alt=\"now\">\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_总结\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">总结</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊，终于把这块写完了！个人觉得这块是最为复杂的一块，同时觉得也是最有价值的一块！因为现在真的没有谁比我总结这两种方式更加详细的了（偷笑\n～），并且每一个方式都对应不同的源码，需要去琢磨源码然后找到对应的文档然后再去实现，实现完后要总结出来画图在表述出来，实在太累了。不过收获很明显，找到了一些新的方法。不过我省略掉了源码分析部分，不然篇幅就太长太长了。从上面的描述中可以看到第三种方式应该是最好的，那么为什么我要说自定义\ncontroller\n的方式呢？因为这就是我学习的步骤，先是尽量自己实现，然后再用他写的方式来实现，再把他整合进入，如果没有自定义\ncontroller 那一快，我不可能知道他怎么创建 token\n的，后面都是一样。一开始我只会第一种，年初的时候我用的就是第一种；后面学会了第二种，大概是今年四月份把；然后第三种是写文章的时候才会的，所以我给学校写的授权服务器中是用的第二种，后面要考虑重构一下嘿嘿嘿嘿\n～写文章真的好累好累啊，但是收获不小呢！而且放假了好开心 ～后面加油\n～！考虑要不要写一篇源码分析了哈哈，oauth2\n的源码好多地方抖都翻了好几遍了昂。。。后面考虑整理一下然后写一个源码分析的。加油\n～！！</p>\n</div>\n</div>\n</div>","document":{"title":"Spring Security Oauth2 从零到一完整实践（五） 自定义授权模式（手机、邮箱等）"},"pageAttributes":{"category":"spring","description":"Spring Security Oauth2 从零到一完整实践（五） 自定义授权模式（手机、邮箱等）","image":"https://img.hacpai.com/bing/20171113.jpg?imageView2/1/w/960/h/540/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2019/07/30/1564498598952.html","next":{"document":{"title":"Spring Security Oauth2 从零到一完整实践（四）资源服务器"},"fields":{"slug":"/articles/2019/07/20/1563611848587.html"}},"previous":{"document":{"title":"manjaro 诡异错误：键盘失灵"},"fields":{"slug":"/articles/2019/07/21/1563700292254.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}