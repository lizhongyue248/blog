{"componentChunkName":"component---src-templates-post-tsx","path":"/articles/2019/05/10/1557456119712.html","result":{"data":{"asciidoc":{"id":"8b78591b-b479-5760-a3a8-e15f08cb5945","fields":{"slug":"/articles/2019/05/10/1557456119712.html","birthTime":"2019-05-10T02:41:59.788Z","modifiedTime":"2019-05-13T01:37:07.906Z"},"html":"<div id=\"toc\" class=\"toc\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div id=\"toctitle\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">Table of Contents</div>\n<ul class=\"sectlevel1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_这篇文章能够带给你什么\">这篇文章能够带给你什么</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_在这之前\">在这之前</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_开始\">开始</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_数据库\">数据库</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_配置\">配置</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_连接\">连接</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_书写模板\">书写模板</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_生成模板\">生成模板</a>\n<ul class=\"sectlevel2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_探究过程\">探究过程</a></li>\n</ul>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_工具类\">工具类</a></li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\"><a href=\"#_总结\">总结</a></li>\n</ul>\n</div>\n<div id=\"preamble\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>最近在做学校的项目，自己从零开始一步一步搭建与设计，遇到了一堆的问题，不过也感觉到了自己在不断成长，只有在实践中才会发现会有那么多的问题存在。记录一下遇到的一个典型的问题，<strong>代码生成</strong>。因为项目使用的是\nspring data jpa 而不是 mybatis，所以并没有 mybatis-plus\n的代码生成器，就寻思自己写一个了。</p>\n</div>\n<div class=\"quoteblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<blockquote>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>实例地址：https://github.com/lizhongyue248/spring-boot-freemarker-generate[spring-boot-freemarker-generate]</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>项目模块：https://github.com/gzmuSoft/lesson-cloud/tree/master/lesson-cloud-generate[lesson-cloud-generate]</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>博客地址：https://echocow.cn[EchoCow]</p>\n</div>\n</blockquote>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_这篇文章能够带给你什么\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">这篇文章能够带给你什么</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring boot 配置文件读取</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring boot 与 freemarker 的最佳实践</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如何从数据库中读取到有用的元数据和表信息</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring boot 事件监听机制</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring boot starter freemarker 的分析与探究</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>期间遇到了很多问题，网上搜寻了半天，都没有使用 spring boot + freemarker\n来只做模板引擎的，我的思路其实来源于他的源码，具体后面会说。一开始准备单独写的，但是发现如果需要读取配置文件又要去找一堆库，还有一些工具类，为什么不直接用\nspring boot 呢？当然还有以下的一些原因</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>项目使用 spring boot 构建，父项目直接继承 spring\nboot，子项目用起来很方便。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>spring boot 配置文件读取方便，比较熟悉他的使用。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>优秀的的依赖注入很方便。</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>依赖很少，不需要再去麻烦的找一些库</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>总结起来就是一个词，方便！</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_在这之前\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">在这之前</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>你需要构建一个 spring boot 项目，并且将他作为你的依赖管理。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同时需要一些必备的依赖，我们只用需要的，尽可能的简化，只有如下几个：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\">&lt;!--FreeMarker模板引擎依赖--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;!--mysql 驱动--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;!--主要用来读取配置文件--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;\n    &lt;optional&gt;true&lt;/optional&gt;\n&lt;/dependency&gt;\n&lt;!--lombok 工具--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;optional&gt;true&lt;/optional&gt;\n&lt;/dependency&gt;\n&lt;!--测试依赖--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>如果使用的是 idea,那么依赖如下\n<span class=\"image\"><img src=\"https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190509235702.png\" alt=\"dependency\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_开始\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">开始</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>现在我们需要明确一下如何完成这么一个生成的过程,</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>配置数据库并读取，连接数据库</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>书写模板</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>生成文件</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_数据库\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">数据库</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_配置\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">配置</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>直接通过 spring-boot-configuration-processor\n来读取即可，非常简单的一个过程，我们需要一个 <code>application.yml</code> 或者\n<code>application.properties</code> 文件，我选择 <code>yml</code>，配置如下：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-yml\" data-lang=\"yml\">application:\n  generate:\n    # 驱动类\n    driver-class: com.mysql.cj.jdbc.Driver\n    # 用户名\n    username: root\n    # 密码\n    password: 123456\n    # 库名\n    catalog: generate\n    # 数据库地址\n    url: jdbc:mysql://127.0.0.1:3306/generate</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>你可以发现下面飘黄色警告，别急，慢慢来。</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510001047.png\" alt=\"yml\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们需要一个实体类来和他对应</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Data   // lombok 自动生成必要的方法\n@Component\n// 和配置文件前缀进行对应\n@ConfigurationProperties(prefix = \"application.generate\")\npublic class GenConfig {\n    /**\n     * 数据库驱动类\n     */\n    private String driverClass;\n\n    /**\n     * 数据库用户名\n     */\n    private String username;\n\n    /**\n     * 密码\n     */\n    private String password;\n\n    /**\n     * 库名\n     */\n    private String catalog;\n\n    /**\n     * 链接地址\n     */\n    private String url;\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用一个测试类进行读取测试</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">import static org.junit.Assert.*;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class GenDemoApplicationTests {\n\n    @Autowired\n    private GenConfig genConfig;\n\n    @Test\n    public void contextLoads() {\n        assertNotNull(genConfig);\n        assertEquals(genConfig.getUsername(), \"root\");\n    }\n\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>测试用例通过，配置读取是没有问题的。运行一次以后，你回去看配置文件，会发现没有警告了。</p>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_连接\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">连接</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>使用最简单 jdbc 链接，也是最快捷的方式。</p>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_获取数据库元数据\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">获取数据库元数据</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>其实就是获取数据库链接后获取元数据，jdbc 基础</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">// 自动注入\nprivate final GenConfig genConfig;\n\npublic GenDatabaseUtil(GenConfig genConfig) {\n    this.genConfig = genConfig;\n}\n\n/**\n * 获取数据库元数据\n *\n * @return 元数据\n * @throws Exception 异常\n */\nprivate DatabaseMetaData getMetaData() throws Exception {\n    Class.forName(genConfig.getDriverClass());\n    return DriverManager.getConnection(genConfig.getUrl(),\n            genConfig.getUsername(), genConfig.getPassword()).getMetaData();\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后获取所有的表</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 获取库的所有表\n *\n * @return 所有表\n */\npublic List&lt;String&gt; getTables() {\n    List&lt;String&gt; tables = new ArrayList&lt;&gt;();\n    try {\n        ResultSet resultSet = getMetaData().getTables(genConfig.getCatalog(), null,\n                \"%\", new String[]{\"TABLE\"});\n        while (resultSet.next()) {\n            String tableName = resultSet.getString(\"TABLE_NAME\");\n            tables.add(tableName);\n        }\n        resultSet.close();\n    } catch (Exception e) {\n        log.error(\"Please check your database conf! {}\", e.getMessage());\n        e.printStackTrace();\n    }\n    return tables;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>测试一下方法</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Autowired\nprivate GenDatabaseUtil genDatabaseUtil;\n\n@Test\npublic void testTables() {\n    // 直接打印了\n    genDatabaseUtil.getTables().forEach(System.out::println);\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h4 id=\"_获取列信息\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">获取列信息</h4>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我们需要一个实体类来和列进行对应</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ColumnClass {\n    /**\n     * 表名称\n     */\n    private String tableName;\n    /**\n     * 列名称\n     */\n    private String columnName;\n    /**\n     * 列大小\n     */\n    private Integer columnSize;\n    /**\n     * 列的类型\n     */\n    private String columnType;\n    /**\n     * 列的注释\n     */\n    private String columnComment;\n    /**\n     * 是否能为空值\n     */\n    private Boolean nullAble;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>接着我们就需要一个方法来获取一个表的所有列，里面有一个自己写得工具类，请查看\ngithub，这个工具类封装了一些方法进行使用。</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">/**\n * 获取指定表的所有列\n *\n * @param tableName 表名\n * @return 所有列的集合\n */\npublic List&lt;ColumnClass&gt; getColumns(String tableName) {\n    try (ResultSet resultSet = getMetaData().getColumns(genConfig.getCatalog(), null, tableName, \"%\")) {\n        return getColumns(resultSet, tableName);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\n/**\n * 获取某列的结果集抽取\n *\n * @param resultSet 结果集\n * @param tableName 表名\n * @throws SQLException 异常\n */\nprivate List&lt;ColumnClass&gt; getColumns(ResultSet resultSet, String tableName) throws SQLException {\n    List&lt;ColumnClass&gt; columns = new ArrayList&lt;&gt;();\n    while (resultSet.next()) {\n        String columnName = resultSet.getString(\"COLUMN_NAME\");\n        String remarks = resultSet.getString(\"REMARKS\");\n        Boolean nullAble = resultSet.getInt(\"NULLABLE\") == 1;\n        columns.add(new ColumnClass(\n            tableName,\n            GenUtil.underlineToHump(columnName),\n            resultSet.getInt(\"COLUMN_SIZE\"),\n            GenUtil.fieldConversion(resultSet.getString(\"TYPE_NAME\")),\n            remarks, nullAble\n        ));\n    }\n    return columns;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同样，测试一下</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Test\npublic void testColumns() {\n    genDatabaseUtil.getColumns(\"user\").forEach(System.out::println);\n}\n\n// 结果\n// ColumnClass(tableName=user, columnName=id, columnSize=10, columnType=java.lang.Integer, columnComment=, nullAble=false)\n// ColumnClass(tableName=user, columnName=name, columnSize=255, columnType=java.lang.String, columnComment=, nullAble=false)\n// ColumnClass(tableName=user, columnName=pwd, columnSize=255, columnType=java.lang.String, columnComment=, nullAble=false)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>这样就没有问题了。</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_书写模板\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">书写模板</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>在 <code>resource</code> 下创建 <code>templates</code> 文件夹，同时创建一个 <code>entity.ftl</code> 的\n<code>freemarker</code> 文件：</p>\n</div>\n<div class=\"literalblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre>package ${package_name};\n\nimport lombok.Data;\n\nimport javax.persistence.Entity;\nimport javax.persistence.Table;\nimport java.io.Serializable;\n\n/**\n* ${table_name}\n*\n* @author echo cow\n* @date ${.now?datetime}\n*/\n@Data\n@Table(name = \"${table_name}\")\n@Entity(name = \"${table_name}\")\npublic class ${class_name} implements Serializable {\n&lt;#list columns as column&gt;\n\n    /**\n    * ${column.columnComment}\n    */\n    private ${column.columnType} ${column.columnName};\n&lt;/#list&gt;\n}</pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_生成模板\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">生成模板</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>生成模板有很多种方式，本质都是对 spring\n的应用进行监听，当他启动的时候调用某个时间或者进行监听。这里我使用实现\n<code>ApplicationRunner</code> 的方式，他会需要实现一个 <code>run</code>\n方法，通过实现这个方法，会在应用启动完成后调用此方法。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>先上成品代码：</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Slf4j\n@Component\npublic class GenEntity implements ApplicationRunner {\n\n    // 读取配置文件\n    private final GenDatabaseUtil genDatabaseUtil;\n    //  FreeMarker 配置工程\n    private final FreeMarkerConfigurationFactory freeMarkerConfigurationFactory;\n\n    public GenEntity(GenDatabaseUtil genDatabaseUtil, FreeMarkerConfigurationFactory freeMarkerConfigurationFactory) {\n        this.genDatabaseUtil = genDatabaseUtil;\n        this.freeMarkerConfigurationFactory = freeMarkerConfigurationFactory;\n    }\n\n    @Override\n    public void run(ApplicationArguments args) throws Exception {\n        Configuration configuration = freeMarkerConfigurationFactory.createConfiguration();\n        // 他会自己寻找 resources 下的 templates 目录下的模板文件\n        Template entityTemplate = configuration.getTemplate(\"entity.ftl\");\n        // 获取数据库所有表\n        List&lt;String&gt; tables = genDatabaseUtil.getTables();\n        // 存放模板变量\n        Map&lt;String, Object&gt; data = new HashMap&lt;&gt;();\n        data.put(\"package_name\", \"cn.echocow.generate.entity\");\n        // 文件写入\n        FileWriter fileWriter;\n        for (String table : tables) {\n            // 工具类将下划线命名转化为驼峰\n            String entityClassName = GenUtil.underlineToHump(table, true);\n            data.put(\"table_name\", table);\n            data.put(\"class_name\", entityClassName);\n            // 获取当前表的所有列\n            data.put(\"columns\", genDatabaseUtil.getColumns(table));\n            // 文件创建\n            File file = new File(\"src/main/java/cn/echocow/gendemo/entity/\" + GenUtil.underlineToHump(table, true) + GenUtil.SUFFIX);\n            if (!file.exists()) {\n                if (!new File(\"src/main/java/cn/echocow/gendemo/entity\").mkdirs()) {\n                    log.error(\"创建文件夹失败\");\n                    return;\n                }\n                if (!file.createNewFile()) {\n                    log.error(\"{} 创建文件失败\", table);\n                    return;\n                }\n            }\n            fileWriter = new FileWriter(file);\n            entityTemplate.process(data, fileWriter);\n            log.info(\"Table {} generate succeed!\", table);\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"sect2\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h3 id=\"_探究过程\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">探究过程</h3>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p><strong>其实对于一个生成的过程，就是一个 <code>模板 + 数据</code>\n组合的过程，对于任何模板引擎都是如此，需要获取到一个模板，然后讲数据带过去，模板引擎使用数据对页面进行渲染，就是这么一个过程。所以我们就需要很重要的两个东西</strong>\n- 模板 —— template - 数据 —— 直接使用 map 携带过去</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以我们在引入的 freemarker 依赖中，可以找到\n<code>freemarker.template.Template</code> 这么一个类，来看看他远吗的注释</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510093223.png\" alt=\"tempalte\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>所以他提供了两种方式来创建 template 1.\n<code>use Configuration#getTemplate(String) to create/get Template objects</code>\n⇒ 使用 Configuration 的 getTemplate 方法来进行创建。 2.\n<code>you can also construct a template from a Reader or a String that contains the template source code</code>\n⇒ 使用他的构造方法来进行创建。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>然后我去查询 Configuration\n类，里面有的只是如何使用，有兴趣的可以自己去看看，但是如何在 spring boot\n中使用呢？这个时候我就想到了我们引入的 <code>spring-boot-starter-freemarker</code>\n依赖，既然有 Starter\n依赖，那么必定就会有相应的自动配置，所以我们需要去找寻一下他自动装配的\nBean 在哪里。如果你了解 spring boot\n自动装配的话，应该能够找到，直接在在自动装配的文件中，直接搜索就可以找到如下地方：</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510094443.png\" alt=\"search\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>那么我们继续看看这个类</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510095002.png\" alt=\"FreeMarkerAutoConfiguration\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>他的核心就是条件装配，当我们没有引入 freemarker\n的时候，是不会进行自动配置的；同时他引入了三个配置，分别如下 -\n<code>FreeMarkerServletWebConfiguration</code> 对于 servlet web 环境下进行自动配置\n- <code>FreeMarkerReactiveWebConfiguration</code> 对于 reactive web\n环境下进行自动配置 - <code>FreeMarkerNonWebConfiguration</code> 对于 non web\n环境想进行自动配置</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>我们现在是 non web 环境，我们只用看 <code>FreeMarkerNonWebConfiguration</code>\n即可，其他两个是不会进行自动装配的。里看看这个类</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510095915.png\" alt=\"FreeMarkerNonWebConfiguration\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>你会发现他就自动装配了一个 Bean，在我们没有配置\n<code>FreeMarkerConfigurationFactoryBean</code> 的时候，\n进行自动装配。所以他的核心就是\n<code>FreeMarkerConfigurationFactoryBean</code>，来看看这个类</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190510100627.png\" alt=\"FreeMarkerConfigurationFactoryBean\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>他已经说的十分清楚了，我们直接来看\n<code>FreeMarkerConfigurationFactor</code>,上面的注释非常清楚，我们直接来看需要的方法</p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190510100912.png\" alt=\"FreeMarkerConfigurationFactor\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>通过这个类的 <code>createConfiguration</code> 方法我们可以创建一个 <code>Configuration</code>\n配置，然后通过他的 <code>getTemplate</code> 方法可以获取到 <code>Template</code></p>\n</div>\n<div class=\"imageblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<img src=\"https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190510101233.png\" alt=\"Configuration\">\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>他使用多态，创建一个默认的\n<code>Template</code>，对于我们来说够用了，所以在上面的生成的代码中，我们直接注入\n<code>FreeMarkerConfigurationFactory</code> 使用即可。</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Configuration configuration = freeMarkerConfigurationFactory.createConfiguration();\nTemplate entityTemplate = configuration.getTemplate(\"entity.ftl\");</code></pre>\n</div>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>对于数据就是一个 map 而已，封装好后使用 <code>process</code> 方法生成即可，需要一个\n<code>Writer</code>\n的子类，可以自由选择。具体去查看下他的源码就知道了，都很好找到，主要调用的是\n<code>createProcessingEnvironment(Object dataModel, Writer out)</code> 这个方法。</p>\n</div>\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">Map&lt;String, Object&gt; data = new HashMap&lt;&gt;(4);\nFileWriter fileWriter = new FileWriter(file);\nentityTemplate.process(data, fileWriter);</code></pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_工具类\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">工具类</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"listingblock\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"content\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@Slf4j\npublic class GenUtil {\n    private static final String UNDERLINE = \"_\";\n    private static final Map&lt;String, String&gt; MYSQL_TO_JAVA = new HashMap&lt;&gt;();\n    public static final String SUFFIX = \".java\";\n\n    static {\n        MYSQL_TO_JAVA.put(\"VARCHAR\", \"java.lang.String\");\n        MYSQL_TO_JAVA.put(\"BIGINT\", \"java.lang.Long\");\n        MYSQL_TO_JAVA.put(\"DATE\", \"java.time.LocalDate\");\n        MYSQL_TO_JAVA.put(\"FLOAT\", \"java.lang.Float\");\n        MYSQL_TO_JAVA.put(\"TINYINT\", \"java.lang.Integer\");\n        MYSQL_TO_JAVA.put(\"INT\", \"java.lang.Integer\");\n        MYSQL_TO_JAVA.put(\"BINARY\", \"java.lang.Byte\");\n        MYSQL_TO_JAVA.put(\"SMALLINT\", \"java.lang.Short\");\n        MYSQL_TO_JAVA.put(\"DATETIME\", \"java.time.LocalDateTime\");\n        MYSQL_TO_JAVA.put(\"BIT\", \"java.lang.Boolean\");\n    }\n\n\n    /**\n     * 下划线命名转驼峰式命名\n     *\n     * @param para 下划线命名\n     * @return 驼峰式命名\n     */\n    public static String underlineToHump(String para) {\n        StringBuilder result = new StringBuilder();\n        for (String s : para.split(UNDERLINE)) {\n            if (!para.contains(\"_\")) {\n                result.append(s);\n                continue;\n            }\n            if (result.length() == 0) {\n                result.append(s.toLowerCase());\n            } else {\n                result.append(s.substring(0, 1).toUpperCase());\n                result.append(s.substring(1).toLowerCase());\n            }\n        }\n        return result.toString();\n    }\n\n    /**\n     * 下划线命名转驼峰式命名\n     *\n     * @param para            下划线命名\n     * @param firstCharChange 首字母是否转换\n     * @return 驼峰式命名\n     */\n    public static String underlineToHump(String para, boolean firstCharChange) {\n        String result = underlineToHump(para);\n        return firstCharChange ? result.substring(0, 1).toUpperCase() + result.substring(1) : result;\n    }\n\n    /**\n     * 数据库字段转换\n     *\n     * @param mysqlDataType 数据库字段类型\n     * @return 转换结果\n     */\n    public static String fieldConversion(String mysqlDataType) {\n        return MYSQL_TO_JAVA.getOrDefault(mysqlDataType, \"Object\");\n    }\n\n\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<h2 id=\"_总结\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">总结</h2>\n<div class=\"sectionbody\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>其实还是很简单的，只要了解了 spring boot\n的自动装配机制，找到他对某个库是如何支持的，那么思路就会很畅通，然后就可以在他的基础上来做更多的事情。当然这个是简化版的代码生成，其实还可以做很多自定义化，比如在我们项目中就增加了下面的功能：</p>\n</div>\n<div class=\"olist arabic\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<ol class=\"arabic\">\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>指定生成的模块</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>自定义各种配置</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>指定生成时排除某些表</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>指定生成时排除某些列</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>指定生成时按照条件添加某些注解</p>\n</li>\n<li data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>……</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>同样，如果你对于 <code>spring</code> 的事件熟悉的话，可以自定义生成顺序，比如\n<code>@Order</code> 注解，比如使用 <code>SpringApplicationBuilder</code>\n自己启动并添加事件监听都是可行的。</p>\n</div>\n<div class=\"paragraph\" data-sal=\"fade\" data-sal-duration=\"500\" data-sal-repeat=\"true\">\n<p>不过如果有多个代码生成的话，就会有设计方面的问题，如何设计才能够更优雅而没有一堆重复的代码。我在当初就没考虑到这个问题，写出来的代码可维护性就很差，自己重构半天出现更多的问题=-=然后暂时放弃重构，后面再说吧～～</p>\n</div>\n</div>\n</div>","document":{"title":"spring boot freemarker 制作专属代码生成器"},"pageAttributes":{"category":"spring","description":"spring boot freemarker 制作专属代码生成器","image":"https://img.hacpai.com/bing/20181008.jpg?imageView2/1/w/960/h/540/interlace/1/q/100","sort":null}}},"pageContext":{"slug":"/articles/2019/05/10/1557456119712.html","next":{"document":{"title":"[阅读] 计算机网络 自顶向下方法 —— 计算机网络和因特网"},"fields":{"slug":"/articles/2019/05/19/1558277640118.html"}},"previous":{"document":{"title":"Manjaro 安装 rabbitmq"},"fields":{"slug":"/articles/2019/05/05/1557020097819.html"}}}},"staticQueryHashes":["3069561552","3673333084"]}