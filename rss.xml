<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[A'yue Site's RSS Feed]]></title><description><![CDATA[念念不忘，必有回响。]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 13 Jun 2021 07:37:08 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><description><![CDATA[This guide describes the basic structure of an AsciiDoc document]]></description><link>https://zyue.wiki/post/AsciiDoc Writer&apos;s Guide/</link><guid isPermaLink="false">https://zyue.wiki/post/AsciiDoc Writer&apos;s Guide/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#writing-in-asciidoc&quot;&gt;Writing in AsciiDoc&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#its-just-text-mate&quot;&gt;It’s just text, mate.&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#content-is-king&quot;&gt;Content is king!&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#admonitions&quot;&gt;Admonitions&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#mild-punctuation-strong-impact&quot;&gt;Mild punctuation, strong impact&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#lists-lists-lists&quot;&gt;Lists, lists, lists&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#links-and-images&quot;&gt;Links and images&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#titles-titles-titles&quot;&gt;Titles, titles, titles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#building-blocks-in-asciidoc&quot;&gt;Building blocks in AsciiDoc&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#delimited-blocks&quot;&gt;Delimited blocks&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#block-metadata&quot;&gt;Block metadata&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#masquerading-blocks&quot;&gt;Masquerading blocks&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#delimiters-optional&quot;&gt;Delimiters optional&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#a-new-perspective-on-tables&quot;&gt;A new perspective on tables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#what-else-can-asciidoc-do&quot;&gt;What else can AsciiDoc do?&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#converting-your-document&quot;&gt;Converting your document&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#converting-a-document-to-html-5&quot;&gt;Converting a document to HTML 5&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#converting-a-document-to-docbook&quot;&gt;Converting a document to DocBook&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#output-galore&quot;&gt;Output galore&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#where-else-is-asciidoc-supported&quot;&gt;Where else is AsciiDoc supported?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#wrap-up&quot;&gt;Wrap-up&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#glossary&quot;&gt;Glossary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;This guide provides a gentle introduction to AsciiDoc, a &lt;em&gt;plain text&lt;/em&gt; documentation &lt;strong&gt;syntax&lt;/strong&gt; and &lt;strong&gt;processor&lt;/strong&gt;.
This introduction is intended for anyone who wants to reduce the effort required to write and publish content, whether for technical documentation, articles, web pages or good ol&apos;-fashioned prose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you want to know what AsciiDoc is all about, find the answer in &lt;a href=&quot;https://docs.asciidoctor.org/asciidoc/latest/#about-asciidoc&quot;&gt;About AsciiDoc&lt;/a&gt;.
If you’re looking for a concise survey of the AsciiDoc syntax, consult the &lt;a href=&quot;https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/&quot;&gt;AsciiDoc Syntax Quick Reference&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In this guide, you’ll learn:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;The basic structure of an AsciiDoc document&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;How to create your first AsciiDoc document&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;How to add other structural elements such as lists, block quotes and source code&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;How to convert an AsciiDoc document to HTML, DocBook and PDF&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In addition to covering the AsciiDoc basics, this guide also suggests a set of conventions to help you create more consistent documents and maximize your writing productivity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Let’s dive in to AsciiDoc!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;writing-in-asciidoc&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#writing-in-asciidoc&quot;&gt;&lt;/a&gt;Writing in AsciiDoc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The goal of this section is to teach you how to compose your first AsciiDoc document.
Hopefully, when you look back, you’ll agree it just makes sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Your adventure with AsciiDoc begins in your favorite text editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;its-just-text-mate&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#its-just-text-mate&quot;&gt;&lt;/a&gt;It’s just text, mate.&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Since AsciiDoc syntax is just &lt;em&gt;plain text&lt;/em&gt;, you can write an AsciiDoc document using &lt;em&gt;any&lt;/em&gt; text editor.
You don’t need complex word processing programs like Microsoft Word, OpenOffice Writer or Google Docs.
In fact, you &lt;em&gt;shouldn’t&lt;/em&gt; use these programs because they add cruft to your document (that you can’t see) and makes conversion tedious.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
While it’s true any text editor will do, I recommend selecting an editor that supports syntax highlighting for AsciiDoc.
The &lt;strong&gt;&lt;span class=&quot;red&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;green&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;purple&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;fuchsia&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;blue&quot;&gt;r&lt;/span&gt;&lt;/strong&gt; brings contrast to the text, making it easier to read.
The highlighting also confirms when you’ve entered the correct syntax for an inline or block element.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The most popular application for editing plain text on macOS is &lt;strong&gt;TextMate&lt;/strong&gt;.
A similar choice on Linux is &lt;strong&gt;GEdit&lt;/strong&gt;.
On Windows, stay away from Notepad and Wordpad because they produce plain text which is not cross-platform friendly.
Opt instead for a competent text editor like &lt;strong&gt;Notepad++&lt;/strong&gt;.
If you’re a programmer (or a writer with an inner geek), you’ll likely prefer &lt;strong&gt;Vim&lt;/strong&gt;, &lt;strong&gt;Emacs&lt;/strong&gt;, or &lt;strong&gt;Sublime Text&lt;/strong&gt;, all of which are available cross-platform.
The key feature all these editors share is syntax highlighting for AsciiDoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Open up your favorite text editor and get ready to write some AsciiDoc!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;content-is-king&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#content-is-king&quot;&gt;&lt;/a&gt;Content is king!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The bulk of the content in a document is paragraph text.
This is why Asciidoctor doesn’t require any special markup or attributes to specify paragraph content.
You can just start typing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In Asciidoctor, adjacent or consecutive lines of text form a paragraph element.
To start a new paragraph after another element, such as a section title or table, hit the &lt;kbd&gt;RETURN&lt;/kbd&gt; key twice to insert a blank line, and then continue typing your content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Two paragraphs in an AsciiDoc document&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;This journey begins one late Monday afternoon in Antwerp.
Our team desperately needs coffee, but none of us dare open the office door.

To leave means code dismemberment and certain death.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;The two paragraphs rendered using the default (html5) converter and stylesheet (asciidoctor.css)&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;This journey begins one late Monday afternoon in Antwerp.
Our team desperately needs coffee, but none of us dare open the office door.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To leave means code dismemberment and certain death.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Just like that, &lt;strong&gt;you’re writing in AsciiDoc!&lt;/strong&gt;
As you can see, it’s just like writing an e-mail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Save the file with a file extension of &lt;code&gt;.adoc&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you want to find out how to convert the document to HTML, DocBook or PDF, skip ahead to the section on &lt;a href=&quot;#converting-your-document&quot;&gt;[converting-your-document]&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;wrapped-text-and-hard-line-breaks&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#wrapped-text-and-hard-line-breaks&quot;&gt;&lt;/a&gt;Wrapped text and hard line breaks&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Since adjacent lines of text are combined into a single paragraph when Asciidoctor converts a document, that means you can wrap paragraph text or put each sentence or phrase on a separate line.
The line breaks won’t appear in the output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;However, if you want the line breaks in a paragraph to be preserved, you can either use a space followed by a plus sign (&lt;code&gt;+&lt;/code&gt;) or set the &lt;code&gt;hardbreaks&lt;/code&gt; option on the paragraph.
This results in a visible line break (e.g., &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;) following each line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Line breaks preserved using a space followed by the plus sign (+)&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Rubies are red, +
Topazes are blue.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Rubies are red,&lt;br&gt;
Topazes are blue.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Line breaks preserved using the hardbreaks option&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[%hardbreaks]
Ruby is red.
Java is black.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Ruby is red.&lt;br&gt;
Java is black.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To preserve line breaks throughout your whole document, add the &lt;code&gt;hardbreaks&lt;/code&gt; attribute to the document’s header.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Line breaks preserved throughout the document using the hardbreaks attribute&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;= Line Break Doc Title
:hardbreaks:

Rubies are red,
Topazes are blue.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;admonitions&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#admonitions&quot;&gt;&lt;/a&gt;Admonitions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;There are certain statements you may want to draw attention to by taking them out of the content’s flow and labeling them with a priority.
These are called admonitions.
It’s rendered style is determined by the assigned label (i.e., value).
Asciidoctor provides five admonition style labels:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;NOTE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;TIP&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;IMPORTANT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;CAUTION&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;WARNING&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;caution-vs-warning&quot; class=&quot;sidebarblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Caution vs. Warning&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;When choosing the admonition type, you may find yourself getting confused between &quot;caution&quot; and &quot;warning&quot; as these words are often used interchangeably.
Here’s a simple rule to help you differentiate the two:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Use &lt;strong&gt;CAUTION&lt;/strong&gt; to advise the reader to &lt;em&gt;act&lt;/em&gt; carefully (i.e., exercise care).&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Use &lt;strong&gt;WARNING&lt;/strong&gt; to inform the reader of danger, harm, or consequences that exist.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To find a deeper analysis, see &lt;a href=&quot;https://www.differencebetween.com/difference-between-caution-and-vs-warning/&quot; class=&quot;bare&quot;&gt;https://www.differencebetween.com/difference-between-caution-and-vs-warning/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;When you want to call attention to a single paragraph, start the first line of the paragraph with the label you want to use.
The label must be uppercase and followed by a colon (&lt;code&gt;:&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Admonition paragraph syntax&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;WARNING: Wolpertingers are known to nest in server racks. &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
Enter at your own risk.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The label must be uppercase and immediately followed by a colon (&lt;code&gt;:&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Separate the first line of the paragraph from the label by a single space.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Result: Admonition paragraph&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;admonitionblock warning&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Wolpertingers are known to nest in server racks.
Enter at your own risk.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;An admonition paragraph is rendered in a callout box with the admonition label—​or its corresponding icon—​in the gutter.
Icons are enabled by setting the &lt;code&gt;icons&lt;/code&gt; attribute on the document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Admonitions can also encapsulate any block content, which we’ll cover later.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;mild-punctuation-strong-impact&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#mild-punctuation-strong-impact&quot;&gt;&lt;/a&gt;Mild punctuation, strong impact&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Just as we emphasize certain words and phrases when we speak, we can emphasize them in text by surrounding them with punctuation.
AsciiDoc refers to this markup as &lt;em&gt;quoted text&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;quoted-text&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#quoted-text&quot;&gt;&lt;/a&gt;Quoted text&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For instance, in an e-mail, you might “speak” a word louder by enclosing it in asterisks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;I can&apos;t believe it, we *won*!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;As you would expect, the asterisks make the text &lt;strong&gt;won&lt;/strong&gt; bold.
You can almost sense the emotion.
This is one example of quoted (i.e., formatted) text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The term “quote” is used liberally here to apply to any symbols that surround text in order to apply emphasis or special meaning.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here are the forms of quoted text that AsciiDoc recognizes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Bold, italic, and monospace formatting syntax&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;bold *constrained* &amp;amp; **un**constrained

italic _constrained_ &amp;amp; __un__constrained

bold italic *_constrained_* &amp;amp; **__un__**constrained

monospace `constrained` &amp;amp; ``un``constrained

monospace bold `*constrained*` &amp;amp; ``**un**``constrained

monospace italic `_constrained_` &amp;amp; ``__un__``constrained

monospace bold italic `*_constrained_*` &amp;amp; ``**__un__**``constrained&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;When you want to quote text (e.g., place emphasis) somewhere other than at the boundaries of a word, you need to double up the punctuation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Result: Bold, italic, and monospace text&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;bold &lt;strong&gt;constrained&lt;/strong&gt; &amp;amp; &lt;strong&gt;un&lt;/strong&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;italic &lt;em&gt;constrained&lt;/em&gt; &amp;amp; &lt;em&gt;un&lt;/em&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;bold italic &lt;strong&gt;&lt;em&gt;constrained&lt;/em&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;em&gt;un&lt;/em&gt;&lt;/strong&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;monospace &lt;code&gt;constrained&lt;/code&gt; &amp;amp; &lt;code&gt;un&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;monospace bold &lt;code&gt;&lt;strong&gt;constrained&lt;/strong&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;strong&gt;un&lt;/strong&gt;&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;monospace italic &lt;code&gt;&lt;em&gt;constrained&lt;/em&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;em&gt;un&lt;/em&gt;&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;monospace bold italic &lt;code&gt;&lt;strong&gt;&lt;em&gt;constrained&lt;/em&gt;&lt;/strong&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;strong&gt;&lt;em&gt;un&lt;/em&gt;&lt;/strong&gt;&lt;/code&gt;constrained&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Any quoted text can be prefixed with an attribute list.
The first positional attribute is treated as a role.
The role can be used to apply custom styling to the text.
For instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Type the word [.userinput]#asciidoc# into the search bar.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;When converting to HTML, the word “asciidoc” is wrapped in &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags and the role is used as the element’s CSS class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;span class=&quot;userinput&quot;&amp;gt;asciidoc&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can apply styles to the text using CSS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You may not always want these substitutions to take place.
In those cases, you’ll need to use markup to escape the text.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;preventing-substitution&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#preventing-substitution&quot;&gt;&lt;/a&gt;Preventing substitution&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you are getting quoted text behavior where you don’t want it, you can use a backslash or a passthrough macro to prevent it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Asciidoctor provides several approaches for preventing substitutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Backslash escaping&lt;/div&gt;
&lt;p&gt;To prevent punctuation from being interpreted as formatting markup, precede it with a backslash (&lt;code&gt;\&lt;/code&gt;).
If the formatting punctuation begins with two characters (e.g., &lt;code&gt;__&lt;/code&gt;), you need to precede it with two backslashes (&lt;code&gt;\\&lt;/code&gt;).
This is also how you can prevent character and attribute references from substitution.
When your document is processed, the backslash is removed so it doesn’t display in your output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;\*Stars* will appear as *Stars*, not as bold text.

\&amp;amp;sect; will appear as an entity, not the &amp;amp;sect; symbol.

\\__func__ will appear as __func__, not as emphasized text.

\{two-semicolons} will appear {two-semicolons}, not resolved as ;;.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Asciidoctor supports several forms of the passthrough macro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;inline pass macro&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An inline macro named &lt;code&gt;pass&lt;/code&gt; that can be used to passthrough content.
Supports an optional set of substitutions.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;pass:[content like #{variable} passed directly to the output] followed by normal content.

content with only select substitutions applied: pass:c,a[__&amp;lt;{email}&amp;gt;__]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;single and double plus&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A special syntax for preventing text from being formatted.
Only escapes special characters for compliance with the output format and doesn’t support explicit substitutions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;triple plus&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A special syntax for designating passthrough content.
Does not apply any substitutions (equivalent to the inline pass macro) and doesn’t support explicit substitutions.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;double dollar (deprecated)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A deprecated special syntax for designating passthrough content.
Like the triple plus, does not apply any substitutions and doesn’t support explicit substitutions.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Asciidoctor does not implement the block pass macro.
Instead, you should use a &lt;a href=&quot;#pass-blocks&quot;&gt;pass block&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;inline-pass-macro-and-explicit-substitutions&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#inline-pass-macro-and-explicit-substitutions&quot;&gt;&lt;/a&gt;Inline pass macro and explicit substitutions&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To exclude a phrase from substitutions and disable escaping of special characters, enclose it in the inline pass macro.
For example, here’s one way to format text as underline when generating HTML from AsciiDoc:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;The text pass:[&amp;lt;u&amp;gt;underline me&amp;lt;/u&amp;gt;] is underlined.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The text &lt;u&gt;underline me&lt;/u&gt; is underlined.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you want to enable ad-hoc &lt;code&gt;quotes&lt;/code&gt; substitution, then assign the &lt;code&gt;macros&lt;/code&gt; value to &lt;code&gt;subs&lt;/code&gt; and use the inline pass macro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[subs=+macros] &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
----
I better not contain *bold* or _italic_ text.
pass:quotes[But I should contain *bold* text.] &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
----&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;macros&lt;/code&gt; is assigned to &lt;code&gt;subs&lt;/code&gt;, which allows any macros within the block to be processed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The pass macro is assigned the &lt;code&gt;quotes&lt;/code&gt; value. Text within the square brackets will be formatted.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The inline pass macro does introduce additional markup into the source code that could make it invalid in raw form.
However, the output it produces will be valid when viewed in a viewer (HTML, PDF, etc.).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;I better not contain *bold* or _italic_ text.
But I should contain &lt;strong&gt;bold&lt;/strong&gt; text.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The inline pass macro also accepts shorthand values for specifying substitutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;c&lt;/code&gt; = special characters&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;q&lt;/code&gt; = quotes&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; = attributes&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt; = replacements&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;m&lt;/code&gt; = macros&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;p&lt;/code&gt; = post replacements&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For example, the quotes text substitution value is assigned in the inline passthrough macro below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;The text pass:q[&amp;lt;u&amp;gt;underline *me*&amp;lt;/u&amp;gt;] is underlined and the word &quot;`me`&quot; is bold.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The text &lt;u&gt;underline &lt;strong&gt;me&lt;/strong&gt;&lt;/u&gt; is underlined and the word “me” is bold.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;triple-plus-passthrough&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#triple-plus-passthrough&quot;&gt;&lt;/a&gt;Triple plus passthrough&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The triple-plus passthrough works much the same way as the pass macro.
To exclude content from substitutions, enclose it in triple pluses (+++).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;+++content passed directly to the output+++ followed by normal content.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The triple-plus macro is often used to output custom HTML or XML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;The text +++&amp;lt;u&amp;gt;underline me&amp;lt;/u&amp;gt;+++ is underlined.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The text &lt;u&gt;underline me&lt;/u&gt; is underlined.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Single plus enclosure&lt;/div&gt;
&lt;p&gt;To exclude a phrase from substitutions, enclose it in plus signs (&lt;code&gt;+&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;This +*literal*+ will appear as *literal*.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;replacements&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#replacements&quot;&gt;&lt;/a&gt;Replacements&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;AsciiDoc also recognizes textual representations of symbols, arrows and dashes.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Textual symbol replacements&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 28.5714%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 28.5715%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;Syntax&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;Unicode Replacement&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;Rendered&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Copyright&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;(C)&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;amp;#169;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;©&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Registered&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;(R)&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;amp;#174;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;®&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Trademark&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;(TM)&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;amp;#8482;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;™&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Em dash&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;--&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;amp;#8212;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt; — &lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Only replaced if between two word characters, between a word character and a line boundary, or flanked by spaces.&lt;/p&gt;
&lt;p class=&quot;tableblock&quot;&gt;When flanked by space characters (e.g., &lt;code&gt;a -- b&lt;/code&gt;), the normal spaces are replaced by thin spaces (&amp;amp;#8201;).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ellipsis&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;...&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;amp;#8230;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;…​&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Single right arrow&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;-&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;amp;#8594;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;→&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Double right arrow&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;=&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;amp;#8658;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;⇒&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Single left arrow&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;lt;-&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;amp;#8592;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;←&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Double left arrow&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;lt;=&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;&amp;amp;#8656;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;⇐&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Typographic apostrophe&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;Sam&apos;s&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;Sam&amp;amp;#8217;s&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sam’s&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The typewriter apostrophe is replaced with the typographic (aka curly) apostrophe.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;This mild punctuation does not take away from the readability of the text.
In fact, you could argue that it makes the text easier to read.
What’s important is that these are conventions with which you are likely already familiar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Punctuation is used in AsciiDoc to create another very common type of element in documents, &lt;em&gt;lists!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;lists-lists-lists&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#lists-lists-lists&quot;&gt;&lt;/a&gt;Lists, lists, lists&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;There are three types of lists supported in AsciiDoc:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;Unordered&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Ordered&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Unordered and ordered lists are structurally very similar.
They consist of items that are prefixed by different types of markers (i.e., bullet).
In contrast, description lists—​also called variable, labeled, or term-definition lists—​are collections of terms that each have their own supporting content.
Unlike unordered and ordered lists, description lists are rarely nested, though they often contain the former.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Let’s explore each type of list, then mix them together.
We’ll also look at how to put complex content inside a list item.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;lists-of-things&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#lists-of-things&quot;&gt;&lt;/a&gt;Lists of things&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you were to create a list in an e-mail, how would you do it?
Chances are, you’d mark list items using the same characters that Asciidoctor uses to find list items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In the example below, each list item is marked using an asterisk (&lt;code&gt;*&lt;/code&gt;), the AsciiDoc syntax specifying an unordered list item.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;* Edgar Allan Poe
* Sheri S. Tepper
* Bill Bryson&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A list item’s first line of text must be offset from the marker (&lt;code&gt;*&lt;/code&gt;) by at least one space.
If you prefer, you can indent list items.
Blank lines are required before and after a list.
Additionally, blank lines are permitted, but not required, between list items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Rendered unordered list&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Edgar Allan Poe&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Sheri S. Tepper&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Bill Bryson&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can add a title to a list by prefixing the title with a period (&lt;code&gt;.&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;.Kizmet&apos;s Favorite Authors
* Edgar Allan Poe
* Sheri S. Tepper
* Bill Bryson&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Rendered unordered list with a title&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Kizmet’s Favorite Authors&lt;/div&gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Edgar Allan Poe&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Sheri S. Tepper&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Bill Bryson&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Was your instinct to use a hyphen (&lt;code&gt;-&lt;/code&gt;) instead of an asterisk to mark list items?
Guess what?
That works too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;- Edgar Allan Poe
- Sheri S. Tepper
- Bill Bryson&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You should reserve the hyphen for lists that only have a single level because the hyphen marker (&lt;code&gt;-&lt;/code&gt;) doesn’t work for nested lists.
Now that we’ve mentioned nested lists, let’s go to the next section and learn how to create lists with multiple levels.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;separating-lists&quot; class=&quot;sidebarblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Separating Lists&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you have adjacent lists, they have the tendency to want to fuse together.
To force lists apart, insert a line comment (&lt;code&gt;//&lt;/code&gt;) surrounded by blank lines between the two lists.
Here’s an example, where the &lt;code&gt;-&lt;/code&gt; text in the line comment indicates the line serves as an “end of list” marker:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;* Apples
* Oranges

//-

* Walnuts
* Almonds&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To nest an item, just add another asterisk (&lt;code&gt;*&lt;/code&gt;) to the marker, and another for each subsequent level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;.Possible DefOps manual locations
* West wood maze
** Maze heart
*** Reflection pool
** Secret exit
* Untracked file in git repository&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Rendered nested, unordered list&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Possible DefOps manual locations&lt;/div&gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;West wood maze&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Maze heart&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Reflection pool&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Secret exit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Untracked file in git repository&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In Asciidoctor 1.5.7 and earlier you could only have up to six (6) levels of nesting (assuming one level uses the hyphen marker).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Since Asciidoctor 1.5.8, you can nest unordered lists to any depth.
Keep in mind, however, that some interfaces will begin flattening lists after a certain depth.
GitHub starts flattening list after 10 levels of nesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;* level 1
** level 2
*** level 3
**** level 4
***** level 5
* level 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;level 2&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;level 3&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;level 4&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;level 5&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;level 1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;While it would seem as though the number of asterisks represents the nesting level, that’s not how depth is determined.
A new level is created for each unique marker encountered.
However, it’s much more intuitive to follow the convention that the number of asterisks equals the level of nesting.
After all, we’re shooting for plain text markup that is readable &lt;em&gt;as is&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;ordering-the-things&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#ordering-the-things&quot;&gt;&lt;/a&gt;Ordering the things&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Sometimes, we need to number the items in a list.
Instinct might tell you to prefix each item with a number, like in this next list:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;1. Protons
2. Electrons
3. Neutrons&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The above works, but
since the numbering is obvious, the AsciiDoc processor will insert the numbers for you if you omit them:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;. Protons
. Electrons
. Neutrons&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;Protons&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Electrons&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Neutrons&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you decide to use number for your ordered list, you have to keep them sequential.
This differs from other lightweight markup languages.
It’s one way to adjust the numbering offset of a list.
For instance, you can type:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;4. Step four
5. Step five
6. Step six&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;However, in general the best practice is to use the &lt;code&gt;start&lt;/code&gt; attribute to configure this sort of thing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[start=4]
. Step four
. Step five
. Step six&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To present the items in reverse order, add the &lt;code&gt;reversed&lt;/code&gt; option:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[%reversed]
.Parts of an atom
. Protons
. Electrons
. Neutrons&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Parts of an atom&lt;/div&gt;
&lt;ol class=&quot;arabic&quot; reversed=&quot;&quot;&gt;
&lt;li &gt;
&lt;p&gt;Protons&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Electrons&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Neutrons&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can give a list a title by prefixing the line with a dot immediately followed by the text (without leaving any space after the dot).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s an example of a list with a title:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;.Parts of an atom
. Protons
. Electrons
. Neutrons&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Parts of an atom&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;Protons&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Electrons&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Neutrons&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You create a nested item by using one or more dots in front of each the item.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;. Step 1
. Step 2
.. Step 2a
.. Step 2b
. Step 3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;AsciiDoc selects a different number scheme for each level of nesting.
Here’s how the previous list renders:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;A nested ordered list&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;Step 1&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Step 2&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot; &gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li &gt;
&lt;p&gt;Step 2a&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Step 2b&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Step 3&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Like with the asterisks in an unordered list, the number of dots in an ordered list doesn’t represent the nesting level.
However, it’s much more intuitive to follow this convention:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
# of dots = level of nesting
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Again, we are shooting for plain text markup that is readable &lt;em&gt;as is&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Asciidoctor works hard to infer the relationships between the items that are most intuitive to us humans.
Here’s an example of nesting an unordered list inside of an ordered list:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;. Linux
* Fedora
* Ubuntu
* Slackware
. BSD
* FreeBSD
* NetBSD&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;Linux&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Fedora&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Slackware&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;BSD&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;FreeBSD&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;NetBSD&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can spread the items out and indent the nested lists if that makes it more readable for you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;. Linux

  * Fedora
  * Ubuntu
  * Slackware

. BSD

  * FreeBSD
  * NetBSD&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The following table shows the numbering scheme used by default for each nesting level.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Ordered list numbering scheme by level&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;Level&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Numbering Scheme&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Examples&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;CSS class (HTML converter)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Arabic&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1. 2. 3.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;arabic&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lower Alpha&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;a. b. c.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;loweralpha&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Lower Roman&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;i. ii. iii.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;lowerroman&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Upper Alpha&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;A. B. C.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;upperalpha&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Upper Roman&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;I. II. III.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;upperroman&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can override the number scheme for any level by setting its style (the first positional entry in a block attribute list).
You can also set the starting number using the &lt;code&gt;start&lt;/code&gt; attribute:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[lowerroman, start=5]
. Five
. Six
[loweralpha]
.. a
.. b
.. c
. Seven&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;description-lists&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#description-lists&quot;&gt;&lt;/a&gt;Description lists&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A description list (often abbreviate as dlist) is useful when you need to include a description or supporting text for one or more terms.
Each item in a description list consists of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;one or more terms&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;a separator following each term (typically a double colon, &lt;code&gt;::&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;at least one space or endline&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;the supporting content (either text, attached blocks, or both)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s an example of a description list that identifies parts of a computer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;CPU:: The brain of the computer.
Hard drive:: Permanent storage for operating system and/or user files.
RAM:: Temporarily stores information the CPU uses during operation.
Keyboard:: Used to enter text or control items on the screen.
Mouse:: Used to point to and select items on your computer screen.
Monitor:: Displays information in visual form using text and graphics.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;By default, the content of each item is displayed below the description when rendered.
Here’s a preview of how this list is rendered:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;A basic description list&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;CPU&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The brain of the computer.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Hard drive&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Permanent storage for operating system and/or user files.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;RAM&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Temporarily stores information the CPU uses during operation.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Keyboard&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Used to enter text or control items on the screen.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Mouse&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Used to point to and select items on your computer screen.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Monitor&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Displays information in visual form using text and graphics.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you want the description and content to appear on the same line, add the horizontal style to the list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[horizontal]
CPU:: The brain of the computer.
Hard drive:: Permanent storage for operating system and/or user files.
RAM:: Temporarily stores information the CPU uses during operation.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;hdlist&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
CPU
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;The brain of the computer.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Hard drive
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;Permanent storage for operating system and/or user files.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
RAM
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;Temporarily stores information the CPU uses during operation.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The content of a description list can be any AsciiDoc element.
For instance, we could rewrite the grocery list from above so that each aisle is a description rather than a parent outline list item.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Dairy::
* Milk
* Eggs
Bakery::
* Bread
Produce::
* Bananas&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Dairy&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Milk&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Eggs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Bakery&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Bread&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Produce&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Bananas&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Description lists are quite lenient about whitespace, so you can spread the items out and even indent the content if that makes it more readable for you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Dairy::

  * Milk
  * Eggs

Bakery::

  * Bread

Produce::

  * Bananas&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;hybrid-lists&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#hybrid-lists&quot;&gt;&lt;/a&gt;Hybrid lists&lt;/h4&gt;
&lt;div id=&quot;three-hybrid&quot; class=&quot;paragraph&quot; &gt;
&lt;p&gt;Finally, you can mix and match the three list types within a single hybrid list.
Asciidoctor works hard to infer the relationships between the items that are most intuitive to us humans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s a list that mixes description, ordered, and unordered list items:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Operating Systems::
  Linux:::
    . Fedora
      * Desktop
    . Ubuntu
      * Desktop
      * Server
  BSD:::
    . FreeBSD
    . NetBSD

Cloud Providers::
  PaaS:::
    . OpenShift
    . CloudBees
  IaaS:::
    . Amazon EC2
    . Rackspace&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s how the list is rendered:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;A hybrid list&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Operating Systems&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Linux&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;Fedora&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Desktop&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Ubuntu&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Desktop&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;BSD&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;FreeBSD&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;NetBSD&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Cloud Providers&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;PaaS&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;OpenShift&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;CloudBees&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;IaaS&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;Amazon EC2&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Rackspace&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can include more complex content in a list item as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;links-and-images&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-images&quot;&gt;&lt;/a&gt;Links and images&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;AsciiDoc makes it easy to include links, images and other types of media in a document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;external-links&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#external-links&quot;&gt;&lt;/a&gt;External links&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;There’s nothing you have to do to make a link to a URL.
Just include the URL in the document and AsciiDoc will turn it into a link.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Asciidoctor recognizes the following common schemes without the help of any markup.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;schemes&quot; class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;http&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;https&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;ftp&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;irc&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;mailto&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;email@email.com&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can think of these like implicit macro names (the bare email address being a special case).
Since the URL in the example below begins with a protocol (in this case &lt;em&gt;https&lt;/em&gt; followed by a colon), Asciidoctor will automatically turn it into a hyperlink when it is processed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;The homepage for the Asciidoctor Project is https://asciidoctor.org. &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The trailing period will not get caught up in the link.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To prevent automatic linking of an URL, prepend it with a backslash (&lt;code&gt;\&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Once launched, the site will be available at \https://example.org.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you prefer URLs to be shown with the scheme hidden, set the &lt;code&gt;hide-uri-scheme&lt;/code&gt; attribute in the document’s header.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;:hide-uri-scheme:

https://asciidoctor.org&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;When the hide-uri-scheme attribute is set, the above URL will render as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;a href=&quot;https://asciidoctor.org&quot;&amp;gt;asciidoctor.org&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Note the absence of &lt;em&gt;https&lt;/em&gt; inside the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To attach a URL to text, enclose the text in square brackets at the end of the URL, thus making it an URL macro:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Chat with other Fedora users in the irc://irc.freenode.org/#fedora[Fedora IRC channel].&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;When a URL does not start with one of the &lt;a href=&quot;#schemes&quot;&gt;common schemes&lt;/a&gt;, or the URL is not surrounded by word boundaries, you must use the &lt;code&gt;link&lt;/code&gt; macro.
The &lt;code&gt;link&lt;/code&gt; macro is a stronger version of a URI macro, which you can think of like an unconstrained macro.
The URL is preceded by &lt;code&gt;link:&lt;/code&gt; and followed by square brackets.
The square brackets may include optional link text.
The URL is used for the text of the link if link text is not specified.
Prior to 1.5.7, if the &lt;code&gt;linkattrs&lt;/code&gt; document attribute is set, the text in square brackets is parsed as attributes, which allows a window name or role to be specified.
Since 1.5.7, attributes are parsed automatically if an equal sign is found after a comma (e.g., &lt;code&gt;[link text,window=_blank]&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Anatomy of a link macro&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;link:url[optional link text, optional target attribute, optional role attribute]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Let’s consider a case where we need to use the link macro (instead of just a URI macro) to expand a link when it’s not adjacent to a word boundary (i.e., unconstrained).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;search/link:https://ecosia.org[Ecosia]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;search/&lt;a href=&quot;https://ecosia.org&quot;&gt;Ecosia&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If we didn’t use the &lt;code&gt;link:&lt;/code&gt; prefix in this case, the URL macro would not be detected by the parser.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;target-window-and-role-attributes-for-links&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#target-window-and-role-attributes-for-links&quot;&gt;&lt;/a&gt;Target window and role attributes for links&lt;/h4&gt;
&lt;div id=&quot;link-macro-attributes&quot; class=&quot;paragraph&quot; &gt;
&lt;p&gt;Prior to 1.5.7, Asciidoctor &lt;em&gt;does not&lt;/em&gt; parse attributes in the link macro by default.
If you want attributes in the link macro to be parsed, you must set the &lt;code&gt;linkattrs&lt;/code&gt; document attribute in the header.
Since 1.5.7, this parsing is automatic (and the attribute is not required) if an equal sign is found after a comma.
When attribute parsing is enabled, you can then specify the name of the target window using the &lt;code&gt;window&lt;/code&gt; attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;= Asciidoctor Document Title

Let&apos;s view the raw HTML of the link:view-source:asciidoctor.org[Asciidoctor homepage,window=_blank].&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Let’s view the raw HTML of the &lt;a href=&quot;view-source:asciidoctor.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Asciidoctor homepage&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Since &lt;code&gt;_blank&lt;/code&gt; is the most common window name, we’ve introduced shorthand for it.
Just end the link text with a caret (&lt;code&gt;^&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Let&apos;s view the raw HTML of the link:view-source:asciidoctor.org[Asciidoctor homepage^].&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you use the caret syntax more than once in a single paragraph, you may need to escape the first occurrence with a backslash.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;When attribute parsing is enabled, you can add a role (i.e., CSS class) to the link.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Chat with other Asciidoctor users on the https://discuss.asciidoctor.org/[*mailing list*^,role=green].&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Chat with other Asciidoctor users on the &lt;a href=&quot;https://discuss.asciidoctor.org/&quot; class=&quot;green&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;mailing list&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Links with attributes (including the subject and body segments on mailto links) are a feature unique to Asciidoctor.
When they’re enabled, you must surround the link text in double quotes if it contains a comma.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;links-to-relative-files&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-to-relative-files&quot;&gt;&lt;/a&gt;Links to relative files&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you want to link to an external file relative to the current document, use the &lt;code&gt;link&lt;/code&gt; macro in front of the file name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;link:protocol.json[Open the JSON file]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If your file is an HTML file, you can link directly to a section in the document, append a hash (&lt;code&gt;#&lt;/code&gt;) followed by the section’s ID to the end of the file name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;link:external.html#livereload[LiveReload]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For links to relative AsciiDoc documents cross references should be used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;cross-references&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#cross-references&quot;&gt;&lt;/a&gt;Cross references&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A link to another location within an AsciiDoc document or between AsciiDoc documents is called a &lt;em&gt;cross reference&lt;/em&gt; (also referred to as an &lt;em&gt;xref&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In Asciidoctor, the inline xref macro is used to create cross references (also called in-text or page citations) to content elements (sections, blocks, or phrases) that have an ID (regardless of whether that ID is explicit or auto-generated).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You create a cross reference by enclosing the ID of the target block or section (or the path of another document with an optional anchor) in double angled brackets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Cross reference using the ID of the target section&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;The section &amp;lt;&amp;lt;images&amp;gt;&amp;gt; describes how to insert images into your document.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Rendered cross reference using the ID of the target section&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The section &lt;a href=&quot;#images&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-photo&quot;&gt;&lt;/i&gt;&lt;/span&gt; Images&lt;/a&gt; describes how to insert images into your document.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can also link to a block or section using the title by referencing its title, referred to as a &lt;em class=&quot;term&quot;&gt;natural cross reference&lt;/em&gt;.
The title must contain at least one space character or contain at least one uppercase letter.
(If you are using Ruby &amp;lt; 2.4, that uppercase letter is restricted to the basic Latin charset).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Cross reference using a section’s title&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Refer to &amp;lt;&amp;lt;Internal Cross References&amp;gt;&amp;gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Rendered cross reference using a section’s title&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Refer to &lt;a href=&quot;#cross-references&quot;&gt;[cross-references]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Converters usually use the reftext of the target as the default text of the link.
When the document is parsed, attribute references in the reftext are substituted immediately.
When the reftext is displayed, additional reftext substitutions are applied to the text (specialchars, quotes, and replacements).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can override the reftext of the target by specifying alternative text at the location of the cross reference.
After the ID, add a comma and then enter the custom text you want the cross reference to display.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Cross reference with custom xreflabel text&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Learn how to &amp;lt;&amp;lt;link-macro-attributes,use attributes within the link macro&amp;gt;&amp;gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Rendered cross reference using custom xreflabel text&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Learn how to &lt;a href=&quot;#link-macro-attributes&quot;&gt;use attributes within the link macro&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can also use the inline xref macro as an alternative to the double angled bracket form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Inline xref macro&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Learn how to xref:link-macro-attributes[use attributes within the link macro].&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Cross references can also be used to create a link to a file relative to the current document.
For links to another AsciiDoc document, this is the preferred way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The trailing hash (&lt;code&gt;#&lt;/code&gt;) means that you refer to the top of the document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Cross reference to the top of a relative AsciiDoc document&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Refer to &amp;lt;&amp;lt;document-b.adoc#,Document B&amp;gt;&amp;gt; for more information.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Converted HTML for cross reference to relative AsciiDoc document&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-html hljs&quot; data-lang=&quot;html&quot;&gt;Refer to &amp;lt;a href=&quot;document-b.html&quot;&amp;gt;Document B&amp;lt;/a&amp;gt; for more information.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To link directly to a section in the document, append the section’s ID after the hash (&lt;code&gt;#&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Cross reference to a specific section of a relative AsciiDoc document&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Refer to &amp;lt;&amp;lt;document-b.adoc#section-b,Section B&amp;gt;&amp;gt; for more information.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Converted HTML for cross reference to section of a relative AsciiDoc document&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-html hljs&quot; data-lang=&quot;html&quot;&gt;Refer to &amp;lt;a href=&quot;document-b.html#section-b&quot;&amp;gt;Section B&amp;lt;/a&amp;gt; for more information.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In both cases, this syntax will also work if you are inside the document you are referring to.
This is useful if you are sharing the same link across multiple documents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In the link that is created from the inter-document cross reference, the source file extension is replaced with the value of the &lt;code&gt;outfilesuffix&lt;/code&gt; attribute.
To customize the file extension used in the target of the link, simply change the value of this attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Image references are similar to links since they are also references to URLs or files.
The difference, of course, is that they display the image in the document.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;images&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#images&quot;&gt;&lt;/a&gt;Images&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To include an image on its own line (i.e., a &lt;em&gt;block image&lt;/em&gt;), use the &lt;code&gt;image::&lt;/code&gt; prefix in front of the file name and square brackets after it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;image::sunset.jpg[]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you want to specify alt text, include it inside the square brackets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;image::sunset.jpg[Sunset]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can also give the image an id, a title (i.e., caption), set its dimensions (i.e., width and height) and make it a link:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[#img-sunset]
.A mountain sunset
[link=https://www.flickr.com/photos/javh/5448336655]
image::sunset.jpg[Sunset,300,200]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The title of a block image is displayed underneath the image when rendered.
Here’s a preview:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;A hyperlinked image with caption&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div id=&quot;img-sunset&quot; class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.flickr.com/photos/javh/5448336655&quot;&gt;&lt;img src=&quot;/images/sunset.jpg&quot; alt=&quot;Sunset&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot; &gt;A mountain sunset&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Images are resolved relative to the value of the &lt;code&gt;imagesdir&lt;/code&gt; document attribute, which defaults to an empty value.
The &lt;code&gt;imagesdir&lt;/code&gt; attribute can be an absolute path, relative path or base URL.
If the image target is a URL or an absolute path, the &lt;code&gt;imagesdir&lt;/code&gt; prefix is &lt;em&gt;not&lt;/em&gt; added.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You should use the &lt;code&gt;imagesdir&lt;/code&gt; attribute to avoid hard coding the shared path to your images in every image macro.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you want to include an image inline, use the &lt;code&gt;image:&lt;/code&gt; prefix instead (notice there is only one colon):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Press the image:save.png[Save, title=&quot;Save&quot;] button.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For inline images, the optional title is displayed as a tooltip.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If paragraphs and lists are the meat of the document, then titles and sections are its bones.
Let’s explore how to give structure to our document.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;titles-titles-titles&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#titles-titles-titles&quot;&gt;&lt;/a&gt;Titles, titles, titles&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;AsciiDoc supports three types of titles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;Document title&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Section title&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Block title&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;All titles are optional in AsciiDoc.
This section will define each title type and explain how and when to use them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;document-title&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#document-title&quot;&gt;&lt;/a&gt;Document title&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Just as every e-mail has a subject, every document (typically) has a title.
The title goes at the top of an AsciiDoc document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A document title is an &lt;em&gt;optional&lt;/em&gt; feature of an AsciiDoc document.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To create a document title, begin the first line of the document with one equal sign followed by at least one space (&lt;code&gt;= &lt;/code&gt;), then the text of the title.
This syntax is the simplest (and thus recommended) way to declare a document title.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s an example of a document title followed by an abbreviated paragraph:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;= Lightweight Markup Languages

According to Wikipedia...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The document title is part of the document header.
So, what else can go in the header?
Good question.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;the-document-header&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-document-header&quot;&gt;&lt;/a&gt;The document header&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Notice the blank line between the title line and the first line of content in the previous example.
This blank line separates the document header from the document body (in this case a paragraph).
The document title is part of the document header.
In all, the document header contains the title, author, revision information and document-wide attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If the title line is not offset by a blank line, it gets interpreted as a section title, which we’ll discuss later.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Your document now has a title, but what about an author?
Just as every e-mail has a sender, every document must surely have an author.
Let’s see how to add additional information to the header, including an author.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;There are two optional lines of text you can add immediately below the document title for defining common document attributes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Line 1&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Author name and an optional e-mail address&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Line 2&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An optional revision, a date and an optional remark&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Let’s add these lines to our document:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;= Lightweight Markup Languages
Doc Writer &amp;lt;doc.writer@asciidoc.org&amp;gt;
v1.0, 2012-01-01

According to Wikipedia...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The header now contains a document title, an author, a revision number, and a date.
This information will typically be displayed as a formatted header at the top of the output document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The header, including the document title, is &lt;em&gt;not required&lt;/em&gt;.
If absent, the AsciiDoc processor will happily convert whatever content is present.
The header is only used when generating a full document.
It’s excluded from the output of an embedded document.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The document header can also be used to define attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;document-attributes&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#document-attributes&quot;&gt;&lt;/a&gt;Document attributes&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Attributes are one of the features that sets AsciiDoc apart from other lightweight markup languages.
You can use attributes to toggle features or to store reusable or replacement content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Most often, attributes are defined in the document header.
There are scenarios where they can be defined inline, but we’ll focus on the more common usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;An attribute entry consists of a name surrounded by colons at the beginning of the line followed by at least one space, then the content.
The content is optional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s an example of an attribute that holds the version of an application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;= User Guide
Doc Writer &amp;lt;doc.writer@asciidoc.org&amp;gt;
2012-01-01
:appversion: 1.0.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There should be no blank lines between the first attribute entry and the rest of the header.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Now you can refer to this attribute anywhere in the document (where attribute substitution is performed) by surrounding the name in curly braces:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;The current version of the application is {appversion}.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Attributes are also commonly used to store URLs, which can get quite lengthy.
Here’s an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;:fedpkg: https://apps.fedoraproject.org/packages/rubygem-asciidoctor&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s the attribute in use:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;Information about the Asciidoctor package for Fedora can found at {fedpkg}.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Document attributes can also be used to toggle settings or set configuration variables that control the output generated by the AsciiDoc processor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For example, to include a table of contents in your document, you can define the &lt;code&gt;toc&lt;/code&gt; attribute:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;:toc:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To undefine an attribute, place a &lt;code&gt;!&lt;/code&gt; at the end of the name:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;:linkcss!:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can also set the base path to images (default: &lt;em&gt;empty&lt;/em&gt;), icons (default: &lt;code&gt;./images/icons&lt;/code&gt;), stylesheets (default: &lt;code&gt;./stylesheets&lt;/code&gt;) and JavaScript files (default: &lt;code&gt;./javascripts&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;:imagesdir: ./images
:iconsdir: ./icons
:stylesdir: ./styles
:scriptsdir: ./js&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Attribute values can also be set and overridden when invoking the AsciiDoc processor.
We’ll explore that feature later.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;When you find yourself typing the same text repeatedly, or text that often needs to be updated, consider assigning it to a document attribute and use that instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;As your document grows, you’ll want to break the content into sections, like in this guide.
That’s accomplished using section titles.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;section-titles&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#section-titles&quot;&gt;&lt;/a&gt;Section titles&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Sections partition the document into a content hierarchy.
In AsciiDoc, sections are defined using section titles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A section title uses the same syntax as a document title, except the line may begin with two to six equal signs instead of just a single equal sign.
The number of equal signs represents the nesting level (using a 0-based index).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here are all the section levels permitted in an AsciiDoc document (for an article doctype, the default), shown below the document title:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;= Document Title (Level 0)

== Level 1 Section

=== Level 2 Section

==== Level 3 Section

===== Level 4 Section

====== Level 5 Section

== Another Level 1 Section&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When the document is converted to HTML 5 (using the built-in &lt;code&gt;html5&lt;/code&gt; backend), each section title becomes a heading element where the heading level matches the number of equal signs.
For example, a level 1 section (2 equal signs) maps to an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Section levels cannot be chosen arbitrarily.
There are two rules you must follow:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;A document can only have multiple level 0 sections if the &lt;code&gt;doctype&lt;/code&gt; is set to &lt;code&gt;book&lt;/code&gt;.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Section levels cannot be skipped when nesting sections&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For example, the following syntax is illegal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;= Document Title

= Illegal Level 0 Section (violates rule #1)

== First Section

==== Illegal Nested Section (violates rule #2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Content above the first section (after the document title) is part of the preamble.
Once the first section is reached, content is associated with the section that precedes it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;== First Section

Content of first section

=== Nested Section

Content of nested section

== Second Section

Content of second section&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
In addition to the equals marker used for defining single-line section titles, Asciidoctor recognizes the hash symbol (&lt;code&gt;#&lt;/code&gt;) from Markdown.
That means the outline of a Markdown document will convert just fine as an AsciiDoc document.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To have the processor auto-number the sections, define the &lt;code&gt;sectnums&lt;/code&gt; attribute in the document header:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;:sectnums:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can also use this attribute entry above any section title in the document to toggle the auto-numbering setting.
When you want to turn off the numbering, add an exclamation point to the end of the attribute name:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;:sectnums!:

== Unnumbered Section&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;preamble&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#preamble&quot;&gt;&lt;/a&gt;Preamble&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Content between the document title and the first section is called the preamble.
If a document title is not present, this content is not wrapped in a preamble section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;= Document Title

preamble

another preamble paragraph

== First Section&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When using the default Asciidoctor stylesheet, this preamble is rendered in the style of a lead (i.e., larger font).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can also assign titles to individual elements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;block-titles&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#block-titles&quot;&gt;&lt;/a&gt;Block titles&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can assign a title to any paragraph, list or delimited block element.
The title is used as the element’s caption.
In most cases, the title is displayed immediately above the content.
If the content is a figure or image, the title is displayed below the content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A block title is defined on a line above the element.
The line must begin with a dot (&lt;code&gt;.&lt;/code&gt;) and be followed immediately by the title text with no spaces in between.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s an example of a list with a title:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;.TODO list
- Learn the AsciiDoc syntax
- Install AsciiDoc
- Write my document in AsciiDoc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Speaking of block titles, let’s dig into blocks and discover which types of blocks AsciiDoc supports.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;building-blocks-in-asciidoc&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-blocks-in-asciidoc&quot;&gt;&lt;/a&gt;Building blocks in AsciiDoc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;AsciiDoc provides a nice set of components for including non-paragraph text—​such as block quotes, source code listings, sidebars and tables—​in your document.
These components are referred to as &lt;em&gt;delimited blocks&lt;/em&gt; because they are surrounded by delimiter lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;delimited-blocks&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#delimited-blocks&quot;&gt;&lt;/a&gt;Delimited blocks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You’ve already seen many examples of the listing block (i.e., code block), which is surrounded by lines with four or more hyphens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;----
This is an example of a _listing block_.
The content inside is displayed as &amp;lt;pre&amp;gt; text.
----&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Within the boundaries of a delimited block, you can enter any content or blank lines.
The block doesn’t end until the ending delimiter is found.
The delimiters around the block determine the type of block, how the content is processed and converted and what elements are used to wrap the content in the output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s how the block above appears when converted to HTML and viewed in a browser:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;This is an example of a _listing block_.
The content inside is displayed as &amp;lt;pre&amp;gt; text.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s the HTML source that is generated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-html hljs&quot; data-lang=&quot;html&quot;&gt;&amp;lt;div class=&quot;listingblock&quot;&amp;gt;
  &amp;lt;div class=&quot;content monospaced&quot;&amp;gt;
    &amp;lt;pre&amp;gt;This is an example of a _listing block_.
The content inside is displayed as &amp;amp;lt;pre&amp;amp;gt; text.&amp;lt;/pre&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You should notice a few things about how the content is processed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;the HTML tag &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; is escaped&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;the endlines are preserved&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;the phrase “listing block” is not italicized, despite having underscores around it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Each type of block is processed according to its purpose.
Literal blocks don’t receive the full set of substitutions normally applied to a paragraph.
Since a listing block is typically used for source code, substitutions are not desirable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The following table identifies the delimited blocks that AsciiDoc provides by default, their purpose and what substitutions are performed on its content.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name (Style)&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Line delimiter&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Purpose&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Substitutions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;comment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;....&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Private notes that are not displayed in the output&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;none&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;example&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;....&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Designates example content or defines an admonition block&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;normal&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;literal&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;....&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Output text to be displayed exactly as entered&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;verbatim&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;listing, source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;----&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Source code or keyboard input to be displayed as entered&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;verbatim&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;open&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;--&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Anonymous block that can act as any other block (except &lt;em&gt;pass&lt;/em&gt; or &lt;em&gt;table&lt;/em&gt;)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;varies&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pass&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;++++&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Raw text to be passed through unprocessed&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;none&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;quote, verse&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;____&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;A quotation or verse with optional attribution&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;normal&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;sidebar&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;****&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Aside text displayed outside the flow of the document&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;normal&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;table&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;literal&quot; &gt;&lt;pre&gt;|===&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Used to display tabular content or advanced layouts&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;varies&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;admonitionblock important&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
AsciiDoc allows delimited lines to be longer than 4 characters.
&lt;strong&gt;Don’t do it.&lt;/strong&gt;
Maintaining long delimiter lines is a &lt;em&gt;colossal&lt;/em&gt; waste of time, not to mention arbitrary and error prone.
Use the minimum line length required to create a delimited block and &lt;em&gt;move on&lt;/em&gt; to drafting the content.
The reader will never see the long delimiters anyway since they are not carried over to the output.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;This table shows the substitutions performed by each substitution group referenced in the previous table.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Group / Substitution&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Normal&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Verbatim&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;None&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Special chars&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Callouts&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Quotes&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Attributes&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Replacements&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Macros&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Post replacements&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In order to apply normal substitutions to an attribute value, surround it with single quotes.
There are two exceptions to this behavior: At the moment normal substitutions are not applied to
the &lt;code&gt;options&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; attribute values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can control how blocks are displayed using block metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;block-metadata&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#block-metadata&quot;&gt;&lt;/a&gt;Block metadata&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Metadata can be assigned to any block.
There are several types of metadata:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Title&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Id (i.e., anchor)&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Style (first unnamed block attribute)&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Named block attributes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s an example of a quote block that includes all types of metadata:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;.Gettysburg Address
[[gettysburg]]
[quote, Abraham Lincoln, Address delivered at the dedication of the Cemetery at Gettysburg]
____
Four score and seven years ago our fathers brought forth
on this continent a new nation...

Now we are engaged in a great civil war, testing whether
that nation, or any nation so conceived and so dedicated,
can long endure. ...
____&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s the metadata extracted from this block:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Title&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Gettysburg Address&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Id&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;gettysburg&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Style&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;quote&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Named block attributes&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;attribution&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Abraham Lincoln&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;citetitle&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Address delivered at the dedication of the Cemetery at Gettysburg&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
A block can have multiple block attribute lines.
The attributes will be aggregated.
If there is a name conflict, the last attribute defined wins.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Some metadata is used as supplementary content, such as the title, whereas other metadata, such as the style, controls how the block is converted.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;masquerading-blocks&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#masquerading-blocks&quot;&gt;&lt;/a&gt;Masquerading blocks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Some blocks can masquerade as other blocks, a feature which is controlled by the block style.
The block style is the first positional attribute in the block attribute list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;admonition-blocks&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#admonition-blocks&quot;&gt;&lt;/a&gt;Admonition blocks&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For instance, an example block can act as an admonition block:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[NOTE]
====
This is an example of an admonition block.

Unlike an admonition paragraph, it may contain any AsciiDoc content.
The style can be any one of the admonition labels:

* NOTE
* TIP
* WARNING
* CAUTION
* IMPORTANT
====&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;listing-and-source-code-blocks&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#listing-and-source-code-blocks&quot;&gt;&lt;/a&gt;Listing and source code blocks&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;At the start of this tutorial, remember how painful we said it is to insert source code into a document using a traditional word processor.
They just aren’t designed for that use case.
&lt;strong&gt;AsciiDoc is!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In fact, inserting source code in an AsciiDoc is incredibly easy.
Just shove the raw code into a listing block.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;----
require &apos;asciidoctor&apos;

puts Asciidoctor.convert_file &apos;mysample.adoc&apos;, to_file: false
----&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To enable syntax highlighting in the output, set the style on the block to &lt;code&gt;source&lt;/code&gt; and specify the source language in the second attribute position.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[source,ruby]
----
require &apos;asciidoctor&apos;

puts Asciidoctor.convert_file &apos;mysample.adoc&apos;, to_file: false
----&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can even use source code that’s in a separate file.
Just use the AsciiDoc include directive:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[source,ruby]
----
include::example.rb[]
----&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To really show how well-suited AsciiDoc is for technical documentation, it also supports callouts in source code.
Code callouts are used to explain lines of source code.
The explanations are specified below the listing and keyed by number.
Here’s an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[source,ruby]
----
require &apos;asciidoctor&apos;  # &amp;lt;1&amp;gt;

Asciidoctor.convert_file &apos;mysample.adoc&apos;  # &amp;lt;2&amp;gt;
----
&amp;lt;1&amp;gt; Imports the library
&amp;lt;2&amp;gt; Reads, parses, and converts the file&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s how the callouts appear when rendered:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;eg-callouts&quot; class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;Source code with callouts&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-ruby hljs&quot; data-lang=&quot;ruby&quot;&gt;require &apos;asciidoctor&apos;  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

puts Asciidoctor.convert_file &apos;mysample.adoc&apos;  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Imports the library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Reads, parses, and converts the file&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;open-blocks&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#open-blocks&quot;&gt;&lt;/a&gt;Open blocks&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The most versatile block of all is the open block.
An open block can act as any other block, with the exception of &lt;em&gt;pass&lt;/em&gt; and &lt;em&gt;table&lt;/em&gt;.
Here’s an example of an open block acting as a sidebar:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[sidebar]
.Related information
--
This is aside text.

It is used to present information related to the main content.
--&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;pass-blocks&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#pass-blocks&quot;&gt;&lt;/a&gt;Passthrough blocks&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The “anything goes” mechanism in AsciiDoc is the passthrough block.
As the name implies, this block passes the content of the block directly through to the output document.
When you’ve encountered a complex requirement that you cannot meet using the AsciiDoc syntax, a passthrough block can come in very handy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For example, let’s say you want to embed a GitHub gist into your document.
You can define the following passthrough block:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;++++
&amp;lt;script src=&quot;https://gist.github.com/piscisaureus/3342247.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
++++&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Using a passthrough block couples your content to a specific output format, such as HTML.
If you’re going to use a passthrough block, we recommend using {user-ref}#conditional-preprocessor-directives[conditional preprocessor directives] to associate the format-specific content with each backend you intend to support.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;delimiters-optional&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#delimiters-optional&quot;&gt;&lt;/a&gt;Delimiters optional&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If the content is contiguous (not interrupted by blank lines), you can forgo the use of the block delimiters and instead use the block style above a paragraph to repurpose it as one of the delimited block types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;This format is often used for single-line listings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[listing]
sudo dnf install asciidoc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;or single-line quotes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[quote]
Never do today what you can put off &apos;til tomorrow.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;While most blocks are linear, tables give you the ability to layout content horizontally as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;a-new-perspective-on-tables&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-new-perspective-on-tables&quot;&gt;&lt;/a&gt;A new perspective on tables&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Tables are one of the most refined areas of the AsciiDoc syntax.
They are easy to create, easy to read in raw form and also remarkably sophisticated.
I recommend that you use tables sparingly because they interrupt the conversation with your readers.
When they are the most suitable way to present the information, know that you’ve got a powerful tool in your hands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can think of a table as a delimited block that contains one or more bulleted lists.
The list marker is a vertical bar (&lt;code&gt;|&lt;/code&gt;).
Each list represents one row in the table and must share the same number of items (taking into account any column or row spans).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s a simple example of a table with two columns and three rows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[cols=2*]
|===
|Firefox
|Web Browser

|Ruby
|Programming Language

|TorqueBox
|Application Server
|===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The first non-blank line inside the block delimiter (&lt;code&gt;|===&lt;/code&gt;) determines the number of columns.
Since we are putting each column title on a separate line, we have to use the &lt;code&gt;cols&lt;/code&gt; block attribute to explicitly state that this table has two columns.
The &lt;code&gt;*&lt;/code&gt; is the repeat operator.
It means to repeat the column specification for the remainder of columns.
In this case, it means to repeat no special formatting (since none is present) across 2 columns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;We can make the first row of the table the header by setting the &lt;code&gt;header&lt;/code&gt; option on the table.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[cols=2*,options=header]
|===
|Name
|Group

|Firefox
|Web Browser

|Ruby
|Programming Language

...
|===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can also define the &lt;code&gt;header&lt;/code&gt; option using the following shorthand:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[%header,cols=2*]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Alternatively, we could define the header row on a single line offset from the body rows by a blank line, so neither the &lt;code&gt;cols&lt;/code&gt; nor the &lt;code&gt;options&lt;/code&gt; attributes are required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;|===
|Name |Group

|Firefox
|Web Browser

...
|===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The content of each item (i.e., cell) can span multiple lines, as is the case with other lists in AsciiDoc.
Unlike other lists, the content of each cell may contain blank lines without the need for a list continuation to hold them together.
A new cell begins when another non-escaped vertical bar (&lt;code&gt;|&lt;/code&gt;) is encountered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;|===
|Name |Group |Description

|Firefox
|Web Browser
|Mozilla Firefox is an open-source web browser.
It&apos;s designed for standards compliance,
performance, portability.

|Ruby
|Programming Language
|A programmer&apos;s best friend.

...
|===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can set the relative widths of each column using &lt;em&gt;column specifiers&lt;/em&gt;—a comma-separated list of relative values defined in the &lt;code&gt;cols&lt;/code&gt; block attribute.
The number of entries in the list determines the number of columns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[cols=&quot;2,3,5&quot;]
|===
|Name |Group |Description

|Firefox
|Web Browser
|Mozilla Firefox is an open-source web browser.
It&apos;s designed for standards compliance,
performance and portability.

|Ruby
|Programming Language
|A programmer&apos;s best friend.

...
|===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you want to include blocks or lists inside the contents of a column, you can put an &lt;code&gt;a&lt;/code&gt; (for AsciiDoc) at the end of the column’s relative value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[cols=&quot;2,3,5a&quot;]
|===
|Name |Group |Description

|Firefox
|Web Browser
|Mozilla Firefox is an open-source web browser.
It&apos;s designed for:

* standards compliance,
* performance and
* portability.

|Ruby
|Programming Language
|A programmer&apos;s best friend.

...
|===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Alternatively, you can apply the AsciiDoc style to an individual cell by prefixing the vertical bar with an &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;a|Mozilla Firefox is an open-source web browser.
It&apos;s designed for:

* standards compliance,
* performance and
* portability.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;There’s a whole collection of column and cell specifiers you can use to format the contents of the table, including styling and alignment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;AsciiDoc tables can also be created directly from CSV data.
Just set the &lt;code&gt;format&lt;/code&gt; block attribute to &lt;code&gt;csv&lt;/code&gt; and insert CSV data inside the block delimiters, either directly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[%header,format=csv]
|===
Artist,Track,Genre
Baauer,Harlem Shake,Hip Hop
The Lumineers,Ho Hey,Folk Rock
|===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;or using an &lt;code&gt;include::[]&lt;/code&gt; directive:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;[%header,format=csv]
|===
include::tracks.csv[]
|===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Asciidoctor 0.1.3 also recognizes shorthand notation for setting CSV and DSV table formats.
The first position of the table block delimiter (i.e., &lt;code&gt;|===&lt;/code&gt;) can be replaced by a data delimiter to set the table format accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Instead of specifying the &lt;code&gt;csv&lt;/code&gt; format using an attribute, you can simply replace the leading pipe (&lt;code&gt;|&lt;/code&gt;) with a comma (&lt;code&gt;,&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;,===
a,b,c
,===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In the same way, the &lt;code&gt;dsv&lt;/code&gt; format can be specified by replacing the leading pipe (&lt;code&gt;|&lt;/code&gt;) with a colon (&lt;code&gt;:&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-asciidoc hljs&quot; data-lang=&quot;asciidoc&quot;&gt;:===
a:b:c
:===&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;That’s a pretty powerful option.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;what-else-can-asciidoc-do&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-else-can-asciidoc-do&quot;&gt;&lt;/a&gt;What else can AsciiDoc do?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;We’ve covered many of the features of the AsciiDoc syntax, but it still has much more depth.
AsciiDoc is simple enough for a README, yet can scale to meet the requirements of a publisher.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here are some of the features that the AsciiDoc syntax supports:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;footnotes&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;indexes&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;appendix, preface, dedication, partintro&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;multi-line attributes&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;preprocessor directive (conditional markup)&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;mathematical formulas&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;musical notation&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;diagrams&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;block filters&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;themes&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;custom blocks, macros and output formats&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Consult the {user-ref}[Asciidoctor User Manual] to continue exploring the syntax and processor capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;That’s enough syntax for now.
You’ve created your first AsciiDoc document.
Now it’s time to convert the document into a presentable format.
This will give you a real appreciation for the power that AsciiDoc puts in your hands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;converting-your-document&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#converting-your-document&quot;&gt;&lt;/a&gt;Converting your document&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;While AsciiDoc syntax is designed to be readable in raw form, the intended audience for that format are writers and editors.
Readers aren’t going to appreciate the raw text nearly as much.
Aesthetics matter.
You’ll want to apply nice typography with font sizes that adhere to the “golden ratio”, colors, icons and images to give it the respect it deserves.
That’s where the Asciidoctor processor comes in (&lt;strong&gt;after&lt;/strong&gt; you have done the writing).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The Asciidoctor processor parses the document and translates it into a backend format, such as HTML, ePub, DocBook or PDF.
Asciidoctor ships with a set of default templates in the tin, but you can customize the templates or create your own to get exactly the output you want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Before you can use the Asciidoctor processor, you have to install the &lt;a href=&quot;https://rubygems.org/gems/asciidoctor&quot;&gt;Asciidoctor Ruby Gem&lt;/a&gt;.
Review the &lt;a href=&quot;https://asciidoctor.org/docs/install-toolchain/&quot;&gt;Asciidoctor Installation Guide&lt;/a&gt; if you need help to install the gem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;converting-a-document-to-html-5&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#converting-a-document-to-html-5&quot;&gt;&lt;/a&gt;Converting a document to HTML 5&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Asciidoctor provides both a command line tool and a Ruby API for converting AsciiDoc documents to HTML 5, Docbook 5.0 and custom output formats.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To use Asciidoctor to generate an HTML document, type &lt;code&gt;asciidoctor&lt;/code&gt; followed by your document’s name on the command line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;$ asciidoctor mysample.adoc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;In Asciidoctor, the &lt;strong&gt;html5&lt;/strong&gt; backend is the default, so there’s no need to specify a backend explicitly to generate an HTML 5 document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Asciidoctor also provides a Ruby API, so you can generate an HTML document directly from a Ruby application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-ruby hljs&quot; data-lang=&quot;ruby&quot;&gt;require &apos;asciidoctor&apos;

Asciidoctor.convert_file &apos;mysample.adoc&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Alternatively, you can capture the HTML output into a variable instead of writing it to a file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-ruby hljs&quot; data-lang=&quot;ruby&quot;&gt;html = Asciidoctor.convert_file &apos;mysample.adoc&apos;, to_file: false, header_footer: true
puts html&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To generate DocBook, just specify the backend option:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-ruby hljs&quot; data-lang=&quot;ruby&quot;&gt;Asciidoctor.convert_file &apos;mysample.adoc&apos;, backend: &apos;docbook&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;One of the strengths of Asciidoctor is that it can output to a variety of formats, not just HTML.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;converting-a-document-to-docbook&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#converting-a-document-to-docbook&quot;&gt;&lt;/a&gt;Converting a document to DocBook&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Despite the fact that writing in DocBook is inhumane, it’s useful as a portable document format.
Since AsciiDoc syntax was designed with DocBook output in mind, the conversion is very good.
There’s a corresponding DocBook element for each markup in the AsciiDoc syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Asciidoctor provides a Docbook 5.0 backend out of the box.
To convert the document to Docbook 5.0, call the processor with the backend flag set to &lt;code&gt;docbook5&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;$ asciidoctor -b docbook5 mysample.adoc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A new XML document, named &lt;code&gt;mysample.xml&lt;/code&gt;, will now be present in the current directory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;$ ls -1
mysample.adoc
mysample.html
mysample.xml&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you’re on Linux, you can view the DocBook file using Yelp:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;$ yelp mysample.xml&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;DocBook is only an intermediary format in the Asciidoctor toolchain.
You’ll either feed it into a system that processes DocBook (like &lt;a href=&quot;https://fedorahosted.org/publican&quot;&gt;publican&lt;/a&gt;), or you can convert it to PDF using the &lt;a href=&quot;https://github.com/asciidoctor/asciidoctor-fopub/blob/master/README.adoc&quot;&gt;asciidoctor-fopub tool&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;output-galore&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#output-galore&quot;&gt;&lt;/a&gt;Output galore&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;There’s really no end to the customization you can do to the output the Asciidoctor processor generates.
We’ve just scratched the surface here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Check out the {user-ref}[Asciidoctor User Manual] and the &lt;a href=&quot;https://asciidoctor.org/docs&quot;&gt;Asciidoctor Docs Page&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;where-else-is-asciidoc-supported&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-else-is-asciidoc-supported&quot;&gt;&lt;/a&gt;Where else is AsciiDoc supported?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The easiest way to experiment with AsciiDoc is online.
AsciiDoc document in a GitHub repository or a &lt;a href=&quot;https://gist.github.com&quot;&gt;gist&lt;/a&gt; is automatically converted to HTML and rendered in the web interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you have a project on GitHub, you can write the README or any other documentation in AsciiDoc and the GitHub interface will show the HTML output for visitors to view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Gists, in particular, are a great way to experiment with AsciiDoc.
Just create a new gist, name the file with the extension &lt;code&gt;.adoc&lt;/code&gt; and enter AsciiDoc markup.
You can save the document as public or secret.
If you want to try AsciiDoc without installing any software, a gist is a great way to get started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;While there’s plenty more of the AsciiDoc syntax and toolchain to explore, you know more than enough about it to write a range of documentation, from a simple README to a comprehensive user guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;wrap-up&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#wrap-up&quot;&gt;&lt;/a&gt;Wrap-up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Writing in AsciiDoc should be no more complex than writing an e-mail.
All you need to compose a document in AsciiDoc is open a text editor and type regular paragraphs.
Only when you need additional semantics or formatting do you need to introduce markup.
Let your instinct guide you when you need to remember what punctuation to use.
The AsciiDoc syntax is based on time-tested plain-text conventions from the last several decades of computing.
Hopefully you agree that the markup does not detract from the readability of the text in raw form, as that’s a key goal of lightweight markup languages like AsciiDoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;As humans, communication is what connects us through the ages and allows us to pass on knowledge.
AsciiDoc enables you to focus on communicating rather than distracting you with other stuff that just gets in the way.
Copy the text of an e-mail into a document and see how easy it to repurpose it as documentation.
Almost immediately, you’ll find your writing zen and enjoy the rewarding experience of producing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;glossary&quot; &gt;&lt;a class=&quot;anchor&quot; href=&quot;#glossary&quot;&gt;&lt;/a&gt;Glossary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;dlist glossary&quot; &gt;
&lt;dl&gt;
&lt;dt&gt;admonition paragraph&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a callout paragraph that has a label or icon indicating its priority&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;admonition block&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a callout block containing complex content that has a label or icon indicating its priority&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;backend&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a set of templates for converting AsciiDoc source to different output format&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;cross reference&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a link from one location in the document to another location marked by an anchor&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;list continuation&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;a plus sign (&lt;code&gt;+&lt;/code&gt;) on a line by itself that connects adjacent lines of text to a list item&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;quoted text&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;text which is enclosed in special punctuation to give it emphasis or special meaning&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot; &gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot; &gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. The default doctype is &lt;code&gt;article&lt;/code&gt;, which only allows one level 0 section (i.e., the document title).
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[A demo of Asciidoctor. This document exercises numerous features of AsciiDoc to test Asciidoctor compliance.]]></description><link>https://zyue.wiki/post/2020-01-01/</link><guid isPermaLink="false">https://zyue.wiki/post/2020-01-01/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#basic&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-play&quot;&gt;&lt;/i&gt;&lt;/span&gt; The basics&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#how-to-use&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-map-o&quot;&gt;&lt;/i&gt;&lt;/span&gt; How to use&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#images&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-photo&quot;&gt;&lt;/i&gt;&lt;/span&gt; Images&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#toc-how-to&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-list&quot;&gt;&lt;/i&gt;&lt;/span&gt; Table of contents&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#source-highlight&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code&quot;&gt;&lt;/i&gt;&lt;/span&gt; Source code highlighting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#advanced&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-forward&quot;&gt;&lt;/i&gt;&lt;/span&gt; Advanced features&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#math&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-calculator&quot;&gt;&lt;/i&gt;&lt;/span&gt; Math&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#ui-macros&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-keyboard-o&quot;&gt;&lt;/i&gt;&lt;/span&gt; Keyboard shortcuts and more&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#tips&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt;&lt;/span&gt; Tips and tricks&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#source-documents&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot;&gt;&lt;/i&gt;&lt;/span&gt; Source documents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;DocGist is a URL proxy tool that converts &lt;a href=&quot;http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/&quot;&gt;AsciiDoc&lt;/a&gt; documents fetched from Gists (&lt;a href=&quot;http://gist.github.com&quot; class=&quot;bare&quot;&gt;http://gist.github.com&lt;/a&gt;), GitHub repositories, Dropbox folders and other sources to HTML.
The conversion to HTML is performed in the browser (client-side) using the &lt;a href=&quot;https://github.com/asciidoctor/asciidoctor.js&quot;&gt;Asciidoctor.js&lt;/a&gt; JavaScript library.
DocGist can render documents located anywhere, as long as the host permits cross-domain access.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;span.foo {
	background-color: navy;
	color: #BFD;
}

span.bar {
	background: rgba(105, 0, 12, .38);
	color: hsl(30, 100%, 50%);
	border-color: transparent;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;#fcf&lt;span class=&quot;color-chip&quot;&gt;&lt;span style=&quot;background-color:#fcf;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;#00BCD4&lt;span class=&quot;color-chip&quot;&gt;&lt;span style=&quot;background-color:#00BCD4;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;rgb(232, 74, 87)&lt;span class=&quot;color-chip&quot;&gt;&lt;span style=&quot;background-color:rgb(232, 74, 87);&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;rgba(103,58,183,50%)&lt;span class=&quot;color-chip&quot;&gt;&lt;span style=&quot;background-color:rgba(103,58,183,50%);&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;hsl(88, 50%, 53%)&lt;span class=&quot;color-chip&quot;&gt;&lt;span style=&quot;background-color:hsl(88, 50%, 53%);&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;hsla(36, 100%, 50%, 75%)&lt;span class=&quot;color-chip&quot;&gt;&lt;span style=&quot;background-color:hsla(36, 100%, 50%, 75%);&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;We should use the color &lt;code&gt;blueviolet&lt;span class=&quot;color-chip&quot;&gt;&lt;span style=&quot;background-color:blueviolet;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt; in our logo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Let’s take an example with a &lt;em&gt;GraphViz&lt;/em&gt; &quot;Hello World&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock kroki&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://kroki.io/graphviz/svg/eNo9jjEOwjAMRfee4itzGKBzuEjVIaldWsnEVQBBVXp3AqQdLFlP_32bxkvy04BeFUsFRCVGc7vPwi7pIxJTW_Ax88FP7IK-NnZC048inYomN7OIPi3-tim6_QaYTOY_m0Z_1bi31ltr4k4TWYgPLM4s8Hgj5Omwmrbanzicy-Wy1NX6AUS2QVQ=&quot; alt=&quot;Diagram&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;img class=&quot;emoji&quot; draggable=&quot;false&quot; height=&quot;24px&quot; width=&quot;24px&quot; src=&quot;https://twemoji.maxcdn.com/2/svg/1f609.svg&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A matrix can be written as&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;stemblock&quot; &gt;
  &lt;div class=&quot;content halign-center valign-middle&quot; style=&quot;padding-top: 1rem&quot; &gt;
&lt;svg style=&quot;vertical-align: -2.184ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;11.26ex&quot; height=&quot;5.5ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -1465.5 4977 2431&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot;&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0 -0.5)&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M247 -949V1450H516V1388H309V-887H516V-949H247Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtable&quot; transform=&quot;translate(528,0)&quot;&gt;&lt;g data-mml-node=&quot;mtr&quot; transform=&quot;translate(0,715.5)&quot;&gt;&lt;g data-mml-node=&quot;mtd&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtd&quot; transform=&quot;translate(1374.5,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtr&quot; transform=&quot;translate(0,-715.5)&quot;&gt;&lt;g data-mml-node=&quot;mtd&quot; transform=&quot;translate(48,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtd&quot; transform=&quot;translate(1329,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2377,0) translate(0 -0.5)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M11 1388V1450H280V-949H11V-887H218V1388H11Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(2905,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0 -0.5)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtable&quot; transform=&quot;translate(736,0)&quot;&gt;&lt;g data-mml-node=&quot;mtr&quot; transform=&quot;translate(0,715.5)&quot;&gt;&lt;g data-mml-node=&quot;mtd&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mtr&quot; transform=&quot;translate(0,-715.5)&quot;&gt;&lt;g data-mml-node=&quot;mtd&quot; transform=&quot;translate(39.5,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D458&quot; d=&quot;M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1336,0) translate(0 -0.5)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;br&gt;
&lt;svg style=&quot;vertical-align: -0.186ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;7.209ex&quot; height=&quot;2.479ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -1013.8 3186.6 1095.8&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot;&gt;&lt;g data-mml-node=&quot;msqrt&quot;&gt;&lt;g transform=&quot;translate(853,0)&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;34&quot; d=&quot;M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0,153.8)&quot;&gt;&lt;path data-c=&quot;221A&quot; d=&quot;M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;rect width=&quot;500&quot; height=&quot;60&quot; x=&quot;853&quot; y=&quot;893.8&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1630.8,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2686.6,0)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;br&gt;
&lt;svg style=&quot;vertical-align: -0.186ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;7.209ex&quot; height=&quot;2.442ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -997.3 3186.6 1079.3&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot;&gt;&lt;g data-mml-node=&quot;msqrt&quot;&gt;&lt;g transform=&quot;translate(853,0)&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;39&quot; d=&quot;M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0,137.2)&quot;&gt;&lt;path data-c=&quot;221A&quot; d=&quot;M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;rect width=&quot;500&quot; height=&quot;60&quot; x=&quot;853&quot; y=&quot;877.3&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1630.8,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2686.6,0)&quot;&gt;&lt;path data-c=&quot;33&quot; d=&quot;M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;stemblock&quot; &gt;
  &lt;div class=&quot;content halign-center valign-middle&quot; style=&quot;padding-top: 1rem&quot; &gt;
&lt;svg style=&quot;vertical-align: -0.566ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;50.949ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 22519.6 1000&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;令&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(1277.8,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(477,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D465&quot; d=&quot;M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(961,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3382.6,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(4438.3,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(278,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D453&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(550,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(818,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2257.2,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(3257.4,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D453&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(550,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(918,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5114.4,0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(10053,0)&quot;&gt;&lt;path data-c=&quot;B7&quot; d=&quot;M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(10553.2,0)&quot;&gt;&lt;path data-c=&quot;1D439&quot; d=&quot;M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(11302.2,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D709&quot; d=&quot;M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(827,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(12740.4,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(13740.7,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(278,0)&quot;&gt;&lt;path data-c=&quot;1D439&quot; d=&quot;M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(1027,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(818,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2456.2,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3456.4,0)&quot;&gt;&lt;path data-c=&quot;1D439&quot; d=&quot;M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(4205.4,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(918,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5512.4,0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(19753.3,0)&quot;&gt;&lt;path data-c=&quot;B7&quot; d=&quot;M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(20253.6,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D453&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(550,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D709&quot; d=&quot;M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(827,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(22019.6,0)&quot;&gt;&lt;path data-c=&quot;5C&quot; d=&quot;M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;br&gt;
&lt;svg style=&quot;vertical-align: -0.566ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;14.885ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 6579.3 1000&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;而&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(1277.8,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(477,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(918,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3339.6,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(4395.3,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(477,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(818,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6079.3,0)&quot;&gt;&lt;path data-c=&quot;5C&quot; d=&quot;M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;br&gt;
&lt;svg style=&quot;vertical-align: -0.566ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;23.313ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 10304.3 1000&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;由&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1000,0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;罗&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2000,0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;尔&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(3000,0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;定&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(4000,0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;理&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5000,0)&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;，&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(6277.8,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(477,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D709&quot; d=&quot;M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(827,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(8248.6,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(9304.3,0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(9804.3,0)&quot;&gt;&lt;path data-c=&quot;5C&quot; d=&quot;M56 731Q56 740 62 745T75 750Q85 750 92 740Q96 733 270 255T444 -231Q444 -239 438 -244T424 -250Q414 -250 407 -240Q404 -236 230 242T56 731Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;br&gt;
&lt;svg style=&quot;vertical-align: -0.566ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;48.06ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 21242.6 1000&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;text data-variant=&quot;normal&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot; font-family=&quot;serif&quot;&gt;即&lt;/text&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(1277.8,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(278,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D453&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(550,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(818,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2257.2,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(3257.4,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D453&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(550,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(918,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5114.4,0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6892.4,0)&quot;&gt;&lt;path data-c=&quot;B7&quot; d=&quot;M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7392.7,0)&quot;&gt;&lt;path data-c=&quot;1D439&quot; d=&quot;M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(8141.7,0)&quot;&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(8416.7,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D709&quot; d=&quot;M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(827,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(9854.9,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(10855.1,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;5B&quot; d=&quot;M118 -250V750H255V710H158V-210H255V-250H118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(278,0)&quot;&gt;&lt;path data-c=&quot;1D439&quot; d=&quot;M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(1027,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(818,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2456.2,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3456.4,0)&quot;&gt;&lt;path data-c=&quot;1D439&quot; d=&quot;M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(4205.4,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(918,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(5512.4,0)&quot;&gt;&lt;path data-c=&quot;5D&quot; d=&quot;M22 710V750H159V-250H22V-210H119V710H22Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(16867.8,0)&quot;&gt;&lt;path data-c=&quot;B7&quot; d=&quot;M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(17368,0)&quot;&gt;&lt;path data-c=&quot;1D453&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(17918,0)&quot;&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mrow&quot; transform=&quot;translate(18193,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D709&quot; d=&quot;M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(827,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(19686.8,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(20742.6,0)&quot;&gt;&lt;path data-c=&quot;30&quot; d=&quot;M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The DocGist project is found at &lt;a href=&quot;https://github.com/asciidoctor/docgist&quot; class=&quot;bare&quot;&gt;https://github.com/asciidoctor/docgist&lt;/a&gt; where you can get the code, file issues and contribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
DocGist uses the &lt;a href=&quot;https://github.com/asciidoctor/asciidoctor/releases/tag/v1.5.3&quot;&gt;latest release (1.5.3)&lt;/a&gt; of Asciidoctor.
If you want to use the syntax of older versions, add &lt;code&gt;:compat-mode:&lt;/code&gt; to the document header or by setting it in the btn:[Attributes] menu.
There’s more information on this in the &lt;a href=&quot;./?github-asciidoctor%2Fasciidoctor.org%2F%2Fdocs%2Fmigration.adoc&quot;&gt;migration guide&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;basic&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-play&quot;&gt;&lt;/i&gt;&lt;/span&gt; The basics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;how-to-use&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-map-o&quot;&gt;&lt;/i&gt;&lt;/span&gt; How to use&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Create/locate a gist on GitHub (or use a file in Dropbox).&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Write text using AsciiDoc syntax in it.&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Save it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Enter the URL (or id) of the gist in the form on top of this page and hit Enter on your keyboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;The page is rendered.&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Share the URL to the page with others so they can read it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For other possible hosts that can store documents, see &lt;a href=&quot;#source-documents&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot;&gt;&lt;/i&gt;&lt;/span&gt; Source documents&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;images&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-photo&quot;&gt;&lt;/i&gt;&lt;/span&gt; Images&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Relative image URLs are resolved to the same location as the document.
If the images are located elsewhere, use the &lt;code&gt;imagesdir&lt;/code&gt; attribute to point out the location.
See the &lt;a href=&quot;http://asciidoctor.org/docs/user-manual/#set-the-images-directory&quot;&gt;Asciidoctor user manual&lt;/a&gt; for the details.
There’s also an &lt;a href=&quot;images.html#images&quot;&gt;image example&lt;/a&gt; here on DocGist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot; data-lang=&quot;asciidoc&quot;&gt;image::sunset.jpg[]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Is rendered as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;/images/sunset.jpg&quot; alt=&quot;sunset&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;toc-how-to&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-list&quot;&gt;&lt;/i&gt;&lt;/span&gt; Table of contents&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The table of content appears below the header by default.
You can alter this by setting a different value for the &lt;code&gt;toc&lt;/code&gt; attribute.
The available options are found in the btn:[Attributes] menu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To add a table of contents at any location you want, put this in the place you want it to appear:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot; data-lang=&quot;asciidoc&quot;&gt;toc::[]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;and set the &lt;code&gt;toc&lt;/code&gt; attribute to &lt;code&gt;macro&lt;/code&gt; (in the document or via the btn:[Attributes] menu).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;There’s such a &lt;code&gt;toc&lt;/code&gt; macro embedded in this document.
If you set the &lt;code&gt;toc&lt;/code&gt; attribute to &lt;code&gt;macro&lt;/code&gt; on this page, the table of contents will appear below this line!&lt;/p&gt;
&lt;/div&gt;
&lt;!-- toc disabled --&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;source-highlight&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-code&quot;&gt;&lt;/i&gt;&lt;/span&gt; Source code highlighting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;By default, source code is highlighted using &lt;a href=&quot;https://codemirror.net/&quot;&gt;CodeMirror&lt;/a&gt;.
See the &lt;a href=&quot;codemirror.html#codemirror&quot;&gt;CodeMirror example&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Simply include the source code like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot; data-lang=&quot;asciidoc&quot;&gt;[source,ruby]
.app.rb
----
require &apos;sinatra&apos;
get &apos;/hi&apos; do
 &quot;Hello World!&quot;
end
----&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
It’s possible to use Unicode glyphs as admonition icons.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;line of code  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
line of code  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
line of code  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for C-style languages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for Ruby, Python, Perl, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A callout behind a line comment for Clojure.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;This is how it gets rendered:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;title&quot; &gt;app.rb&lt;/div&gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;require &apos;sinatra&apos;
get &apos;/hi&apos; do
  &quot;Hello World!&quot;
end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/google-code-prettify/&quot;&gt;Prettify&lt;/a&gt; is supported as well.
See the &lt;a href=&quot;prettify.html#prettify&quot;&gt;Prettify example&lt;/a&gt; for how to activate it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt; is supported too.
See the &lt;a href=&quot;highlightjs.html#highlightjs&quot;&gt;highlight.js example&lt;/a&gt; for how to activate it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;If you want to set a default language for &lt;code&gt;source&lt;/code&gt; blocks, set the &lt;code&gt;source-language&lt;/code&gt; attribute in the document header.
See &lt;a href=&quot;source-language.html#source-language&quot;&gt;Source language&lt;/a&gt; for how to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Only one source highlighter can be defined per document when using DocGist.&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;The source highlighter must be set in the document header.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot; &gt;Experimental Features in DocGist&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;Highlighting can be used inline as well, for example &lt;code&gt;[src-ruby]`do`&lt;/code&gt; renders like: &lt;code class=&quot;src-ruby&quot;&gt;do&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Multiple code snippets in different languages can be combined into a tabbed view.
See the &lt;a href=&quot;tabbed-source.html#tabbed-source&quot;&gt;Tabbed source&lt;/a&gt; example for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;advanced&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-forward&quot;&gt;&lt;/i&gt;&lt;/span&gt; Advanced features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;math&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-calculator&quot;&gt;&lt;/i&gt;&lt;/span&gt; Math&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt; mathematical expressions can be typeset in DocGist documents.
The content can be written as &lt;a href=&quot;http://docs.mathjax.org/en/latest/asciimath.html&quot;&gt;AsciiMath&lt;/a&gt; or use &lt;a href=&quot;http://docs.mathjax.org/en/latest/tex.html&quot;&gt;TeX/LaTeX&lt;/a&gt; notation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For block content, do like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot; data-lang=&quot;asciidoc&quot;&gt;[stem]
++++
sqrt(4) = 2
++++&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;It will render like below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;stemblock&quot; &gt;
  &lt;div class=&quot;content halign-center valign-middle&quot; style=&quot;padding-top: 1rem&quot; &gt;
&lt;svg style=&quot;vertical-align: -0.186ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;7.209ex&quot; height=&quot;2.479ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -1013.8 3186.6 1095.8&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot;&gt;&lt;g data-mml-node=&quot;msqrt&quot;&gt;&lt;g transform=&quot;translate(853,0)&quot;&gt;&lt;g data-mml-node=&quot;mrow&quot;&gt;&lt;g data-mml-node=&quot;mn&quot;&gt;&lt;path data-c=&quot;34&quot; d=&quot;M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(0,153.8)&quot;&gt;&lt;path data-c=&quot;221A&quot; d=&quot;M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;rect width=&quot;500&quot; height=&quot;60&quot; x=&quot;853&quot; y=&quot;893.8&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1630.8,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(2686.6,0)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can use it inline as well, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot; data-lang=&quot;asciidoc&quot;&gt;Water (stem:[H_2O]) is a critical component.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Which renders like this: Water (&lt;span class=&quot;steminline&quot;&gt; &lt;svg style=&quot;vertical-align: -0.339ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;4.594ex&quot; height=&quot;1.932ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -704 2030.6 854&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mstyle&quot;&gt;&lt;g data-mml-node=&quot;msub&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D43B&quot; d=&quot;M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mn&quot; transform=&quot;translate(864,-150) scale(0.707)&quot;&gt;&lt;path data-c=&quot;32&quot; d=&quot;M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1267.6,0)&quot;&gt;&lt;path data-c=&quot;1D442&quot; d=&quot;M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt; &lt;/span&gt;) is a critical component.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There’s no need for special delimiters around the expression as the MathJax documentation suggests.
This is handled automatically by Asciidoctor!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The default notation is AsciiMath, but LaTeX can be used like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot; data-lang=&quot;asciidoc&quot;&gt;latexmath:[C = \alpha + \beta Y^{\gamma} + \epsilon]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;steminline&quot;&gt; &lt;svg style=&quot;vertical-align: -0.439ex; overflow: visible&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;16.831ex&quot; height=&quot;2.034ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -705 7439.5 899&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D436&quot; d=&quot;M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1037.8,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2093.6,0)&quot;&gt;&lt;path data-c=&quot;1D6FC&quot; d=&quot;M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2955.8,0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3956,0)&quot;&gt;&lt;path data-c=&quot;1D6FD&quot; d=&quot;M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;msup&quot; transform=&quot;translate(4522,0)&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44C&quot; d=&quot;M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(855.1,363) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D6FE&quot; d=&quot;M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6033.3,0)&quot;&gt;&lt;path data-c=&quot;2B&quot; d=&quot;M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7033.5,0)&quot;&gt;&lt;path data-c=&quot;1D716&quot; d=&quot;M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt; &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;ui-macros&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-keyboard-o&quot;&gt;&lt;/i&gt;&lt;/span&gt; Keyboard shortcuts and more&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;This is a common shortcut on Windows systems: kbd:[Ctrl+Alt+Delete].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s the source:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot; data-lang=&quot;asciidoc&quot;&gt;kbd:[Ctrl+Alt+Delete]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You might want to represent a user interface button like btn:[Save].&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Here’s how to do it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot; data-lang=&quot;asciidoc&quot;&gt;btn:[Save]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Here on DocGist we use actual (extra small) buttons from Bootstrap.
In normal Asciidoctor it would have looked more along the lines of &lt;strong&gt;[ Save ]&lt;/strong&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Yet another nifty feature, representing a menu item:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;menu:File[New…​]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Source:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-asciidoc&quot; data-lang=&quot;asciidoc&quot;&gt;menu:File[New...]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Representing keyboard shortcuts, buttons, and menu items are experimental features in Aciidoctor.
DocGist has the &lt;code&gt;experimental&lt;/code&gt; flag set by default for your convenience!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;For the reference documentation, see &lt;a href=&quot;http://asciidoctor.org/docs/user-manual/#user-interface-macros&quot;&gt;User Interface Macros&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;tips&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt;&lt;/span&gt; Tips and tricks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Links to other DocGists can use this syntax: &lt;code&gt;link:./?5897167[DocGist intro]&lt;/code&gt; which renders as &lt;a href=&quot;./?5897167&quot;&gt;DocGist intro&lt;/a&gt;.
This makes things easier in case you run DocGist locally to fiddle with the “backend” (it’s a frontend really).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;You can view the source Gist of this page by clicking on the green button in the navbar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;How about some UML?
The following image is included using the syntax &lt;code class=&quot;src-asciidoc&quot;&gt;image::http://yuml.me/c9ce39b0.png[]&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;http://yuml.me/c9ce39b0.png&quot; alt=&quot;c9ce39b0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The URL is a reference to a yUML image.
yUML is tool for creating UML diagrams online.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;source-documents&quot; &gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot;&gt;&lt;/i&gt;&lt;/span&gt; Source documents&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;DocGist can view documents fetched from a number of different sources.
It parses the URL to find out how to use it, and tries to be a bit smart to keep DocGist URLs short.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;hdlist&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
GitHub Gist
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;A public or private GitHub Gist can be used.
Example URL: &lt;a href=&quot;https://gist.github.com/nawroth/5897167&quot; class=&quot;bare&quot;&gt;https://gist.github.com/nawroth/5897167&lt;/a&gt;
A GitHub Gist allows for storing multiple documents, but DocGist will only the first AsciiDoc document it finds.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
GitHub File
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;A file in a public git repo hosted at GitHub.
Example URL: &lt;a href=&quot;https://github.com/asciidoctor/docgist/blob/master/gists/example.adoc&quot; class=&quot;bare&quot;&gt;https://github.com/asciidoctor/docgist/blob/master/gists/example.adoc&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Dropbox Public folder
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;Put a file in the &lt;em&gt;Public&lt;/em&gt; folder of your Dropbox, grab the URL to it.
Example URL: &lt;a href=&quot;https://dl.dropboxusercontent.com/u/10666617/AsciiDoc/example.adoc&quot; class=&quot;bare&quot;&gt;https://dl.dropboxusercontent.com/u/10666617/AsciiDoc/example.adoc&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Dropbox shared private file
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;Use the share-link of a private file in Dropbox.
Example URL: &lt;a href=&quot;https://www.dropbox.com/s/ttib5v9pfs23p9z/example.adoc&quot; class=&quot;bare&quot;&gt;https://www.dropbox.com/s/ttib5v9pfs23p9z/example.adoc&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Copy.com
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;Use the public link to the document.
Example URL: &lt;a href=&quot;https://copy.com/LdKsHnQbEZsl29BW&quot; class=&quot;bare&quot;&gt;https://copy.com/LdKsHnQbEZsl29BW&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Etherpad
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://etherpad.org/&quot;&gt;Etherpad&lt;/a&gt; is an online editor providing collaborative editing in real-time.
There are different Etherpad hosts, these are ones that worked well when we tried them:
&lt;a href=&quot;https://beta.etherpad.org/&quot; class=&quot;bare&quot;&gt;https://beta.etherpad.org/&lt;/a&gt;, &lt;a href=&quot;https://piratepad.ca/&quot; class=&quot;bare&quot;&gt;https://piratepad.ca/&lt;/a&gt;, &lt;a href=&quot;https://factor.cc/pad/&quot; class=&quot;bare&quot;&gt;https://factor.cc/pad/&lt;/a&gt;, &lt;a href=&quot;https://pad.systemli.org/&quot; class=&quot;bare&quot;&gt;https://pad.systemli.org/&lt;/a&gt;, &lt;a href=&quot;https://pad.fnordig.de/&quot; class=&quot;bare&quot;&gt;https://pad.fnordig.de/&lt;/a&gt;, &lt;a href=&quot;https://notes.typo3.org/&quot; class=&quot;bare&quot;&gt;https://notes.typo3.org/&lt;/a&gt;, &lt;a href=&quot;https://pad.lqdn.fr/&quot; class=&quot;bare&quot;&gt;https://pad.lqdn.fr/&lt;/a&gt;, &lt;a href=&quot;https://pad.okfn.org/&quot; class=&quot;bare&quot;&gt;https://pad.okfn.org/&lt;/a&gt;, &lt;a href=&quot;https://beta.publishwith.me/&quot; class=&quot;bare&quot;&gt;https://beta.publishwith.me/&lt;/a&gt;, &lt;a href=&quot;https://etherpad.tihlde.org/&quot; class=&quot;bare&quot;&gt;https://etherpad.tihlde.org/&lt;/a&gt;, &lt;a href=&quot;https://pad.tihlde.org/&quot; class=&quot;bare&quot;&gt;https://pad.tihlde.org/&lt;/a&gt;, &lt;a href=&quot;https://etherpad.wikimedia.org/&quot; class=&quot;bare&quot;&gt;https://etherpad.wikimedia.org/&lt;/a&gt;, &lt;a href=&quot;https://etherpad.fr/&quot; class=&quot;bare&quot;&gt;https://etherpad.fr/&lt;/a&gt;, &lt;a href=&quot;https://piratenpad.de/&quot; class=&quot;bare&quot;&gt;https://piratenpad.de/&lt;/a&gt;, &lt;a href=&quot;https://bitpad.co.nz/&quot; class=&quot;bare&quot;&gt;https://bitpad.co.nz/&lt;/a&gt;, &lt;a href=&quot;http://notas.dados.gov.br/&quot; class=&quot;bare&quot;&gt;http://notas.dados.gov.br/&lt;/a&gt;, &lt;a href=&quot;http://free.primarypad.com/&quot; class=&quot;bare&quot;&gt;http://free.primarypad.com/&lt;/a&gt;, &lt;a href=&quot;http://board.net/&quot; class=&quot;bare&quot;&gt;http://board.net/&lt;/a&gt;, &lt;a href=&quot;https://pad.odoo.com/&quot; class=&quot;bare&quot;&gt;https://pad.odoo.com/&lt;/a&gt;, &lt;a href=&quot;http://pad.planka.nu/&quot; class=&quot;bare&quot;&gt;http://pad.planka.nu/&lt;/a&gt;, &lt;a href=&quot;http://qikpad.co.uk/&quot; class=&quot;bare&quot;&gt;http://qikpad.co.uk/&lt;/a&gt;, &lt;a href=&quot;http://pad.tn/&quot; class=&quot;bare&quot;&gt;http://pad.tn/&lt;/a&gt;, &lt;a href=&quot;http://lite4.framapad.org/&quot; class=&quot;bare&quot;&gt;http://lite4.framapad.org/&lt;/a&gt;, &lt;a href=&quot;http://pad.hdc.pw/&quot; class=&quot;bare&quot;&gt;http://pad.hdc.pw/&lt;/a&gt;
Note that the content might get removed from the host after some time.
Example URL: &lt;a href=&quot;https://beta.etherpad.org/p/docgist&quot; class=&quot;bare&quot;&gt;https://beta.etherpad.org/p/docgist&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Google Docs Documents
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;Write normal AsciiDoc in the document.
Then use the &lt;em&gt;share&lt;/em&gt; link, set so that anyone with the link can view (at least) the document.
Example URL: &lt;a href=&quot;https://docs.google.com/document/d/1lEQTEAQRVxTtDfQ1N9HJ6azeOLYCKlGG17NOs72NWsU/edit&quot; class=&quot;bare&quot;&gt;https://docs.google.com/document/d/1lEQTEAQRVxTtDfQ1N9HJ6azeOLYCKlGG17NOs72NWsU/edit&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;hdlist1&quot;&gt;
Any URL
&lt;/td&gt;
&lt;td class=&quot;hdlist2&quot;&gt;
&lt;p&gt;DocGist accepts documents from any host which allows for cross-domain requests.
This is the kind of error you’ll see in the console when a host doesn’t support it:&lt;/p&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.
Origin &apos;http://gist.asciidoctor.org&apos; is therefore not allowed access.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To make it work, the server should respond with one of the following headers:
&lt;code&gt;Access-Control-Allow-Origin:http://gist.asciidoctor.org&lt;/code&gt; or
&lt;code&gt;Access-Control-Allow-Origin:*&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot; &gt;Additional services that should get added?&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Please tell us if there’s some additional service you’d like to see support for.
There’s two different ways a host can be integrated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot; &gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Direct file access&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Dropbox and Google Docs are examples of this.
We only calculate the URL of the file, and request it.
The server must respond with the correct headers as outlined above.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Through a public API&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This is what we use for GitHub.
Note that we can only use an API as long as authorization isn’t required.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;To suggest an addition, file an &lt;a href=&quot;https://github.com/asciidoctor/docgist/issues/&quot;&gt;issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[好久没有写 Spring Security OAuth2的文章了，这段时间成长了很多，也发现以前文中存在的一些问题。后面慢慢改成。但是还是很激动的有好消息！]]></description><link>https://zyue.wiki/articles/2020/08/25/1598370094047.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2020/08/25/1598370094047.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_spring_security_oauth2_authorization_server_初体验&quot;&gt;Spring Security OAuth2 Authorization Server 初体验&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_授权服务器&quot;&gt;授权服务器&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_客户端模式&quot;&gt;客户端模式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_jwk_端点&quot;&gt;JWK 端点&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_spring_security_oauth2_authorization_server_初体验&quot; &gt;Spring Security OAuth2 Authorization Server 初体验&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;好久没有写 Spring Security OAuth2
的文章了，这段时间成长了很多，也发现以前文中存在的一些问题。后面慢慢改成。但是还是很激动的有好消息！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这周六，最让人兴奋的就是 Spring Security OAuth2 Authorization Server
发布了 &lt;a href=&quot;https://spring.io/blog/2020/08/21/get-the-very-first-bits-of-spring-authorization-server-0-0-1&quot;&gt;初版本
0.0.1&lt;/a&gt;了！终于盼来了！从当初的宣布不再维护，到听取社区意见进行重写，再到今天发布
0.0.1
第一个小版本，八九个月了，还在使用以前的授权服务器，现在终于有新的东西了！而且还是基于最新的
Spring Security 构建，可以直接无缝接入 Spring Security 中的 OAuth
Login、OAuth Resource Server。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;虽然不能在生产环境适用，但我们可以先来尝尝鲜！目前已经可以使用的功能如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;OAuth 2.0 Authorization Code
Grant — &lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-4.1&quot;&gt;RFC 6749&lt;/a&gt; —
授权吗模式&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;OAuth 2.0 Client Credentials
Grant — &lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-4.4&quot;&gt;RFC 6749&lt;/a&gt; -
客户端令牌模式&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;JSON Web Token (JWT) — &lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;RFC 7519&lt;/a&gt; -
JWT 令牌支持&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;JSON Web Signature (JWS) — &lt;a href=&quot;https://tools.ietf.org/html/rfc7515&quot;&gt;RFC
7515&lt;/a&gt; -JWS 令牌支持&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;JSON Web Key (JWK) — &lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;RFC 7517&lt;/a&gt; -
JWK 端点支持&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Key Management for providing key(s) when signing a JWT (JWS) — Jwt key
管理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;主要涉及到的 RFC&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot;&gt;RFC-6749 The OAuth 2.0
Authorization Framework&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7515&quot;&gt;RFC-7515 JSON Web Signature (JWS)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;RFC-7517 JSON Web Key (JWK)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7518&quot;&gt;RFC-7518 JSON Web Algorithms
(JWA)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;RFC-7519 JSON Web Token (JWT)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然对于每个RFC中都是部分实现，还没有完全实现。但是不影响我们体验。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这篇文章适合具有 OAuth2 基础以及 Spring Security 基础的童鞋阅读。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;初始化项目，使用 Gradle 进行构建&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;implementation(&quot;org.springframework.boot:spring-boot-starter-web&quot;)
implementation(&quot;org.springframework.security.experimental:spring-security-oauth2-authorization-server:0.0.1&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_授权服务器&quot; &gt;授权服务器&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;由于是初版，并没有注解来完成自动化配置，事实上 OAuth
模块迁移以后，都不使用注解来完成自动化配置了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@SpringBootApplication
public class AuthorizationServerJavaApplication {

  public static void main(String[] args) {
    SpringApplication.run(AuthorizationServerJavaApplication.class, args);
  }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加一个安全配置并导入默认配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * Spring security config from authorization server.
 *
 * @author echo
 * @date 2020/8/23 13:56:02
 */
@Configuration
@Import(OAuth2AuthorizationServerConfiguration.class)
public class SecurityConfig  {

  /**
   * Give a client repository.
   *
   * @return RegisteredClientRepository
   */
  @Bean
  public RegisteredClientRepository registeredClientRepository() {
    RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())
        .clientId(&quot;messaging-client&quot;)
        .clientSecret(&quot;secret&quot;)
        .clientAuthenticationMethod(ClientAuthenticationMethod.BASIC)
        // Authorization Code Grant Type
        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
        // Client Credentials Grant Type
        .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
        .redirectUri(&quot;http://example.com&quot;)
        .scope(&quot;message.read&quot;)
        .scope(&quot;message.write&quot;)
        .build();
    return new InMemoryRegisteredClientRepository(registeredClient);
  }

  /**
   * Give a default key manager.
   * @return keyManager
   */
  @Bean
  public KeyManager keyManager() {
    return new StaticKeyGeneratingKeyManager();
  }

  /**
   * Give a user.
   * @return UserDetailsService
   */
  @Bean
  public UserDetailsService users() {
    UserDetails user = User.withDefaultPasswordEncoder()
        .username(&quot;user1&quot;)
        .password(&quot;password&quot;)
        .roles(&quot;USER&quot;)
        .build();
    return new InMemoryUserDetailsManager(user);
  }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们在配置文件中做了如下几件事：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;配置一个内存级的 &lt;code&gt;ClientRepository&lt;/code&gt;，他实现了
&lt;code&gt;RegisteredClientRepository&lt;/code&gt; 接口，可以通过实现这个接口完成其他的 store
进行存储客户端信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;配置一个静态的
&lt;code&gt;KeyManaget&lt;/code&gt;，初版没有只提供了一个，他的作用应该是为了管理多个 Key
的情况，对不同的应用使用不同的 Key 进行管理而不是所有的 OAuth2
客户端都使用同一个。这个是以前的授权服务器所没有的东西。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;配置一个默认的用户信息的 &lt;code&gt;Service&lt;/code&gt;，这个属于 &lt;code&gt;Spring Security&lt;/code&gt;
的基础了，提供查询用户的服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_授权码模式&quot; &gt;授权码模式&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行项目，然后按照授权码模式进行请求：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;请求
&lt;a href=&quot;http://127.0.0.1:8080/oauth2/authorize?client_id=messaging-client&amp;amp;redirect_uri=http://example.com&amp;amp;response_type=code&amp;amp;scope=message.read，在&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080/oauth2/authorize?client_id=messaging-client&amp;amp;redirect_uri=http://example.com&amp;amp;response_type=code&amp;amp;scope=message.read，在&lt;/a&gt;
URL 参数中进行指定客户端 id、授权类型、请求 scope 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用用户 &lt;code&gt;user1&lt;/code&gt; 进行登陆。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;登陆成功后重定向到指定地址 example.com，其中包含 code 参数如下：&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://example.com/?code=Yfwoy3Lkuu_pdLPG0ttn50ezbHeDmDLZJrGsZEwuwrY%3D&quot; class=&quot;bare&quot;&gt;http://example.com/?code=Yfwoy3Lkuu_pdLPG0ttn50ezbHeDmDLZJrGsZEwuwrY%3D&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;获取 code 参数 &lt;code&gt;Yfwoy3Lkuu_pdLPG0ttn50ezbHeDmDLZJrGsZEwuwrY%3D&lt;/code&gt;，&lt;strong&gt;进行
URL 解码&lt;/strong&gt;，一定要解码，否则找不到。解码后
&lt;code&gt;Yfwoy3Lkuu_pdLPG0ttn50ezbHeDmDLZJrGsZEwuwr=&lt;/code&gt;。通过 POST 请求，获取
token。&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;编码的这里是一个坑，按照常理应该是由
进行解码的，不然每个客户端都需要自己来解码一遍肯定是不对的。已经提了一个
&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-authorization-server/issues/102&quot;&gt;issue&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://b3logfile.com/file/2020/08/solofetchupload2401606585440275624-b0493a47.png&quot; alt=&quot;Authorization&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://b3logfile.com/file/2020/08/solofetchupload6968077758085459537-5e7e7c1f.png&quot; alt=&quot;image-20200825212051607&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_客户端模式&quot; &gt;客户端模式&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;客户端模式没有什么好说的了，只验证请求头中的授权信息和 scope 而已。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://b3logfile.com/file/2020/08/solofetchupload2906726793585363159-4b997cba.png&quot; alt=&quot;image-20200825212631184&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;获取 token&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://b3logfile.com/file/2020/08/solofetchupload869172233136295980-242f2021.png&quot; alt=&quot;image-20200825212700050&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_jwk_端点&quot; &gt;JWK 端点&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在新版中，我们不需要自己去配置 JWK
端点了，已经帮我们弄好了，可以直接访问 &lt;code&gt;/oauth2/jwks&lt;/code&gt; 查看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;keys&quot;:[
        {
            &quot;kty&quot;:&quot;RSA&quot;,
            &quot;e&quot;:&quot;AQAB&quot;,
            &quot;use&quot;:&quot;sig&quot;,
            &quot;kid&quot;:&quot;fff84a76-437e-4198-8b99-e80171afa6fb&quot;,
            &quot;alg&quot;:&quot;RS256&quot;,
            &quot;n&quot;:&quot;pfeYq-vtmSwnI0FWveVyCB8jcrsgnY81RDr00yfggj8bPe6T53yNO4ghoY4f3noSGuU1vcT_7dUIGOcFT6A2SN0Omyta5XaMNGJfLZd9QSGApi4zbsaizXsbRPRkAGlcdq3SCYTylHcSP2hhL_Kxco4ZGCdbKHJEQY0mIQyAGZDLm_VPVGjpImuuzLhF3BPGJQbIR7H7qBjPkJPsHfflXV2jndQi-QWckRi_oIU2wEzLSHFKFAOzWotJbd-4LDiedM_SN9834NO2TdZULbcwuY2_i09BKxHP6I6FzQbAQLsDI484UdLa5pZjJ9mJxIZp0Da6AzFHSHtO4oKoR0muew&quot;
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;简单解释下：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Key&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;kty（Key Type）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;标识与密钥一起使用的加密算法族，如&lt;code&gt;RSA&apos;&apos;或&lt;/code&gt;EC&apos;&apos;。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;use（Public Key Use）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;标识公钥的预期用途。``use&apos;&apos;参数用于指示是否使用公钥加密数据或验证数据上的签名。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;kid（Key ID）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;用于匹配特定密钥。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;alg（Algorithm）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;标识要与密钥一起使用的算法。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;e&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RSA Key 的公共指数&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;n&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RSA 私钥参数&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;JWK RSA 参考 &lt;a href=&quot;https://tools.ietf.org/html/rfc7517#section-9.3&quot;&gt;RSA Private
Key Representations and Blinding&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其主要定义来自
&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-authorization-server/blob/master/oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/JwkSetEndpointFilter.java#L98&quot;&gt;org.springframework.security.oauth2.server.authorization.web.JwkSetEndpointFilter&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;未使用 JWK 前进行验证 token&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://b3logfile.com/file/2020/08/solofetchupload255189275893034017-eb2a0623.png&quot; alt=&quot;image-20200825231353232&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 JWK 进行验证 Token（在右下脚输入后，会自动更新左边的 JWS）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://b3logfile.com/file/2020/08/solofetchupload2789815987656918357-fa395e92.png&quot; alt=&quot;image-20200825231558186&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_总结&quot; &gt;总结&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先说说现在我发现的两个问题吧，见
&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-authorization-server/issues/102&quot;&gt;issue
102&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;回调地址中的 &lt;code&gt;code&lt;/code&gt; 是经过 URL
编码的，但是他并没有为我们解，需要每个客户端进行解码。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求 &lt;code&gt;/oauth2/token&lt;/code&gt; 端点时，不能够携带 &lt;code&gt;client_id&lt;/code&gt;
参数，如果携带了他授权的类型就是客户端的了， 源码中
&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-authorization-server/blob/master/oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProvider.java#L88&quot;&gt;getPrincipal()&lt;/a&gt;
得到的类型就是 &lt;code&gt;String&lt;/code&gt; 的了。在
&lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-4.1.3&quot;&gt;RFC-6749
section-4.1.3&lt;/a&gt;. 中提到&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;REQUIRED, if the client is not authenticating
with the authorization server as described in Section 3.2.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果在请求头中设置了客户端令牌，那么这个参数可以不需要。但是当我传递正确的客户端id的时候他应该忽视或者对他进行验证，而不是抛出错误给我，因为我的方式是没有问题的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其他的慢慢测看看。而这次默认的就是使用了JWT作为签名，生成 JWS 作为
token。JWE 可能还需要等一段时间。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Phpstorm + Docker / Docker Compose + xdebug 环境搭建]]></description><link>https://zyue.wiki/articles/2020/08/01/1596268325013.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2020/08/01/1596268325013.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_环境准备&quot;&gt;环境准备&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_开始&quot;&gt;开始&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_docker_方式&quot;&gt;Docker 方式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_docker_compose_方式&quot;&gt;Docker Compose 方式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_debug&quot;&gt;Debug&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_发生了什么&quot;&gt;发生了什么&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_docker_compose_编排&quot;&gt;Docker Compose 编排&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;刚换笔记本，不想搞太多环境，什么 Apache、Mysql 啥的，想全部交给 Docker
管理，复杂一点的直接 Docker compose
编排一下就好了。乐得清闲，升级又容易，php
的环境也不例外，所以将它搭建一下：&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_环境准备&quot; &gt;环境准备&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;开发工具：Phpstorm&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;必备环境：Docker 或 Docker Compose&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/docker-for-windows/install/&quot;&gt;Windows 安装&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/docker-for-mac/install/&quot;&gt;Mac 安装&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不需要安装 php，不需要安装 apach，也不需要配置 xdebug，啥都不用，安排。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_开始&quot; &gt;开始&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建一个 phpstrom 空项目，然后创建一个 &lt;code&gt;index.php&lt;/code&gt; 文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&amp;lt;?php
$world = &quot;World&quot;;
echo &quot;hello,&quot;, $world;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_docker_方式&quot; &gt;Docker 方式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;两种方式拉去镜像&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;去 &lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt; 搜索 phpstorm 下的
&lt;a href=&quot;https://hub.docker.com/u/phpstorm/&quot;&gt;php 镜像&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;去 &lt;a href=&quot;https://github.com/JetBrains/phpstorm-docker-images&quot;&gt;Phpstorm
Github&lt;/a&gt; 查找相应版本的 Docker 镜像&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;主要提供两种类型的镜像（以 7.4 php 为例，&lt;strong&gt;注意：7.4 版本官方没有传到
Docker Hub，可以使用 7.3 的&lt;/strong&gt;）：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;php-74-cli-xdebug-29&lt;/code&gt;：主要提供基础的 &lt;code&gt;php 7.4&lt;/code&gt; + &lt;code&gt;xdebug 2.9&lt;/code&gt;&lt;br&gt;
&lt;code&gt;mysqli&lt;/code&gt; 环境，不提供web环境与端口暴露。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;php-74-apache-xdebug-29&lt;/code&gt;：主要提供 &lt;code&gt;php 7.4&lt;/code&gt; + &lt;code&gt;xdebug 2.9&lt;/code&gt;&lt;br&gt;
&lt;code&gt;mysqli&lt;/code&gt;+ &lt;code&gt;apache2&lt;/code&gt; 环境，同时安装了 &lt;code&gt;php&lt;/code&gt; 部分依赖（见
&lt;a href=&quot;https://github.com/phpearth/docker-php/blob/master/docker/7.4-apache.Dockerfile&quot;&gt;Docker
官方构建文件&lt;/a&gt;），提供web环境，内部暴露端口 &lt;code&gt;80&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;本次以 &lt;code&gt;php-74-apache-xdebug-29&lt;/code&gt;
为例，在&lt;strong&gt;项目所在的目录&lt;/strong&gt;启动并拉取容器：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker run --name php-web-dev -p 80:80 -e XDEBUG_CONFIG=remote_host=host.docker.internal -v $(pwd):/var/www/html -d phpstorm/php-73-apache-xdebug-27&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;具体参数不做解释啦，能安装 &lt;code&gt;Docker&lt;/code&gt; 的应该都能明白，可以通过 &lt;code&gt;man&lt;/code&gt;
查一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;需要注意以下两点：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;其中的 &lt;code&gt;${pwd}&lt;/code&gt; 是获取当前的工作目录路径，可以自己手动指定。或者&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;对于 &lt;code&gt;Windows&lt;/code&gt; 的 &lt;code&gt;cmd&lt;/code&gt; 可以是 &lt;code&gt;%cd%&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;对于 &lt;code&gt;Windows&lt;/code&gt; 的 &lt;code&gt;powershell&lt;/code&gt; 可以不变。如果不行可以尝试 &lt;code&gt;${PWD}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过 &lt;code&gt;-e&lt;/code&gt; 设置的环境变量 &lt;code&gt;XDEBUG_CONFIG&lt;/code&gt; 指定了远程的主机地址，对于
&lt;code&gt;windows&lt;/code&gt; 和 &lt;code&gt;Mac&lt;/code&gt; 来说，&lt;code&gt;host.docker.internal&lt;/code&gt; 即是主机地址（参考
&lt;a href=&quot;https://docs.docker.com/docker-for-windows/networking/&quot;&gt;官网文档1&lt;/a&gt; 与
&lt;a href=&quot;https://docs.docker.com/docker-for-mac/networking/&quot;&gt;官网文档2&lt;/a&gt;）。而对于
Linux，则是&lt;strong&gt;无法进行识别&lt;/strong&gt;的（参考
&lt;a href=&quot;https://github.com/docker/for-linux/issues/264&quot;&gt;Github
Issue&lt;/a&gt;），这个时候可以使用 &lt;strong&gt;主机名&lt;/strong&gt; 来指定（通过 &lt;code&gt;hostname&lt;/code&gt;
获取），请自己根据情况修改 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后直接访问 &lt;a href=&quot;http://127.0.0.1&quot;&gt;127.0.0.1&lt;/a&gt;，结果如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731211328720.png&quot; alt=&quot;image-20200731211328720&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就跑起来啦。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_docker_compose_方式&quot; &gt;Docker Compose 方式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：如果你是一步一步的来，请先停止上一步的容器：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker stop php-web-dev&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;项目根目录创建一个 &lt;code&gt;docker-compose.yml&lt;/code&gt; 文件，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;version: &apos;3.8&apos;
services:
  webserver:
    image: phpstorm/php-73-apache-xdebug-27
    ports:
      - &quot;80:80&quot;
    volumes:
      - ./:/var/www/html
    environment:
      XDEBUG_CONFIG: remote_host=host.docker.internal&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于 &lt;code&gt;Linux&lt;/code&gt; ，修改 &lt;code&gt;environment&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;   ...
    environment:
      XDEBUG_CONFIG: remote_host=&amp;lt;hostname&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：Docker Compose 和 Docker 的版本有所关系，具体参见
&lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-versioning/&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建完成直接运行即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731212509592.png&quot; alt=&quot;image-20200731212509592&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Tips: &lt;code&gt;phpstorm&lt;/code&gt; 和 &lt;code&gt;idea&lt;/code&gt; 一样，都有 &lt;code&gt;services&lt;/code&gt;，可以直接通过
&lt;code&gt;services&lt;/code&gt; 进行容器管理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731212534550.png&quot; alt=&quot;image-20200731212534550&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;访问测试 &lt;a href=&quot;http://127.0.0.1&quot;&gt;127.0.0.1&lt;/a&gt;，结果同上。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_debug&quot; &gt;Debug&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;浏览器安装 &lt;code&gt;xdebug&lt;/code&gt; 扩展插件，见
&lt;a href=&quot;https://www.jetbrains.com/help/phpstorm/browser-debugging-extensions.html?_ga=2.160701439.351768353.1596075455-1678276671.1595950120&quot;&gt;官方文档&lt;/a&gt;，&lt;code&gt;Zend Debugger&lt;/code&gt;
没有试过。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;访问 &lt;a href=&quot;http://127.0.0.1&quot;&gt;127.0.0.1&lt;/a&gt; ，开启插件 &lt;code&gt;debug&lt;/code&gt; 模式&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731214409388.png&quot; alt=&quot;image-20200731214409388&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;上述两种方式的 Debug 的方式都是一样的，所以一起说啦。首先打断点&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731212639298.png&quot; alt=&quot;image-20200731212639298&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;开启 &lt;code&gt;phpstorm&lt;/code&gt; 的 &lt;code&gt;debug&lt;/code&gt; 监听&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;(开启前)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731212753466.png&quot; alt=&quot;image-20200731212753466&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;(开启后)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731212834049.png&quot; alt=&quot;image-20200731212834049&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;无论上述两种的那种运行方式，直接访问
&lt;a href=&quot;http://127.0.0.1&quot;&gt;127.0.0.1&lt;/a&gt;，会弹出如下界面：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731213100779.png&quot; alt=&quot;image-20200731213100779&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;选择当前项目，&lt;code&gt;ACCEPT&lt;/code&gt; 即可！随后就可以看到效果啦&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731213555345.png&quot; alt=&quot;image-20200731213555345&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_发生了什么&quot; &gt;发生了什么&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实这个过程很好理解，通过查看他的构建方式就知道，主要有以下几步：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;拉取 &lt;code&gt;php7.4&lt;/code&gt; 镜像，完成基本的依赖安装、&lt;code&gt;apache&lt;/code&gt; 、`xdebug`安装&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;指定当前工作目录映射到容器内的 &lt;code&gt;apache&lt;/code&gt; 下，端口 &lt;code&gt;80&lt;/code&gt; 进行映射&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;指定 &lt;code&gt;xdebug&lt;/code&gt; 的主机地址为我们宿主机&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;开启 &lt;code&gt;phpstorm&lt;/code&gt; 的监听，以及文件的 `debug`映射&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里需要提一下，其实我们在倒数第二部 &lt;code&gt;ACCEPT&lt;/code&gt; 那里，主要是配置了一个
&lt;code&gt;php server&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731214550471.png&quot; alt=&quot;image-20200731214550471&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个配置是十分重要的，你可以提前将它配置好，然后倒数第二部里面进行选择即可。如果是
&lt;code&gt;Zend Debugger&lt;/code&gt; ，无非就是修改 &lt;code&gt;Debugger&lt;/code&gt;，但是*没有官方镜像支持*。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_docker_compose_编排&quot; &gt;Docker Compose 编排&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下面我们加上另外一个容器：Mysql8，很简单：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;version: &apos;3.8&apos;
services:
  mysql-php-dev:
    container_name: mysql-php-dev
    image: mysql:8
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    networks:
      - php-mysql
  webserver:
    container_name: php-web-dev-1
    depends_on:
      - mysql-php-dev
    image: phpstorm/php-73-apache-xdebug-27
    ports:
      - &quot;80:80&quot;
    volumes:
      - ./:/var/www/html
    environment:
      XDEBUG_CONFIG: remote_host=host.docker.internal
    networks:
      - php-mysql

networks:
  php-mysql:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改代码：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&amp;lt;?php
$world = &quot;World&quot;;
echo &quot;Hello，&quot;, $world;
$servername = &quot;mysql-php-dev&quot;;
$username = &quot;root&quot;;
$password = &quot;123456&quot;;

$conn = mysqli_connect($servername, $username, $password);
if (!$conn) {
    die(&quot;Connection failed: &quot; . mysqli_connect_error());
}
echo &quot;连接成功&quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;访问测试一下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/8/1/image-20200731215831768.png&quot; alt=&quot;image-20200731215831768&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;搞定！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Spring Security Oauth2 从零到一完整实践（二）自动配置实现]]></description><link>https://zyue.wiki/articles/2019/07/14/1563082247386.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/07/14/1563082247386.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_系列文章&quot;&gt;系列文章&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_spring_boot_oauth2_自动配置实现&quot;&gt;spring boot oauth2 自动配置实现&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_spring_security_保护的资源&quot;&gt;spring security 保护的资源&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_spring_security_oauth2_保护资源&quot;&gt;spring security oauth2 保护资源&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_授权服务器&quot;&gt;授权服务器&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_资源服务器&quot;&gt;资源服务器&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_其他&quot;&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意注意：本文章适用于5.3以前的spring security以及spring boot 2.3.x
以前的 oauth，以下内容应该为过时！spring 提供新的 oauth2
授权服务器，目前正在https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update[实验性阶段]，同时资源服务器由
oauth 模块迁移到 spring security 之内。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前面我们学习了四种授权模式的两种，因为那两种分别满足了方便和安全，已经能够胜任大多数情况，我们从简开始，先来用最简单的方式开始。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;GitHub 地址： &lt;a href=&quot;https://github.com/lizhongyue248/spring-security-oauth2-demo&quot;&gt;spring-security-oauth2-demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;博客地址： &lt;a href=&quot;https://echocow.cn&quot;&gt;echocow.cn&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_系列文章&quot; &gt;系列文章&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082088646.html&quot;&gt;较为详细的学习
oauth2 的四种模式其中的两种授权模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring boot oauth2 自动配置实现&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563096109754.html&quot;&gt;spring
security oauth2 授权服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/20/1563611848587.html&quot;&gt;spring
security oauth2 资源服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/30/1564498598952.html&quot;&gt;spring
security oauth2 自定义授权模式（手机、邮箱等）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2020/01/20/1579503807596.html&quot;&gt;spring
security oauth2 踩坑记录&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_spring_boot_oauth2_自动配置实现&quot; &gt;spring boot oauth2 自动配置实现&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;spring boot 最大一个特点就是 &lt;strong&gt;约定大于配置，去繁就简&lt;/strong&gt;
。既然如此，他自然也提供了一套 oauth2
的自动化配置，我们先来实验他完成的自动化配置看看效果。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;首先创建我们的 module 如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709100748.png&quot; alt=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709100931.png&quot; alt=&quot;2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709100948.png&quot; alt=&quot;3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：这个过程以后不再截图演示。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 &lt;code&gt;pom.xml&lt;/code&gt; 中添加如下依赖&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.security.oauth.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-security-oauth2-autoconfigure&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.boot.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_spring_security_保护的资源&quot; &gt;spring security 保护的资源&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;默认情况下，我们加入了 spring security
的依赖，他会保护我们的资源。现在添加启动类如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709145302.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;直接启动，控制台如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709145618.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后访问 &lt;a href=&quot;http://127.0.0.1:8080&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080&lt;/a&gt; ，如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190709145514.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用用户名 &lt;code&gt;user&lt;/code&gt; 密码为控制台打印的那一串登录即可，成功后如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709145819.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是现在默认的是 spring security，我们接下来来实验一下 oauth2
保护我们的资源&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_spring_security_oauth2_保护资源&quot; &gt;spring security oauth2 保护资源&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们在前面提到过 oauth2
的几种角色，我们现在一步一步的来。在下面的授权服务器与资源服务器，我们将他们存在同一个应用之中使用，先以最快速的方式学习与了解，后面再来考虑分离的问题。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_授权服务器&quot; &gt;授权服务器&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;首先第一步是授权服务器，因为它是我们获取与请求凭证的地方，我们需要他来给我们下发令牌凭证，如何开启呢？需要一个启动注解`@EnableAuthorizationServer`
添加在启动类上即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时为了方便测试，我们添加一个 &lt;code&gt;ResourceController&lt;/code&gt;
来设置一个资源访问路径如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709153904.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个时候我们再启动，然后去访问就会发现不需要登录了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_20190709154353.png&quot; alt=&quot;测试&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;因为现在 spring security
已经不再去管理你的应用了，&lt;strong&gt;然而现在你只配置了授权服务器，他不会保护你的应用程序的，所以不需要登录了。&lt;/strong&gt;我们暂时不管，现在授权服务器的任务是*验证身份并下发令牌，我们来测试一下。*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为了方便查看路径，我们开启 debug 日志，以便更好的理解整个过程；添加
&lt;code&gt;application.yml&lt;/code&gt; 以及内容如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;logging:
  level:
    org:
      springframework:
        security: DEBUG&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后运行，你会看到如下画面：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709154809.png&quot; alt=&quot;run&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在我们启动的时候为我们自动生成的了一些东西：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;用户密码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;客户端 id&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;客户端密码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;添加了七个路径&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用权限表达式设置访问权限&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_授权码模式&quot; &gt;授权码模式&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;spring security oauth
授权服务器默认开启授权码模式。那么按照我们前面说的，&lt;strong&gt;授权码模式是在授权端点
/oauth/authorize 请求授权码&lt;/strong&gt;，路径应该如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;http://localhost:8080/oauth/authorize?response_type=code&amp;amp;client_id=73ec1533-f25a-4fb0-9332-552d864bebbc&amp;amp;redirect_uri=http://example.com&amp;amp;scope=all&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为什么回调地址是
&lt;a href=&quot;http://example.com？因为我们现在没有任何应用，需要一个页面来接收回调厚的授权码，所以随便找了一个。&quot; class=&quot;bare&quot;&gt;http://example.com？因为我们现在没有任何应用，需要一个页面来接收回调厚的授权码，所以随便找了一个。&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;访问后会出现如下错误&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709155136.png&quot; alt=&quot;error&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这是因为我们没有配置 spring security
造成的，所以需要回去配置一下，使用默认配置即可，添加一个配置类如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;image::https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709155545.png[spring
security config]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重启启动后，你会发现，现在的网页又不能访问了，全都提示需要登录了，暂时不管。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;我们使用新的 client id 去请求授权&lt;/strong&gt;，他会自动跳转到登录页面了，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709155707.png&quot; alt=&quot;login&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里的步骤是在授权服务器上面的，就像我们点击第三方登录的 qq
的时候，是跳转到 腾讯 自己的登录页面的。用户名 user
，密码为控制台生成的，登录后如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709155929.png&quot; alt=&quot;error&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;它提示我们 &lt;strong&gt;至少为客户端注册一个回调地址&lt;/strong&gt;
，我们请求授权的时候传递了一个回调地址了，这里为什么还需要一个呢？这个很容易理解，&lt;strong&gt;因为你传递过来的回调地址授权服务器不知道是否合法，可能会在传输的中途被篡改，所以在授权服务器里面需要你注册一个回调地址，与你传递过来的进行对比，如果匹配才会携带授权码进行回调。&lt;/strong&gt;这样就有效避免中途被篡改的问题了，所以现在我们需要去注册一个回调地址，在
&lt;code&gt;application.yml&lt;/code&gt; 中配置：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709160558.png&quot; alt=&quot;注册一个回调地址&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后重新启动，再次携带新的客户端id进行访问：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709160848.png&quot; alt=&quot;确认授权&quot;&gt;&lt;/span&gt;当我们确认授权了以后，这个授权流程也就完毕了，也就相当于前面
&lt;strong&gt;角色中的抽象流图的 AB 完成了&lt;/strong&gt; ，我们看看得到的授权码&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709160920.png&quot; alt=&quot;授权授权码&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;接下来我们需要使用此授权码去完成请求令牌的操作也就是前面说到的第二个请求&lt;/strong&gt;，我们需要
postman 接口测试工具：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709161310.png&quot; alt=&quot;postman&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当我们设置好授权信息以后他会为我们自动添加一个请求头&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709161337.png&quot; alt=&quot;请求头&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请求头的添加方式就是前面提到的 &lt;strong&gt;客户端加密&lt;/strong&gt;
的那一部分，不再赘述。然后我们设置 &lt;strong&gt;第二个请求的请求参数&lt;/strong&gt; 如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709161407.png&quot; alt=&quot;设置参数&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709161423.png&quot; alt=&quot;请求令牌&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们就获取到令牌了，到这一步，也就相当于前面 &lt;strong&gt;角色中的抽象流图的 CD
也完成了&lt;/strong&gt; 。这就是授权码模式获取令牌的两个请求的过程。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_密码模式&quot; &gt;密码模式&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来我们来试一下 &lt;strong&gt;密码模式&lt;/strong&gt;
来获取令牌，就像前面所说，他只有一个请求即可，所以我们只要用 postman
携带参数请求一下就好了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709163358.png&quot; alt=&quot;密码模式&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;相比起来，密码模式就简单太多啦！但是用户名密码是在客户端那里的，而不是在授权服务器这边的，所以只能是完全信得过的应用才能够使用！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_快速自定义&quot; &gt;快速自定义&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;所谓快速自定义，就是我们不需要写代码，通过配置文件即可完成自定义。&lt;/strong&gt;对于
oauth2 客户端，提供了如下配置让我们快速自定义：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709170045.png&quot; alt=&quot;oauth&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，只能提供一个客户端使用。我们后面再来详细学习如何自定义&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_配置用户&quot; &gt;配置用户&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实用户就是用的 spring security
的用户，但是由于不能够直接在配置文件中指定用户的密码了，所以我们需要建一个
&lt;code&gt;UserService&lt;/code&gt;
的实现类。不过在那之前，我们需要配置一个密码加密器，让我们的密码得到保障，而不是明文传输，spring
5 以后这个是必须指定的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Bean
public PasswordEncoder passwordEncoder() {
    return new BCryptPasswordEncoder();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;BCrypt
不可逆的加密算法，无法通过解密密文得到明文，和其他对称或非对称加密方式不同的是，不是直接解密得到明文，也不是二次加密比较密文，而是把明文和存储的密文一块运算得到另一个密文，如果这两个密文相同则验证成功。对于同一个密码，每次加密出来是完全不同的，所以安全性很可靠。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下面的用户我们用最快捷的方式来进行创建，创建两个内存用户：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Bean
@Override
protected UserDetailsService userDetailsService() {
    InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();
    manager.createUser(User.withUsername(&quot;user&quot;)
                   .password(passwordEncoder().encode(&quot;123456&quot;))
                   .authorities(&quot;ROLE_USER&quot;).build());
    manager.createUser(User.withUsername(&quot;admin&quot;)
                   .password(passwordEncoder().encode(&quot;admin&quot;))
                   .authorities(&quot;ROLE_ADMIN&quot;).build());
    return manager;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709185310.png&quot; alt=&quot;配置用户&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;获取令牌看看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709190023.png&quot; alt=&quot;token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_资源服务器&quot; &gt;资源服务器&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在我们取到了 token，我们来尝试访问一下被保护的资源，使用浏览器访问：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709191331.png&quot; alt=&quot;资源服务器&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你会发现同样需要你登录，因为现在是由 spring security
进行资源保护的。那么我们看看携带 token 使用 postman 测试一下会怎样呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709191618.png&quot; alt=&quot;请求&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;会发现是 401，也就是令牌是无效的，&lt;strong&gt;原因就是因为现在资源的保护是由传统的
spring security 来进行保护的。接下来我们就要配置我们的资源服务器。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同授权服务器一样，资源服务器的启动也只需要一个注解就可以了：&lt;code&gt;@EnableResourceServer&lt;/code&gt;，启动类添加此注解如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@SpringBootApplication
@EnableAuthorizationServer
@EnableResourceServer
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;启动下应用，通过浏览器看看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709192751.png&quot; alt=&quot;浏览器&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你会发现已经不能够登录了。现在重新用密码模式请求下
token，截图省略，然后获取 token 后去请求我们受保护的资源试一试：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709193118.png&quot; alt=&quot;受保护&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在携带正确的 token 就可以请求到数据了，这就是已经由 spring security
oauth 来进行资源保护了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于资源服务器的自定义配置，目前只有一个地方，就是资源的 id ，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709193650.png&quot; alt=&quot;id&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果两者不相同会抛出如下异常：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;error&quot;: &quot;access_denied&quot;,
    &quot;error_description&quot;: &quot;Invalid token does not contain resource id (resource-id)&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其他的配置我们后面再说，因为他主要涉及到与授权服务器的分离的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_其他&quot; &gt;其他&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;除了获取 token 和请求以外，她还可以配置一些默认的实现。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_解析_token&quot; &gt;解析 token&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要在配置文件中添加如下配置：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;security:
  oauth2:
    authorization:
      # 允许使用 /oauth/check_token 端点
      check-token-access: isAuthenticated()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709194944.png&quot; alt=&quot;配置&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;熟悉 SqEL 表达式的同学应该知道 &lt;code&gt;isAuthenticated()&lt;/code&gt;
的意思，它允许此端点的访问，重启后获取新的
token，来访问试一试，参数前面已经说过不再赘述：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709195113.png&quot; alt=&quot;解析&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就成功解析了我们的 token 信息！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用默认配置的情况下且不增加类的情况下，我们是没有办法刷新 token 的。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_总结&quot; &gt;总结&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个部分是我们最基础的部分，也是最为简单的部分，使用 spring boot oauth
的自动配置完成了简单的授权服务器和资源服务器的配置，
通过这两个服务器的配置就可以快速搭建起来 oauth2
的授权流程，为我们省掉了很多麻烦事儿，当然，自动配置有好处也有坏处，由于他自动帮我们配置好了很多，能满足很多的小型应用的需求了。但是要求总是在变化的，所以有些不符合我们要求的地方我们需要去自己自定义的，下面我们就要进入
spring security oauth2
完整自定义配置环节，分为两个部分，一个授权服务器，一个资源服务器的配置。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Spring Security Oauth2 从零到一完整实践（三）授权服务器]]></description><link>https://zyue.wiki/articles/2019/07/14/1563096109753.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/07/14/1563096109753.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_系列文章&quot;&gt;系列文章&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_spring_security_oauth2_授权服务器&quot;&gt;spring security oauth2 授权服务器&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_基于内存的客户端信息与令牌存储&quot;&gt;基于内存的客户端信息与令牌存储&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_基于_mysql_的客户端信息与令牌存储&quot;&gt;基于 mysql 的客户端信息与令牌存储&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_基于_redis_的令牌存储&quot;&gt;基于 redis 的令牌存储&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_基于_jwt_的令牌生成与配置&quot;&gt;基于 jwt 的令牌生成与配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_授权服务器小扩展&quot;&gt;授权服务器小扩展&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_参考资料&quot;&gt;参考资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意注意：本文章适用于5.3以前的spring security以及spring boot 2.3.x
以前的 oauth，以下内容应该为过时！spring 提供新的 oauth2
授权服务器，目前正在https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update[实验性阶段]，同时资源服务器由
oauth 模块迁移到 spring security 之内。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前面说了自动配置，现在就是来说自定义配置啦，这个是十分重要的一节，可以说
oauth2
的核心就是授权服务器了，所有的角色都是围绕着授权服务器而运作的，这里基本包含了资源服务器的所有配置。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意：spring security oauth2 模块已经过期，见
&lt;a href=&quot;https://github.com/spring-projects/spring-security-oauth#-deprecation-notice-&quot;&gt;github&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;GitHub 地址： &lt;a href=&quot;https://github.com/lizhongyue248/spring-security-oauth2-demo&quot;&gt;spring-security-oauth2-demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;博客地址： &lt;a href=&quot;https://echocow.cn&quot;&gt;echocow.cn&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_系列文章&quot; &gt;系列文章&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082088646.html&quot;&gt;较为详细的学习
oauth2 的四种模式其中的两种授权模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082247386.html&quot;&gt;spring boot
oauth2 自动配置实现&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring security oauth2 授权服务器配置&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/20/1563611848587.html&quot;&gt;spring
security oauth2 资源服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/30/1564498598952.html&quot;&gt;spring
security oauth2 自定义授权模式（手机、邮箱等）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2020/01/20/1579503807596.html&quot;&gt;spring
security oauth2 踩坑记录&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_spring_security_oauth2_授权服务器&quot; &gt;spring security oauth2 授权服务器&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们首先再次回顾下授权服务器的详细作用：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;客户端的验证与授权&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;令牌的生成与发放&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;令牌的校验与更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们以下的操作都会围绕 &lt;strong&gt;客户端&lt;/strong&gt; 与 &lt;strong&gt;令牌&lt;/strong&gt; 来完成。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意：以下授权服务器全默认在 8000 端口运行！！！&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在我们需要进行的就是授权服务器配置实现，我们完成项目的初始化，和之前创建完全一样，创建完成后，&lt;strong&gt;我们把
8080 端口修改为 8000 端口&lt;/strong&gt;，然后项目结构如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709212205.png&quot; alt=&quot;new&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时添加一下如下依赖&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.security.oauth.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-security-oauth2-autoconfigure&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.boot.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;既然是授权服务器，那么我们也就不用把它注册为资源服务器了，因为我们不对外暴露任何资源，仅仅只是为了令牌的下发，不需要做资源保护。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在我们配置授权服务器之前，需要先进行我们前面遇到过的配置 spring security
web 安全，复制一下上一次的配置，就不截图了，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.oauth.authorization.config;

import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    /**
     * 密码加密方式，spring 5 后必须对密码进行加密
     *
     * @return BCryptPasswordEncoder
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    /**
     * 创建两个内存用户
     * 用户名 user 密码 123456 角色 ROLE_USER
     * 用户名 admin 密码 admin 角色 ROLE_ADMIN
     *
     * @return InMemoryUserDetailsManager
     */
    @Bean
    @Override
    public UserDetailsService userDetailsService() {
        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();
        manager.createUser(User.withUsername(&quot;user&quot;)
                .password(passwordEncoder().encode(&quot;123456&quot;))
                .authorities(&quot;ROLE_USER&quot;).build());
        manager.createUser(User.withUsername(&quot;admin&quot;)
                .password(passwordEncoder().encode(&quot;admin&quot;))
                .authorities(&quot;ROLE_ADMIN&quot;).build());
        return manager;
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;上一部分我们知道 &lt;code&gt;spring-security-oauth2-autoconfigure&lt;/code&gt;
是自动配置的包，通过陪配置文件就可以完成一个授权服务器和资源服务器，现在我们需要来自定义他的授权服务器该怎么做呢？我们需要做的就是配置属于我们自己的
`AuthorizationServerConfigurer`了，当 spring
扫描到我们实现的配置以后，他就不回去自动配置 oauth2
了。为什么这么说呢？可以通过查看他的自动配置的源码你就会发现为什么，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713151107.png&quot; alt=&quot;bean&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以，如果我们配置了 &lt;code&gt;AuthorizationServerConfigurer&lt;/code&gt;
的bean，它是不会执行自动配置的。我们现在需要自定义，所以就要来实现一下这个接口。当然，spring
提供了相应的适配器来供我们实现这个接口的，他就是
&lt;code&gt;AuthorizationServerConfigurerAdapter&lt;/code&gt;，我们只要继承这个类即可。我们来看看里面的三个配置方法：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 34%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;方法名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;configure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;AuthorizationServerSecurityConfigurer&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;配置授权服务器的安全信息，比如 ssl 配置、checktoken
是否允许访问，是否允许客户端的表单身份验证等。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;configure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ClientDetailsServiceConfigurer&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;配置客户端的
service，也就是应用怎么获取到客户端的信息，一般来说是从内存或者数据库中获取，已经提供了他们的默认实现，你也可以自定义。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;configure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;AuthorizationServerEndpointsConfigurer&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;配置授权服务器各个端点的非安全功能，如令牌存储，令牌自定义，用户批准和授权类型。如果需要密码授权模式，需要提供
&lt;code&gt;AuthenticationManager&lt;/code&gt; 的 bean。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以为了方便，我们先在我们的 &lt;code&gt;SecurityConfig&lt;/code&gt; 配置中创建一个
&lt;code&gt;AuthenticationManager&lt;/code&gt; Bean，直接调用父类的方法获取即可，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 认证管理
 *
 * @return 认证管理对象
 * @throws Exception 认证异常信息
 */
@Override
@Bean  // 重点是这行，父类并没有将它注册为一个 Bean
public AuthenticationManager authenticationManagerBean() throws Exception {
    return super.authenticationManagerBean();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来就是我们配置我们自己的授权服务器了，我们要完成如下的几种授权服务器配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;基于内存的客户端信息与令牌存储&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;基于 mysql 的客户端信息与令牌存储&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;基于 redis 的令牌存储&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;基于 jwt 的令牌生成与配置&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;授权服务器小扩展&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;以上可以自由组合，例如 mysql 客户端配合 redis 令牌存储等。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;由于内容过多，防止由于依赖的问题导致不好运行查看效果，我每一种方式，都将它放在新的模块之中，模块的创建将会省略不写。分别为
内存、mysql、redis、jwt 四个模块&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过在那之前，我们需要准备一个已经继承
&lt;code&gt;AuthorizationServerConfigurerAdapter&lt;/code&gt;
的配置类，同时上面提到过，如果需要密码模式，我们要提供
&lt;code&gt;AuthenticationManager&lt;/code&gt; 的
bean，所以我们在这里提前进行配置下，后面就不再进行赘述，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Configuration
@RequiredArgsConstructor
@EnableAuthorizationServer
public class Oauth2AuthorizationServerConfig
    extends AuthorizationServerConfigurerAdapter {

    private final @NonNull AuthenticationManager authenticationManager;

    @Override
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
        endpoints.authenticationManager(this.authenticationManager);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在的项目结构如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713164716.png&quot; alt=&quot;authconfig&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意，为了方便，后面的测试均使用密码模式进行测试！&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_基于内存的客户端信息与令牌存储&quot; &gt;基于内存的客户端信息与令牌存储&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;代码参见项目模块 spring-security-oauth2-authorization&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们将在内存中存储和读取客户端信息以及下发的令牌信息：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：速度快，读取速度和写入速度都很快，配置也极其方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：扩展性差，需要在代码中配置，重启应用后已经下发的令牌失效。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：小型不易改变的应用，授权服务器和资源服务器一体的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_客户端信息&quot; &gt;客户端信息&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于客户端信息的配置，你完全可以通过
&lt;code&gt;org.springframework.boot.autoconfigure.security.oauth2.authserver.OAuth2AuthorizationServerConfiguration&lt;/code&gt;
这个类学习到，对于客户端的配置我们主要实现对参数为
&lt;code&gt;ClientDetailsServiceConfigurer&lt;/code&gt; 的方法配置，我们分来两个方式来学习：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;直接代码写死配置客户端信息&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;读取配置文件中的客户端信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_代码配置&quot; &gt;代码配置&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要以下几步完成配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;构建内存存储的 &lt;code&gt;ClientDetailsService&lt;/code&gt; 实现类（spring security oauth
已经提供）。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;利用构建出来的进行配置客户端。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们先进行第一步，我们获取他的建造者：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;InMemoryClientDetailsServiceBuilder builder = clients.inMemory();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后通过他构建一个内存客户端：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;builder
        // 构建一个 id 为 oauth2 的客户端
        .withClient(&quot;oauth2&quot;)
        // 设置她的密钥，加密后的
        .secret(&quot;$2a$10$wlgcx61faSJ8O5I4nLiovO9T36HBQgh4RhOQAYNORCzvANlInVlw2&quot;)
        // 设置允许访问的资源 id
        .resourceIds(&quot;oauth2&quot;)
        // 授权的类型
        .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;refresh_token&quot;)
        // 可以授权的角色
        .authorities(&quot;ROLE_ADMIN&quot;, &quot;ROLE_USER&quot;)
        // 授权的范围
        .scopes(&quot;all&quot;)
        // token 有效期
        .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))
        // 刷新 token 的有效期
        .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))
        // 授权码模式的重定向地址
        .redirectUris(&quot;http://example.com&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;看起来她配置的东西和我们在配置文件中写的东西是基本一致的，不过密码现在是加密后的了，如何获取呢？我是写了一个测试类如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.oauth.authorization;

import org.junit.Test;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

/**
 * 获取加密后的密码
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 19-7-13 下午4:36
 */
public class PasswordTest {

    @Test
    public void password() {
        // 每次打印的结果都不一样，不影响
        System.out.println(new BCryptPasswordEncoder().encode(&quot;oauth2&quot;));
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后将打印的密码填入即可，&lt;strong&gt;不过值得注意的是，她每次的加密结果都是不一样的&lt;/strong&gt;。现在的文件如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713164857.png&quot; alt=&quot;file&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们启动然后测试一下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713165430.png&quot; alt=&quot;test&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个就从内存中存存储和读取客户端信息了，如果多个客户端呢？复制一遍就好啦&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713165639.png&quot; alt=&quot;more&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;亦或者完全使用链式结构如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713170359.png&quot; alt=&quot;all&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_配置文件配置&quot; &gt;配置文件配置&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于配置文件配置其实他已经有了默认的实现了，但是只能对一个客户端进行配置，我们需要多个的时候怎么办呢？就需要我们来扩展了，这个实现其实很简单，就是一个配置类和一个循环的实现，我们来捋一下步骤。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;读取配置文件，多个客户端信息&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;逐个配置客户端信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先来书写配置类，使用 lombok 自动生成 get/set 等方法：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Data
@Configuration
@ConfigurationProperties(&quot;application.security.oauth&quot;)
public class ClientDetails {
    private List&amp;lt;BaseClientDetails&amp;gt; client;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;书写配置文件：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;application:
  security:
    oauth:
      client[0]:
        registered-redirect-uri: http://example.com
        # 客户端 id
        client-id: client1
        # 客户端密钥
        client-secret: $2a$10$wlgcx61faSJ8O5I4nLiovO9T36HBQgh4RhOQAYNORCzvANlInVlw2
        # 授权范围
        scope: all
        # token 有效期
        access-token-validity-seconds: 6000
        # 刷新 token 的有效期
        refresh-token-validity-seconds: 6000
        # 允许的授权类型
        grant-type: authorization_code,password,refresh_token
        # 可以访问的资源 id
        resource-ids: oauth2
      client[1]:
        registered-redirect-uri: http://example.com
        # 客户端 id
        client-id: client2
        # 客户端密钥
        client-secret: $2a$10$wlgcx61faSJ8O5I4nLiovO9T36HBQgh4RhOQAYNORCzvANlInVlw2
        # 授权范围
        scope: all
        # token 有效期
        access-token-validity-seconds: 6000
        # 刷新 token 的有效期
        refresh-token-validity-seconds: 6000
        # 允许的授权类型
        grant-type: authorization_code,password,refresh_token
        # 可以访问的资源 id
        resource-ids: oauth2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为了防止混淆，我单独写了一个方法来配置，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private void configClient(ClientDetailsServiceConfigurer clients) throws Exception {
        InMemoryClientDetailsServiceBuilder builder = clients.inMemory();
        for (BaseClientDetails client : clientDetails.getClient()) {
            ClientDetailsServiceBuilder&amp;lt;InMemoryClientDetailsServiceBuilder&amp;gt;.ClientBuilder clientBuilder =
                    builder.withClient(client.getClientId());
            clientBuilder
                    .secret(client.getClientSecret())
                    .resourceIds(client.getResourceIds().toArray(new String[0]))
                    .authorizedGrantTypes(client.getAuthorizedGrantTypes().toArray(new String[0]))
                    .authorities(
                            AuthorityUtils.authorityListToSet(client.getAuthorities())
                                    .toArray(new String[0]))
                    .scopes(client.getScope().toArray(new String[0]));
            if (client.getAutoApproveScopes() != null) {
                clientBuilder.autoApprove(
                        client.getAutoApproveScopes().toArray(new String[0]));
            }
            if (client.getAccessTokenValiditySeconds() != null) {
                clientBuilder.accessTokenValiditySeconds(
                        client.getAccessTokenValiditySeconds());
            }
            if (client.getRefreshTokenValiditySeconds() != null) {
                clientBuilder.refreshTokenValiditySeconds(
                        client.getRefreshTokenValiditySeconds());
            }
            if (client.getRegisteredRedirectUri() != null) {
                clientBuilder.redirectUris(
                        client.getRegisteredRedirectUri().toArray(new String[0]));
            }
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最终如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713174017.png&quot; alt=&quot;result&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后运行测试一下两个客户端&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713174157.png&quot; alt=&quot;2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713174105.png&quot; alt=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样也实现了效果&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_令牌存储&quot; &gt;令牌存储&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实他默认的令牌存储就是使用到内存存储，所以我们无需配置～何以见得呢？我们来简单分析一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在前面我们说过 &lt;code&gt;AuthorizationServerConfigurer&lt;/code&gt;
的三个配置方法，其中就有一个参数为
&lt;code&gt;AuthorizationServerEndpointsConfigurer&lt;/code&gt;
类型的配置方法，它可以配置我们令牌信息，所以我们就要把目标放在他的上面看看，去找一找他是如何配置的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他的核心配置类是
&lt;code&gt;org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration&lt;/code&gt;，这个类内容很多，我们只关注他是默认配置的为什么是内存的，首先找到一个工厂类：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713175120.png&quot; alt=&quot;factory&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们跟进去看看：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713175259.png&quot; alt=&quot;default&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713175517.png&quot; alt=&quot;再进去看看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713175828.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们就找到她是如何默认创建的了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_基于_mysql_的客户端信息与令牌存储&quot; &gt;基于 mysql 的客户端信息与令牌存储&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;代码参见项目模块 spring-security-oauth2-authorization-mysql&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;模块创建步骤省略&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们将在 mysql 中存储和读取客户端信息以及下发的令牌信息：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：扩展性极高，不用修改代码与重启就可以完成客户端管理，安全性高。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：使用数据库速度过慢，多客户端高并发情况下可能会造成性能瓶颈&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：中大型项目，独立且完整的授权服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这之前你要添加如下的 mysql 和 jdbc 依赖&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置文件如下，我的 mysql 版本为 8.0 ，url 参数请自行修改&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;server:
  port: 8000
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/auth?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;useOldAliasMetadataBehavior=true&amp;amp;autoReconnect=true&amp;amp;serverTimezone=UTC
    username: root
    password: 123456
    # 用来初始化数据库的，如果不存在表就自动创建
    initialization-mode: ALWAYS
    schema: classpath:ddl.sql&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;导入
&lt;a href=&quot;https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql&quot;&gt;官方提供&lt;/a&gt;
的 h2 的表，由于官方使用的是 h2 的数据库，有些字段类型不对，我修改成
mysql 的后如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;-- used in tests that use MYSQL
create table if not exists oauth_client_details (
  client_id VARCHAR(256) PRIMARY KEY,
  resource_ids VARCHAR(256),
  client_secret VARCHAR(256),
  scope VARCHAR(256),
  authorized_grant_types VARCHAR(256),
  web_server_redirect_uri VARCHAR(256),
  authorities VARCHAR(256),
  access_token_validity INTEGER,
  refresh_token_validity INTEGER,
  additional_information VARCHAR(4096),
  autoapprove VARCHAR(256)
);

create table if not exists oauth_client_token (
  token_id VARCHAR(256),
  token BLOB,
  authentication_id VARCHAR(256) PRIMARY KEY,
  user_name VARCHAR(256),
  client_id VARCHAR(256)
);

create table if not exists oauth_access_token (
  token_id VARCHAR(256),
  token BLOB,
  authentication_id VARCHAR(256) PRIMARY KEY,
  user_name VARCHAR(256),
  client_id VARCHAR(256),
  authentication BLOB,
  refresh_token VARCHAR(256)
);

create table if not exists oauth_refresh_token (
  token_id VARCHAR(256),
  token BLOB,
  authentication BLOB
);

create table if not exists oauth_code (
  code VARCHAR(256), authentication BLOB
);

create table if not exists oauth_approvals (
    userId VARCHAR(256),
    clientId VARCHAR(256),
    scope VARCHAR(256),
    status VARCHAR(10),
    expiresAt TIMESTAMP,
    lastModifiedAt TIMESTAMP
);


-- customized oauth_client_details table
create table if not exists ClientDetails (
  appId VARCHAR(256) PRIMARY KEY,
  resourceIds VARCHAR(256),
  appSecret VARCHAR(256),
  scope VARCHAR(256),
  grantTypes VARCHAR(256),
  redirectUrl VARCHAR(256),
  authorities VARCHAR(256),
  access_token_validity INTEGER,
  refresh_token_validity INTEGER,
  additionalInformation VARCHAR(4096),
  autoApproveScopes VARCHAR(256)
);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先给大家介绍一下几张表的具体意思和结构：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;oauth_client_details ==⇒ 客户端信息&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 34%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;列名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;client_id（主键）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;主键,必须唯一,不能为空.
用于唯一标识每一个客户端(client);
在注册时必须填写(也可由服务端自动生成).
对于不同的grant_type,该字段都是必须的.
在实际应用中的另一个名称叫appKey,与client_id是同一个概念.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;resource_ids&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端所能访问的资源id集合,多个资源时用逗号(,)分隔&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;client_secret&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;用于指定客户端(client)的访问密匙;
在注册时必须填写(也可由服务端自动生成).
对于不同的grant_type,该字段都是必须的.
在实际应用中的另一个名称叫appSecret,与client_secret是同一个概念.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;scope&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;指定客户端申请的权限范围,可选值包括read,write,trust;若有多个权限范围用逗号(,)分隔,如:
``read,write&apos;&apos;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;authorized_grant_types&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;指定客户端支持的grant_type,可选值包括authorization_code,password,refresh_token,implicit,client_credentials,若支持多个grant_type用逗号(,)分隔,如:
``authorization_code,password&apos;&apos;.
在实际应用中,当注册时,该字段是一般由服务器端指定的,而不是由申请者去选择的,&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;web_server_redirect_uri&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端的重定向URI,可为空,
当grant_type为authorization_code或implicit时,
在Oauth的流程中会使用并检查与注册时填写的redirect_uri是否一致.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;authorities&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;指定客户端所拥有的Spring
Security的权限值,可选, 若有多个权限值,用逗号(,)分隔, 如: ``ROLE_ADMIN&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;access_token_validity&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;INTEGER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;设定客户端的access_token的有效时间值(单位:秒),可选,
若不设定值则使用默认的有效时间值(60 * 60 * 12, 12小时).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;refresh_token_validity&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;INTEGER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;设定客户端的refresh_token的有效时间值(单位:秒),可选,
若不设定值则使用默认的有效时间值(60 * 60 * 12, 12小时).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;additional_information&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(4096)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;这是一个预留的字段,在Oauth的流程中没有实际的使用,可选,但若设置值,必须是JSON格式的数据,在实际应用中,
可以用该字段来存储关于客户端的一些其他信息&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;autoapprove&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;设置用户是否自动Approval操作, 默认值为
`false&apos;, 可选值包括 `true&apos;,`false&apos;,
`read&apos;,`write&apos;.该字段只适用于grant_type=``authorization_code&apos;&apos;的情况,当用户登录成功后,若该值为’true’或支持的scope值,则会跳过用户Approve的页面,直接授权.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;oauth_client_token ==⇒ 客户端系统中存储从服务端获取的 token 数据&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 70%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;token_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;从服务器端获取到的access_token的值.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;token&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BLOB&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;这是一个二进制的字段,
存储的数据是OAuth2AccessToken.java对象序列化后的二进制数据.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;authentication_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;该字段具有唯一性,
是根据当前的username(如果有),client_id与scope通过MD5加密生成的.
具体实现请参考DefaultClientKeyGenerator.java类.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;user_name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;登录时的用户名&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;client_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端 id&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;oauth_access_token ==⇒ 生成的 token 数据&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 70%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;token_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;从服务器端获取到的access_token的值.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;token&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BLOB&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;存储将OAuth2AccessToken.java对象序列化后的二进制数据,
是真实的AccessToken的数据值.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;authentication_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;该字段具有唯一性,
其值是根据当前的username(如果有),client_id与scope通过MD5加密生成的.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;user_name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;登录时的用户名,
若客户端没有用户名(如grant_type=``client_credentials&apos;&apos;),则该值等于client_id&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;client_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端 id&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;authentication&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BLOB&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;存储将 OAuth2Authentication
对象序列化后的二进制数据.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;refresh_token&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;该字段的值是将refresh_token的值通过MD5加密后存储的.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;oauth_refresh_token ==⇒ 刷新 token&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 70%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;token_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;该字段的值是将refresh_token的值通过MD5加密后存储的.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;token&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BLOB&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;存储将OAuth2RefreshToken.java对象序列化后的二进制数据.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;authentication&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;BLOB&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;存储将OAuth2Authentication.java对象序列化后的二进制数据.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;oauth_code ==⇒ 服务端生成的 code 值&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;code&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;存储服务端系统生成的code的值(未加密).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;oauth_approvals ==⇒ 授权同意信息&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;字段类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;userId&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;用户 id&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;clientId&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端 id&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;scope&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(256)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;请求的范围&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;status&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VARCHAR(10)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;授权的状态&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;expiresAt&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TIMESTAMP&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;时间&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;lastModifiedAt&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TIMESTAMP&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;最后修改的时间&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最后一张 ClientDetails 是我们要自定义他的 表
的情况，在我们需要自定义的时候使用，但是目前我们暂时不去自定义，所以无用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以你现在的项目结构应该如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713182417.png&quot; alt=&quot;mysql&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;记得启动测试一下，确定不报错。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来我们就是来进行配置了，同样的，分为客户端信息配置和令牌配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_客户端信息_2&quot; &gt;客户端信息&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同样，对于客户端的配置我们主要实现对参数为
&lt;code&gt;ClientDetailsServiceConfigurer&lt;/code&gt; 的方法进行配置，我们需要完成以下两步：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;构建一个 jdbc 的 &lt;code&gt;ClientDetailsService&lt;/code&gt;，通过他来链接数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;将它配置进 &lt;code&gt;ClientDetailsServiceConfigurer&lt;/code&gt; 之中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们首先先来配置一个 jdbc 的 &lt;code&gt;ClientDetailsService&lt;/code&gt;
，非常简单，因为他已经提供了默认的实现了的，构建方式如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// 数据源
private final @NonNull DataSource dataSource;

/**
 * 声明 ClientDetails实现
 *
 * @return ClientDetailsService
 */
@Bean
public ClientDetailsService clientDetails() {
    return new JdbcClientDetailsService(dataSource);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后将他配置进 &lt;code&gt;ClientDetailsServiceConfigurer&lt;/code&gt; 之中，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
    clients.withClientDetails(clientDetails());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713194015.png&quot; alt=&quot;config&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们启动并添加一条客户端信息&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713193812.png&quot; alt=&quot;添加一条数据&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;用密码模式测试一下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713194118.png&quot; alt=&quot;test&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们用授权码模式测试一下，访问地址
&lt;a href=&quot;http://localhost:8000/oauth/authorize?response_type=code&amp;amp;client_id=oauth2&amp;amp;redirect_uri=http://example.com&amp;amp;scope=all&quot; class=&quot;bare&quot;&gt;http://localhost:8000/oauth/authorize?response_type=code&amp;amp;client_id=oauth2&amp;amp;redirect_uri=http://example.com&amp;amp;scope=all&lt;/a&gt;
然后登录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713194247.png&quot; alt=&quot;login&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713194303.png&quot; alt=&quot;code&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就获取到授权码了，这样就完成了客户端的 mysql 存储，但是现在 token
还是存在内存中的，下面我们将它存在数据库中。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_令牌存储_2&quot; &gt;令牌存储&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们使用 mysql
对令牌进行存储有个最大的好处，就是在授权服务器重启后，以前下发的令牌依旧有效，不用让用户重复登录。和客户端一样配置十分简单，它主要配置参数为
`AuthorizationServerEndpointsConfigurer 的`配置方法。同样也只需要两步：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;构建一个 jdbc 的 &lt;code&gt;TokenStore&lt;/code&gt;，通过他来链接数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;将它配置进 &lt;code&gt;AuthorizationServerEndpointsConfigurer&lt;/code&gt; 之中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们先来完成第一步，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 声明 jdbc TokenStore实现
 *
 * @return JdbcTokenStore
 */
@Bean
public TokenStore jdbcTokenStore() {
    return new JdbcTokenStore(dataSource);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后完成第二步，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
    endpoints.authenticationManager(this.authenticationManager)
        .tokenStore(jdbcTokenStore());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以现在应该是这样的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713195102.png&quot; alt=&quot;now&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行测试一下，先请求下 token&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190713195157.png&quot; alt=&quot;token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;看一下表有没有 token 存进去&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190713195304.png&quot; alt=&quot;data&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;会发现两张表的数据存进去了，来看看授权码呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713195501.png&quot; alt=&quot;code&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713195644.png&quot; alt=&quot;get&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这就完成使用 mysql 存储令牌的配置。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_基于_redis_的令牌存储&quot; &gt;基于 redis 的令牌存储&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;代码参见项目模块 spring-security-oauth2-authorization-redis&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;模块创建步骤省略&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们将在&lt;strong&gt;内存中存储和读取客户端信息&lt;/strong&gt;以及&lt;strong&gt;在 redis 中存储令牌信息&lt;/strong&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：速度快，项目重启 token 依旧有效且适用于分布式场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：想不到。。。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：通用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这之前你要添加如下的 redis 依赖&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时修改你的配置文件：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;server:
  port: 8000

#如果有密码记得设置，没有就不管
#spring:
  #redis:
    #password: 123456&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后复制一下第一个模块的内存客户端，现在的项目结构如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713200959.png&quot; alt=&quot;next&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同样我们只需要两步，配置token store，让他生效即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713210312.png&quot; alt=&quot;config&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行测试一下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713210045.png&quot; alt=&quot;请求&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;查看下 redis&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713210107.png&quot; alt=&quot;redis&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们就将 token 存粗进 redis 内了！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_基于_jwt_的令牌生成与配置&quot; &gt;基于 jwt 的令牌生成与配置&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;代码参见项目模块 spring-security-oauth2-authorization-jwt&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;模块创建步骤省略&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们将在&lt;strong&gt;内存中存储和读取客户端信息&lt;/strong&gt;与&lt;strong&gt;存储令牌信息&lt;/strong&gt;，使用 jwt
规范化 token：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：jwt 可以加密，可以携带更多的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：token 会变得比较长&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：通用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;具体什么是 jwt，可以参考 &lt;a href=&quot;https://www.jianshu.com/p/576dbf44b2ae&quot;&gt;什么是
JWT – JSON WEB TOKEN&lt;/a&gt; 这篇文章，很不错。我们要实现的就是将现在的
&lt;code&gt;access_token&lt;/code&gt; 和 &lt;code&gt;refresh_token&lt;/code&gt; 两个字段使用 jwt 代替。jwt的第三部分
&lt;code&gt;signature&lt;/code&gt; 是一个签证信息，这个签证信息由三部分组成：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;header (base64后的)&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;payload (base64后的)&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;secret&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个部分需要base64加密后的header和base64加密后的payload使用
&lt;code&gt;.`连接组成的字符串，然后通过header中声明的加密方式进行加盐 `secret&lt;/code&gt;
组合加密，然后就构成了jwt的第三部分。而 &lt;code&gt;secret&lt;/code&gt;
进行组合加密就涉及到两种加密方式：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;对称加密：又称私钥加密，即信息的发送方和接收方用一个密钥去加密和解密数据。它的最大优势是加/解密速度快，适合于对大数据量进行加密，对称加密的一大缺点是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在发送密钥的过程中，密钥有很大的风险会被黑客们拦截。现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人。而在
spring security 之中的相应的实现类是
&lt;code&gt;org.springframework.security.jwt.crypto.sign.MacSigner&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Signer  jwtSigner = new MacSigner(&quot;hand&quot;);//默认HMACSHA256 算法加密
Signer  jwtSigner = new MacSigner(&quot;HMACSHA256&quot;,&quot;hand&quot;);//手动设置算法&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;非对称加密：又称公钥密钥加密。非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public
key）和私钥（private
key）。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。在
spring security 之中的相应实现是
&lt;code&gt;org.springframework.security.jwt.crypto.sign.RsaSigner&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(new ClassPathResource(&quot;mytool.jks&quot;), &quot;mypass&quot;.toCharArray());
KeyPair demo = keyStoreKeyFactory.getKeyPair(&quot;mytool&quot;);
Signer jwtSigner = new RsaSigner((RSAPrivateKey)demo.getPrivate());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们从三个方面学习：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;使用对称密钥生成 jwt 令牌&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用非对称密钥生成 jwt 令牌&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;为 jwt 添加更多的信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在现在的模块中添加如下依赖：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.security.oauth.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-security-oauth2-autoconfigure&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.boot.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置文件如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;server:
  port: 8000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;初始化的结构应该如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713213749.png&quot; alt=&quot;client&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_使用对称密钥生成_jwt_令牌&quot; &gt;使用对称密钥生成 jwt 令牌&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;从前面几次经验来看，应该知道要配置一个令牌的存储，最为核心的就是配置相应的
&lt;code&gt;TokenStore&lt;/code&gt; 了。配置 jwt 也是一样需要配置一个 &lt;code&gt;JwtTokenStore&lt;/code&gt;，前面的
&lt;code&gt;JdbcTokenStore&lt;/code&gt; 需要的是数据源，那现在的 jwt
需要的是什么呢？他需要一个叫做 &lt;strong&gt;令牌转换器&lt;/strong&gt; 的东西，有了他我们才能够生成
jwt 格式的 token，所以我们需要如下几步：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;创建 &lt;strong&gt;令牌转换器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;创建 &lt;code&gt;JwtTokenStore&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;配置进 &lt;code&gt;AuthorizationServerEndpointsConfigurer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们先来第一步，配置令牌转换器。令牌转换器就是帮助程序在 JWT
编码的令牌和 OAuth
身份验证信息之间进行转换，既然我们选择对称密钥，那么我们就直接设置即可，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
    // 3. 配置进 AuthorizationServerEndpointsConfigurer
    endpoints.authenticationManager(this.authenticationManager)
        .tokenStore(tokenStore())
        .accessTokenConverter(jwtAccessTokenConverter());
}

/**
 * 1. 令牌转换器，对称密钥加密
 *
 * @return JwtAccessTokenConverter
 */
@Bean
public JwtAccessTokenConverter jwtAccessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    converter.setSigningKey(&quot;oauth2&quot;);
    return converter;
}

/**
 * 2. token store 实现
 *
 * @return JwtTokenStore
 */
@Bean
public TokenStore tokenStore() {
    return new JwtTokenStore(jwtAccessTokenConverter());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713221159.png&quot; alt=&quot;show&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前面说了要用的是
&lt;code&gt;MacSigner&lt;/code&gt;，那么这里为什么没用呢？原因自然是已经为我们实现了，我们来看看他怎么实现的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713221421.png&quot; alt=&quot;see&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713221459.png&quot; alt=&quot;see&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我么启动测试一下！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713221619.png&quot; alt=&quot;test&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们去检验一下，检验网址：jwt.io&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713222003.png&quot; alt=&quot;jwt&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就完成了对称加密的 jwt 生成&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_使用非对称密钥生成_jwt_令牌&quot; &gt;使用非对称密钥生成 jwt 令牌&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;大多时候，我们更加需要的是一个安全的授权服务器，所以更加愿意选择
非对称加密 来生成 jwt 令牌，现在我们来完成这件事，需要如下步骤：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;生成密钥对&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;创建 &lt;strong&gt;令牌转换器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;创建 &lt;code&gt;JwtTokenStore&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;配置进 &lt;code&gt;AuthorizationServerEndpointsConfigurer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们首先利用 keytool 进行密钥对的生成&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;➜  resources git:(master) ✗ pwd
/home/echo/IdeaProjects/spring-security-oauth2-demo/spring-security-oauth2-authorization-jwt/src/main/resources
➜  resources git:(master) ✗ keytool -genkey -alias oauth2 -keyalg RSA -keystore oauth2.jks -keysize 2048
输入密钥库口令:
再次输入新口令:
您的名字与姓氏是什么?
  [Unknown]:  oauth2
您的组织单位名称是什么?
  [Unknown]:  oauth2
您的组织名称是什么?
  [Unknown]:  oauth2
您所在的城市或区域名称是什么?
  [Unknown]:  oauth2
您所在的省/市/自治区名称是什么?
  [Unknown]:  oauth2
该单位的双字母国家/地区代码是什么?
  [Unknown]:  oauth2
CN=oauth2, OU=oauth2, O=oauth2, L=oauth2, ST=oauth2, C=oauth2是否正确?
  [否]:  y

输入 &amp;lt;oauth2&amp;gt; 的密钥口令
        (如果和密钥库口令相同, 按回车):
再次输入新口令:

Warning:
JKS 密钥库使用专用格式。建议使用 &quot;keytool -importkeystore -srckeystore oauth2.jks -destkeystore oauth2.jks -deststoretype pkcs12&quot; 迁移到行业标准格式 PKCS12。
➜  resources git:(master) ✗ keytool -importkeystore -srckeystore oauth2.jks -destkeystore oauth2.jks -deststoretype pkcs12
输入源密钥库口令:
已成功导入别名 oauth2 的条目。
已完成导入命令: 1 个条目成功导入, 0 个条目失败或取消

Warning:
已将 &quot;oauth2.jks&quot; 迁移到 Non JKS/JCEKS。将 JKS 密钥库作为 &quot;oauth2.jks.old&quot; 进行了备份。&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713223524.png&quot; alt=&quot;keytool&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下面就是生成公钥：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;keytool -list -rfc --keystore oauth2.jks | openssl x509 -inform pem -pubkey&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713223957.png&quot; alt=&quot;public&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在应该有如下两个文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713224200.png&quot; alt=&quot;files&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来配置增强器这些&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
    endpoints.authenticationManager(this.authenticationManager)
        .tokenStore(tokenStore())
        .accessTokenConverter(jwtAccessTokenConverter());
}

/**
 * 令牌转换器，非/对称密钥加密
 *
 * @return JwtAccessTokenConverter
 */
@Bean
public JwtAccessTokenConverter jwtAccessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    //  对称密钥加密
    //  converter.setSigningKey(&quot;oauth2&quot;);
    KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(
        new ClassPathResource(&quot;oauth2.jks&quot;), &quot;123456&quot;.toCharArray());
    converter.setKeyPair(keyStoreKeyFactory.getKeyPair(&quot;oauth2&quot;));
    return converter;
}

/**
 * token store 实现
 *
 * @return JwtTokenStore
 */
@Bean
public TokenStore tokenStore() {
    return new JwtTokenStore(jwtAccessTokenConverter());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713224547.png&quot; alt=&quot;config&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后接下来我们进行测试，请求数据：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713225046.png&quot; alt=&quot;res&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;进行校验&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713225329.png&quot; alt=&quot;v&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请注意提示框内的提示信息&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Public Key or Certificate. Enter it in plain text only if you want to
verify a token&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;公钥或证书。仅当您想验证令牌时，才以纯文本形式输入它&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Private Key. Enter it in plain text only if you want to generate a new
token. The key never leaves your browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;私钥。只有在希望生成新令牌时，才以纯文本形式输入它。密钥永远不会离开浏览器。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们只需要去复制公钥给他即可！～&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713230009.png&quot; alt=&quot;get&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713230056.png&quot; alt=&quot;ok&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样 jwt
的非对称加密其实就完成了！～这样如果资源服务器要请求我们资源，必须要有授权服务器的公钥才能够成功通过认证得到用户信息～！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_为_jwt_添加更多的信息&quot; &gt;为 jwt 添加更多的信息&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前面我们提到的一个优点就是能够添加许多自定义信息，我们就来添加一下这个自定义信息。这个时候我们就需要一个
&lt;strong&gt;令牌增强器&lt;/strong&gt;（前面的粗心打错了，，，图片改不了不好意思凑合看啦～）我们需要一个类来实现
&lt;code&gt;TokenEnhancer&lt;/code&gt; 接口，我们分为如下几步：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;实现 &lt;code&gt;TokenEnhancer&lt;/code&gt; 接口&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用一个复合令牌增强器
&lt;code&gt;TokenEnhancerChain&lt;/code&gt;，循环遍历将其委托给增强器。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;配置进 &lt;code&gt;AuthorizationServerEndpointsConfigurer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Component
public class InfoTokenEnhancer implements TokenEnhancer {
    @Override
    public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {
        // 创建一个自定义信息
        Map&amp;lt;String, Object&amp;gt; additionalInfo = new HashMap&amp;lt;&amp;gt;(1);
        // 设置值
        additionalInfo.put(&quot;organization&quot;, authentication.getName());
        // 存进去
        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);
        // 返回
        return accessToken;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713232921.png&quot; alt=&quot;impl&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于不是很复杂的逻辑，我更加喜欢使用 lambda 来写一个匿名内部类的方式：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Bean
public TokenEnhancer tokenEnhancer() {
    return (accessToken, authentication) -&amp;gt; {
        Map&amp;lt;String, Object&amp;gt; additionalInfo = new HashMap&amp;lt;&amp;gt;(1);
        additionalInfo.put(&quot;organization&quot;, authentication.getName());
        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);
        return accessToken;
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后需要配置使用一个复合令牌增强器
&lt;code&gt;TokenEnhancerChain&lt;/code&gt;，循环遍历将其委托给增强器：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();
tokenEnhancerChain.setTokenEnhancers(
    Arrays.asList(tokenEnhancer(), jwtAccessTokenConverter()));

endpoints.tokenStore(tokenStore())
    .tokenEnhancer(tokenEnhancerChain)
    .authenticationManager(authenticationManager);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713233524.png&quot; alt=&quot;security&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们启动来测试一下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190713233802.png&quot; alt=&quot;test&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就完成了增强器！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;这就是 jwt 的所有内容啦～他完全可以和 redis 令牌存储、mysql
令牌存储一起使用！&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_授权服务器小扩展&quot; &gt;授权服务器小扩展&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;代码参见项目模块 spring-security-oauth2-authorization-expansion&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;模块创建步骤省略&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;之前我们一直都是 &lt;strong&gt;配置如何获取客户端信息&lt;/strong&gt; 和
&lt;strong&gt;令牌的生成与存储&lt;/strong&gt;，但其实我们还有些小的问题没有解决：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;/oauth/check_token 端点的开放&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;refresh_token 授权类型&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;授权码模式登录页面的自定义&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;授权码模式授权页面的自定义&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为什么叫做小扩展，因为这些问题都是不需要太多的代码就能够实现的。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这之前我们完成模块的初始化，添加如下依赖：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.security.oauth.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-security-oauth2-autoconfigure&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.boot.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置文件如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;server:
  port: 8000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;复制第一个项目的配置如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714001850.png&quot; alt=&quot;next&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;确保能够启动成功且在 8000 端口&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_oauthcheck_token_端点的开放&quot; &gt;/oauth/check_token 端点的开放&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个端点的开放就要用到我们前面一直没有用的第三个方法了，参数为
&lt;code&gt;AuthorizationServerSecurityConfigurer&lt;/code&gt; 的方法，只要一句话就可以了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
public void configure(AuthorizationServerSecurityConfigurer security) {
    security
        .checkTokenAccess(&quot;isAuthenticated()&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;利用权限表达式放行即可，测试：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714003016.png&quot; alt=&quot;check&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_refresh_token_授权类型&quot; &gt;refresh_token 授权类型&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果我们直接去尝试，我们看看回报什么错&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714003147.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714003202.png&quot; alt=&quot;token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714003224.png&quot; alt=&quot;refresh&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们明明已经把它注册为组件了，但是还是找不到。主要原因是因为授权服务器的这里的安全需要我们自己手动注入一次，我简单看啦一波源码，发现他放在
&lt;code&gt;SharedObject&lt;/code&gt; 里面的 &lt;code&gt;UserDetailsService&lt;/code&gt;
并不是我们自己构建的，可以尝试 debug
&lt;code&gt;org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerSecurityConfiguration&lt;/code&gt;
第 83
行，尝试几次不再授权服务器中修改都不行，只有在授权服务器中的配置修改：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
    endpoints.authenticationManager(this.authenticationManager)
        .userDetailsService(userDetailsService);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改后请求刷新：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714010710.png&quot; alt=&quot;refresh&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样才能成功&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_授权码模式登录页面的自定义&quot; &gt;授权码模式登录页面的自定义&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实这一部分就是和 spring security
配置自定义登录页面是一样的，如果以前使用过 spring security
应该很快就能明白。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于授权码模式，我们重定向过去以后会有一个默认的登录页面&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714134901.png&quot; alt=&quot;login&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是这个登录页面有时候我们想去自定义，其实有两种方式来完成修改：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;直接使用静态文件&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用模板引擎&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过我们这里只说静态文件，使用模板引擎放在下面和自定义授权页面一起说。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_自定义表单登录&quot; &gt;自定义表单登录&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们分为两步完成：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;配置路径与请求&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;填充页面与修改&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们如何配置呢？其实这里使用的就是 spring security 的知识了，spring
security
如何配置，这里就如何配置所以应该配置的类是我们之前一直复制下来的
&lt;code&gt;SecurityConfig&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
protected void configure(HttpSecurity http) throws Exception {
    http.formLogin()
        // 登录页面名称，他会去寻找 resources 下的 resources 和 static 目录
        .loginPage(&quot;/login.html&quot;)
        // 登录表单提交的路径
        .loginProcessingUrl(&quot;/authorization/form&quot;)
        .and()
        // 关闭 csrf 防护，因为对于我们的所有请求来说，都是需要携带身份信息的
        .csrf().disable();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里要关闭 csrf 防护，关于 csrf 防护请看
&lt;a href=&quot;https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369&quot;&gt;这篇文章&lt;/a&gt;，在里面提到有效防护
csrf 的一种方式是 &lt;strong&gt;在请求地址中添加 token
并验证&lt;/strong&gt;，我们的类似，请求地址中添加了客户端名称和回调地址进行了验证，所以可以不用单行
csrf 攻击问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们需要创建一个静态的登录页面，我从网上随便下了一个模板，存放到
&lt;code&gt;resources/static&lt;/code&gt; 目录（也可以是
&lt;code&gt;resources/resources`目录，但是路径里面两个 `resources&lt;/code&gt;
很是奇怪，所以使用 &lt;code&gt;static&lt;/code&gt;），如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714150345.png&quot; alt=&quot;html&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们运行试一下，请求授权码模式的地址如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;http://localhost:8000/oauth/authorize?response_type=code&amp;amp;client_id=oauth2&amp;amp;redirect_uri=http://example.com≻ope=all&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714150816.png&quot; alt=&quot;login&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;就跳转到了我们自定义的登录页面。登录尝试：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714150928.png&quot; alt=&quot;success&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;登录成功了，但是又是丑得一的授权页面，这个我们，现在我们换一个方式，使用
模板引擎 的方式自定义。同时如何修改授权页面&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_其他的登录方式&quot; &gt;其他的登录方式&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;spring security 一样，除了表单处理，还会有其他的方式，比如
basic，也就是对话框登录。只需要配置一步即可：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
protected void configure(HttpSecurity http) throws Exception {
    http.httpBasic();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714170733.png&quot; alt=&quot;basic&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_授权码模式授权页面的自定义&quot; &gt;授权码模式授权页面的自定义&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于授权码模式的授权页面，我们必须使用模板引擎，因为他的基础还是 spring
security，所以摆脱不论 session
的安全管理机制，使用模板引擎的方式有什么好处呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;可以传递模板变量自定义很多地方&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;可以自定义认证逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们使用模板引擎完成两件事&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;自定义登录页面&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;自定义授权页面&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这之前我们要选择一个模板引擎，我选择 &lt;code&gt;thymeleaf&lt;/code&gt;，其他的如
&lt;code&gt;freemarker&lt;/code&gt; 同理，添加依赖如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加唉 templates 目录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_登录页面&quot; &gt;登录页面&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们前面说到模板引擎的一个好处就是可以配置模板变量，那么我们就来试一试自定义登录的路径。我们创建一个配置类
&lt;code&gt;SecurityProperties&lt;/code&gt;，读取配置文件：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Data
@Configuration
@ConfigurationProperties(&quot;application.security.oauth&quot;)
public class SecurityProperties {

    /**
     * 登录请求的路径，默认值 /authorization/form
     */
    private String loginProcessingUrl = &quot;/authorization/form&quot;;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;把配置类放在安全配置之中，然后配置上去，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private final @NonNull SecurityProperties securityProperties;
@Override
protected void configure(HttpSecurity http) throws Exception {

    //        静态登录页面的配置
    http.formLogin()
        // 登录页面名称，他会去寻找 resources 下的 resources 和 static 目录
        // 静态页面
        //.loginPage(&quot;/login.html&quot;)
        // 模板引擎
        .loginPage(&quot;/oauth/login&quot;)
        // 登录表单提交的路径
        // 静态页面
        // .loginProcessingUrl(&quot;/authorization/form&quot;)
        // 模板引擎
        .loginProcessingUrl(securityProperties.getLoginProcessingUrl());
    //                .and()
    // 关闭 csrf 防护，因为对于我们的所有请求来说，都是需要携带身份信息的
    //                .csrf().disable();

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这次我们选择开启 csrf
防护，因为我们现在可以有效的控制她，当然，不开启其实影响也不大。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们需要一个 &lt;code&gt;OauthController&lt;/code&gt; 用来接收请求以及渲染模板&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Controller
@RequestMapping(&quot;/oauth&quot;)
@RequiredArgsConstructor
public class OauthController {

    private final @NonNull SecurityProperties securityProperties;

    @GetMapping(&quot;login&quot;)
    public String loginView(Model model) {
        model.addAttribute(&quot;action&quot;, securityProperties.getLoginProcessingUrl());
        return &quot;form-login&quot;;
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加登录页面，这里就要用到模板引擎的知识了，这个就靠大家自己下去查查资料什么的了，我的如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714161400.png&quot; alt=&quot;login&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样其实就配置完成登录页面了，我们配置完授权页面一起测试把&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_授权页面&quot; &gt;授权页面&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要自定义授权的控制器。我们要做的就是写一个相同的端点
&lt;code&gt;/oauth/confirm_access&lt;/code&gt; 进行覆盖，所以就需要另外一个
&lt;code&gt;controller&lt;/code&gt;，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Controller
@SessionAttributes(&quot;authorizationRequest&quot;)  // 重要！
public class AuthorizationController {
    @RequestMapping(&quot;/oauth/confirm_access&quot;)
    public ModelAndView getAccessConfirmation(Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest request) throws Exception {
        AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(&quot;authorizationRequest&quot;);
        ModelAndView view = new ModelAndView();
        view.setViewName(&quot;authorization&quot;);
        view.addObject(&quot;clientId&quot;, authorizationRequest.getClientId());
        return view;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714162324.png&quot; alt=&quot;controller&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加页面&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714162555.png&quot; alt=&quot;page&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然你也可以让他使用选择的方式，选择是否授权，我的这里没有提供拒绝的选项，&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_测试&quot; &gt;测试&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们运行测试一下，访问路径：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;http://localhost:8000/oauth/authorize?response_type=code&amp;amp;client_id=oauth2&amp;amp;redirect_uri=http://example.com≻ope=all&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/Peek+2019-07-14+16-48.gif&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;发现上面报错，转化 json 后如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;error&quot; :&quot;access_denied&quot;,
    &quot;error_description&quot; : &quot;User denied access&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;用户拒绝访问，也就是用户没有同意授权，但是明明是确定授权，问题出来哪儿呢？&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_解决问题&quot; &gt;解决问题&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于授权控制器，它提供了一套默认的实现，具体参见
&lt;code&gt;org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint#authorize&lt;/code&gt;，有兴趣的小伙伴可以
debug
一下。问题也就是在这里，我们传递的参数过去，但是却没有声明她同意的范围，也就是
&lt;code&gt;scope&lt;/code&gt; 字段，那么现在就需要传递一个 scope 同意授权的字段过去了，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Controller
@SessionAttributes(&quot;authorizationRequest&quot;)
public class AuthorizationController {
    @RequestMapping(&quot;/oauth/confirm_access&quot;)
    public ModelAndView getAccessConfirmation(Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest request) throws Exception {
        AuthorizationRequest authorizationRequest = (AuthorizationRequest) model.get(&quot;authorizationRequest&quot;);
        ModelAndView view = new ModelAndView();
        view.setViewName(&quot;authorization&quot;);
        view.addObject(&quot;clientId&quot;, authorizationRequest.getClientId());
        // 传递 scope 过去,Set 集合
        view.addObject(&quot;scopes&quot;, authorizationRequest.getScope());
        // 拼接一下名字
        view.addObject(&quot;scopeName&quot;, String.join(&quot;,&quot;, authorizationRequest.getScope()));
        return view;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;表单添加&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;div class=&quot;wrap-input100 validate-input m-b-23&quot;&amp;gt;
    &amp;lt;input type=&quot;hidden&quot; name=&quot;user_oauth_approval&quot; value=&quot;true&quot;&amp;gt;
    &amp;lt;div style=&quot;display: none&quot; th:each=&quot;scope : ${scopes}&quot;&amp;gt;
        &amp;lt;input type=&quot;hidden&quot; th:name=&quot;&apos;scope.&apos; + ${scope}&quot; value=&quot;true&quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; th:value=&quot;${_csrf.token}&quot;/&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190714170307.png&quot; alt=&quot;add&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后再来测试一下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/Peek+2019-07-14+17-05.gif&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就完成啦～！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这基本就是授权服务器的所有配置了，当然，只是实践性阶段，并没有涉及太多源码，后面会考虑要不要写一篇源码的说明的，但是担心自己能力不够，所以还是没敢写上去。不过这一节内容挺多的，基本上适合各种场景了，我们需要做的就是按照自己的要求来配置，其实配置文件不多不是很复杂，熟悉了就好。下面一节我们就要进入资源服务器的配置啦～！相比来说会简单一点，但是资源服务器是离不开授权服务器的，所以两者是有关系的，慢慢来吧，估计要三天左右才能写完，存货已经没啦～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_参考资料&quot; &gt;参考资料&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://andaily.com/spring-oauth-server/db_table_description.html&quot;&gt;spring
security oauth2 数据表结构&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html&quot;&gt;JSON
Web Token 入门教程 阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/576dbf44b2ae&quot;&gt;什么是 JWT – JSON WEB TOKEN&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369&quot;&gt;CSRF攻击与防御&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Spring Security Oauth2 从零到一完整实践（五） 自定义授权模式（手机、邮箱等）]]></description><link>https://zyue.wiki/articles/2019/07/30/1564498598952.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/07/30/1564498598952.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_系列文章&quot;&gt;系列文章&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_spring_security_oauth2_授权模式&quot;&gt;Spring security oauth2 授权模式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_验证码&quot;&gt;验证码&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_自定义端点&quot;&gt;自定义端点&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_添加授权模式&quot;&gt;添加授权模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_验证码_2&quot;&gt;验证码&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_获取验证码&quot;&gt;获取验证码&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_验证验证码&quot;&gt;验证验证码&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_小修改&quot;&gt;小修改&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_回顾&quot;&gt;回顾&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_自定义端点_2&quot;&gt;自定义端点&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_url_设计&quot;&gt;URL 设计&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_自定义_controller&quot;&gt;自定义 &lt;code&gt;controller&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_按照_spring_security_的流程&quot;&gt;按照 &lt;code&gt;spring security&lt;/code&gt; 的流程&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_推荐添加授权模式&quot;&gt;推荐：添加授权模式&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_添加验证码验证&quot;&gt;添加验证码验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意注意：本文章适用于5.3以前的spring security以及spring boot 2.3.x
以前的 oauth，以下内容应该为过时！spring 提供新的 oauth2
授权服务器，目前正在https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update[实验性阶段]，同时资源服务器由
oauth 模块迁移到 spring security 之内。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;很多时候我们需要做自定义的操作，这些自定义的操作能够让框架更加的符合我们的项目需求。那么对于
Spring secruity oauth2
来说，自定义的过程是怎么样的呢？这一节我们就来详细探讨下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;GitHub 地址： &lt;a href=&quot;https://github.com/lizhongyue248/spring-security-oauth2-demo&quot;&gt;spring-security-oauth2-demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;博客地址： &lt;a href=&quot;https://echocow.cn&quot;&gt;echocow.cn&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_系列文章&quot; &gt;系列文章&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082088646.html&quot;&gt;较为详细的学习
oauth2 的四种模式其中的两种授权模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082247386.html&quot;&gt;spring boot
oauth2 自动配置实现&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563096109754.html&quot;&gt;spring
security oauth2 授权服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/20/1563611848587.html&quot;&gt;spring
security oauth2 资源服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring security oauth2 自定义授权模式（手机、邮箱等）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2020/01/20/1579503807596.html&quot;&gt;spring
security oauth2 踩坑记录&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_spring_security_oauth2_授权模式&quot; &gt;Spring security oauth2 授权模式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在我们前面学习与使用授权服务器的时候，我们使用到他的授权端点的三种授权模式&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;授权码模式&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;密码模式&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;刷新授权（注意：RFC 中只有四种，是没有这个的，这是 Spring security
oauth2 自己添加的）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;除了这三种还有两种授权模式：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;客户端模式&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;简化模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然这两种授权模式要不太过简单不够安全要不就是只适合一些特殊场景，所以我没有提到。那么我们希望再添加自己的授权模式呢？比如我们希望通过手机或者邮箱来完成认证（手机验证码、邮箱验证码），这个怎么完成呢？对于这种情况，我们提供两种方式来完成：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;添加自定义端点，单独的授权&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;原有基础上，添加授权模式，强烈推荐&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;内容较长，如果你只希望知道如何添加授权模式，可以直接查看最后的
&lt;a href=&quot;https://echocow.cn/articles/2019/07/30/1564498598952.html#b3_solo_h2_18&quot;&gt;推荐：添加授权模式&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;两种方式各有好坏，不过在那之前，我们需要做一件事：验证码。对于手机或者邮箱，我们都是只能够通过验证码的方式进行验证，最主要的原因是用来确认用户身份的。在数据手机或者邮箱后，要提供相应的手机验证码和邮箱验证码进行验证方可，所以
&lt;strong&gt;发送-验证&lt;/strong&gt; 这个过程 是必不可少，我们接下来就来一步一步的分析，&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_验证码&quot; &gt;验证码&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;手机和邮箱登录的过程无非就是需要用户填入手机号或者邮箱号，然后我们下发一条短信或者一封邮件，内容就是验证码，然后授权授权服务器验证用户输入的验证码是否是我们发送的即可&lt;/strong&gt;。我们用一张图来诠释前后端分离的情况下验证码的流程&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726173141.png&quot; alt=&quot;验证码&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;用户请求得到登录页面，前端负责&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;用户填写手机号完毕&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;点击前端获取验证码按钮&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;向资源服务器发出验证码获取请求&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;资源服务器在内网&lt;strong&gt;携带客户端信息&lt;/strong&gt;向授权服务器请求验证码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;授权服务器生成验证码然后存入 Redis 或者内存中&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;返回生成结果(可省，一般来说，我们需要向一个运营商申请短信接口，在发短信验证码时如果等待发送结果会造成用户等待时间过长，所以一般不进行等待，如果获取失败，就让用户再获取一次即可)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;用户获取验证码，完成表单填写&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;资源服务器&lt;strong&gt;携带客户端&lt;/strong&gt;信息向授权服务器请求验证&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;返回结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个过程比较复杂的就是需要授权服务器作为一个中间人，为什么要这样呢？&lt;strong&gt;在上一篇文章中其实就提过，就是为了保护我们应用的
客户端信息（即加密后的客户端 id
和客户端密钥）&lt;/strong&gt;。资源服务器是在我们服务器上的，所以由资源服务器发起请求是不会暴露的，但是如果在前端发起就会暴露在用户面前了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个过程在授权服务器中需要完成什么呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;获取验证码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;验证验证码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们来看看第一步的流程图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726181157.png&quot; alt=&quot;one&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一步很简单，就是一个 Controller
就可以完成。但是我们可以发现，出来类型不同，他们其他的房的操作都是相同的，包括生成验证码，存入验证码。那么其实不同的就是如何生成的问题了，这就可以将它抽象出来了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们来看看第二步的流程图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726181417.png&quot; alt=&quot;two&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一步相对来说多一些流程，我们需要判断一下当前登录的请求是否是需要验证验证码的，然后选择和事验证码处理器金喜处理与验证，当我们验证通过了以后，才将它放行出去，如果不通过直接打回去就可以了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;具体实现后面我们具体再说。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_自定义端点&quot; &gt;自定义端点&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如何理解自定义端点呢？很简单，就是我们直接新建一个端点。我们可以通过过滤器或者控制器直接创建一个新的端点，然后当他需要手机授权的时候访问这个端点即可，在此端点中完成整个验证、生成凭证的过程。比如我们需要的两个端点&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;手机授权的端点我们设置为 &lt;code&gt;/oauth/sms&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;邮箱授权的端点我们设置为 &lt;code&gt;/oauth/email&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那么当我们需要进行授权的时候直接请求相应的授权端口即可。自定义端点我们提供两种方式实现：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;自己定义 &lt;code&gt;controller&lt;/code&gt; 完成&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;按照 &lt;code&gt;spring security&lt;/code&gt; 的流程完成授权&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第一种方式是最简单最快捷的方式，第二种方式比较规范化。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_添加授权模式&quot; &gt;添加授权模式&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加授权模式就是在原来的端点 &lt;code&gt;/oauth/token&lt;/code&gt;
上，我们需要添加新的授权类型，即 &lt;code&gt;grant_type&lt;/code&gt; 参数应该要多一个 &lt;code&gt;sms&lt;/code&gt;
或者 &lt;code&gt;email&lt;/code&gt; 。这个十分好理解，例如对于授权码模式，我们参数如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;grant_type —— 必须为 &lt;code&gt;authorization_code&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;code&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;redirect_uri&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;client_id&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;scope&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于我们的 sms 或者 email 应该如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;grant_type —— 必须为 &lt;code&gt;sms&lt;/code&gt; 或者 &lt;code&gt;email&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;code&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;client_id&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;scope&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个是最为标准的实现。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_验证码_2&quot; &gt;验证码&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前面说到，验证码需要两个步骤才能够完成：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;获取验证码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;验证验证码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们一步一步的来，不过在那之前我们需要创建一个新的模块来完成任务。我们的扩展主要是要在授权服务器上完成的，所以我们就需要创建一个授权服务器。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;本节代码见模块：spring-security-oauth2-authorization-more-grant-type&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;模块添加如下依赖：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.security.oauth.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-security-oauth2-autoconfigure&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.boot.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要添加 Redis 依赖，来对验证码进行存储。我们的代码可以直接把
&lt;code&gt;spring-security-oauth2-authorization&lt;/code&gt;
模块的复制过来改一下就可以，初始的代码结构如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190727220838.png&quot; alt=&quot;all&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;记得启动一下项目确保她不会报错且 8000 端口能够正常访问，
接下来我们再来完成我们接下来的事儿。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_获取验证码&quot; &gt;获取验证码&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们再来回顾一下流程图：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726181157.png&quot; alt=&quot;one&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;按照流程图我们需要如下几步：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;提供验证码处理器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;获取验证码类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们一步一步的完成&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_提供验证码处理器&quot; &gt;提供验证码处理器&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要提供相应的验证码处理器来对验证码进行处理，我们前面提到流程的时候说过，&lt;strong&gt;整个验证码的过程除了会因为验证码类型不同会选用不同的处理器去完成，其余的操作都一样的&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们可以考虑使用设计模式来增加我们系统的扩展性。需要考虑如下的点：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;面向接口编程&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;开放封闭原则&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;提供相同行为的不同实现&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;提取公共部分代码，子类扩展不同部分&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前面三点很好的符合了 &lt;strong&gt;策略设计模式&lt;/strong&gt; 的特点，而第四点则是比较适合
&lt;strong&gt;模板方法模式&lt;/strong&gt;，那么我们就将他们结合来用，来完成我们的验证码处理器。两种设计模式的具体作用请自行查找。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们先准备一个接口，即
&lt;strong&gt;抽象策略&lt;/strong&gt;，各种不同的验证码类型以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，用来进行验证码处理：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface ValidateCodeProcessor {

    /**
     * 创建验证码
     *
     * @param request 请求
     * @throws Exception 异常
     */
    void create(ServletWebRequest request) throws Exception;

    /**
     * 验证验证码
     *
     * @param request 请求
     */
    void validate(ServletWebRequest request);

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们定义一个抽象的 &lt;strong&gt;模板方法&lt;/strong&gt;
来实现这个抽象策略，&lt;strong&gt;对于公共部分，就是我们的生成和保存操作，最后的发送操作是需要我们自己去自定义的&lt;/strong&gt;，所以我们交由子类来实现：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 模板方法实现抽象策略
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/28 下午9:48
 */
public abstract class AbstractValidateCodeProcessor implements ValidateCodeProcessor {
    @Override
    public void create(ServletWebRequest request) throws Exception {
        String validateCode = generate(request);
        save(request, validateCode);
        send(request, validateCode);
    }

    @Override
    public void validate(ServletWebRequest request) {

    }

    /**
     * 发送验证码，由子类实现
     *
     * @param request      请求
     * @param validateCode 验证码
     */
    protected abstract void send(ServletWebRequest request, String validateCode);

    /**
     * 保存验证码，保存到 redis 中
     *
     * @param request      请求
     * @param validateCode 验证码
     */
    private void save(ServletWebRequest request, String validateCode) {

    }

    /**
     * 生成验证码
     *
     * @param request 请求
     * @return 验证码
     */
    private String generate(ServletWebRequest request) {
        return null;
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于不同的实现，比如手机验证码，就来继承这个抽象的策略就行了，也就是
&lt;strong&gt;具体策略&lt;/strong&gt;，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Component
@RequiredArgsConstructor
public class SmsValidateCodeProcessor extends AbstractValidateCodeProcessor {

    @Override
    protected void send(ServletWebRequest request, String validateCode) {
        System.out.println(request.getHeader(&quot;sms&quot;) +
                &quot;手机验证码发送成功，验证码为：&quot; + validateCode);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于邮箱验证码呢？同样的，继承这个抽象策略就好了，他就是另外一种
&lt;strong&gt;具体策略&lt;/strong&gt;，如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Component
@RequiredArgsConstructor
public class EmailValidateCodeProcessor extends AbstractValidateCodeProcessor {

    @Override
    protected void send(ServletWebRequest request, String validateCode) {
        System.out.println(request.getHeader(&quot;email&quot;) +
                &quot;邮箱验证码发送成功，验证码为：&quot; + validateCode);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;具体策略我就做了打印，因为我并没有引入相应的 API 和依赖&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在的代码如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728221036.png&quot; alt=&quot;code&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;接下来我们需要做的事情就是完善抽象策略中的公共方法&lt;/strong&gt;，包括：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;生成验证码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;保存验证码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;验证验证码（后面再说）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_生成验证码&quot; &gt;生成验证码&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;遵循面向对象的单一职责原则，对象不应该承担太多职责，我们为了解除耦合，独立出他的接口来，创建一个接口如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 验证码生成
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/28 下午10:17
 */
public interface ValidateCodeGenerator {
    /**
     * 生成验证码
     *
     * @param request 请求
     * @return 生成结果
     */
    String generate(ServletWebRequest request);

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后对于不同的验证码使用不同的生成策略，先引入一个以前写的随机字符串生成器如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 随机生成 验证码
 *
 * @author echo
 * @version 1.0
 * @date 19-5-20 15:45
 */
public class RandomCode {
    private static final char[] MORE_CHAR = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;.toCharArray();
    private static final Random RANDOM = new Random();

    /**
     * 随机生成验证码
     *
     * @param length 长度
     * @param end    结束长度
     * @return 结果
     */
    private static String random(Integer length, Integer end) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i &amp;lt; length; i++) {
            result.append(MORE_CHAR[RANDOM.nextInt(end)]);
        }
        return result.toString();
    }

    /**
     * 随机生成验证码
     *
     * @param length  长度
     * @param onlyNum 是否只要数字
     * @return 结果
     */
    public static String random(Integer length, Boolean onlyNum) {
        return onlyNum ? random(length, 10) : random(length, MORE_CHAR.length);
    }

    /**
     * 随机生成验证码
     *
     * @param length 长度
     * @return 结果
     */
    public static String random(Integer length) {
        return random(length, false);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建 &lt;code&gt;ValidateCodeGenerator&lt;/code&gt; 的手机、邮箱实现类如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 手机验证码生成器
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/28 下午10:23
 */
@Component
public class SmsValidateCodeGenerator implements ValidateCodeGenerator {

    @Override
    public String generate(ServletWebRequest request) {
        // 定义手机验证码生成策略，可以使用 request 中从请求动态获取生成策略
        // 可以从配置文件中读取生成策略
        return RandomCode.random(4, true);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 邮箱验证码生成器
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/28 下午10:23
 */
@Component
public class EmailValidateCodeGenerator implements ValidateCodeGenerator {

    @Override
    public String generate(ServletWebRequest request) {
        return RandomCode.random(6);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改抽象策略中的生成方法如下：（代码很简单就不赘述了）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    /**
     * 收集系统中所有的 {@link ValidateCodeGenerator} 接口实现。
     */
    @Autowired
    private Map&amp;lt;String, ValidateCodeGenerator&amp;gt; validateCodeGenerators;


    /**
     * 生成验证码
     *
     * @param request 请求
     * @return 验证码
     */
    private String generate(ServletWebRequest request) {
        String type = getValidateCodeType(request);
        String componentName = type + ValidateCodeGenerator.class.getSimpleName();
        ValidateCodeGenerator generator = validateCodeGenerators.get(componentName);
        if (Objects.isNull(generator)) {
            throw new ValidateCodeException(&quot;验证码生成器 &quot; + componentName + &quot; 不存在。&quot;);
        }
        return generator.generate(request);
    }

    /**
     * 根据请求 url 获取验证码类型
     *
     * @return 结果
     */
    private String getValidateCodeType(String uri) {
        String uri = request.getRequest().getRequestURI();
        int index = uri.lastIndexOf(&quot;/&quot;) + 1;
        return uri.substring(index).toLowerCase();
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，我自定义了一个异常，专门处理验证码的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/28 下午10:34
 */
public class ValidateCodeException extends RuntimeException {
    public ValidationException(String message) {
        super(message);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_保存验证码&quot; &gt;保存验证码&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里就无非是操作 Redis 了，写一个 &lt;code&gt;repository&lt;/code&gt; 就可以了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 验证码资源处理
 *
 * @author echo
 * @date 2019/7/28 下午10:44
 */
public interface ValidateCodeRepository {

    /**
     * 保存
     *
     * @param request 请求
     * @param code    验证码
     * @param type    类型
     */
    void save(ServletWebRequest request, String code, String type);

    /**
     * 获取
     *
     * @param request 请求
     * @param type    类型
     * @return 验证码
     */
    String get(ServletWebRequest request, String type);

    /**
     * 移除
     *
     * @param request 请求
     * @param type    类型
     */
    void remove(ServletWebRequest request, String type);


}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后一个实现类，代码很简单，就不赘述了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * redis 验证码操作
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/28 下午10:44
 */
@Component
@RequiredArgsConstructor
public class ValidateCodeRepositoryImpl implements ValidateCodeRepository {

    private final @NonNull RedisTemplate&amp;lt;String, String&amp;gt; redisTemplate;

    @Override
    public void save(ServletWebRequest request, String code, String type) {
        redisTemplate.opsForValue().set(buildKey(request, type), code,
                //  有效期可以从配置文件中读取或者请求中读取
                Duration.ofMinutes(10).getSeconds(), TimeUnit.SECONDS);
    }

    @Override
    public String get(ServletWebRequest request, String type) {
        return redisTemplate.opsForValue().get(buildKey(request, type));
    }

    @Override
    public void remove(ServletWebRequest request, String type) {
        redisTemplate.delete(buildKey(request, type));
    }

    private String buildKey(ServletWebRequest request, String type) {
        String deviceId = request.getHeader(type);
        if (StringUtils.isEmpty(deviceId)) {
            throw new ValidateCodeException(&quot;请求中不存在邮箱号&quot;);
        }
        return &quot;code:&quot; + type + &quot;:&quot; +  deviceId;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后注入到抽象策略中直接使用就好了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Autowired
    private ValidateCodeRepository validateCodeRepository;

    /**
     * 保存验证码，保存到 redis 中
     *
     * @param request      请求
     * @param validateCode 验证码
     */
    private void save(ServletWebRequest request, String validateCode) {
        validateCodeRepository.save(request,validateCode,getValidateCodeType(request));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们的验证码处理器就算完成一部分了，关于对验证码进行验证我们后面再说，现在我们的目录结构应该是这样的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728225506.png&quot; alt=&quot;code&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_获取验证码类型&quot; &gt;获取验证码类型&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一步非常简单，提供一个 控制器 即可，我们先编写一个空的控制器如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 动态获取验证码
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/28 下午10:57
 */
@RestController
@RequiredArgsConstructor
public class ValidateCodeController {

    /**
     * 通过 type 进行查询到对应的处理器
     * 同时创建验证码
     *
     * @param request  请求
     * @param response 响应
     * @param type     验证码类型
     * @throws Exception 异常
     */
    @GetMapping(&quot;/code/{type}&quot;)
    public void creatCode(HttpServletRequest request, HttpServletResponse response,
                          @PathVariable String type) throws Exception {
        //
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是我们怎么指导是哪个来具体策略来处理呢？这里其实就是策略模式中的
&lt;strong&gt;环境类&lt;/strong&gt;，在这里决定使用哪一个具体的策略，我们创建一个 &lt;strong&gt;策略分发器&lt;/strong&gt;
来完成这件事，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 验证码处理分发
 *
 * 通过传递过来的类型，从已经依赖注入容器中搜寻符合名称的组件。
 * 直接通过名称获取对应的 {@link ValidateCodeProcessor} 实现类
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/28 下午10:59
 */
@Component
@RequiredArgsConstructor
public class ValidateCodeProcessorHolder {

    private final @NonNull Map&amp;lt;String, ValidateCodeProcessor&amp;gt; validateCodeProcessors;

    /**
     * 通过验证码类型查找
     *
     * @param type 验证码类型
     * @return 验证码处理器
     */
    ValidateCodeProcessor findValidateCodeProcessor(String type) {
        String name = type.toLowerCase() + ValidateCodeProcessor.class.getSimpleName();
        ValidateCodeProcessor processor = validateCodeProcessors.get(name);
        if (Objects.isNull(processor)){
            throw new ValidateCodeException(&quot;验证码处理器&quot; + name + &quot;不存在&quot;);
        }
        return processor;
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们在控制器那里调用一下就可以了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private final @NonNull ValidateCodeProcessorHolder validateCodeProcessorHolder;

    /**
     * 通过 type 进行查询到对应的处理器
     * 同时创建验证码
     *
     * @param request  请求
     * @param response 响应
     * @param type     验证码类型
     * @throws Exception 异常
     */
    @GetMapping(&quot;/code/{type}&quot;)
    public void createCode(HttpServletRequest request, HttpServletResponse response,
                          @PathVariable String type) throws Exception {
        validateCodeProcessorHolder.findValidateCodeProcessor(type)
                .create(new ServletWebRequest(request, response));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们测试一下访问：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728230609.png&quot; alt=&quot;get&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后查看控制台&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728230619.png&quot; alt=&quot;console&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;再去看看 Redis&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190728230634.png&quot; alt=&quot;reids&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以看到验证码已经保存进去并且生成了的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_验证验证码&quot; &gt;验证验证码&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来我们需要做的就是验证验证码的过程了，再来回顾一遍流程图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190726181417.png&quot; alt=&quot;two&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们需要通过过滤器来实现，如果是手机或邮箱登录请求，我们就需要检验是否有验证码；如果不是，就放行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以第一步我们就需要创建这么一个过滤器：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 验证码过滤器。
 *
 * &amp;lt;p&amp;gt;继承于 {@link OncePerRequestFilter} 确保在一次请求只通过一次filter&amp;lt;/p&amp;gt;
 * &amp;lt;p&amp;gt;需要配置指定拦截路径，默认拦截 POST 请求&amp;lt;/p&amp;gt;
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/28 下午11:15
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ValidateCodeFilter extends OncePerRequestFilter {

    private final @NonNull ValidateCodeProcessorHolder validateCodeProcessorHolder;
    private Map&amp;lt;String, String&amp;gt; urlMap = new HashMap&amp;lt;&amp;gt;();
    private AntPathMatcher antPathMatcher = new AntPathMatcher();

    @Override
    public void afterPropertiesSet() throws ServletException {
        super.afterPropertiesSet();
        // 路径拦截
        urlMap.put(&quot;/oauth/sms&quot;, &quot;sms&quot;);
        urlMap.put(&quot;/oauth/email&quot;, &quot;email&quot;);
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String validateCodeType = getValidateCodeType(request);
        if (!StringUtils.isEmpty(validateCodeType)) {
            try {
                log.info(&quot;请求需要验证！验证请求：&quot; + request.getRequestURI() + &quot; 验证类型：&quot; + validateCodeType);
                validateCodeProcessorHolder.findValidateCodeProcessor(validateCodeType)
                        .validate(new ServletWebRequest(request, response));
            } catch (Exception e) {
                e.printStackTrace();
                return;
            }
        }
        filterChain.doFilter(request, response);
    }

    private String getValidateCodeType(HttpServletRequest request) {
        if (HttpMethod.POST.matches(request.getMethod())) {
            Set&amp;lt;String&amp;gt; urls = urlMap.keySet();
            for (String url : urls) {
                // 如果路径匹配，就回去他的类型，也就是 map 的 value
                if (antPathMatcher.match(url, request.getRequestURI())) {
                    return urlMap.get(url);
                }
            }
        }
        return null;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来我们就要去完成 验证 的具体逻辑了，回到我们的 &lt;strong&gt;抽象策略&lt;/strong&gt; 中来：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Override
    public void validate(ServletWebRequest request) {
        String type = getValidateCodeType(request);
        String code = validateCodeRepository.get(request, type);
        // 验证码是否存在
        if (Objects.isNull(code)) {
            throw new ValidateCodeException(&quot;获取验证码失败，请检查输入是否正确或重新发送！&quot;);
        }
        // 验证码输入是否正确
        if (!code.equalsIgnoreCase(request.getParameter(&quot;code&quot;))) {
            throw new ValidateCodeException(&quot;验证码不正确，请重新输入！&quot;);
        }
        // 验证通过后，清除验证码
        validateCodeRepository.remove(request, type);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;非常简单的验证逻辑，最后我们创建一个控制器来测试：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@RestController
@RequestMapping(&quot;/oauth&quot;)
public class Oauth2Controller {

    @PostMapping(&quot;/sms&quot;)
    public HttpEntity&amp;lt;?&amp;gt; sms() {
        return ResponseEntity.ok(&quot;ok&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来就是把我们写好的过滤器添加到 Spring security 中的过滤链里去：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private final @NonNull ValidateCodeFilter validateCodeFilter;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                // 添加路径
                .antMatchers(&quot;/oauth/sms&quot;).access(&quot;permitAll()&quot;)
                .antMatchers(&quot;/oauth/email&quot;).access(&quot;permitAll()&quot;)
                .antMatchers(&quot;/code/*&quot;).permitAll()
                .anyRequest()
                .authenticated()
                // 务必关闭 csrf，否则除了 get 请求，都会报 403 错误
                .and()
                .csrf().disable();

        // 添加过滤器
        http
                .addFilterBefore(validateCodeFilter, AbstractPreAuthenticatedProcessingFilter.class);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们来测试一下，先是启动后，请求验证码：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173032.png&quot; alt=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;去控制台看看验证码多少&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173059.png&quot; alt=&quot;2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后携带者设备号和验证码去请求一下测试接口 &lt;code&gt;/oauth/sms&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173121.png&quot; alt=&quot;3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;验证码&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173137.png&quot; alt=&quot;2&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;成功&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173148.png&quot; alt=&quot;3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;看看控制台：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173207.png&quot; alt=&quot;5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来我们再请求一次看看：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173240.png&quot; alt=&quot;6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以看到控制台报错了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729173306.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们对于异常处理可以创建一个授权失败的异常处理器，然后将它用来接收所有的授权失败的异常。这个我们后面再来说。现在的代码结构如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729180157.png&quot; alt=&quot;all&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_小修改&quot; &gt;小修改&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来我们要修改前面的一个地方，前面我们的手机号和邮箱号是从请求头中获取的，我们应该从请求体中获取，修改
&lt;code&gt;ValidateCodeRepositoryImpl&lt;/code&gt; 类&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private String buildKey(ServletWebRequest request, String type) {
        String deviceId = request.getParameter(type);
        if (StringUtils.isEmpty(deviceId)) {
            throw new ValidateCodeException(&quot;请求中不存在 &quot; + type);
        }
        return &quot;code:&quot; + type + &quot;:&quot; + deviceId;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;再修改具体的策略如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Component
public class EmailValidateCodeProcessor extends AbstractValidateCodeProcessor {

    @Override
    protected void send(ServletWebRequest request, String validateCode) {
        System.out.println(request.getParameter(&quot;email&quot;) +
                &quot;邮箱验证码发送成功，验证码为：&quot; + validateCode);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Component
public class SmsValidateCodeProcessor extends AbstractValidateCodeProcessor {

    @Override
    protected void send(ServletWebRequest request, String validateCode) {
        System.out.println(request.getParameter(&quot;sms&quot;) +
                &quot;手机验证码发送成功，验证码为：&quot; + validateCode);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们就修改完毕了。另外我们修改一下现在的测试 &lt;code&gt;controller&lt;/code&gt;
，以防止后面的冲突了。修改 &lt;code&gt;Oauth2Controller&lt;/code&gt; 为
&lt;code&gt;SmsValidateCodeController&lt;/code&gt; ，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@RestController
@RequestMapping(&quot;/auth&quot;)
public class SmsValidateCodeController {

    @PostMapping(&quot;/sms&quot;)
    public HttpEntity&amp;lt;?&amp;gt; sms() {
        return ResponseEntity.ok(&quot;ok&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改安全配置 &lt;code&gt;SecurityConfig&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                .antMatchers(&quot;/code/*&quot;).access(&quot;permitAll()&quot;)
                .antMatchers(&quot;/auth/sms&quot;).access(&quot;permitAll()&quot;)
                .anyRequest().authenticated()
                .and()
                .csrf().disable();


        http
                .addFilterBefore(validateCodeFilter, AbstractPreAuthenticatedProcessingFilter.class);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后 &lt;code&gt;ValidateCodeFilter&lt;/code&gt; 过滤器中的路径拦截也修改一下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Override
    public void afterPropertiesSet() throws ServletException {
        super.afterPropertiesSet();
        // 路径拦截
        urlMap.put(&quot;/auth/sms&quot;, &quot;sms&quot;);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改完毕后务必再测试一次！现在的目录结构如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729182947.png&quot; alt=&quot;now&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_回顾&quot; &gt;回顾&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在我们的验证码也算完成了，回顾一下，我们的类图是这样的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190729174454.png&quot; alt=&quot;uml&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们整理下如下图：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190729175414.png&quot; alt=&quot;uml&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个过程就好理解了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;ValidateCodeController&lt;/code&gt;
：决策器，用来决定使用哪一个抽象策略的，同时接收用户请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;ValidateCodeProcessor&lt;/code&gt; ：抽象策略接口&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;AbstractValidateCodeProcessor&lt;/code&gt;
：抽象策略实现类，定义了模板方法和抽象策略&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;ValidateCodeGenerator&lt;/code&gt; ：抽象策略接口，不同的实现类是不同的具体策略&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其余的都是具体的实现类了。这样我们的一个可扩展的验证码就完成了，当我们需要扩展新的验证码时就简单多了，直接实现新的
&lt;code&gt;AbstractValidateCodeProcessor&lt;/code&gt; 子类和 &lt;code&gt;ValidateCodeGenerator&lt;/code&gt;
接口就可以了。后面我们会做一些改变，具体后面再说。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在我们已经有的验证码端点如下：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;请求 url&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;请求参数-请求体&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;获取手机验证码&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/code/sms&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;sms&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;获取邮箱验证码&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/code/email&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;email&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_自定义端点_2&quot; &gt;自定义端点&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们接下来需要的是添加手机和邮箱登录，我们首先采取的是自定义端点的方式，也就是添加新的端点来接收手机和邮箱验证码的请求。我们前面说到，有两种方式来进行实现&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;定义 &lt;code&gt;controller&lt;/code&gt; 完成&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;按照 &lt;code&gt;spring security oauth2&lt;/code&gt; 的流程完成授权&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第一种较为容易理解且简单，第二种则比较规范化，完全按照他的规范来实现。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_url_设计&quot; &gt;URL 设计&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在那之前我们要先进行 url 的设计。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;对于我们自己定义 &lt;code&gt;controller&lt;/code&gt; 来完成的端点&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;手机登录： &lt;code&gt;/custom/sms&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;邮箱登录： &lt;code&gt;/custom/email&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;对于按照 &lt;code&gt;spring security&lt;/code&gt; 的流程来完成的端点&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;手机登录： &lt;code&gt;/oauth/sms&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;邮箱登录： &lt;code&gt;/oauth/email&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们来一个一个学习和尝试。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_自定义_controller&quot; &gt;自定义 &lt;code&gt;controller&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;顾名思义，我们需要自己创建 &lt;code&gt;controller&lt;/code&gt;
来完成授权，我们先完成不使用验证码的，也就是不加入过滤器中的。创建如下
&lt;code&gt;controller&lt;/code&gt; ：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 自定义 controller 授权端点
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/29 下午6:40
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping(&quot;/custom&quot;)
public class CustomToken {

    @PostMapping(&quot;/{type}&quot;)
    public HttpEntity&amp;lt;?&amp;gt; auth(HttpServletRequest request, @PathVariable String type) {
        return ResponseEntity.ok(type);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们这个请求应该是要被验证码的过滤器给拦截的，但是我们现在先不拦截以方便测试。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;如果请求能够到达这个`controller`
那就代表着他已经通过了验证码过滤器验证了，这个时候的请求是已经登录成功了的，所以我们应该直接给他下发
token&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下发 token 的前提就是创建 token，这个 token
怎么创建的呢？我们来看源码，他的 token 创建的核心类是
&lt;code&gt;org.springframework.security.oauth2.provider.token.DefaultTokenServices&lt;/code&gt;
在这里你可以找到一个 &lt;code&gt;createAccessToken&lt;/code&gt;
方法。但是这个方法需要我们传递一个类型为 &lt;code&gt;OAuth2Authentication&lt;/code&gt;
的参数；而构建 &lt;code&gt;OAuth2Authentication&lt;/code&gt; 我们需要 &lt;code&gt;OAuth2Request&lt;/code&gt; 和
&lt;code&gt;Authentication&lt;/code&gt; 这两个参数；而构建 &lt;code&gt;OAuth2Request&lt;/code&gt; 需要使用
&lt;code&gt;TokenRequest#createOAuth2Request&lt;/code&gt; 进行构建，构建 &lt;code&gt;Authentication&lt;/code&gt;
需要我们去用它的子类 &lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;
来构建；而构建 &lt;code&gt;TokenRequest&lt;/code&gt; 需要客户端信息，构建
&lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt; 需要 &lt;code&gt;UserDetails&lt;/code&gt; ；而构建
&lt;code&gt;UserDetails&lt;/code&gt; 需要 &lt;code&gt;UserDetailsService&lt;/code&gt; ，然后注入即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个过程有点复杂，我们用一张图来解释：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190729214030.png&quot; alt=&quot;all&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以步骤应该如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;从请求中获取客户端信息，然后通过 &lt;code&gt;ClientDetailsService&lt;/code&gt; 构建为
&lt;code&gt;ClientDetails&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过上一步的 &lt;code&gt;ClientDetails&lt;/code&gt; 构建令牌请求 &lt;code&gt;TokenRequest&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过第一、二步的 &lt;code&gt;ClientDetails&lt;/code&gt; 和 &lt;code&gt;TokenRequest&lt;/code&gt; 构建 oauth2
令牌请求 &lt;code&gt;OAuth2Request&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过 &lt;code&gt;UserDetailsService&lt;/code&gt; 获取当前手机/邮箱号对应用户信息
&lt;code&gt;UserDetails&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过 &lt;code&gt;UserDetails&lt;/code&gt; 构建 &lt;code&gt;Authentication&lt;/code&gt; 的实现类
&lt;code&gt;UsernamePasswordAuthenticationToken&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过第三、五步的 &lt;code&gt;OAuth2Request&lt;/code&gt; 和 &lt;code&gt;Authentication&lt;/code&gt; 构建 oauth2
身份验证授权 &lt;code&gt;OAuth2Authentication&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过上一步的 &lt;code&gt;OAuth2Authentication&lt;/code&gt; 和
&lt;code&gt;AuthorizationServerTokenServices&lt;/code&gt; 创建 &lt;code&gt;token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这些从源码就可以看得出来，只是有些地方层次比较深，需要仔细一点去看看他的具体实现类。由于这个系列以实践为主，所以不会带大家一步一步去找和阅读源码。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在我们开始来写代码，修改我们的类最后如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping(&quot;/custom&quot;)
public class CustomToken {

    private final @NonNull UserDetailsService userDetailsService;
    private final @NonNull ClientDetailsService clientDetailsService;
    private final @NonNull PasswordEncoder passwordEncoder;
    private final @NonNull AuthorizationServerTokenServices authorizationServerTokenServices;

    @PostMapping(&quot;/{type}&quot;)
    public HttpEntity&amp;lt;?&amp;gt; auth(HttpServletRequest request, @PathVariable String type) {
        // 判断是否是我们自定义的授权类型
        if (!type.equalsIgnoreCase(&quot;sms&quot;) &amp;amp;&amp;amp; !type.equalsIgnoreCase(&quot;email&quot;)) {
            throw new UnsupportedGrantTypeException(&quot;Unsupported grant type: &quot; + type);
        }

        log.info(type + &quot; login succeed！&quot;);
        // 1. 获取客户端认证信息
        String header = request.getHeader(&quot;Authorization&quot;);
        if (header == null || !header.toLowerCase().startsWith(&quot;basic &quot;)) {
            throw new UnapprovedClientAuthenticationException(&quot;请求头中无客户端信息&quot;);
        }

        // 解密请求头
        String[] client = extractAndDecodeHeader(header);
        if (client.length != 2) {
            throw new BadCredentialsException(&quot;Invalid basic authentication token&quot;);
        }
        String clientId = client[0];
        String clientSecret = client[1];

        // 获取客户端信息进行对比判断
        ClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);
        if (clientDetails == null) {
            throw new UnapprovedClientAuthenticationException(&quot;客户端信息不存在：&quot; + clientId);
        } else if (!passwordEncoder.matches(clientSecret, clientDetails.getClientSecret())) {
            throw new UnapprovedClientAuthenticationException(&quot;客户端密钥不匹配&quot; + clientSecret);
        }
        // 2. 构建令牌请求
        TokenRequest tokenRequest = new TokenRequest(new HashMap&amp;lt;&amp;gt;(0), clientId, clientDetails.getScope(), &quot;custom&quot;);
        // 3. 创建 oauth2 令牌请求
        OAuth2Request oAuth2Request = tokenRequest.createOAuth2Request(clientDetails);
        // 4. 获取当前用户信息
        UserDetails userDetails = userDetailsService.loadUserByUsername(request.getParameter(type));
        // 5. 构建用户授权令牌
        Authentication authentication = new UsernamePasswordAuthenticationToken(
                userDetails.getUsername(), userDetails.getPassword(), userDetails.getAuthorities());
        // 6. 构建 oauth2 身份验证令牌
        OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(oAuth2Request, authentication);
        // 7. 创建令牌
        OAuth2AccessToken accessToken = authorizationServerTokenServices.createAccessToken(oAuth2Authentication);
        return ResponseEntity.ok(accessToken);
    }


    /**
     * 对请求头进行解密以及解析
     *
     * @param header 请求头
     * @return 客户端信息
     */
    private String[] extractAndDecodeHeader(String header) {
        byte[] base64Token = header.substring(6).getBytes(StandardCharsets.UTF_8);
        byte[] decoded;
        try {
            decoded = Base64.getDecoder().decode(base64Token);
        } catch (IllegalArgumentException e) {
            throw new BadCredentialsException(
                    &quot;Failed to decode basic authentication token&quot;);
        }
        String token = new String(decoded, StandardCharsets.UTF_8);
        int delimiter = token.indexOf(&quot;:&quot;);

        if (delimiter == -1) {
            throw new BadCredentialsException(&quot;Invalid basic authentication token&quot;);
        }
        return new String[]{token.substring(0, delimiter), token.substring(delimiter + 1)};
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;每一步代码我都做了详细的解释，就不赘述了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Q：为什么有些异常信息是英文的，有些异常信息是中文的？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A：英文的是 Spring
原本就有的，也就是当出现同样的错误的时候是相同的描述；中文的是因为由我自己自定义的异常信息，Spring
里是没有的，我希望更加详细，所以使用中文的。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们添加一个手机用户，在 &lt;code&gt;SecurityConfig&lt;/code&gt; 中配置：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;更好的设计是：我们创建 UserDetailsService 的实现类时，自定义一个
&lt;code&gt;SmsUserDetailsService&lt;/code&gt; 接口，然实现他的抽象方法 &lt;code&gt;loadUserBySms&lt;/code&gt;
，通过这个方法来加载手机用户，这样会更好。不过这已经属于这篇教程之外的东西了，这里从简。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Bean
    @Override
    public UserDetailsService userDetailsService() {
        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();
        manager.createUser(User.withUsername(&quot;user&quot;)
                .password(passwordEncoder().encode(&quot;123456&quot;))
                .authorities(&quot;ROLE_USER&quot;).build());
        manager.createUser(User.withUsername(&quot;admin&quot;)
                .password(passwordEncoder().encode(&quot;admin&quot;))
                .authorities(&quot;ROLE_ADMIN&quot;).build());
        manager.createUser(User.withUsername(&quot;13712341234&quot;)
                .password(passwordEncoder().encode(&quot;123456&quot;))
                .authorities(&quot;ROLE_ADMIN&quot;).build());
        return manager;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此时没有添加验证码过滤，我们来测试一下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190729220020.png&quot; alt=&quot;test&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;已经获取到了，这种方式就算完成了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_按照_spring_security_的流程&quot; &gt;按照 &lt;code&gt;spring security&lt;/code&gt; 的流程&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;请确保在看这种模式之前，你能够理解上一种授权模式的整个流程，这节不再赘述&lt;/strong&gt;
。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请注意：这里是按照 &lt;code&gt;spring security&lt;/code&gt; 的流程，并不是
&lt;code&gt;spring security oauth2&lt;/code&gt; 的流程来实现的，不能弄混淆。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里就比较复杂，对于上一种方式，我们只要理清如何生成令牌就好了，但是着一种方式要在理清上一种方式的基础上，扩展
Spring security oauth2
的授权模式；也就是还需要我们去了解到他是如何决策使用哪一种授权模式的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同样，我会直接带大家来如何使用。在 Spring security
中，实现登录校验与授权的过程核心是使用过滤器，通过过滤器对登录请求进行拦截，当是登录请求时，就做处理。而我们过滤器需要继承
&lt;code&gt;org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter&lt;/code&gt;
这个类，它是&lt;strong&gt;基于浏览器的 HTTP
身份验证请求的抽象处理器&lt;/strong&gt;，我们可以参考他的子类
&lt;code&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;
来写我们自己的过滤器。在那之前，我画一张图，让大家更好的理解整个授权过程：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190730123909.png&quot; alt=&quot;auth&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;过滤器拦截请求，验证请求参数，构建相应的令牌对象
&lt;code&gt;SmsAuthenticationToken&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;授权管理器 &lt;code&gt;AuthenticationManager&lt;/code&gt; 的子类 &lt;code&gt;ProviderManager&lt;/code&gt;
对令牌进行授权。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;授权的时候会去查找 &lt;code&gt;AuthenticationProvider&lt;/code&gt; 的实现类，我们提供了
&lt;code&gt;SmsAuthenticationProvider&lt;/code&gt; 来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过在 &lt;code&gt;AuthenticationProvider&lt;/code&gt; 使用 &lt;code&gt;UserDetailsService&lt;/code&gt;
查找用户信息，如果找到就授权成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;授权成功后，将授权信息交给授权成功处理器
&lt;code&gt;AuthenticationSuccessHandler&lt;/code&gt; 进行处理，构建 token。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个过程相比起来要复杂一点，因为我们需要自己建一些实现类，总结下来如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;继承 &lt;code&gt;AbstractAuthenticationProcessingFilter&lt;/code&gt; 的过滤器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;继承 &lt;code&gt;AbstractAuthenticationToken&lt;/code&gt; 的令牌请求&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;实现 &lt;code&gt;AuthenticationProvider&lt;/code&gt; 的授权提供者&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;继承 &lt;code&gt;AbstractAuthenticationToken&lt;/code&gt; 的成功处理器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;配置过滤器、成功处理器等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们一步一步的来，先是过滤器：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 短信登录授权过滤器
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/29 下午10:50
 */
public class SmsAuthenticationFilter extends AbstractAuthenticationProcessingFilter {

    SmsAuthenticationFilter() {
        // 需要拦截的路径
        super(new AntPathRequestMatcher(&quot;/oauth/sms&quot;, HttpMethod.POST.name()));
    }

    @Override
    public Authentication attemptAuthentication(HttpServletRequest request,
                                                HttpServletResponse response) throws AuthenticationException {
        if (!HttpMethod.POST.matches(request.getMethod())) {
            throw new AuthenticationServiceException(
                    &quot;Authentication method not supported: &quot; + request.getMethod());
        }
        // 获取参数
        String sms = obtainSms(request);
        sms = sms == null ? &quot;&quot; : sms.trim();
        // 我们需要创建我们自己的授权 token
        SmsAuthenticationToken authRequest = new SmsAuthenticationToken(sms);
        setDetails(request, authRequest);
        // 授权管理器对请求进行授权
        return this.getAuthenticationManager().authenticate(authRequest);
    }

    /**
     * 获取请求中的 sms 值
     *
     * @param request 正在为其创建身份验证请求
     * @return 请求中的 sms 值
     */
    private String obtainSms(HttpServletRequest request) {
        return request.getParameter(&quot;sms&quot;);
    }

    /**
     * 提供以便子类可以配置放入 authentication request 的 details 属性的内容
     *
     * @param request     正在为其创建身份验证请求
     * @param authRequest 应设置其详细信息的身份验证请求对象
     */
    private void setDetails(HttpServletRequest request,
                            SmsAuthenticationToken authRequest) {
        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;再是创建我们自己的授权请求 &lt;code&gt;SmsAuthenticationToken&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 这里你完全可以使用 {@link UsernamePasswordAuthenticationToken}，他完全满足需求
 * 只是为了简单和统一，我改个名字并且去掉了 凭证 这个字段
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/29 下午10:53
 */
public class SmsAuthenticationToken extends AbstractAuthenticationToken {

    private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;

    private final Object principal;

    SmsAuthenticationToken(Object phone) {
        super(null);
        this.principal = phone;
        setAuthenticated(false);
    }

    SmsAuthenticationToken(Object principal, Collection&amp;lt;? extends GrantedAuthority&amp;gt; authorities) {
        super(authorities);
        this.principal = principal;
        super.setAuthenticated(true);
    }

    @Override
    public Object getCredentials() {
        return null;
    }

    @Override
    public Object getPrincipal() {
        return this.principal;
    }

    @Override
    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {
        if (isAuthenticated) {
            throw new IllegalArgumentException(
                    &quot;Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead&quot;);
        }
        super.setAuthenticated(false);
    }

    @Override
    public void eraseCredentials() {
        super.eraseCredentials();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来就是授权提供者 &lt;code&gt;SmsAuthenticationProvider&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 授权提供者
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/29 下午10:57
 */
@Setter
public class SmsAuthenticationProvider implements AuthenticationProvider {

    private UserDetailsService userDetailsService;

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        SmsAuthenticationToken authenticationToken = (SmsAuthenticationToken) authentication;
        // 获取用户信息
        UserDetails user = userDetailsService.loadUserByUsername(authenticationToken.getPrincipal().toString());
        if (user == null) {
            throw new InternalAuthenticationServiceException(&quot;无效认证&quot;);
        }
        SmsAuthenticationToken authenticationResult = new SmsAuthenticationToken(user, user.getAuthorities());
        authenticationResult.setDetails(authenticationToken.getDetails());
        return authenticationResult;
    }

    @Override
    public boolean supports(Class&amp;lt;?&amp;gt; authentication) {
        // 通过类型进行匹配
        return SmsAuthenticationToken.class.isAssignableFrom(authentication);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最后就是授权成功处理器，在这里生成
token，所以直接复制上一种模式的生成方法即可：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/29 下午11:03
 */
@Slf4j
@Component
@SuppressWarnings(&quot;Duplicates&quot;)
@RequiredArgsConstructor
public class SmsSuccessHandler implements AuthenticationSuccessHandler {

    private final @NonNull ClientDetailsService clientDetailsService;
    private final @NonNull PasswordEncoder passwordEncoder;
    private final @NonNull AuthorizationServerTokenServices authorizationServerTokenServices;
    private final @NonNull ObjectMapper objectMapper;

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException {

        log.info(&quot;Login succeed！&quot;);
        // 1. 获取客户端认证信息
        String header = request.getHeader(&quot;Authorization&quot;);
        if (header == null || !header.toLowerCase().startsWith(&quot;basic &quot;)) {
            throw new UnapprovedClientAuthenticationException(&quot;请求头中无客户端信息&quot;);
        }

        // 解密请求头
        String[] client = extractAndDecodeHeader(header);
        if (client.length != 2) {
            throw new BadCredentialsException(&quot;Invalid basic authentication token&quot;);
        }
        String clientId = client[0];
        String clientSecret = client[1];

        // 获取客户端信息进行对比判断
        ClientDetails clientDetails = clientDetailsService.loadClientByClientId(clientId);
        if (clientDetails == null) {
            throw new UnapprovedClientAuthenticationException(&quot;客户端信息不存在：&quot; + clientId);
        } else if (!passwordEncoder.matches(clientSecret, clientDetails.getClientSecret())) {
            throw new UnapprovedClientAuthenticationException(&quot;客户端密钥不匹配&quot; + clientSecret);
        }
        // 2. 构建令牌请求
        TokenRequest tokenRequest = new TokenRequest(new HashMap&amp;lt;&amp;gt;(0), clientId, clientDetails.getScope(), &quot;custom&quot;);
        // 3. 创建 oauth2 令牌请求
        OAuth2Request oAuth2Request = tokenRequest.createOAuth2Request(clientDetails);
        // 4. 获取当前用户信息（省略，前面已经获取过了）
        // 5. 构建用户授权令牌 (省略，已经传过来了)
        // 6. 构建 oauth2 身份验证令牌
        OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(oAuth2Request, authentication);
        // 7. 创建令牌
        OAuth2AccessToken accessToken = authorizationServerTokenServices.createAccessToken(oAuth2Authentication);

        // 直接结束
        response.setContentType(&quot;application/json;charset=utf-8&quot;);
        response.getWriter().write(objectMapper.writeValueAsString(accessToken));
    }


    /**
     * 对请求头进行解密以及解析
     *
     * @param header 请求头
     * @return 客户端信息
     */
    private String[] extractAndDecodeHeader(String header) {
        byte[] base64Token = header.substring(6).getBytes(StandardCharsets.UTF_8);
        byte[] decoded;
        try {
            decoded = Base64.getDecoder().decode(base64Token);
        } catch (IllegalArgumentException e) {
            throw new BadCredentialsException(
                    &quot;Failed to decode basic authentication token&quot;);
        }
        String token = new String(decoded, StandardCharsets.UTF_8);
        int delimiter = token.indexOf(&quot;:&quot;);

        if (delimiter == -1) {
            throw new BadCredentialsException(&quot;Invalid basic authentication token&quot;);
        }
        return new String[]{token.substring(0, delimiter), token.substring(delimiter + 1)};
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来就是将它配置进去，我们独立出他的配置
&lt;code&gt;SmsAuthenticationSecurityConfig&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * sms 配置
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/29 下午11:33
 */
@Component
public class SmsAuthenticationSecurityConfig
        extends SecurityConfigurerAdapter&amp;lt;DefaultSecurityFilterChain, HttpSecurity&amp;gt; {

    @Autowired
    @SuppressWarnings(&quot;all&quot;)
    private  UserDetailsService userDetailsService;
    @Autowired
    @SuppressWarnings(&quot;all&quot;)
    private SmsSuccessHandler smsSuccessHandler;

    @Override
    public void configure(HttpSecurity http)  {
        // 过滤器
        SmsAuthenticationFilter smsAuthenticationFilter = new SmsAuthenticationFilter();
        smsAuthenticationFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager.class));
        smsAuthenticationFilter.setAuthenticationSuccessHandler(smsSuccessHandler);

        // 授权提供者
        SmsAuthenticationProvider smsAuthenticationProvider = new SmsAuthenticationProvider();
        smsAuthenticationProvider.setUserDetailsService(userDetailsService);

        // 过滤器
        http.authenticationProvider(smsAuthenticationProvider)
                .addFilterAfter(smsAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Q：为什么这里使用字段注入呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A：不使用构造器注入最主要的原因在于会造成依赖环，因为我们这里注入了
&lt;code&gt;UserDetailsService&lt;/code&gt; ，而在使用的时候， &lt;code&gt;SmsSuccessHandler&lt;/code&gt;
里面也同样注入了 &lt;code&gt;UserDetailsService&lt;/code&gt; 而后面我们需要在 安全配置
&lt;code&gt;SecurityConfig&lt;/code&gt; 中引入 &lt;code&gt;SmsAuthenticationSecurityConfig&lt;/code&gt; ，
&lt;code&gt;UserDetailsService&lt;/code&gt; 是在 &lt;code&gt;SecurityConfig&lt;/code&gt;
创建的，这个时候就会有一个依赖环的问题了。是使用的先呢？还是创建的先？Spring
就不知道了，但是构造器注入是 Bean 初始化的时候给的，那个时候不一定有
&lt;code&gt;UserDetailsService&lt;/code&gt; ，所以使用字段注入，他会在有的时候自动注入进去。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来安全配置 &lt;code&gt;SecurityConfig&lt;/code&gt; ：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private final @NonNull SmsAuthenticationSecurityConfig smsAuthenticationSecurityConfig;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                // 添加进去即可
                .apply(smsAuthenticationSecurityConfig)
                .and()
                .authorizeRequests()
                .antMatchers(&quot;/code/*&quot;).permitAll()
                .antMatchers(&quot;/auth/sms&quot;).permitAll()
                .antMatchers(&quot;/custom/**&quot;).permitAll()
                .anyRequest().authenticated()
                .and()
                .csrf().disable()
                .formLogin()
                .and()
                .httpBasic();


        http
                .addFilterBefore(validateCodeFilter, AbstractPreAuthenticatedProcessingFilter.class);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行测试一下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190730130906.png&quot; alt=&quot;test&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以看到已经 OK 了
～！邮箱验证码登录也是类似，完全可以考虑两个结合起来，也是不难的，就不赘述了。现在的代码结构如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190730132103.png&quot; alt=&quot;now&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_推荐添加授权模式&quot; &gt;推荐：添加授权模式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于已有的路径 &lt;code&gt;/oauth/token&lt;/code&gt;
，他拥有五种授权模式，我们需要在这五种之上，添加两种授权模式：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;sms&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;email&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;而授权模式的核心接口是 &lt;code&gt;TokenGranter&lt;/code&gt; ，他拥有一个抽象实现类
&lt;code&gt;AbstractTokenGranter&lt;/code&gt; ，我们需要自定义新的 &lt;code&gt;grant type&lt;/code&gt;
，就再写一个他的子类即可，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2019/7/30 下午1:33
 */
public class SmsTokenGranter extends AbstractTokenGranter {
    private static final String GRANT_TYPE = &quot;sms&quot;;
    private UserDetailsService userDetailsService;

    /**
     * 构造方法提供一些必要的注入的参数
     * 通过这些参数来完成我们父类的构建
     *
     * @param tokenServices tokenServices
     * @param clientDetailsService clientDetailsService
     * @param oAuth2RequestFactory oAuth2RequestFactory
     * @param userDetailsService userDetailsService
     */
    public SmsTokenGranter(AuthorizationServerTokenServices tokenServices,
                           ClientDetailsService clientDetailsService,
                           OAuth2RequestFactory oAuth2RequestFactory,
                           UserDetailsService userDetailsService) {
        super(tokenServices, clientDetailsService, oAuth2RequestFactory, GRANT_TYPE);
        this.userDetailsService = userDetailsService;
    }

    /**
     * 在这里查询我们用户，构建用户的授权信息
     *
     * @param client 客户端
     * @param tokenRequest tokenRequest
     * @return OAuth2Authentication
     */
    @Override
    protected OAuth2Authentication getOAuth2Authentication(ClientDetails client, TokenRequest tokenRequest) {
        Map&amp;lt;String, String&amp;gt; params = tokenRequest.getRequestParameters();
        String sms = params.getOrDefault(&quot;sms&quot;, &quot;&quot;);
        // 获取用户信息
        UserDetails userDetails = userDetailsService.loadUserByUsername(sms);
        if (Objects.isNull(userDetails)) {
            throw new UsernameNotFoundException(&quot;用户不存在&quot;);
        }
        // 构建用户授权信息
        Authentication user = new UsernamePasswordAuthenticationToken(userDetails.getUsername(),
                userDetails.getPassword(), userDetails.getAuthorities());
        return new OAuth2Authentication(tokenRequest.createOAuth2Request(client), user);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来我们把它添加到配置类 &lt;code&gt;Oauth2AuthorizationServerConfig&lt;/code&gt; 中去&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private final @NonNull UserDetailsService userDetailsService;

    @Override
    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
        clients.inMemory()
                .withClient(&quot;oauth2&quot;)
                    .secret(&quot;$2a$10$uLCAqDwHD9SpYlYSnjtrXemXtlgSvZCNlOwbW/Egh0wufp93QjBUC&quot;)
                    .resourceIds(&quot;oauth2&quot;)
                    // 注意，这里要添加我们的 sms 授权方式
                    .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;refresh_token&quot;, &quot;sms&quot;)
                    .authorities(&quot;ROLE_ADMIN&quot;, &quot;ROLE_USER&quot;)
                    .scopes(&quot;all&quot;)
                    .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))
                    .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))
                    .redirectUris(&quot;http://example.com&quot;)
                .and()
                .withClient(&quot;test&quot;)
                    .secret(&quot;$2a$10$wlgcx61faSJ8O5I4nLiovO9T36HBQgh4RhOQAYNORCzvANlInVlw2&quot;)
                    .resourceIds(&quot;oauth2&quot;)
                    // 注意，这里要添加我们的 sms 授权方式
                    .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;refresh_token&quot;, &quot;sms&quot;)
                    .authorities(&quot;ROLE_ADMIN&quot;, &quot;ROLE_USER&quot;)
                    .scopes(&quot;all&quot;)
                    .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))
                    .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(1).getSeconds()))
                    .redirectUris(&quot;http://example.com&quot;);
    }

    @Override
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
        endpoints.authenticationManager(this.authenticationManager);
        // 添加进去
        endpoints.tokenGranter(tokenGranter(endpoints));
    }

    /**
     * 重点
     * 先获取已经有的五种授权，然后添加我们自己的进去
     *
     * @param endpoints AuthorizationServerEndpointsConfigurer
     * @return TokenGranter
     */
    private TokenGranter tokenGranter(final AuthorizationServerEndpointsConfigurer endpoints) {
        List&amp;lt;TokenGranter&amp;gt; granters = new ArrayList&amp;lt;&amp;gt;(Collections.singletonList(endpoints.getTokenGranter()));
        granters.add(new SmsTokenGranter(endpoints.getTokenServices(), endpoints.getClientDetailsService(),
                endpoints.getOAuth2RequestFactory(), userDetailsService));
        return new CompositeTokenGranter(granters);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试一下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190730220005.png&quot; alt=&quot;test&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;邮箱授权同样的道理，不再赘述。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_添加验证码验证&quot; &gt;添加验证码验证&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在已经有了新的授权模式，我们要对他把已经写好的验证码验证添加进去。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自定义 controller 的方式很简单，就在 &lt;code&gt;ValidateCodeFilter&lt;/code&gt; 的
&lt;code&gt;afterPropertiesSet&lt;/code&gt; 方法中添加路径即可，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Override
    public void afterPropertiesSet() throws ServletException {
        super.afterPropertiesSet();
        // 路径拦截
        urlMap.put(&quot;/auth/sms&quot;, &quot;sms&quot;);
        urlMap.put(&quot;/custom/sms&quot;, &quot;sms&quot;);
        urlMap.put(&quot;/oauth/sms&quot;, &quot;sms&quot;);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果是按照 &lt;code&gt;spring security oauth2&lt;/code&gt; 的流程，我们就需要再加一个过滤器了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Slf4j
@Component
@RequiredArgsConstructor
public class ValidateCodeGranterFilter extends OncePerRequestFilter {

    private final @NonNull ValidateCodeProcessorHolder validateCodeProcessorHolder;
    private RequestMatcher requestMatcher = new AntPathRequestMatcher(&quot;/oauth/token&quot;, HttpMethod.POST.name());

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        if (requestMatcher.matches(request)){
            String grantType = getGrantType(request);
            if (&quot;sms&quot;.equalsIgnoreCase(grantType) || &quot;email&quot;.equalsIgnoreCase(grantType)){
                try {
                    log.info(&quot;请求需要验证！验证请求：&quot; + request.getRequestURI() + &quot; 验证类型：&quot; + grantType);
                    validateCodeProcessorHolder.findValidateCodeProcessor(grantType)
                            .validate(new ServletWebRequest(request, response));
                } catch (Exception e) {
                    e.printStackTrace();
                    return;
                }
            }
        }
        filterChain.doFilter(request, response);
    }

    private String getGrantType(HttpServletRequest request) {
        return request.getParameter(&quot;grant_type&quot;);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时需要修改一下 &lt;code&gt;AbstractValidateCodeProcessor&lt;/code&gt;
获取授权类型的方法，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    /**
     * 根据请求 url 获取验证码类型
     *
     * @return 结果
     */
    private String getValidateCodeType(ServletWebRequest request) {
        String uri = request.getRequest().getRequestURI();
        if (uri.contains(&quot;/oauth/token&quot;)) {
            return request.getParameter(&quot;grant_type&quot;);
        } else {
            int index = uri.lastIndexOf(&quot;/&quot;) + 1;
            return uri.substring(index).toLowerCase();
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就可以了，就不用测试了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;到此为止，我们的这节终于写完了！现在的代码结构如下！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190730224714.png&quot; alt=&quot;now&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊，终于把这块写完了！个人觉得这块是最为复杂的一块，同时觉得也是最有价值的一块！因为现在真的没有谁比我总结这两种方式更加详细的了（偷笑
～），并且每一个方式都对应不同的源码，需要去琢磨源码然后找到对应的文档然后再去实现，实现完后要总结出来画图在表述出来，实在太累了。不过收获很明显，找到了一些新的方法。不过我省略掉了源码分析部分，不然篇幅就太长太长了。从上面的描述中可以看到第三种方式应该是最好的，那么为什么我要说自定义
controller
的方式呢？因为这就是我学习的步骤，先是尽量自己实现，然后再用他写的方式来实现，再把他整合进入，如果没有自定义
controller 那一快，我不可能知道他怎么创建 token
的，后面都是一样。一开始我只会第一种，年初的时候我用的就是第一种；后面学会了第二种，大概是今年四月份把；然后第三种是写文章的时候才会的，所以我给学校写的授权服务器中是用的第二种，后面要考虑重构一下嘿嘿嘿嘿
～写文章真的好累好累啊，但是收获不小呢！而且放假了好开心 ～后面加油
～！考虑要不要写一篇源码分析了哈哈，oauth2
的源码好多地方抖都翻了好几遍了昂。。。后面考虑整理一下然后写一个源码分析的。加油
～！！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Spring Security Oauth2 从零到一完整实践（四）资源服务器]]></description><link>https://zyue.wiki/articles/2019/07/20/1563611848587.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/07/20/1563611848587.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_系列文章&quot;&gt;系列文章&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_spring_security_oauth2_资源服务器&quot;&gt;Spring security oauth2 资源服务器&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_基于普通加密的资源服务器&quot;&gt;基于普通加密的资源服务器&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_基于_jwt_加密的资源服务器&quot;&gt;基于 Jwt 加密的资源服务器&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_对称密钥&quot;&gt;对称密钥&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_非对称密钥&quot;&gt;非对称密钥&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意注意：本文章适用于5.3以前的spring security以及spring boot 2.3.x
以前的 oauth，以下内容应该为过时！spring 提供新的 oauth2
授权服务器，目前正在https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update[实验性阶段]，同时资源服务器由
oauth 模块迁移到 spring security 之内。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们使用安全框架的最大意义就在于保护我们的资源，让我们的资源能够在我们希望他被访问到的时候才能够被访问，而存放我们资源的地方就是资源服务器。前面已经说过，资源服务器是围绕着授权服务器进行的，在
oauth2
中当有了授权服务器以后，才会有资源服务器，这样说虽然有点绝对，但是如果没有授权服务器，资源服务器其实也就没有太大的存在意义的了，那么还不如就作为一个普通的
Web
应用即可。我们现在的任务就是来学习如何自定义配置我们的资源服务器，同以前一样，我们通过实践的方式来了解他。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;GitHub 地址： &lt;a href=&quot;https://github.com/lizhongyue248/spring-security-oauth2-demo&quot;&gt;spring-security-oauth2-demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;博客地址： &lt;a href=&quot;https://echocow.cn&quot;&gt;echocow.cn&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_系列文章&quot; &gt;系列文章&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082088646.html&quot;&gt;较为详细的学习
oauth2 的四种模式其中的两种授权模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082247386.html&quot;&gt;spring boot
oauth2 自动配置实现&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563096109754.html&quot;&gt;spring
security oauth2 授权服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring security oauth2 资源服务器配置&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/30/1564498598952.html&quot; class=&quot;bare&quot;&gt;https://echocow.cn/articles/2019/07/30/1564498598952.html&lt;/a&gt;&lt;sub class=&quot;spring
security oauth2 自定义授权模式（手机、邮箱等）&quot;&gt;~&lt;/sub&gt;~&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2020/01/20/1579503807596.html&quot;&gt;spring
security oauth2 踩坑记录&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_spring_security_oauth2_资源服务器&quot; &gt;Spring security oauth2 资源服务器&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一般来说资源服务器同时也是我们的客户端，为什么这么说呢？因为客户端存在的前提就是需要有资源服务器提供资源，这个关系往往都是一对一的，对于
Web 应用，他们之间应该有如下关系：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;客户端：前端应用，携带 client id 去请求授权服务器获取授权码。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;资源服务器：后端应用，一般会在这里存放 client
secret，这样用户就不会得到 client 相关的密钥或者凭证，使用 client id 和
client secret
向授权服务器对凭证进行验证和解析，所以通常来说资源服务器也是作为客户端的存在。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;专门的资源服务器为客户端提供受保护的资源。而且在请求令牌凭证的时候，就已经指定了当前客户端信息，但是对于前端应用，为了安全不会存放
client
secret，因为前端基本是全部暴露在用户面前的，所以资源服务器也充当客户端，用来存放相应的客户端信息。在请求资源的时候也需要说明客户端信息，这个时候的客户端信息为了安全，都是存放在授权服务器之中的，所以可以理解成如下图：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/14/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190718170329.png&quot; alt=&quot;授权码模式&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以这就是为什么授权码模式安全性最高的原因之一，一方面他拥有严密的流程，另一方面他的授权是在授权服务器上完成，客户端只需要提供
client id 就可以而不需要其他的，用户也就只知道 client id 而不知 client
secret
了；所以更加安全。如果是密码模式，&lt;strong&gt;你需要自定义自己的一套登录流程然后向授权服务器请求授权才可以&lt;/strong&gt;，不能够直接让用户从前端应用向授权服务器请求授权，因为完全可以从请求头中截取你的客户端信息。密码模式如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190718174912.png&quot; alt=&quot;不安全的密码模式&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190718175533.png&quot; alt=&quot;密码模式&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;所以我们在配置资源服务器的时候需要同时配置一个客户端&lt;/strong&gt;。我们来再次看看资源服务器的详细步骤：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;向授权服务器请求获取 token（即凭证）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;向授权服务器验证并解析 token 获取用户信息&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;资源服务器验证用户是否有权限访问此资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一切都是以一台授权服务器为前提的，所以我们需要先为他准备一台授权服务器。我们可以直接使用我们上篇文章说到的那些授权服务器，不过有些许改变。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这之前我们需要为已经有的授权服务器添加一个非常主要的端点：&lt;strong&gt;check_token&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在所有的授权模块中（如： &lt;code&gt;spring-security-oauth2-authorization&lt;/code&gt; ）的
&lt;code&gt;Oauth2AuthorizationServerConfig&lt;/code&gt;
授权服务器配置添加如下方法，具体作用参见上一篇文章的最后一部分。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
public void configure(AuthorizationServerSecurityConfigurer security) {
    security
        .checkTokenAccess(&quot;isAuthenticated()&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们就能够访问 &lt;code&gt;check_token&lt;/code&gt;
端点，&lt;strong&gt;资源服务器就能够向授权服务器验证并解析 token 获取用户信息&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来我们来创建我们资源服务器模块，创建方式和授权服务器中是一样的，不再赘述。模块名称为
&lt;code&gt;spring-security-oauth2-resource&lt;/code&gt;
，同授权服务器一样，资源服务器的关键接口为 &lt;code&gt;ResourceServerConfigurer&lt;/code&gt;
，而他的适配器为 &lt;code&gt;ResourceServerConfigurerAdapter&lt;/code&gt;
，我们只需要继承他的适配器即可，他有如下两个方法：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 75%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;方法名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;configure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ResourceServerSecurityConfigurer&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;资源服务器的属性配置，默认值应该适用于许多应用程序，但可能至少要更改资源
ID。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;configure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;HttpSecurity&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;使用此项配置安全资源的访问规则。默认情况下，不在 &lt;code&gt;“/oauth/**”&lt;/code&gt;
中的所有资源是受保护的。这个其实就是和 &lt;code&gt;`spring security&lt;/code&gt;
的配置方式是一样的。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;相比起授权服务器好理解许多。同时需要明白的一点是，对于资源服务器，提供了两种验证与解析令牌的方式：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 10%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 55%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;解析方式&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;实现类&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;优点&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;本地解析&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;DefaultTokenServices&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;解析快速，不需要发送任何请求，可以配置令牌存储等。&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;一旦授权服务器令牌解析方式发生调整，本地也要进行调整。向资源服务器/客户端提供令牌解析方式是极其不安全的行为。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;远程解析&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;RemoteTokenServices&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;资源服务器配置大大减少，方便快捷，自适应授权服务器变化。&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;受网络的影响，一旦两个服务器不再一个局域网内，效率会大大降低。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然而在实际的授权服务器中，我们将会采用的是第二种 远程解析
的方式，最主要的原因是因为他足够安全。所以我们主要分为两个部分来学习资源服务器：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;基于普通加密的资源服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;基于 jwt 加密的资源服务器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_基于普通加密的资源服务器&quot; &gt;基于普通加密的资源服务器&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对应的授权服务器模块为：spring-security-oauth2-authorization&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对应的资源服务器模块为：spring-security-oauth2-resource&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;授权服务器需添加 check_token 端点支持。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;资源服务器依赖如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.security.oauth.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-security-oauth2-autoconfigure&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;${spring.boot.version}&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们先创建一个启动类如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@SpringBootApplication
public class ResourceApplication {
    public static void main(String[] args) {
        SpringApplication.run(ResourceApplication.class, args);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;而作为资源服务器，我们肯定是需要准备一个受保护的资源的，所以我们创建一个
&lt;code&gt;controller&lt;/code&gt; 如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@RestController
@RequestMapping(&quot;/auth&quot;)
public class OauthController {

    /**
     * 获取当前登录的用户信息
     *
     * @param principal 用户信息
     * @return http 响应
     */
    @GetMapping(&quot;/me&quot;)
    public HttpEntity&amp;lt;?&amp;gt; oauthMe(Principal principal) {
        return ResponseEntity.ok(principal);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同授权服务器一样，资源服务器的关键接口为 &lt;code&gt;ResourceServerConfigurer&lt;/code&gt;
，而他的适配器为 &lt;code&gt;ResourceServerConfigurerAdapter&lt;/code&gt;
，我们只需要继承他的适配器即可，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Configuration
@EnableResourceServer
public class Oauth2ResourceServerConfig extends ResourceServerConfigurerAdapter {

    @Override
    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
        // 设置资源服务器的 id
        resources.resourceId(&quot;oauth2&quot;);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最后来添加我们的配置文件 &lt;code&gt;application.yml&lt;/code&gt; ，分别指定了如下参数：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;资源服务器的启动端口在 &lt;code&gt;9000&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;资源服务器检查和解析用户信息的路径在
&lt;code&gt;&lt;a href=&quot;http://localhost:8000/oauth/check_token&quot; class=&quot;bare&quot;&gt;http://localhost:8000/oauth/check_token&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;客户端获取令牌的位置 &lt;code&gt;&lt;a href=&quot;http://localhost:8000/oauth/token&quot; class=&quot;bare&quot;&gt;http://localhost:8000/oauth/token&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;客户端信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;server:
  port: 9000

security:
  oauth2:
    resource:
      token-info-uri: http://localhost:8000/oauth/check_token
    client:
      access-token-uri: http://localhost:8000/oauth/token
      client-id: oauth2
      client-secret: oauth2 # 这里必须是加密前的密钥
      grant-type: authorization_code,password,refresh_token
      scope: all&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;Q：在授权服务器中，我们继承了`AuthorizationServerConfigurerAdapter`
并注入之后，在配置文件中的配置就不会自动生效了，在授权服务器之中同理，那么我们为什么还要配置
&lt;code&gt;token-info-uri&lt;/code&gt; 呢？&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A：主要原因是因为 &lt;code&gt;token-info-uri&lt;/code&gt;
不仅是在资源服务器中使用的。我们资源服务器在向授权服务器发送请求的时候需要一个
&lt;code&gt;RestTemplate&lt;/code&gt; (具体作用请自行百度)，而 &lt;code&gt;spring oauth2&lt;/code&gt; 将创建的这个
&lt;code&gt;RestTemplate&lt;/code&gt; 存放在了
&lt;code&gt;org.springframework.security.oauth2.provider.token.RemoteTokenServices&lt;/code&gt;
内，在这里又使用了 &lt;code&gt;token-info-uri&lt;/code&gt; ，具体源码见
&lt;code&gt;org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfiguration&lt;/code&gt;
如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以看到他创建的时候又使用了我们的 &lt;code&gt;token-info-uri&lt;/code&gt;
，所以这里我们配置出来的是为了配置这个自动的远程服务，我们用来发送的请求都是它来完成的。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;Q：上一步的源码中看到了给他设置了 客户端 id 和
客户端密钥，但是在资源服务器的配置中我们并没有配置，而是配置的是 client
客户端的配置，他怎么设置进去的呢？&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A：我们还是从源码说起，直接上图：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以看到是有这两个属性的，但是使用 &lt;code&gt;@JsonIgnore&lt;/code&gt; 进行忽视了，同时没有
&lt;code&gt;set&lt;/code&gt;
方法，所以我们无法设置，那么它是来自于哪里呢？那就只有构造函数了，在哪儿设置的呢？源码如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以看到注入了 &lt;code&gt;client&lt;/code&gt; 的配置文件然后直接把 &lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;secret&lt;/code&gt;
使用构造方法放进去了，所以我们配置 &lt;code&gt;client&lt;/code&gt; 就可以了 ～！&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们现在的目录结构应该如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720135426.png&quot; alt=&quot;files&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们启动测试一下，启动两个项目，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们直接访问一下受保护的资源看看：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720140745.png&quot; alt=&quot;get&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;401 未授权，我们需要提供相应的授权凭证。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们现在要获取凭证，也就是
token，第一步要先去获取授权码，获取授权码的过程是在授权服务器中完成的，访问如下路径：localhost:8000/oauth/authorize?response_type=code&amp;amp;client_id=oauth2&amp;amp;redirect_uri=http://example.com&amp;amp;scope=all&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后登录授权流程就不截图啦，和授权服务器是一样的，这个过程你应该要注意的是
url ，他一直在的是 &lt;code&gt;8000&lt;/code&gt; 端口的服务器上，最后取到授权码：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720140224.png&quot; alt=&quot;code&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;携带授权码去获取 token&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意：在实际应用中，回调地址应该自动接收获取到授权码然后发送给资源服务器，资源服务器请求授权服务器获取
token，这个过程应该要在资源服务器完成，对用户不可见&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720140237.png&quot; alt=&quot;token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后携带 token 去请求我们的资源服务器资源&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720140334.png&quot; alt=&quot;token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们就请求到了具体的数据啦，这就是使用了远程的方式，变得非常简单！不需要配置任何
token 相关的东西 ～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_基于_jwt_加密的资源服务器&quot; &gt;基于 Jwt 加密的资源服务器&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对应的授权服务器模块为：spring-security-oauth2-authorization-jwt&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对应的资源服务器模块为：spring-security-oauth2-resource-jwt&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;同样，在授权服务器中我们要添加 check_token 端点的访问权限。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们先来初始化我们的项目，其实就是把上一个的复制过来即可 =-=
不过对于资源的 id 改成了从配置文件读取，配置文件如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;server:
  port: 9000

security:
  oauth2:
    resource:
      token-info-uri: http://localhost:8000/oauth/check_token
      id: oauth2
    client:
      access-token-uri: http://localhost:8000/oauth/token
      client-id: oauth2
      client-secret: oauth2
      grant-type: authorization_code,password,refresh_token
      scope: all&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最终项目结构如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720150340.png&quot; alt=&quot;config&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;而同样，对于 jwt
有两种，分别是对称密钥加密以及非对称密钥加密，我们也要一个一个来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_对称密钥&quot; &gt;对称密钥&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们首先改一下授权服务器使用对称密钥加密，
&lt;code&gt;Oauth2AuthorizationServerConfig&lt;/code&gt; 如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 令牌转换器，非/对称密钥加密
 *
 * @return JwtAccessTokenConverter
 */
@Bean
public JwtAccessTokenConverter jwtAccessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    //  对称密钥加密
    converter.setSigningKey(&quot;oauth2&quot;);
    //  非对称密钥加密
    //  KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(
    //          new ClassPathResource(&quot;oauth2.jks&quot;), &quot;123456&quot;.toCharArray());
    //  converter.setKeyPair(keyStoreKeyFactory.getKeyPair(&quot;oauth2&quot;));
    return converter;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于 jwt 有两种配置方式&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;自动配置&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;手动配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自动配置很简单，配置文件添加：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;security:
  oauth2:
    resource:
      jwt:
        key-value: oauth2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;就可以了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于手动配置，也很简单，添加如下 bean 然后配置进去即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置一个本地的令牌转化器，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Bean
public JwtAccessTokenConverter jwtAccessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    converter.setSigningKey(&quot;oauth2&quot;);
    return converter;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后将它配置进去&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 远程服务
 */
private @NonNull RemoteTokenServices remoteTokenServices;

/**
 * 配置文件
 */
private @NonNull ResourceServerProperties resourceServerProperties;

@Override
public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
    remoteTokenServices.setAccessTokenConverter(jwtAccessTokenConverter());
    // 设置资源服务器的 id,从配置文件中读取
    resources.resourceId(resourceServerProperties.getResourceId())
        .tokenServices(remoteTokenServices);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;截图如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720152104.png&quot; alt=&quot;next&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们测试一下，使用密码模式请求 token：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720152151.png&quot; alt=&quot;get&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720152156.png&quot; alt=&quot;get&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就成功了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_非对称密钥&quot; &gt;非对称密钥&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们首先改一下授权服务器使用非对称密钥加密，
&lt;code&gt;Oauth2AuthorizationServerConfig&lt;/code&gt; 如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 令牌转换器，非/对称密钥加密
 *
 * @return JwtAccessTokenConverter
 */
@Bean
public JwtAccessTokenConverter jwtAccessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    //  对称密钥加密
    //  converter.setSigningKey(&quot;oauth2&quot;);
    //  非对称密钥加密
    KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(
        new ClassPathResource(&quot;oauth2.jks&quot;), &quot;123456&quot;.toCharArray());
    converter.setKeyPair(keyStoreKeyFactory.getKeyPair(&quot;oauth2&quot;));
    return converter;
}

/**
 * 资源服务器所需，后面会讲
 * 具体作用见本系列的第二篇文章授权服务器最后一部分
 * 具体原因见本系列的第三篇文章资源服务器
 *
 * @param security security
 */
@Override
public void configure(AuthorizationServerSecurityConfigurer security) {
    security
        // 能够验证和解析 token
        .checkTokenAccess(&quot;isAuthenticated()&quot;)
        // 能够访问我们的公钥
        .tokenKeyAccess(&quot;isAuthenticated()&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里我们需要 &lt;code&gt;tokenKeyAccess(&quot;isAuthenticated()&quot;)&lt;/code&gt; 能够访问
&lt;code&gt;/oauth/token_key&lt;/code&gt; 端点，启动授权服务器可以直接通过浏览器访问
&lt;a href=&quot;http://localhost:8000/oauth/token_key&quot; class=&quot;bare&quot;&gt;http://localhost:8000/oauth/token_key&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/18/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190720154348.png&quot; alt=&quot;key&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于资源服务器，我们需要授权服务器提供给我们公钥，我们能够通过请求获取到授权服务器的
公钥了，有两种方式获取公钥：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;授权服务器下发，本地存储，本地读取&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;直接从授权服务器请求获取&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，我们也有两种方式&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;自动配置&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;手动配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自动配置就是添加配置文件即可：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;server:
  port: 9000

security:
  oauth2:
    resource:
      token-info-uri: http://localhost:8000/oauth/check_token
      id: oauth2
      jwt:
        key-uri: http://localhost:8000/oauth/token_key
        # 如果没有配置这项，会自动联网获取
        key-value: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiNMiywFLjao8P86kkhwu
          49Ycys35RRZaKgqZ6JNtbgFq5dCA2kBtdArhm2GS2zplOyPGDlog3r9Ka2jA33Pf
          A9vl60zq1oI1AAAd8CLnyTvIekCnpwaGeBfYFv++LwhWPPT617XVhmF46c25F29t
          tMnGuzHzqKprysgdfBaIXUKZkMeVudGSLPgR0RjZvcM8MMs1cZ1rAISRgIT/D1RL
          Do/HhQkKOvhW2IrQgrqrgu+R/V+7AqS6dz/YAdroYpcBoXKSai+HtZ6yTDxrWdxh
          pbaTCvW2M/IObYVZaHpdOYNTufOzR6+w4SXagT++OopWEQ8w1vLKQzHk+uTrBfzQ
          kQIDAQAB
          -----END PUBLIC KEY-----
    client:
      access-token-uri: http://localhost:8000/oauth/token
      client-id: oauth2
      client-secret: oauth2
      grant-type: authorization_code,password,refresh_token
      scope: all&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;手动配置比较麻烦。。。配置如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
    public void configure(ResourceServerSecurityConfigurer resources) {
        resources.resourceId(resourceServerProperties.getResourceId())
                .tokenServices(tokenServices());
    }

    @Bean
    public TokenStore tokenStore() {
        return new JwtTokenStore(jwtAccessTokenConverter());
    }

    @Bean
    public JwtAccessTokenConverter jwtAccessTokenConverter() {
        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
        converter.setVerifierKey(getPubKey());
        return converter;
    }

    @Bean
    @Primary
    public DefaultTokenServices tokenServices() {
        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
        defaultTokenServices.setTokenStore(tokenStore());
        return defaultTokenServices;
    }

    private String getPubKey() {
       return StringUtils.isEmpty(resourceServerProperties.getJwt().getKeyValue())
               ? getKeyFromAuthorizationServer()
               : resourceServerProperties.getJwt().getKeyValue();
    }

    private String getKeyFromAuthorizationServer() {
        ObjectMapper objectMapper = new ObjectMapper();
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.add(&quot;Authorization&quot;, encodeClient());
        HttpEntity&amp;lt;String&amp;gt; requestEntity = new HttpEntity&amp;lt;&amp;gt;(null, httpHeaders);
        String pubKey = new RestTemplate()
                .getForObject(resourceServerProperties.getJwt().getKeyUri(), String.class, requestEntity);
        try {
            Map map = objectMapper.readValue(pubKey, Map.class);
            System.out.println(&quot;联网公钥&quot;);
            return map.get(&quot;value&quot;).toString();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    private String encodeClient() {
        return &quot;Basic &quot; + Base64.getEncoder().encodeToString((resourceServerProperties.getClientId()
                + &quot;:&quot; + resourceServerProperties.getClientSecret()).getBytes());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;示例里面没有写，我写在了另外一个示例项目里面，参见
&lt;a href=&quot;https://github.com/gzmuSoft/resource-server&quot;&gt;资源服务器示例&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试就不测试了。。。效果一样的。。好累了的说。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;资源服务器简单太多拉，因为需要做的复杂操作都在授权服务器上去做了，所以资源服务器其实事情没多少，但是里面的自动配置还是帮我们完成了很多事情。简单太多了，接下来就涉及到源码的一些东西了，这次拖了一周才写完，主要是要写开题报告，而且云顶之亦真香哈哈哈。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[时隔半年，终于要来填坑了。不过经过这段时间的学习和实践，确实解决了不少问题。现在在这里一一记录一下。]]></description><link>https://zyue.wiki/articles/2020/01/20/1579503807596.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2020/01/20/1579503807596.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_系列文章&quot;&gt;系列文章&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_refresh_token_第一次有效&quot;&gt;REFRESH_TOKEN 第一次有效&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_自定义客户端信息&quot;&gt;自定义客户端信息&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_多类型混合存储&quot;&gt;多类型混合存储&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_授权服务器资源服务器共存&quot;&gt;授权服务器、资源服务器共存&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_资源服务器安全配置顺序&quot;&gt;资源服务器安全配置顺序&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_安全退出&quot;&gt;安全退出&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_自定义退出端点&quot;&gt;自定义退出端点&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_自定义退出页面&quot;&gt;自定义退出页面&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_自定义退出成功处理器&quot;&gt;自定义退出成功处理器&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_spring_security_配置&quot;&gt;spring security 配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_效果&quot;&gt;效果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_jwk_端点&quot;&gt;JWK 端点&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_自定义端点路径&quot;&gt;自定义端点路径&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_rbac_动态权限控制&quot;&gt;RBAC 动态权限控制&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_传统项目的过渡&quot;&gt;传统项目的过渡&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试&quot;&gt;测试&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;admonitionblock important&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;strong&gt;注意注意：本文章适用于5.3以前的spring security以及spring boot 2.3.x
以前的 oauth，以下内容应该为过时！spring 提供新的 oauth2
授权服务器。目前正在https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update[实验性阶段]&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;时隔半年，终于要来填坑了。不过经过这段时间的学习和实践，确实解决了不少问题。现在在这里一一记录一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过在这之前，还是需要说一下19年11月一件关于 spring security oauth
的大事，参见官网文章
&lt;a href=&quot;https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update&quot;&gt;Spring
Security OAuth 2.0 Roadmap Update&lt;/a&gt;。主要有以下两个点：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;不再支持 OAuth2 授权服务器&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring security oauth 迁移至 spring security 中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;但是由于第一点收到了太多用户的反馈，建议继续支持授权服务器，所以现在进行重新决议，目前正在决议中。另外还有一个项目生命周期的维护：&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The currently supported branches are 2.3.x and 2.4.x. The 2.3.x line
will reach EOL in March 2020. We will support the 2.4.x line at least
one year after reaching feature parity.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;目前官方支持的两个版本就是 spring security oauth 2.3.x 和
2.4.x，其中，2.3.x 版本会在 2020 年 3 月的时候停止支持和维护，而 2.4.x
会至少一年后停止支持和维护。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 spring security oauth 的项目中的 master
分支（即2.4.x版本），相关的注解如
&lt;code&gt;EnableAuthorizationServer&lt;/code&gt;，都被标记为了 &lt;strong&gt;过时&lt;/strong&gt; 。并给出了迁移 spring
security 的 wiki
链接：https://github.com/spring-projects/spring-security/wiki/OAuth-2.0-Migration-Guide[OAuth-2.0-Migration-Guide]。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是现在的主要依赖（如现在的spring boot 2.2.3）都还是 spring security
oauth 的 2.3.x 分支，也就是说目前还是可以使用的。预计在三月，会使用它的
2.4.x
分支了。但是个人觉得自定义授权服务器还是非常重要的，很多场景下都适用，并且可以自己规划非常方便。所以也是希望他继续支持授权服务器的，并且在近一年内，spring
security oauth 的授权服务器都会继续使用，我也在我们学校搭建了一个 oauth2
的授权中心：https://github.com/gzmuSoft/authorization-server[authorization-server]。这段时间也踩了不少坑，记录一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：以下内容依旧使用 spring security oauth 项目。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_系列文章&quot; &gt;系列文章&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082088646.html&quot;&gt;较为详细的学习
oauth2 的四种模式其中的两种授权模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082247386.html&quot;&gt;spring boot
oauth2 自动配置实现&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563096109754.html&quot;&gt;spring
security oauth2 授权服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/20/1563611848587.html&quot;&gt;spring
security oauth2 资源服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/30/1564498598952.html&quot;&gt;spring
security oauth2 自定义授权模式（手机、邮箱等）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring security oauth2 踩坑记录&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_refresh_token_第一次有效&quot; &gt;REFRESH_TOKEN 第一次有效&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在刷新 token 的时候，携带 &lt;code&gt;refresh_token&lt;/code&gt; 去请求 &lt;code&gt;/oauth/token&lt;/code&gt;
端点，会生成新的 &lt;code&gt;access_token&lt;/code&gt; 和
&lt;code&gt;refresh_token&lt;/code&gt;，但是你会发现，&lt;strong&gt;只有第一次的 &lt;code&gt;refresh_token&lt;/code&gt;
可以使用，后面的都不能够使用&lt;/strong&gt;。这个问题主要原因来自于授权服务器端点配置，&lt;strong&gt;默认情况下，授权服务器的端点配置会有这么一个属性：&lt;code&gt;reuseRefreshToken&lt;/code&gt;
表示重复使用刷新令牌&lt;/strong&gt;。也就是说会一直重复使用第一次请求到的
&lt;code&gt;refresh_token&lt;/code&gt;，而后面的 &lt;code&gt;refresh_token&lt;/code&gt; 就是无效的了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;参见
&lt;code&gt;org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们需要修改一下这个设置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Oauth2AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter{
    // ...
    @Override
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
        endpoints..reuseRefreshTokens(false);
    }
    // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_自定义客户端信息&quot; &gt;自定义客户端信息&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;很多时候我要从数据库中读取客户端信息，但是不希望使用它的表结构来创建表，这个时候需要我们去自定义客户端信息。就像自定义用户信息一样，需要实现
&lt;code&gt;org.springframework.security.oauth2.provider.ClientDetailsService&lt;/code&gt;
接口。它的返回值是
&lt;code&gt;org.springframework.security.oauth2.provider.ClientDetails&lt;/code&gt;。所以这里有两种实现方式&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;第一种实体类实现 &lt;code&gt;ClientDetails&lt;/code&gt; 接口&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;第二种就是在写一个转换的方法，把你的 &lt;code&gt;ClientDetails&lt;/code&gt; 转换为它的
&lt;code&gt;ClientDetails&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第一种可以参见： &lt;a href=&quot;https://github.com/xkcoding/spring-boot-demo/blob/dev/spring-boot-demo-oauth/spring-boot-demo-oauth-authorization-server/src/main/java/com/xkcoding/oauth/entity/SysClientDetails.java&quot;&gt;&lt;strong&gt;SysClientDetails&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里我使用的是第二种。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public org.springframework.security.oauth2.provider.ClientDetails buildSpringClientDetails() {
    BaseClientDetails details = new BaseClientDetails(clientId, resourceIds, scope, grantTypes, authorities, redirectUrl);
    details.setClientSecret(clientSecret);
    details.setAutoApproveScopes(Collections.singletonList(autoApproveScopes));
    details.setAccessTokenValiditySeconds(accessTokenValidity);
    details.setRefreshTokenValiditySeconds(refreshTokenValidity);
    details.setAdditionalInformation(JSON.parseObject(additionalInformation));
    return details;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后将我们写的实现 &lt;code&gt;ClientDetailsService&lt;/code&gt; 接口的 service 配置进去即可：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Oauth2AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {
    // ......
    @Override
    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
        // 从数据库读取我们自定义的客户端信息
        clients.withClientDetails(sysClientDetailsService);
    }
    // ......
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_多类型混合存储&quot; &gt;多类型混合存储&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我的一个需求就是，客户端信息我需要持久化存储，存在 &lt;code&gt;postgresql&lt;/code&gt;
里面，而我的 &lt;code&gt;token&lt;/code&gt; 相关的需要频繁取出或者修改，所以我希望他存在
&lt;code&gt;redis&lt;/code&gt; 里面并且需要使用 jwt
非对称密钥转换。那么我就要从两个不同的地方取出不同的东西。所以我们需要给他两个东西&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;RedisTokenStore&lt;/code&gt;：从 Redis 中获取 token&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;ClientDetailsService&lt;/code&gt; ：从 Postgresql 中获取客户端信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个时候 &lt;code&gt;JwtTokenStore&lt;/code&gt; 不是必须的，需要的是 &lt;code&gt;JwtAccessTokenConverter&lt;/code&gt;
来进行令牌的转换。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Bean
@Primary
public TokenStore tokenStore() {
    return new RedisTokenStore(redisConnectionFactory);
}

@Bean
public JwtAccessTokenConverter jwtAccessTokenConverter() {
    final JwtAccessTokenConverter accessTokenConverter = new JwtAccessTokenConverter();
    accessTokenConverter.setKeyPair(keyPair());
    return accessTokenConverter;
}

@Bean
public KeyPair keyPair() {
    KeyStoreKeyFactory keyStoreKeyFactory = new KeyStoreKeyFactory(new ClassPathResource(&quot;oauth.jks&quot;), &quot;123456&quot;.toCharArray());
    return keyStoreKeyFactory.getKeyPair(&quot;oauth&quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同样，在有其他的组合需求的时候也只需要提供相应的实现就可以了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_授权服务器资源服务器共存&quot; &gt;授权服务器、资源服务器共存&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个是比较头疼的地方了。头疼在哪里呢？就是头疼在 &lt;code&gt;CSRF&lt;/code&gt; 这么个东西。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
参见：
 &lt;a href=&quot;https://zh.wikipedia.org/zh/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%5D(https://zh.wikipedia.org/zh/跨站请求伪造)&quot;&gt;CSRF
跨站请求伪造&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我希望我的项目即是资源服务器，又是授权服务器。说白了他能够提供令牌发放的功能，但是也通过简单的一些查询的功能。&lt;strong&gt;但是当他作为授权服务器的时候，使用授权码模式的时候，他是一个使用模板引擎的前后端未分离的项目，而当他作为资源服务器的时候，他是一个前后端分离的提供
API 服务的项目。那么这个时候 CSRF 就比较棘手了&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在前后端未分离的情况下，需要提交 post 请求的时候都要经过 &lt;code&gt;CSRF&lt;/code&gt;
认证才可以进行提交，所以你不能够简单粗暴的直接关闭
&lt;code&gt;CSRF&lt;/code&gt;，因为他可能带来安全问题。而在前后端分离的情况下我们使用了 JWT
非对称加密，所以是不存在 &lt;code&gt;CSRF&lt;/code&gt; 安全的问题的，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;就目前而言，我并没有找到一个好的方式来处理 POST 请求下的 CSRF
问题，一个方法就是，不使用 &lt;code&gt;@EnableResourceServer&lt;/code&gt;
自己编写一个资源服务器的相关配置。但是太过于复杂了。当然还有其他曲线救国的方法，比如自己定义一些过滤规则，或者自己手动加上
&lt;code&gt;csrf_token&lt;/code&gt; 等，不过都是有一定的代码量的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;个人认为最佳的实践就是，授权服务器提供部分资源服务器的功能，比如查询一些相关的数据，也就是只提供
GET
方法，而修改数据则是单独用一个资源服务器来完成。授权服务器只提供发放、校验令牌和一些信息的查询功能，&lt;strong&gt;不提供增删改等复杂的功能&lt;/strong&gt;，这样也能够减少授权服务器的压力。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_资源服务器安全配置顺序&quot; &gt;资源服务器安全配置顺序&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当我配置资源服务器的时候，会涉及到 spring security 相关的配置和 spring
security oauth resource server
相关的配置。这里需要非常注意他们的顺序问题：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;spring secruity 需要继承 &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt; ，order 为 100&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring security oauth resource server 需要继承
&lt;code&gt;ResourceServerConfigurerAdapter&lt;/code&gt;， order 为 3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他们两个都会对安全进行控制，所以要很好的调配。个人建议完全只交给一个去完成安全的控制，order
越小，优先级越高。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_安全退出&quot; &gt;安全退出&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;什么是安全退出呢？我个人的理解就是点击退出以后，它的 &lt;code&gt;token&lt;/code&gt;
完全失效了。举个栗子：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;小明在家登录了，获取了一个令牌 &lt;code&gt;access_token1&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;小明在家没有退出，去公司又登录了，获取到了同一个令牌 &lt;code&gt;access_token1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;晚上小明回家了，突然想起公司的电脑还保留自己的登录状态，但是又不能够叫别人帮忙退出登录或者删除登录状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;他只需要在家安全退出，那么 &lt;code&gt;access_token1&lt;/code&gt;
将会被完全销毁，在家、在公司，都不再保持登录状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;他在家安全退出后再次登录，获取了一个新的令牌 &lt;code&gt;access_token2&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;总结就是 ``&lt;strong&gt;一处退出，处处退出&lt;/strong&gt;&apos;&apos;。当然，这种模式只有在 &lt;strong&gt;授权码模式&lt;/strong&gt;
有效，非授权码模式客户端只要删除本地存储的令牌即可，但是没有办法做到安全退出的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在授权码模式下，我们登录是要在授权服务器这边进行登录的，所以在授权服务器这边存在用户相关的
&lt;code&gt;session&lt;/code&gt;，因此退出的时候我们也要来授权服务器这边进行一次退出，再去客户端那边进行一次退出。因此我们需要客户端那边传递一个退出完成的回调地址给我们进行跳转，我们主要有如下步骤：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;自定义退出端点&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;自定义退出页面&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;自定义退出成功处理器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring security 配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_自定义退出端点&quot; &gt;自定义退出端点&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;就是写一个控制器&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Controller
@RequestMapping(&quot;/oauth&quot;)
@RequiredArgsConstructor
public class OauthController {
    @GetMapping(&quot;/logout&quot;)
    public ModelAndView logoutView(
            @RequestParam(&quot;redirect_url&quot;) String redirectUrl,
            // 如果存在客户端 id，就是安全退出，否则只是普通退出
            @RequestParam(name = &quot;client_id&quot;, required = false) String clientId,
            // 登录用户的信息
            Principal principal) {
        if (Objects.isNull(principal)) {
            // 如果用户的 session 已经失效，那么授权服务器这边是已经没有用户信息了的
            // 直接重定向到回调地址
            return new ModelAndView(new RedirectView(redirectUrl));
        }
        ModelAndView view = new ModelAndView();
        // 视图名称
        view.setViewName(&quot;logout&quot;);
        /// 用户名称
        view.addObject(&quot;user&quot;, principal.getName());
        view.addObject(&quot;redirectUrl&quot;, redirectUrl);
        view.addObject(&quot;clientId&quot;, clientId);
        return view;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_自定义退出页面&quot; &gt;自定义退出页面&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;页面各有不同，可以参考我写的
&lt;a href=&quot;https://github.com/gzmuSoft/authorization-server/blob/master/src/main/resources/templates/logout.html&quot;&gt;logout.html&lt;/a&gt;。注意
POST 提交需要携带 &lt;code&gt;csrf_token&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_自定义退出成功处理器&quot; &gt;自定义退出成功处理器&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Slf4j
@Component
@AllArgsConstructor
public class AuthLogoutSuccessHandler implements LogoutSuccessHandler {
    private final @NonNull Oauth2Helper oauth2Helper;

    @Override
    public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException {
        String redirectUrl = request.getParameter(&quot;redirectUrl&quot;);
        // 一般来说回调地址是必填的，不会有为空的情况
        // 但是如果用户直接浏览器输入授权服务器的退出地址，就可能不存在
        // 所以需要判断一下，如果没有就让他重定向到登录页面
        if (StringUtils.isBlank(redirectUrl)) {
            redirectUrl = &quot;/oauth/login&quot;;
        }
        String clientId = request.getParameter(&quot;clientId&quot;);
        // 如果客户端 id 不为空，就是安全退出，需要清除内存或者redis中的当前用户的令牌信息
        if (StringUtils.isNoneBlank(clientId)) {
            oauth2Helper.safeLogout(clientId, authentication);
        }
        // 设置状态码和重定向地址
        response.setStatus(HttpStatus.FOUND.value());
        response.sendRedirect(redirectUrl);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安全推出的逻辑&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Component
@RequiredArgsConstructor
public class Oauth2Helper {
    private final TokenStore tokenStore;
    /**
     * 如果携带了 clientId，清除 令牌 信息
     * 实现 一处退出，处处退出
     *
     * @param clientId       clientId
     * @param authentication authentication
     */
    public void safeLogout(String clientId, Authentication authentication) {
        tokenStore
                .findTokensByClientIdAndUserName(clientId, authentication.getName())
                .forEach(oAuth2AccessToken -&amp;gt; {
                    tokenStore.removeAccessToken(oAuth2AccessToken);
                    tokenStore.removeRefreshToken(oAuth2AccessToken.getRefreshToken());
                });
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_spring_security_配置&quot; &gt;spring security 配置&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前面说道资源服务器安全配置的顺序，这里我是完全交给了 spring security
来管理，配置一下相关信息：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                // ......
                .formLogin()
                .loginPage(&quot;/oauth/login&quot;)
                .loginProcessingUrl(&quot;/authorization/form&quot;)
                .failureHandler(authFailureHandler)
                .successHandler(authSuccessHandler)
                .and()
                // 退出登录相关
                .logout()
                // 退出登录的 url，post 方法
                .logoutUrl(&quot;/oauth/logout&quot;)
                // 推出登录成功处理器
                .logoutSuccessHandler(authLogoutSuccessHandler);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_效果&quot; &gt;效果&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己写了一个简单的 demo，前后端分离，前端使用vue，后端就是spring
boot，授权服务器就是我们学校的授权服务器。&lt;strong&gt;注意看 URL 的变化&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/01/20logout.gif&quot; alt=&quot;logout&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_jwk_端点&quot; &gt;JWK 端点&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 spring secruity oauth 迁移 spring security
的过程中，我发现资源服务器和客户端都支持 jwk 端点了。所以引入一下 jwk
端点：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你可能需要引入如下依赖：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;group id: org.wso2.orbit.com.nimbusds
artifactId: nimbus-jose-jwt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加如下端点：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.RSAKey;
import lombok.AllArgsConstructor;
import lombok.NonNull;
import net.minidev.json.JSONObject;
import org.springframework.security.oauth2.provider.endpoint.FrameworkEndpoint;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.security.KeyPair;
import java.security.interfaces.RSAPublicKey;

@FrameworkEndpoint
@AllArgsConstructor
public class JwkEndpoint {
    // 这是前面 @Bean 添加的非对称加密的密钥对
    private final @NonNull KeyPair keyPair;

    @GetMapping(&quot;/.well-known/jwks.json&quot;)
    @ResponseBody
    public JSONObject getKey() {
        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
        // 注意 包 别引错
        RSAKey key = new RSAKey.Builder(publicKey).build();
        return new JWKSet(key).toJSONObject();
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，目前 JWK 是完全暴露出来的，个人认为还是需要进行 BASIC
认证的，但是目前还没找到在哪儿加的好。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_自定义端点路径&quot; &gt;自定义端点路径&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;目前 spring security oauth 提供的端点都是
&lt;code&gt;/oauth/token&lt;/code&gt;，&lt;code&gt;/oauth/token_key&lt;/code&gt;
之类的，如果我们需要自定义呢？配置如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Oauth2AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {
    @Override
    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
        // ......
        endpoints.pathMapping(&quot;/oauth/token&quot;, &quot;/auth/token&quot;);
        // ......
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_rbac_动态权限控制&quot; &gt;RBAC 动态权限控制&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;目前找到两种比较好的权限控制：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;自定义 &lt;code&gt;FilterInvocationSecurityMetadataSource&lt;/code&gt; 和
&lt;code&gt;AccessDecisionManager&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;自定义权限表达式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我使用的是第一种，安全配置如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private final FilterInvocationSecurityMetadataSource securityMetadataSource;
private final AuthAccessDecisionManager authAccessDecisionManager;
// ......
http
    .authorizeRequests()
    .withObjectPostProcessor(new ObjectPostProcessor&amp;lt;FilterSecurityInterceptor&amp;gt;() {
        @Override
        public &amp;lt;O extends FilterSecurityInterceptor&amp;gt; O postProcess(O o) {
            o.setSecurityMetadataSource(securityMetadataSource);
            o.setAccessDecisionManager(authAccessDecisionManager);
            return o;
        }
    }).anyRequest().permitAll()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;具体实现可以参见
&lt;a href=&quot;https://github.com/gzmuSoft/lesson-cloud/tree/master/lesson-cloud-auth/src/main/java/cn/edu/gzmu/auth/res&quot;&gt;res&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，在第二个项目中我使用了第二种方式，不过是基于 webflux 的，参见
&lt;a href=&quot;https://github.com/gzmuSoft/authorization-center-web/blob/master/src/main/kotlin/cn/edu/gzmu/center/config/ResourceConfig.kt&quot;&gt;ResourceConfig&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_传统项目的过渡&quot; &gt;传统项目的过渡&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如何对传统项目进行添加 token
解析呢？直接将他们作为一个资源服务器肯定是不行的，光是 CSRF
问题就是比较难处理的了。我们完全可以手动解析
TOKEN，比较好的一种方式就是自定义一个过滤器，放在
&lt;code&gt;org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter&lt;/code&gt;
之前进行用户的验证，如果请求头中有 &lt;code&gt;AUTHORIZATION&lt;/code&gt; 并且是以 &lt;code&gt;Bearer&lt;/code&gt;
开头的，那么就进行手动解析一下然后存在安全上下文之中就可以了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以参考我写的
&lt;a href=&quot;https://github.com/gzmuSoft/authorization-server/blob/master/src/main/java/cn/edu/gzmu/authserver/auth/res/SecurityMetadataSource.java#L141&quot;&gt;AuthToken&lt;/a&gt;
。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_测试&quot; &gt;测试&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;它的测试比较复杂，我只会写它的集成测试，对于单元测试涉及到的东西太多了，所以不会。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;集成测试中，就是向授权服务器获取
token，通过密码模式获取最为简单，授权码模式涉及到 &lt;code&gt;csrf_token&lt;/code&gt;
的问题比较复杂，并且不止一个请求。自己也写了一些以供参考&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;密码模式获取令牌： &lt;a href=&quot;https://github.com/gzmuSoft/lesson-cloud/blob/master/lesson-cloud-core/src/test/java/cn/edu/gzmu/integration/Oauth2RestTemplate.java&quot;&gt;Oauth2RestTemplate&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;授权码模式获取授权码： &lt;a href=&quot;https://github.com/xkcoding/spring-boot-demo/blob/master/spring-boot-demo-oauth/spring-boot-demo-oauth-authorization-server/src/test/java/com/xkcoding/oauth/oauth/AuthorizationCodeGrantTests.java#L66&quot;&gt;testCodeAcquisitionWithCorrectContext&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;个人觉得开发的时候用密码模式就好，目前我们的测试是继承
Oauth2RestTemplate 就可以获取到已经拥有 access_token 的restTemplate
直接请求数据即可。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这是目前能够想到的，其实在实践的过程中还有很多的坑，自己也被很多问题卡了很久。庆幸的是后面都过来了。其实预计这个是这个系列的最后一篇文章，但是计划赶不上变化，spring
security oauth 客户端和资源服务器已经开始迁移到了 spring security 5.2
里面去了。所以可能后面还要写一篇博客来学习吧，在实践的过程中确实发现其实迁移过后的资源服务器更加简单，并且定制起来非常容易。相比起原来其实好了很多。不管是
servlet 的也好，还是 webflux
的也好，都比以前高度可定制了很多。后面会继续更新的～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[上一篇中提到了 Reactive data Jpa 的一个强大功能：审计。而这篇文章则是对于 Repository implement 使用方式的总结。]]></description><link>https://zyue.wiki/articles/2020/04/13/1586760856276.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2020/04/13/1586760856276.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_从方法名派生查询&quot;&gt;从方法名派生查询&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_query_自定义&quot;&gt;使用 &lt;code&gt;@Query&lt;/code&gt; 自定义&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_reactivequerybyexampleexecutor_接口&quot;&gt;使用 &lt;code&gt;ReactiveQueryByExampleExecutor&lt;/code&gt; 接口&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_reactivequerydslpredicateexecutor&quot;&gt;使用 ReactiveQuerydslPredicateExecutor&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_自定义某个_repository_的复杂操作&quot;&gt;自定义某个 Repository 的复杂操作&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_类似于_jparepository_的_baserepository&quot;&gt;类似于 JpaRepository 的 BaseRepository&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_expandrepository&quot;&gt;&lt;code&gt;ExpandRepository&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_baserepository&quot;&gt;&lt;code&gt;BaseRepository&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_高级用法&quot;&gt;高级用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;上一篇中提到了 &lt;code&gt;Reactive data Jpa&lt;/code&gt;
的一个强大功能：审计。而这篇文章则是对于 Repository implement
使用方式的总结。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在我们使用 &lt;code&gt;Jpa&lt;/code&gt; 的时候，有如下几种个人觉得比较规范的方式来进行使用：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods&quot;&gt;从方法名称派生查询&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.at-query&quot;&gt;使用
&lt;code&gt;@Query&lt;/code&gt; 注解自定义&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;对于复杂的数据查询，可以使用
&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#query-by-example&quot;&gt;QueryByExampleExecutor&lt;/a&gt;
接口&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;对于复杂的数据操作，我们有
&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#specifications&quot;&gt;JpaSpecificationExecutor&lt;/a&gt;
接口，也可以使用
&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#core.extensions&quot;&gt;&lt;code&gt;Querydsl&lt;/code&gt;
扩展&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;我们如果需要职责分离，希望将数据库的操作 &lt;strong&gt;完全&lt;/strong&gt; 封装到 Repository
里面，我们可以 &lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.single-repository-behavior&quot;&gt;自定义某个
Repository 的复杂操作&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;当然，也可以自定义一个 &lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.customize-base-repository&quot;&gt;类似于
JpaRepository 的 BaseRepository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;直接使用 &lt;code&gt;EntityManager&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;有了以上这些方式就完全够我们大部分需求了。但是为什么还会有这篇文章呢？原因和上篇文章一样，因为
&lt;code&gt;Reactive&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于 Reactove Mongo
来说，传统的七点都是可以继续使用的，他们实现的方式和以前都是大同小异。我们可以直接使用
&lt;code&gt;ReactiveMongoOperations&lt;/code&gt; 来替代 &lt;code&gt;EntityManager&lt;/code&gt; 进行数据库的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_从方法名派生查询&quot; &gt;从方法名派生查询&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个是最为常用的一种，也是最为方便的使用方式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  /**
   * 通过 [ids] 查询
   */
  fun findAllByIdContaining(ids: List&amp;lt;String&amp;gt;): Flux&amp;lt;E&amp;gt;

  /**
   * 查询 isEnable 字段为 true 的数量
   */
  fun countAllByIsEnableTrue(): Mono&amp;lt;Long&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;唯一不同的就是返回值了，同时需要注意的是，在 Reactive
的环境中，他是没有办法获取到分页的对象的，文档中明确指出：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The &lt;code&gt;Page&lt;/code&gt; return type (as in &lt;code&gt;Mono&lt;/code&gt;) is not supported by reactive
repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 Reactive 仓库中 Page 类型的返回值（作为 Mono）是不被支持的。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们写出来的分页方法如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;/**
 * 分页查询，名称不能直接写 findAll，否则会报错，必须至少一个条件
 */
fun findAllByIsEnableIsTrue(pageable: Pageable): Flux&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那么分页怎么写呢？Kotlin 里面自然就可以用协程了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  override suspend fun page(pageable: Pageable): Page&amp;lt;E&amp;gt; {
    val content = repository.findAllByIsEnableIsTrue(pageable).collectList().awaitSingle()
    val count = repository.countAllByIsEnableTrue().awaitSingle()
    return PageImpl(content, pageable, count)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然你也可以用 &lt;code&gt;mono&lt;/code&gt; 将它包裹起来，返回值就变成了 &lt;code&gt;Mono&amp;lt;Page&amp;lt;E&amp;gt;&amp;gt;&lt;/code&gt;
了。如果不使用协程，需要操作两个不同类型的 Mono，我们可以使用 &lt;code&gt;Mono.zip&lt;/code&gt;
方法来完成&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  override suspend fun page(pageable: Pageable, entity: E): Mono&amp;lt;Page&amp;lt;E&amp;gt;&amp;gt; =
    Mono.zip(repository.findAllByIsEnableIsTrue(pageable).collectList(), repository.countAllByIsEnableTrue()) { content, count -&amp;gt;
      PageImpl(content, pageable, count)
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用起来和以前方式还是有些许区别。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用_query_自定义&quot; &gt;使用 &lt;code&gt;@Query&lt;/code&gt; 自定义&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这种就没啥可以说的了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  /**
   * Get menu by [roles].
   * If one of the lines contains one of the [roles], will match.
   */
  @Query(&quot;{ &apos;roles&apos;: { &apos;\$in&apos;: ?0 }}&quot;)
  fun searchByRoles(roles: List&amp;lt;Long&amp;gt;): Flux&amp;lt;Route&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，在以前，我们可以在里面写更新、创建的操作，但是在 Mongo
中是不可以的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用_reactivequerybyexampleexecutor_接口&quot; &gt;使用 &lt;code&gt;ReactiveQueryByExampleExecutor&lt;/code&gt; 接口&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们只需要构建一个 &lt;code&gt;Example&lt;/code&gt; 过去就可以查询了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;val all: Flux&amp;lt;User&amp;gt; = repository.findAll(Example.of(entity));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是他却没有提供分页的接口，例如我想要的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;fun findAll(example: Example&amp;lt;E&amp;gt;, pageable: Pageable): FLux&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他就没有，后面会说咋自定义。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然还有一种用法，对于动态条件匹配，我们可以预先准备一个自定义的匹配器
&lt;a href=&quot;https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#query-by-example.matchers&quot;&gt;ExampleMatcher&lt;/a&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  private fun getPageMatcher() = ExampleMatcher.matching()
      // 以下字段模糊匹配
      .withMatcher(&quot;name&quot;, ExampleMatcher.GenericPropertyMatcher().contains())
      .withMatcher(&quot;spell&quot;, ExampleMatcher.GenericPropertyMatcher().contains())
      .withMatcher(&quot;remark&quot;, ExampleMatcher.GenericPropertyMatcher().contains())
      // 忽略为 null 字段
      .withIgnoreNullValues()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;也是可以满足我们部分需求了的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用_reactivequerydslpredicateexecutor&quot; &gt;使用 ReactiveQuerydslPredicateExecutor&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Reactive 是没有 &lt;code&gt;Specification&lt;/code&gt; 的，所以只能是Spring 是整合的
&lt;a href=&quot;https://http://www.querydsl.com%22&quot;&gt;Querydsl&lt;/a&gt; ，值得注意的是，这个是在
&lt;strong&gt;2.2&lt;/strong&gt; 版本以后才引入的支持，在之前的版本，是不支持 Reactive
的。所以需要引入以下它的依赖：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;groupId：com.querydsl
artifactId：querydsl-apt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;它的使用流程先生成 &lt;code&gt;@Entity&lt;/code&gt; 注解下的实体类，编译以后会生成 &lt;code&gt;Q&lt;/code&gt;
开头的实体类，通过这个实体类进行 DSL 操作。不过他目前只支持 maven
插件以及 gradle 5 以下的插件注解生成，见
&lt;a href=&quot;https://github.com/ewerk/gradle-plugins&quot;&gt;github&lt;/a&gt; ：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Plugin&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;≥ 2.1&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;≥ 3.3&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;≥ 5.0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;annotation-processor-plugin&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≤1.0.3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≥1.0.4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ø&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;artifactory-deb-publish-plugin&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≤1.0.1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≥1.0.2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ø&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;auto-value-plugin&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≤1.0.7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≥1.0.8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ø&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;dagger-plugin&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≤1.0.7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≥1.0.8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ø&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;integration-test-plugin&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≤1.0.8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≥1.0.9&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ø&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;jaxb2-plugin&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≤1.0.2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≥1.0.3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ø&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;querydsl-plugin&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≤1.0.7&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;≥1.0.8&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;INCUBATING&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于 Gradle 大于 5.0
的是正在开发中的，所以目前是无法进行注解生成的，不过
&lt;a href=&quot;https://stackoverflow.com/questions/54134455/java-11-querydsl-4-gradle-5-springboot-2-1-not-generating-qclasses&quot;&gt;stackoverflow&lt;/a&gt;
上面有些许解决办法，但我尚未尝试。``曲线救国&apos;&apos; 的方式就是使用 IDEA
的注解处理器，如果是 Kotlin 的就可以使用 Kapt
注解处理器。当然这里就不做演示了，具体可以参见
&lt;a href=&quot;http://www.querydsl.com/static/querydsl/latest/reference/html/&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_自定义某个_repository_的复杂操作&quot; &gt;自定义某个 Repository 的复杂操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这种方式个人觉得是不太好用的一种方式，有以下原因&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;指定定义一个 Repository 的复杂操作&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;需要实现那个 Repository
接口，那么就必须实现它的所有方法，就会失去根据名称派生查询优势&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这种比较鸡肋，比如有几个 Repository 具有同一个方法，但是其他的
Repository
又没有，同时这个方法又没法自动推断或者是更新、删除等操作，这个时候才会抽出一个部分共用的的
Repository 来实现。但是有个问题就是几个 Repsitory
对应的实体都是不一样的，那么抽出来的实体只能是 BaseEntity
的子类，也就是公共实体，而 BaseEntity 又是所有 Entity
的父类，那就是通用的了，那我为啥还要抽出来=-=&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以个人想到的只有一个场景，你有一个 Repsoitory，但是这个 Repsoitory
的部分方法需要 Jpa
通过方法名称派生查询，部分方法需要自己去实现，那么就可以单独写一个去用了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个实现起来很简单&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;interface CustomizedUserRepository {
  fun someCustomMethod(User user);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;class CustomizedUserRepositoryImpl implements CustomizedUserRepository {

  fun someCustomMethod(User user) {
    // Your custom implementation
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意：实现类必须以 &lt;code&gt;Impl&lt;/code&gt;
结尾&lt;/strong&gt;，如果不是需要修改注解参数 &lt;code&gt;@EnableReactiveMongoRepositories(repositoryImplementationPostfix = &quot;Impl&quot;)&lt;/code&gt;
，默认是 &lt;code&gt;Impl&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_类似于_jparepository_的_baserepository&quot; &gt;类似于 JpaRepository 的 BaseRepository&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这种方式个人觉得非常常用，在我的项目中我写了两个 &lt;code&gt;BaseRepository&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;ExpandRepository&lt;/code&gt;：用来自定义各种实现的方法，继承
&lt;code&gt;ReactiveMongoRepository&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;BaseRepository&lt;/code&gt;： 用来通过方法名派生查询的方法，继承
&lt;code&gt;ExpandRepository`和 `ReactiveQuerydslPredicateExecutor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就能够很方便的定义许多操作。来说说他们的实现吧&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_expandrepository&quot; &gt;&lt;code&gt;ExpandRepository&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接口很简单，这里我们写一个他 &lt;code&gt;ReactiveQueryByExampleExecutor&lt;/code&gt;
没有提供的方法，也就是分页&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;@NoRepositoryBean
interface ExpandRepository&amp;lt;E: BaseEntity&amp;lt;E&amp;gt;&amp;gt;: ReactiveMongoRepository&amp;lt;E, String&amp;gt; {

  /**
   * Find all by [example] and [pageable].
   */
  fun findAll(example: Example&amp;lt;E&amp;gt;, pageable: Pageable): Flux&amp;lt;E&amp;gt;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后定一个实现类&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;class ExpandRepositoryImpl&amp;lt;E : BaseEntity&amp;lt;E&amp;gt;&amp;gt;(
    private val entityInformation: MongoEntityInformation&amp;lt;E, String&amp;gt;,
    private val mongoOperations: ReactiveMongoOperations
) : SimpleReactiveMongoRepository&amp;lt;E, String&amp;gt;(entityInformation, mongoOperations), ExpandRepository&amp;lt;E&amp;gt; {

  override fun findAll(example: Example&amp;lt;E&amp;gt;, pageable: Pageable): Flux&amp;lt;E&amp;gt; =
      mongoOperations.find(
          Query(Criteria().alike(example))
              .collation(entityInformation.collation)
              .with(pageable),
          example.probeType,
          entityInformation.collectionName
      )

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最后修改注解就可以了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;@EnableReactiveMongoRepositories(repositoryBaseClass = ExpandRepositoryImpl::class)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_baserepository&quot; &gt;&lt;code&gt;BaseRepository&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这就是一个通过方法名或者 &lt;code&gt;@Query&lt;/code&gt; 派生的接口&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;@NoRepositoryBean
interface BaseRepository&amp;lt;E : BaseEntity&amp;lt;E&amp;gt;&amp;gt; : ExpandRepository&amp;lt;E&amp;gt;, ReactiveQuerydslPredicateExecutor&amp;lt;E&amp;gt; {

  fun findAllByIdContaining(ids: List&amp;lt;String&amp;gt;): Flux&amp;lt;E&amp;gt;

  fun countAllByIsEnableTrue(): Mono&amp;lt;Long&amp;gt;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_高级用法&quot; &gt;高级用法&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，还有一个高级用法，就是我们可以自定义它的工厂以及工厂 Bean&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;/**
 * This bean will be injected in [cn.edu.gzmu.university.common.MongodbConfig].
 * It will give a [cn.edu.gzmu.university.common.base.ExpandRepository] implement and
 * a [ExpandMongoRepositoryFactory] to create repository.
 *
 * @author &amp;lt;a href=&quot;https://echocow.cn&quot;&amp;gt;EchoCow&amp;lt;/a&amp;gt;
 * @date 2020/4/12 下午7:14
 */
class ExpandRepositoryFactoryBean&amp;lt;T : Repository&amp;lt;E, String&amp;gt;, E : BaseEntity&amp;lt;E&amp;gt;&amp;gt;(
    repositoryInterface: Class&amp;lt;out T&amp;gt;
) : ReactiveMongoRepositoryFactoryBean&amp;lt;T, E, String&amp;gt;(repositoryInterface) {

  /**
   * Get customize factory instance.
   */
  override fun getFactoryInstance(operations: ReactiveMongoOperations): RepositoryFactorySupport =
      ExpandMongoRepositoryFactory&amp;lt;E&amp;gt;(operations)

  @Suppress(&quot;UNCHECKED_CAST&quot;)
  private class ExpandMongoRepositoryFactory&amp;lt;E : BaseEntity&amp;lt;E&amp;gt;&amp;gt;(
      private val mongoOperations: ReactiveMongoOperations
  ) : ReactiveMongoRepositoryFactory(mongoOperations) {

    /**
     * Get our customize repository base class.
     */
    override fun getRepositoryBaseClass(metadata: RepositoryMetadata): Class&amp;lt;*&amp;gt; = ExpandRepositoryImpl::class.java

    /**
     * Get target repository.
     */
    override fun getTargetRepository(information: RepositoryInformation): Any {
      val entityInformation: MongoEntityInformation&amp;lt;*, Serializable&amp;gt; = getEntityInformation(information.domainType)
      return ExpandRepositoryImpl(entityInformation as MongoEntityInformation&amp;lt;E, String&amp;gt;, mongoOperations)
    }

  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，不要忘记添加如下注解：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;@EnableReactiveMongoRepositories(repositoryFactoryBeanClass = ExpandRepositoryFactoryBean::class)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个是最简单的一个实现。&lt;code&gt;ExpandRepositoryFactoryBean&lt;/code&gt; 会注入一个
&lt;code&gt;ExpandMongoRepositoryFactory&lt;/code&gt; ，然后他就可以生产我们的 repository base
class 来完成自定义 repository
实现。为什么需要这个高级用法呢？一个最明显的栗子就是在它的父类
&lt;code&gt;ReactiveMongoRepositoryFactoryBean&lt;/code&gt; 中，有一个创建工厂的方法：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
protected RepositoryFactorySupport createRepositoryFactory() {

    RepositoryFactorySupport factory = getFactoryInstance(operations);

    if (createIndexesForQueryMethods) {
        factory.addQueryCreationListener(new IndexEnsuringQueryCreationListener(
            collectionName -&amp;gt; IndexOperationsAdapter.blocking(operations.indexOps(collectionName))));
    }

    return factory;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;createRepositoryFactory&lt;/code&gt; 是用来创建工厂的，他在这里加入了一个
&lt;code&gt;IndexEnsuringQueryCreationListener&lt;/code&gt;，他会去检查
&lt;code&gt;RepositoryQuery&lt;/code&gt;，并且为它的属性创建索引。那么我们自然可以模仿他去创建一些其他的监听器并作出一些实现。再比如我们可以通过
&lt;code&gt;addRepositoryProxyPostProcessor&lt;/code&gt; 添加
&lt;code&gt;RepositoryProxyPostProcessor&lt;/code&gt;，在进行代理之前操作工厂。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时我们也可以通过工厂的 &lt;code&gt;getQueryLookupStrategy&lt;/code&gt;
方法自定义工厂的查询查找策略，默认是 &lt;code&gt;MongoQueryLookupStrategy&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Override
    protected Optional&amp;lt;QueryLookupStrategy&amp;gt; getQueryLookupStrategy(@Nullable Key key,
            QueryMethodEvaluationContextProvider evaluationContextProvider) {
        return Optional.of(new MongoQueryLookupStrategy(operations, evaluationContextProvider, mappingContext));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这些都是一些可以进行自定义的高级操作。在某些场合还是非常有用的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Jpa 实在是太过方便，除了上面几种我们还可以直接注入
&lt;code&gt;ReactiveMongoOperations&lt;/code&gt;、&lt;code&gt;ReactiveMongoTemplate&lt;/code&gt;
来直接操作数据库也是十分方便，事实上 Repository
他们的底层其实也就是这两样。总的来说 Jpa
给我们提供太多的方便，对于许多地方的自定义配置都留了很大很大的空间。个人喜欢
Jpa 比喜欢 Mybatis 好多了！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[相信很多人都知道 Jpa 的一个非常强大的功能：审计。我们就来聊聊他。]]></description><link>https://zyue.wiki/articles/2020/04/09/1586446987932.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2020/04/09/1586446987932.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_一般情况&quot;&gt;一般情况&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_reactive_mongodb_auditing&quot;&gt;Reactive Mongodb Auditing&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;相信很多人都知道 Jpa 的一个非常强大的功能：审计。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;简单地说就是你提供一些审计的元数据，Jpa
会给你自动根据这些元数据去填充你相应的信息。在它的实现中，其元数据就是我们的注解或者接口。通过注解或者接口，Jpa
可以更好的自动填充你的实体类信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class Customer {

  /**
   * 创建时间
   */
  @CreatedDate
  private LocalDateTime createTime = LocalDateTime.now();

  /**
   * 创建用户
   */
  @CreatedBy
  private String createUser;

  /**
   * 最后修改时间
   */
  @LastModifiedDate
  private LocalDateTime modifyTime = LocalDateTime.now();

  /**
   * 最后修改用户
   */
  @LastModifiedBy
  private String modifyUser;

  // ...... 其他字段
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这四个字段如果在每个实体类创建、修改的时候手动设置无疑是非常麻烦的事情。但是我们通过上面的注解就可以实现
Jpa 的审计，让他帮我们去填充。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_一般情况&quot; &gt;一般情况&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在传统模式中，配合 Spring Security
去实现这一个过程是很简单的，只需要如下几步：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;为实体类添加审计注解&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;@CreatedDate&lt;/code&gt; 创建时间&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;@CreatedBy&lt;/code&gt; 创建用户&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;@LastModifiedDate&lt;/code&gt; 最后修改时间&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;@LastModifiedBy&lt;/code&gt; 最后修改用户&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;启动/配置类添加 &lt;code&gt;@EnableJpaAuditing&lt;/code&gt; 开启审计&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;实体类添加 &lt;code&gt;@EntityListeners(AuditingEntityListener.class)&lt;/code&gt;
注解（在后面的版本中可以省略）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就可以自动审计了，如果是自定义用户实体了的，需要自定义一下获取用户的方式，例如：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Configuration
public class UserAuditorHandle implements AuditorAware&amp;lt;String&amp;gt; {
    @NotNull
    @Override
    public Optional&amp;lt;String&amp;gt; getCurrentAuditor() {
        return Optional.ofNullable(SecurityContextHolder.getContext())
                .map(SecurityContext::getAuthentication)
                .map(Principal::getName);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是这是在传统模式下，使用 servlet 的阻塞式情况下去完成的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_reactive_mongodb_auditing&quot; &gt;Reactive Mongodb Auditing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用依赖：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;org.springframework.boot:spring-boot-starter-data-mongodb-reactive&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近在实践响应式微服务的时候就发现代码审计是存在问题的，在 Reactive
的环境下，需要下面几步：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;同传统模式，为实体类添加审计注解&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;启动类添加 &lt;code&gt;@EnableMongoAuditing&lt;/code&gt; 开启审计&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们开启了部分的代码审计，这种模式下只会自动添加 &lt;em&gt;时间&lt;/em&gt;
类型的代码审计。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是我们如果需要用户的审计如何使用呢？&lt;code&gt;AuditorAware&lt;/code&gt; 是不存在
&lt;code&gt;Spring Security Reactive&lt;/code&gt; 版本的。对于时间的审计，它存在一个
&lt;code&gt;ReactiveAuditingEntityCallback&lt;/code&gt; 进行审计。官方也在 jira 中提出提出了
&lt;a href=&quot;https://jira.spring.io/browse/DATACMNS-1231&quot;&gt;Auditing should support
reactive security
context&lt;/a&gt;，但是至今为止快三年了，都没有去做。不过他倒是给出了一个解决方案，使用
&lt;code&gt;EntityCallbacks&lt;/code&gt; 来完成相应的 Reactive 审计。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;官网中给出了三个 &lt;code&gt;EntityCallbacks&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注： Jpa 在执行任何操作之前所有的实体类都会转化为 &lt;code&gt;org.bson.Document&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 19%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Callback&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Method&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Order&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reactive/BeforeConvertCallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;onBeforeConvert(T entity, String collection)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;在实体类转化为`org.bson.Document` 之前进行调用。&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;Ordered.LOWEST_PRECEDENCE&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reactive/AuditingEntityCallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;onBeforeConvert(Object entity, String collection)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;标记审计的实体是
&lt;em&gt;创建&lt;/em&gt; 还是 &lt;em&gt;修改&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reactive/BeforeSaveCallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;onBeforeSave(T entity, org.bson.Document target, String collection)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;在保存实体之前调用。可以修改要持久化的目标
&lt;code&gt;Document&lt;/code&gt;，其中包含所有映射的实体信息。&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;Ordered.LOWEST_PRECED&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其中第一、三个为接口，第二个是一个类，就是它来完成时间的审计的。如何选择呢？总结了一下他们的适用场景&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 35%;&quot;&gt;
&lt;col style=&quot;width: 65%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Callback&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;适用场景&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reactive/BeforeConvertCallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;所有的操作之前都会调用。可以对目标进行统一处理，只能获取到转化前的实体类。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reactive/AuditingEntityCallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;他是第一种的接口的一个实现，在没有明确的字段能够识别当前实体是新建还是修改的情况下，可以参照这个实现类进行区分和修改。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Reactive/BeforeSaveCallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;只有使用 &lt;code&gt;save&lt;/code&gt;
方法之前会调用到这个方法，同时他可以对转化后的 &lt;code&gt;Document&lt;/code&gt; 进行操作。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;很明显，我们需要填充用户的审计信息但是不需要操作
&lt;code&gt;Document&lt;/code&gt;，那么就是需要统一处理，同时我可以根据 id
去判断是否是新增的实体，所以就直接使用第一个了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Kotlin 版本&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  @Bean
  @Order(99)    // 可选
  // 因为强转了会有警告，抑制一下，又因为实体类是 Java 的，他会要求我使用 = 访问属性
  // 但是 Java 代码是不可以的，所以同样抑制下
  @Suppress(&quot;UsePropertyAccessSyntax&quot;, &quot;USELESS_CAST&quot;)
  fun userAuditingHandler() =
    ReactiveBeforeConvertCallback { entity: Any, _: String -&amp;gt;
      ReactiveSecurityContextHolder.getContext()
        .map { context -&amp;gt; context.authentication.principal }
        // 这里根据你的授权机制去修改，强转为对应的授权对象
        .map { it as Jwt }
        .map { it.claims[&quot;user_id&quot;].toString() }
        .map {
          val id = (entity as BaseEntity).getId()
          if (id == null) entity.setCreateUser(it)
          else entity.setModifyUser(it)
          // 一定要强转回去，kotlin 里面 as 以后，下面代码的所有类型就全改变了
          // 不然子类实体的字段会丢失
          entity as Any
        }.defaultIfEmpty(entity)
      }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Java 版本&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Bean
public ReactiveBeforeConvertCallback&amp;lt;Objects&amp;gt; userAuditingHandler() {
    return (entity, _) -&amp;gt;
        ReactiveSecurityContextHolder.getContext()
            .map(securityContext -&amp;gt; {
                // 这里根据你的授权机制去修改，强转为对应的授权对象并获取用户信息
                Jwt jwt = (Jwt) securityContext.getAuthentication().getPrincipal();
                return jwt.getClaims().get(&quot;user_id&quot;).toString();
            })
            .map(userId -&amp;gt; {
                String id = ((BaseEntity) entity).getId();
                if (id == null) {
                    ((BaseEntity) entity).setCreateUser(id);
                } else {
                    ((BaseEntity) entity).setModifyUser(id);
                }
                return entity;
            }).defaultIfEmpty(entity);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;值得注意的是，对于 &lt;code&gt;ReactiveBeforeConvertCallback&lt;/code&gt;，其 &lt;code&gt;entity&lt;/code&gt;
的类型是什么，他就会拦截什么类型的实体&lt;/strong&gt;。这里是
&lt;code&gt;Any/Object&lt;/code&gt;，那么他就会拦截所有的实体。同理
&lt;code&gt;Reactive/BeforeSaveCallback&lt;/code&gt; 接口也是一样的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;代码审计能够帮我节省不少麻烦事儿的。这次看了他审计的一些源码，其实一开始准备使用第二种他提供的实例方式来实现的，但是发现有几个难点。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;ReactiveAuditingEntityCallback&lt;/code&gt; 中核心就是 &lt;code&gt;auditingHandlerFactory&lt;/code&gt;
里面的 &lt;code&gt;IsNewAwareAuditingHandler&lt;/code&gt;，但是他需要一个 &lt;code&gt;PersistentEntities&lt;/code&gt;
传入，他需要一个 &lt;code&gt;MappingContext&lt;/code&gt;
上下文对象去创建。这就很麻烦了（我不会告诉你我找不到这个上下文怎么用。。。），所以在自己能够区分是新增还是编辑的情况下大可以自己实现一个简单版本的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[月初的时候 Kotlin 1.3.70 正式发布 这不得不说是一个非常好的消息，带来的不仅是标准库新的功能，同时让我们写起来也更加舒服，现在对.gradle.kts 更加友好了.]]></description><link>https://zyue.wiki/articles/2020/03/11/1583919686142.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2020/03/11/1583919686142.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_json_nonstric&quot;&gt;Json.nonstric&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_serialdescriptor&quot;&gt;SerialDescriptor&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_bultins_package&quot;&gt;bultins package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;月初的时候 Kotlin 1.3.70
&lt;a href=&quot;https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/&quot;&gt;正式发布&lt;/a&gt;了，这不得不说是一个非常好的消息，带来的不仅是标准库新的功能，同时让我们写起来也更加舒服，现在对
&lt;code&gt;.gradle.kts&lt;/code&gt;
也更加友好了，具体可以查看它的发布文档。随之而然的，就是相应的生态进行更新了，不得不提的就是
 &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization&quot;&gt;kotlinx.serialization&lt;/a&gt;
这个库了。他为我们序列化提供了极大的方便，而他与 1.3.70 对应的版本是
 &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization/blob/master/CHANGELOG.md#0200—​2020-03-04&quot;&gt;0.20.0&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你还在使用 v0.14.0 版本，可能会报以下错误：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;java.lang.NoSuchMethodError: No direct method (ILkotlinx/serialization/SerializationConstructorMarker;)V in class Lcom/xxxx/common/core/Model; or its super classes (declaration of &apos;com.xxxx.common.core.Model&apos; appears in /data/app/com.xxxx.demo-PV-n86-hzEl-eyc8UqbACQ==/base.apk!classes7.dex)
10-11 15:30:10.048 E/AndroidRuntime(25760): at com.xxxx.reg.data.User.(Unknown Source:9)
10-11 15:30:10.048 E/AndroidRuntime(25760): at com.xxxx.reg.data.User$$serializer.deserialize(Unknown Source:624)
10-11 15:30:10.048 E/AndroidRuntime(25760): at com.xxxx.reg.data.User$$serializer.deserialize(User.kt:17)
10-11 15:30:10.048 E/AndroidRuntime(25760): at kotlinx.serialization.json.internal.PolymorphicKt.decodeSerializableValuePolymorphic(Polymorphic.kt:33)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;升级到 v0.20.0 就可以了。当然在这个版本中发生了不小的改变，将它过期的
api 总结一下。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_json_nonstric&quot; &gt;Json.nonstric&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;默认情况下，他开启 &lt;code&gt;nonstric&lt;/code&gt; 模式的，也就是解析的 &lt;code&gt;key&lt;/code&gt;
必须完全符合实体类的要求，不能够多出其他的字段。但是很多时候我们不希望这样，在以前的版本中是这样配置的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;private val json = Json(JsonConfiguration(strictMode = false))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是在 0.20.0 中，已经不能够这样配置了，参见 &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization/blob/master/runtime/commonMain/src/kotlinx/serialization/json/JsonConfiguration.kt#L112&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;strictMode&lt;/code&gt; 分割为 &lt;code&gt;ignoreUnknownKeys&lt;/code&gt;、&lt;code&gt;isLenient`和
`serializeSpecialFloatingPointValues&lt;/code&gt;，&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;unquoted&lt;/code&gt; 重命名为 &lt;code&gt;unquotedPrint&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在新的版本中我们需要如下使用：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;private val json = Json(
  JsonConfiguration.Default.copy(
    ignoreUnknownKeys = true,
    isLenient = true,
    serializeSpecialFloatingPointValues = true,
    useArrayPolymorphism = true
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_serialdescriptor&quot; &gt;SerialDescriptor&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们在对某些数据结构进行序列化和反序列化的时候应该写过如下的代码：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;@Serializer(forClass = LocalDateTime::class)
class LocalDateTimeSerializer : KSerializer&amp;lt;LocalDateTime&amp;gt; {

  override val descriptor: SerialDescriptor = StringDescriptor
  private val formatter: DateTimeFormatter =
    DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;).withLocale(Locale.SIMPLIFIED_CHINESE)

  override fun deserialize(decoder: Decoder): LocalDateTime =
    LocalDateTime.parse(decoder.decodeString(), formatter)

  override fun serialize(encoder: Encoder, obj: LocalDateTime) {
    encoder.encodeString(formatter.format(obj))
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过实现 &lt;code&gt;serialize&lt;/code&gt; 和 &lt;code&gt;descriptor&lt;/code&gt;
方法就可以完成自定义的序列化。但是在 0.20.0 版本中 &lt;code&gt;StringDescriptor&lt;/code&gt;
被标记为过时了，相应的以下基本数据类型的都被标记了过时：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;IntDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;UnitDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;BooleanDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;ByteDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;ShortDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;LongDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;FloatDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;DoubleDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;CharDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;StringDescriptor&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;源码中的注解如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;@Deprecated(message = message,
    replaceWith = ReplaceWith(&quot;PrimitiveDescriptor(\&quot;yourSerializerUniqueName\&quot;, PrimitiveKind.STRING)&quot;))
object StringDescriptor : Migration()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要使用 &lt;code&gt;PrimitiveDescriptor&lt;/code&gt;
来进行替代，参考 &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization/blob/146a0d08ed87a97cf5435a89fcafd3aa639c106e/runtime/commonMain/src/kotlinx/serialization/SerialDescriptorBuilder.kt#L60&quot;&gt;github&lt;/a&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;override val descriptor: SerialDescriptor = PrimitiveDescriptor(&quot;LocalDateTimeTz&quot;, PrimitiveKind.STRING)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;需要注意的是这个字符串的 &lt;code&gt;key&lt;/code&gt;
需要是唯一的。不然的话可能会造成他无法找到等问题。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_bultins_package&quot; &gt;bultins package&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;另外，一些功能已移至 bultins package 包。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;import kotlinx.serialization.list
User.serializer().list
// 替换为
import kotlinx.serialization.builtins.list
User.serializer().list&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;import kotlinx.serialization.internal.StringSerializer
StringSerializer()
// 替换为
import kotlinx.serialization.builtins.serializer
String.serializer()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[vert.x 一直是一个维护非常积极的项目，从诞生至今一直如此。现在他的 GitHub 上面 open 的 issues 也只有一百多个，保持积极处理的状态，而不是堆积一堆。并在在提出相关 issue 以后，都会积极的回应以及处理。]]></description><link>https://zyue.wiki/articles/2020/02/01/1580550298345.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2020/02/01/1580550298345.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_kotlin_dsl_改造项目&quot;&gt;使用 Kotlin DSL 改造项目&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_plugins&quot;&gt;plugins&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_repository&quot;&gt;repository&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_ext&quot;&gt;ext&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_application&quot;&gt;application&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_compilekotlincompiletestkotlin&quot;&gt;compileKotlin/compileTestKotlin&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_shadowjar&quot;&gt;shadowJar&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_test&quot;&gt;test&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_run&quot;&gt;run&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_最终结果&quot;&gt;最终结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_整合_vertx_plugin&quot;&gt;整合 vertx-plugin&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_plugins_2&quot;&gt;plugins&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_简单变化&quot;&gt;简单变化&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_dependencies_2&quot;&gt;dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_新增&quot;&gt;新增&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_最终结果_2&quot;&gt;最终结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_整合_vertx_boot&quot;&gt;整合 vertx-boot&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_添加依赖&quot;&gt;添加依赖&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_添加配置文件&quot;&gt;添加配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_运行&quot;&gt;运行&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_idea_运行&quot;&gt;IDEA 运行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_其他&quot;&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;vert.x 一直是一个维护非常积极的项目，从诞生至今一直如此。现在他的 GitHub
上面 open 的 issues
也只有一百多个，保持积极处理的状态，而不是堆积一堆。并在在提出相关 issue
以后，都会积极的回应以及处理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 vert.x 中，它的一大特点就是 &lt;code&gt;Verticle&lt;/code&gt;。每一个 &lt;code&gt;Verticle&lt;/code&gt;
都有自己的功能，各司其职。并且，他们都可以是事件驱动的。今天我们的主要任务就是改善我们在官网上面生成下来的
vert.x 项目，通过使用插件来让我们的项目运行简单、部署简单。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们主要用到如下两款插件：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jponge/vertx-gradle-plugin&quot;&gt;vertx-plugin&lt;/a&gt;：这是官方提供的
vert.x 的 gradle
插件。&lt;strong&gt;主要功能是提供完整的依赖管理，以及轻松整合https://github.com/johnrengelman/shadow[shadow]
,https://docs.gradle.org/current/userguide/application_plugin.html[application]
等构建工具&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jponge/vertx-boot&quot;&gt;vertx-boot&lt;/a&gt;：这虽然不是官方提供的，但是开发者依旧是核心的官方人员。&lt;strong&gt;主要功能是通过配置文件的方式来配置启动我们的`Verticle`，不需要在代码中写死或者命令行传参。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;目前（2020-2-1）这两款插件一直在积极的维护中。通过这两款插件，能够极大的让我们的
vert.x 应用更加灵活，更容易部署。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，现在我开始向 Koltin 转型，所以以下的配置均是使用 Kotlin DSL
进行书写的 Gradle 文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以主要分为三部分：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;修改项目初始化的文件，将 Groovy DSL 的 Gradle 文件 修改为 Kolitn DSL
的 Gradle 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;整合 &lt;code&gt;vertx-plugin&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;整合 &lt;code&gt;vertx-boot&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2020.2.6 更新：&lt;code&gt;vert.x&lt;/code&gt; 中移除了 deploy 的几个关于类加载的参数，参见
&lt;a href=&quot;https://github.com/eclipse-vertx/vert.x/issues/3274&quot;&gt;ISSUE&lt;/a&gt;。&lt;code&gt;vertx-boot&lt;/code&gt;
还没有对其更新后的参数进行完整性支持，所以如果使用 &lt;code&gt;vert.x 4&lt;/code&gt; 版本， -
对于 &lt;code&gt;Kotlin&lt;/code&gt; 会造成 &lt;code&gt;NoSuchMethodError&lt;/code&gt; 错误。 - 对于 &lt;code&gt;Java&lt;/code&gt;
会提示方法过期。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要从 &lt;a href=&quot;https://start.vertx.io/&quot;&gt;vert.x starter&lt;/a&gt;
上面初始化我们的项目。目前提供的有如下四个版本：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;3.8.5&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;3.7.1&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;4.0.0-milestone4&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;4.0.0-SNAPSHOT&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我并不是用在生产环境上的，所以大可以使用 4.0.0
版本。而我不选择使用里程碑版本，使用快照版本即可。版本间的具体差别请自行谷歌。值得注意的是，3.x.x
版本到 4.x.x 版本是大版本更新，有了很多的改变。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时选择使用 Kotlin 、Gradle 来创建项目，组件选择使用
Web，其他随意，高级选项可以选择 Jdk11。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用_kotlin_dsl_改造项目&quot; &gt;使用 Kotlin DSL 改造项目&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下载初始化后的项目以后，我们的 &lt;code&gt;build.gradle&lt;/code&gt; 大概是这样子的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;plugins {
  id &apos;org.jetbrains.kotlin.jvm&apos; version &apos;1.3.20&apos;
  id &apos;application&apos;
  id &apos;com.github.johnrengelman.shadow&apos; version &apos;5.0.0&apos;
}

group = &apos;cn.edu.gzmu.center&apos;
version = &apos;1.0.0-SNAPSHOT&apos;

repositories {
  maven { url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos; }
  maven {
    url &apos;https://oss.sonatype.org/content/repositories/snapshots&apos;
    mavenContent {
      snapshotsOnly()
    }
  }
  mavenCentral()
  jcenter()
}

ext {
  kotlinVersion = &apos;1.3.20&apos;
  vertxVersion = &apos;4.0.0-SNAPSHOT&apos;
  junitJupiterEngineVersion = &apos;5.4.0&apos;
}

application {
  mainClassName = &apos;io.vertx.core.Launcher&apos;
}


def mainVerticleName = &apos;cn.edu.gzmu.center.MainVerticle&apos;
def watchForChange = &apos;src/**/*&apos;
def doOnChange = &apos;./gradlew classes&apos;

dependencies {
  implementation &quot;io.vertx:vertx-web-client:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-auth-jwt:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-auth-oauth2:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-unit:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-web:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-config:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-config-yaml:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-pg-client:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-consul-client:$vertxVersion&quot;
  implementation &quot;io.vertx:vertx-lang-kotlin:$vertxVersion&quot;

  testImplementation &quot;io.vertx:vertx-junit5:$vertxVersion&quot;
  testRuntimeOnly &quot;org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion&quot;
  testImplementation &quot;org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion&quot;
}

compileKotlin {
  kotlinOptions.jvmTarget = &apos;1.8&apos;
}

compileTestKotlin {
  kotlinOptions.jvmTarget = &apos;1.8&apos;
}


shadowJar {
  archiveClassifier.set(&apos;fat&apos;)
  manifest {
    attributes &apos;Main-Verticle&apos;: mainVerticleName
  }
  mergeServiceFiles {
    include &apos;META-INF/services/io.vertx.core.spi.VerticleFactory&apos;
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events &apos;PASSED&apos;, &apos;FAILED&apos;, &apos;SKIPPED&apos;
  }
}

run {
  args = [&apos;run&apos;, mainVerticleName, &quot;--redeploy=$watchForChange&quot;, &quot;--launcher-class=$mainClassName&quot;, &quot;--on-redeploy=$doOnChange&quot;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们的第一步，将它改成我们 Kotlin DSL 写的 Gradle，我们一块一块的来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;在这之前要将文件`build.gradle` 重命名为 &lt;code&gt;build.gradle.kts&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_plugins&quot; &gt;plugins&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;plugin 部分很简单，只是单双引号的函数调用的问题：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;plugins {
  application
  kotlin(&quot;jvm&quot;) version &quot;1.3.20&quot;
  id(&quot;com.github.johnrengelman.shadow&quot;) version &quot;5.0.0&quot;
}
group = &quot;cn.edu.gzmu.center&quot;
version = &quot;1.0.0-SNAPSHOT&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_repository&quot; &gt;repository&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;repositories 也是如此，不过我们不用让他拉取快照了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;repositories {
  maven(&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;)
  maven(&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;)
  mavenCentral()
  jcenter()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_ext&quot; &gt;ext&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于 Gradle 的 extra 部分较为复杂，在 Koltin DSL 中，设置与获取不太优雅&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;ext {
    set(&quot;vertxVersion&quot;, &quot;4.0.0-SNAPSHOT&quot;)
}
//......
// 使用
implementation &quot;io.vertx:vertx-auth-oauth2:${extra[&quot;vertxVersion&quot;]}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;另外一种方式是通过委托&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;val vertxVersion by extra { &quot;4.0.0-SNAPSHOT&quot; }

//......
// 使用
implementation &quot;io.vertx:vertx-auth-oauth2:$vertxVersion&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们姑且使用第二种方式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;// 变量直接把 def 改成 val，单引号改成双引号就可以了。
val mainVerticleName = &quot;cn.edu.gzmu.center.MainVerticle&quot;

val kotlinVersion by extra { &quot;1.3.20&quot; }
val vertxVersion by extra { &quot;4.0.0-SNAPSHOT&quot; }
// 加一个日志进去
val log4j2Version by extra { &quot;2.13.0&quot; }
val junitJupiterEngineVersion by extra { &quot;5.4.0&quot; }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_application&quot; &gt;application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里就是单双引号的问题&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;application {
  mainClassName = &quot;io.vertx.core.Launcher&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_dependencies&quot; &gt;dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里就是单双引号的问题，同时要加上括号&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;dependencies {
  implementation(&quot;io.vertx:vertx-web-client:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-auth-jwt:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-auth-oauth2:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-unit:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-web:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-config:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-config-yaml:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-pg-client:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-consul-client:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-lang-kotlin:$vertxVersion&quot;)
  // 日志
  implementation(&quot;org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Version&quot;)

  testImplementation(&quot;io.vertx:vertx-junit5:$vertxVersion&quot;)
  testRuntimeOnly(&quot;org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion&quot;)
  testImplementation(&quot;org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion&quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_compilekotlincompiletestkotlin&quot; &gt;compileKotlin/compileTestKotlin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里需要引入一个类，同时使用委托。官网强制要求这样写的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

// ......

val compileKotlin: KotlinCompile by tasks

compileKotlin.kotlinOptions {
  jvmTarget = &quot;1.8&quot;
}
val compileTestKotlin: KotlinCompile by tasks

compileTestKotlin.kotlinOptions {
  jvmTarget = &quot;1.8&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_shadowjar&quot; &gt;shadowJar&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个就是一个 task 而已：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;tasks.shadowJar {
  archiveClassifier.set(&quot;fat&quot;)
  manifest {
    // 需要使用 map
    attributes(mapOf(&quot;Main-Verticle&quot; to mainVerticleName ))
  }
  mergeServiceFiles {
    include(&quot;META-INF/services/io.vertx.core.spi.VerticleFactory&quot;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_test&quot; &gt;test&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里也是一个 task，需要引入一下 &lt;code&gt;Test&lt;/code&gt; 的枚举：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;import org.gradle.api.tasks.testing.logging.TestLogEvent.*

// ......

tasks.withType&amp;lt;Test&amp;gt; {
  useJUnitPlatform()
  testLogging {
    events = mutableSetOf(PASSED, FAILED, SKIPPED)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_run&quot; &gt;run&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最后就是 run 了，这里我们换一个 task 的写法：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;tasks {
  // 前面的 def 变量我拿到这里了
  val watchForChange = &quot;src/**/*&quot;
  val doOnChange = &quot;./gradlew classes&quot;
  // JavaExec 类型 task
  &quot;run&quot;(JavaExec::class) {
    // 运行参数
    args(&quot;run&quot;, mainVerticleName,
      &quot;--redeploy=$watchForChange&quot;,
      &quot;--launcher-class=${application.mainClassName}&quot;,
      &quot;--on-redeploy=$doOnChange&quot;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_最终结果&quot; &gt;最终结果&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最后我们得到的 &lt;code&gt;build.gradle.kts&lt;/code&gt; 如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.gradle.api.tasks.testing.logging.TestLogEvent.*

plugins {
  application
  kotlin(&quot;jvm&quot;) version &quot;1.3.20&quot;
  id(&quot;com.github.johnrengelman.shadow&quot;) version &quot;5.0.0&quot;
}

group = &quot;cn.edu.gzmu.center&quot;
version = &quot;1.0.0-SNAPSHOT&quot;

repositories {
  maven(&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;)
  maven(&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;)
  mavenCentral()
  jcenter()
}


application {
  mainClassName = &quot;io.vertx.core.Launcher&quot;
}
val mainVerticleName = &quot;cn.edu.gzmu.center.MainVerticle&quot;

val kotlinVersion by extra { &quot;1.3.20&quot; }
val vertxVersion by extra { &quot;4.0.0-SNAPSHOT&quot; }
val log4j2Version by extra { &quot;2.13.0&quot; }
val junitJupiterEngineVersion by extra { &quot;5.4.0&quot; }

dependencies {
  implementation(&quot;io.vertx:vertx-web-client:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-auth-jwt:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-auth-oauth2:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-unit:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-web:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-config:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-config-yaml:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-pg-client:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-consul-client:$vertxVersion&quot;)
  implementation(&quot;io.vertx:vertx-lang-kotlin:$vertxVersion&quot;)
  implementation(&quot;org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Version&quot;)

  testImplementation(&quot;io.vertx:vertx-junit5:$vertxVersion&quot;)
  testRuntimeOnly(&quot;org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion&quot;)
  testImplementation(&quot;org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion&quot;)
}

val compileKotlin: KotlinCompile by tasks

compileKotlin.kotlinOptions {
  jvmTarget = &quot;1.8&quot;
}
val compileTestKotlin: KotlinCompile by tasks

compileTestKotlin.kotlinOptions {
  jvmTarget = &quot;1.8&quot;
}


tasks.shadowJar {
  archiveClassifier.set(&quot;fat&quot;)
  manifest {
    attributes(mapOf(&quot;Main-Verticle&quot; to mainVerticleName ))
  }
  mergeServiceFiles {
    include(&quot;META-INF/services/io.vertx.core.spi.VerticleFactory&quot;)
  }
}

tasks.withType&amp;lt;Test&amp;gt; {
  useJUnitPlatform()
  testLogging {
    events = mutableSetOf(PASSED, FAILED, SKIPPED)
  }
}

tasks {
  val watchForChange = &quot;src/**/*&quot;
  val doOnChange = &quot;./gradlew classes&quot;
  &quot;run&quot;(JavaExec::class) {
    args(&quot;run&quot;, mainVerticleName,
      &quot;--redeploy=$watchForChange&quot;,
      &quot;--launcher-class=${application.mainClassName}&quot;,
      &quot;--on-redeploy=$doOnChange&quot;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;IDEA 中 &lt;code&gt;reimport&lt;/code&gt;，一下，然后等待加载。运行原来的 &lt;code&gt;MainVerticle&lt;/code&gt; 和
Gradle 的 shadow 命令试试能不能正常运行和打包。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_整合_vertx_plugin&quot; &gt;整合 vertx-plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以看到，我们的整个文件比较冗长，有差不多 90
行的配置。并且很多地方特别难看，比如版本号那里。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 Spring boot 的 Gradle 项目里，我们所有的 Spring 相关的依赖都交给了
&lt;code&gt;io.spring.dependency-management&lt;/code&gt; 插件来管理。那么 vert.x
应该也有这么一个东西，也就是
&lt;a href=&quot;https://github.com/jponge/vertx-gradle-plugin&quot;&gt;vertx-plugin&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们接下来将它整合到项目中去。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_plugins_2&quot; &gt;plugins&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;因为 vertx-plugin 已经为我们整合了多款插件，包括 &lt;code&gt;application&lt;/code&gt;
、&lt;code&gt;shadow&lt;/code&gt;，所以我们删除他们&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;plugins {
  kotlin(&quot;jvm&quot;) version &quot;1.3.20&quot;
  id(&quot;io.vertx.vertx-plugin&quot;) version &quot;1.0.1&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_简单变化&quot; &gt;简单变化&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;repositories：不变&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;application：已经内置，直接移除&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;extra：&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;val vertxVersion by extra { &quot;4.0.0-SNAPSHOT&quot; }&lt;/code&gt; 移除，交给插件管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;val junitJupiterEngineVersion by extra { &quot;5.4.0&quot; }&lt;/code&gt;
移除，交给插件管理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;shadowJar：移除，交给插件管理&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;run：移除，交给插件管理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_dependencies_2&quot; &gt;dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;移除版本号与单元测试依赖，插件自动添加&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;dependencies {
  implementation(&quot;io.vertx:vertx-web-client&quot;)
  implementation(&quot;io.vertx:vertx-auth-jwt&quot;)
  implementation(&quot;io.vertx:vertx-auth-oauth2&quot;)
  implementation(&quot;io.vertx:vertx-unit&quot;)
  implementation(&quot;io.vertx:vertx-web&quot;)
  implementation(&quot;io.vertx:vertx-config&quot;)
  implementation(&quot;io.vertx:vertx-config-yaml&quot;)
  implementation(&quot;io.vertx:vertx-pg-client&quot;)
  implementation(&quot;io.vertx:vertx-lang-kotlin-coroutines&quot;)
  implementation(&quot;io.vertx:vertx-consul-client&quot;)
  implementation(&quot;io.vertx:vertx-lang-kotlin&quot;)
  implementation(&quot;org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Version&quot;)
  testImplementation(&quot;io.vertx:vertx-junit5&quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_新增&quot; &gt;新增&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;新增两个，一个是指定插件运行环境（可以省略），另外一个是插件配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;tasks.withType&amp;lt;KotlinCompile&amp;gt; {
  kotlinOptions {
    freeCompilerArgs = listOf(&quot;-Xjsr305=strict&quot;)
    jvmTarget = &quot;1.8&quot;
  }
}

vertx {
  // 运行的主要 Verticle
  mainVerticle = &quot;cn.edu.gzmu.center.WebVerticle&quot;
  // 运行的版本号，默认 3.8.3
  vertxVersion = &quot;4.0.0-SNAPSHOT&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_最终结果_2&quot; &gt;最终结果&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最后我们得到新的 &lt;code&gt;build.gradle.kts&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.gradle.api.tasks.testing.logging.TestLogEvent.*

plugins {
  kotlin(&quot;jvm&quot;) version &quot;1.3.20&quot;
  id(&quot;io.vertx.vertx-plugin&quot;) version &quot;1.0.1&quot;
}

group = &quot;cn.edu.gzmu.center&quot;
version = &quot;1.0.0-SNAPSHOT&quot;

repositories {
  maven(&quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;)
  maven(&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;)
  mavenCentral()
  jcenter()
}

val mainVerticleName = &quot;cn.edu.gzmu.center.MainVerticle&quot;
val kotlinVersion by extra { &quot;1.3.20&quot; }
val log4j2Version by extra { &quot;2.13.0&quot; }

dependencies {
  implementation(&quot;io.vertx:vertx-web-client&quot;)
  implementation(&quot;io.vertx:vertx-auth-jwt&quot;)
  implementation(&quot;io.vertx:vertx-auth-oauth2&quot;)
  implementation(&quot;io.vertx:vertx-unit&quot;)
  implementation(&quot;io.vertx:vertx-web&quot;)
  implementation(&quot;io.vertx:vertx-config&quot;)
  implementation(&quot;io.vertx:vertx-config-yaml&quot;)
  implementation(&quot;io.vertx:vertx-pg-client&quot;)
  implementation(&quot;io.vertx:vertx-lang-kotlin-coroutines&quot;)
  implementation(&quot;io.vertx:vertx-consul-client&quot;)
  implementation(&quot;io.vertx:vertx-lang-kotlin&quot;)
  implementation(&quot;org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Version&quot;)
  testImplementation(&quot;io.vertx:vertx-junit5&quot;)
}

val compileKotlin: KotlinCompile by tasks
compileKotlin.kotlinOptions {
  jvmTarget = &quot;1.8&quot;
}

val compileTestKotlin: KotlinCompile by tasks
compileTestKotlin.kotlinOptions {
  jvmTarget = &quot;1.8&quot;
}

tasks.withType&amp;lt;Test&amp;gt; {
  useJUnitPlatform()
  testLogging {
    events = mutableSetOf(PASSED, FAILED, SKIPPED)
  }
}

tasks.withType&amp;lt;KotlinCompile&amp;gt; {
  kotlinOptions {
    freeCompilerArgs = listOf(&quot;-Xjsr305=strict&quot;)
    jvmTarget = &quot;1.8&quot;
  }
}

vertx {
  mainVerticle = &quot;cn.edu.gzmu.center.verticle.WebVerticle&quot;
  vertxVersion = &quot;4.0.0-SNAPSHOT&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最终只有 65
行代码。同时版本交给了插件来进行管理，方便省心。并且默认就配置了热部署和热
debug。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自动添加了如下命令：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;run&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;runShadow&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;startShadowScripts&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;vertxDebug&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;vertxRun&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们可以直接使用 vertx 提供的 vertxRun 和 vertxDebug ，运行
&lt;code&gt;./gradlew vertxRun&lt;/code&gt; 即可热运行，实时更新。很棒！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_整合_vertx_boot&quot; &gt;整合 vertx-boot&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在我们整合了 vertx-plugin 以后，已经很方便了。但是还是需要我们提供一个
&lt;code&gt;mainVerticle&lt;/code&gt;，然后在 &lt;code&gt;mainVerticle&lt;/code&gt; 里面配置我们要启动的
&lt;code&gt;Verticle&lt;/code&gt;，还要在代码中配置其参数。所以是较为麻烦的，那么我们如何改变呢？这里就用到了
&lt;a href=&quot;https://github.com/jponge/vertx-boot&quot;&gt;vertx-boot&lt;/a&gt; 这个库。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他最重要的作用就是提供了一个配置文件让我们来配置我们要启动的
&lt;code&gt;Verticle&lt;/code&gt;，可以怼他进行高级配置，比如 &lt;code&gt;Verticle&lt;/code&gt;
最大的特性就是直接可以集群部署。那么我们就可以直接指定他集群部署的实例数目；再比如我们可以指定它的启动配置等等。还支持高级配置，例如将它配置成
&lt;code&gt;worker verticle&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以接下来我们来引入这个库，只需要两步就可以完成：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_添加依赖&quot; &gt;添加依赖&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;val vertxBootVersion by extra { &quot;1.1.2&quot; }

// ......

implementation(&quot;io.github.jponge:vertx-boot:$vertxBootVersion&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_添加配置文件&quot; &gt;添加配置文件&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 &lt;code&gt;resource&lt;/code&gt; 下添加 &lt;code&gt;application.conf&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;vertx-boot {
  verticles {
    web {
      name = &quot;cn.edu.gzmu.center.verticle.WebVerticle&quot;
      instance = 3 // 创建 3 个实例
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_运行&quot; &gt;运行&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们修改 &lt;code&gt;build.gradle.kts&lt;/code&gt; 的 &lt;code&gt;vertx&lt;/code&gt; 函数：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;vertx {
  // 必须为这个
  mainVerticle = &quot;io.github.jponge.vertx.boot.BootVerticle&quot;
  vertxVersion = &quot;4.0.0-SNAPSHOT&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后运行 &lt;code&gt;./gradlew vertxRun&lt;/code&gt; 即可看到效果！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_idea_运行&quot; &gt;IDEA 运行&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果我们希望使用 IDEA 运行，也非常简单！创建一个 main 函数即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;fun main() {
  Vertx.vertx().deployVerticle(&quot;io.github.jponge.vertx.boot.BootVerticle&quot;)
  // 或
  // Vertx.vertx().deployVerticle(BootVerticle::class.java.name)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后运行这个 main 函数即可！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_其他&quot; &gt;其他&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;初始化的项目默认使用的 Kotlin 是 &lt;code&gt;1.3.20&lt;/code&gt;，我们可以将它改为最新的
&lt;code&gt;1.3.61&lt;/code&gt;。同时使用的是 JDK11,让他编译后的字节码是 &lt;code&gt;11&lt;/code&gt;
的（&lt;strong&gt;注：这个特性只有在`1.3.30` 以后版本中可以使用&lt;/strong&gt;。）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;val compileKotlin: KotlinCompile by tasks
compileKotlin.kotlinOptions {
  // Target version of the generated JVM bytecode (1.6, 1.8, 9, 10, 11 or 12), default is 1.6
  jvmTarget = &quot;11&quot;
}

val compileTestKotlin: KotlinCompile by tasks
compileTestKotlin.kotlinOptions {
  // Target version of the generated JVM bytecode (1.6, 1.8, 9, 10, 11 or 12), default is 1.6
  jvmTarget = &quot;11&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;vert.x
的国内生态真的不怎么样，用的人凤毛麟角，资料更是少之又少。但是他确实足够轻量，足够棒。在他上面可以实现很多东西，相比于
Spring 的开发模式，vert.x
更加锻炼一个人、更加考验一个人。并且在多个方面都让自己思维上有不少的进步。这两款插件国内都没有任何介绍，都是自己不断翻文档，一步一步的摸索找到的，然后啃文档弄上去。其中比较复杂的其实是
Groovy DSL 转 Koltin DSL 的过程，大多资料用的都是
Groovy，所以学习起来还是有点吃力的。不过 vert.x 真的棒，配合 Koltin
协程简直爽翻了！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[vert.x 4 日志配置]]></description><link>https://zyue.wiki/articles/2020/01/31/1580462516035.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2020/01/31/1580462516035.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_jul&quot;&gt;JUL&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_log4j2_slf4j&quot;&gt;Log4j2 + SLF4J&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_使用&quot;&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;目前（2020-1-30）在 &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#_logging&quot;&gt;Vert.x 官网日志配置&lt;/a&gt;
的版本还是处于 3.8.x 版本的。在 vertx 3 版本中，我都是直接使用 &lt;code&gt;JUL&lt;/code&gt;
来进行日志配置，因为在默认情况下，vert.x 会使用 Java 默认的日志 &lt;code&gt;JUL&lt;/code&gt; 即
&lt;code&gt;Java Util Log&lt;/code&gt;，并读取 &lt;code&gt;resource&lt;/code&gt; 下的
&lt;code&gt;vertx-default-jul-logging.properties&lt;/code&gt; 文件并且不需要加任何依赖。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果需要添加其他的日志依赖还需要设置以下相应的环境变量，例如：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;System.setProperty(LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory::class.java.name)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是在 vert.x 4 的版本中，&lt;code&gt;io.vertx.core.logging.LoggerFactory&lt;/code&gt;
已经被标记为了 &lt;strong&gt;过时&lt;/strong&gt; 状态。具体原因见 &lt;a href=&quot;https://github.com/eclipse-vertx/vert.x/issues/2774&quot;&gt;Github
Issue&lt;/a&gt;。大意就是 vert.x
作为一个工具库，公开的日志存在一些移植性上的问题，不提供内部的日志的职责，并且在以后的主要版本中将其用作内部记录器。如果需要使用日志，自行配置使用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;事实上在现在已经发布的 &lt;code&gt;vert.x 4.0.0-SNAPSHOT&lt;/code&gt;
中，也同样对其进行了说明。而在新的官网文档(4.0.0)中提到：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock 0 0&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;=== Logging&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Vert.x logs using its internal logging API and supports various logging
backends.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The logging backend is selected as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;the backend denoted by the &lt;code&gt;vertx.logger-delegate-factory-class-name&lt;/code&gt;
system property if present or,&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;JDK logging when a &lt;code&gt;vertx-default-jul-logging.properties&lt;/code&gt; file is in
the classpath or,&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;a backend present in the classpath, in the following order of
preference:&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;SLF4J&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Log4J&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Log4J2&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Otherwise Vert.x defaults to JDK logging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;==== Configuring with the system property&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Set the &lt;code&gt;vertx.logger-delegate-factory-class-name&lt;/code&gt; system property to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;io.vertx.core.logging.SLF4JLogDelegateFactory&lt;/code&gt; for SLF4J or,&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;io.vertx.core.logging.Log4jLogDelegateFactory&lt;/code&gt; for Log4J or,&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;io.vertx.core.logging.Log4j2LogDelegateFactory&lt;/code&gt; for Log4J2 or,&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;io.vertx.core.logging.JULLogDelegateFactory&lt;/code&gt; for JDK logging&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;==== Configuring JUL logging&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A JUL logging configuration file can be specified in the normal JUL way,
by providing a system property named &lt;code&gt;java.util.logging.config.file&lt;/code&gt;
with the value being your configuration file. For more information on
this and the structure of a JUL config file please consult the JDK
logging documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Vert.x also provides a slightly more convenient way to specify a
configuration file without having to set a system property. Just provide
a JUL config file with the name &lt;code&gt;vertx-default-jul-logging.properties&lt;/code&gt;
on your classpath (e.g.&amp;nbsp;inside your fatjar) and Vert.x will use that to
configure JUL.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_jul&quot; &gt;JUL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于 &lt;code&gt;JUL&lt;/code&gt; 依旧没有改变，只需要添加
&lt;code&gt;vertx-default-jul-logging.properties&lt;/code&gt; 文件即可。我以前项目的配置：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;handlers=java.util.logging.ConsoleHandler,java.util.logging.FileHandler
# 日志格式化
java.util.logging.SimpleFormatter.format=%1$tc %4$s: %3$s %n%5$s  %n
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.level=INFO
# 日志输出设置
java.util.logging.FileHandler.level=WARNING
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.FileHandler.pattern=%h/vertxLog/Drcom.log

.level=INFO
io.vertx.ext.web.level=FINEST
io.vertx.level=INFO
com.hazelcast.level=INFO
io.netty.util.internal.PlatformDependent.level=SEVERE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是众所周知，&lt;code&gt;JUL&lt;/code&gt; 的功能不如 Logback/Log4j2 等完善，比如 Output
Handler 就没有 Logback/Log4j2
的丰富，有时候需要自己来继承定制，又比如它的配置局限性很大，格式化、控制台颜色、日志输入等都没有太完善的支持。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们大可以抛弃使用 &lt;code&gt;JUL&lt;/code&gt; 转而使用 &lt;code&gt;Logback&lt;/code&gt; 或者
&lt;code&gt;Log4j2&lt;/code&gt;。这次我选择使用的是 &lt;code&gt;Log4j2&lt;/code&gt;，他吸取了 &lt;code&gt;Logback&lt;/code&gt;
的优点，并且可以完美配合 &lt;code&gt;SLF4J&lt;/code&gt; 来进行使用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为什么一定要使用 &lt;code&gt;SLF4J&lt;/code&gt; 呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这就涉及到一个概念，&lt;code&gt;JCL&lt;/code&gt; —— &lt;strong&gt;Commons Logging&lt;/strong&gt;。&lt;code&gt;JCL&lt;/code&gt; 是一个
&lt;code&gt;Log Facade&lt;/code&gt;，只提供 &lt;code&gt;Log API&lt;/code&gt;，不提供实现。而 &lt;code&gt;SLF4j&lt;/code&gt; 是类似于 &lt;code&gt;JCL&lt;/code&gt; 的
&lt;code&gt;Log Facade&lt;/code&gt;，其作者认为 &lt;code&gt;JCL&lt;/code&gt; 的 &lt;code&gt;API&lt;/code&gt;
设计得不好，容易让使用者写出性能有问题的代码，所以自己写了一套
&lt;code&gt;Log Facade&lt;/code&gt; 。而有了相应的 &lt;code&gt;Log API&lt;/code&gt; 就要有相应的
&lt;code&gt;Log Implementation&lt;/code&gt;，而 &lt;code&gt;Log4j2&lt;/code&gt; 设计上很大程度上模仿了
&lt;code&gt;SLF4J&lt;/code&gt;/&lt;code&gt;Logback&lt;/code&gt;，性能上也获得了很大的提升。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_log4j2_slf4j&quot; &gt;Log4j2 + SLF4J&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;毫无疑问，项目中应该只使用一个具体的 &lt;code&gt;Log Implementation&lt;/code&gt;。我们选择了
&lt;code&gt;Log4j2&lt;/code&gt;，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;从 vert.x 4 的官网文档中可以明确知道，他加载的顺序如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;系统环境是否设置了
&lt;code&gt;vertx.logger-delegate-factory-class-name&lt;/code&gt;，如果有，就是用设置的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;JUL&lt;/code&gt; 的配置文件 &lt;code&gt;vertx-default-jul-logging.properties&lt;/code&gt; 是否在
&lt;code&gt;classpath&lt;/code&gt; 下&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;如果上面都没有，就在 &lt;code&gt;classpath&lt;/code&gt; 下按照顺序查找以下包是否存在&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;SLF4J&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;Log4J&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;Log4J2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果以上都没有，使用 &lt;code&gt;vert.x&lt;/code&gt; 默认的 &lt;code&gt;JUL&lt;/code&gt; 配置。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以 &lt;code&gt;vert.x&lt;/code&gt; 4 中，是不需要我们去手动设置
&lt;code&gt;vertx.logger-delegate-factory-class-name&lt;/code&gt; 参数了，他会默认去加载
&lt;code&gt;classpath&lt;/code&gt; 下的日志库的。因此我们需要添加相关的依赖。事实上现在
&lt;code&gt;Log4j2&lt;/code&gt; 对 &lt;code&gt;SLF4J&lt;/code&gt;
的支持简直好得不要不要的。以至于连以前添加一个日志需要加 3 - 5
个依赖的，现在只需要一个。如果你有兴趣翻看过文档的话应该可以看到https://logging.apache.org/log4j/2.0/log4j-slf4j-impl/index.html[这篇]。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;log4j-slf4j-impl&lt;/code&gt; should be used with &lt;code&gt;SLF4J&lt;/code&gt; &lt;strong&gt;1.7.x&lt;/strong&gt; releases or
older.&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;log4j-slf4j18-impl&lt;/code&gt; should be used with &lt;code&gt;SLF4J&lt;/code&gt; &lt;strong&gt;1.8.x&lt;/strong&gt; releases or
newer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果我们想用 &lt;code&gt;Log4j2&lt;/code&gt; + &lt;code&gt;SLF4J&lt;/code&gt; 的组合，直接选择 &lt;code&gt;log4j-slf4j-impl&lt;/code&gt; 或者
&lt;code&gt;log4j-slf4j18-impl&lt;/code&gt; 即可。这里当然选用 &lt;code&gt;log4j-slf4j18-impl&lt;/code&gt;
使用最新版本 &lt;code&gt;2.13.0&lt;/code&gt;。它包含如下依赖：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;org.slf4j:slf4j-api:1.8.0-alpha2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;org.apache.logging.log4j:log4j-api:2.13.0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;org.apache.logging.log4j:log4j-core:2.13.0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这三个依赖已经包含了我们所有需要引入的东西。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来就是添加相应的配置文件了，配置文件网上一搜有很多的，这是我用的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;Configuration status=&quot;WARN&quot; monitorInterval=&quot;30&quot;&amp;gt;

  &amp;lt;Properties&amp;gt;
    &amp;lt;Property name=&quot;LOG_PATH&quot; value=&quot;./logs&quot;/&amp;gt;
    &amp;lt;Property name=&quot;LOG_TMP_FILE&quot; value=&quot;./logs/authorization-center-tmp.log&quot;/&amp;gt;
    &amp;lt;Property name=&quot;LOG_INFO_FILE&quot; value=&quot;./logs/authorization-center-info.log&quot;/&amp;gt;
    &amp;lt;Property name=&quot;LOG_WARN_FILE&quot; value=&quot;./logs/authorization-center-warn.log&quot;/&amp;gt;
    &amp;lt;Property name=&quot;LOG_ERROR_FILE&quot; value=&quot;./logs/authorization-center-error.log&quot;/&amp;gt;
    &amp;lt;Property name=&quot;CONSOLE_LAYOUT&quot;
              value=&quot;%style{%d{yyyy-MM-dd HH:mm:ss.SSS}}{Blue,Bright} %highlight{${LOG_LEVEL_PATTERN:-%5p}}{FATAL=bg_red, ERROR=red, WARN=yellow, INFO=green, DEBUG=grey, TRACE=blue} %style{%pid}{magenta} --- %style{[%15.15t] %-40.40c{1.}}{cyan,Bright} : %m%n%ex&quot;/&amp;gt;
    &amp;lt;Property name=&quot;FILE_LAYOUT&quot;
              value=&quot;%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} %pid --- [%15.15t] %-40.40c{1.} : %m%n%ex&quot;/&amp;gt;
  &amp;lt;/Properties&amp;gt;

  &amp;lt;Appenders&amp;gt;
    &amp;lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&amp;gt;
      &amp;lt;PatternLayout pattern=&quot;${CONSOLE_LAYOUT}&quot;/&amp;gt;
    &amp;lt;/Console&amp;gt;
    &amp;lt;RollingFile name=&quot;RollingFileInfo&quot; fileName=&quot;${LOG_INFO_FILE}&quot;
                 filePattern=&quot;${LOG_PATH}/info/info.%d{yyyy-MM-dd}.%i.log.gz&quot;&amp;gt;
      &amp;lt;ThresholdFilter level=&quot;info&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&amp;gt;
      &amp;lt;PatternLayout pattern=&quot;${FILE_LAYOUT}&quot;/&amp;gt;
      &amp;lt;Policies&amp;gt;
        &amp;lt;TimeBasedTriggeringPolicy/&amp;gt;
        &amp;lt;SizeBasedTriggeringPolicy size=&quot;50MB&quot;/&amp;gt;
      &amp;lt;/Policies&amp;gt;
    &amp;lt;/RollingFile&amp;gt;
    &amp;lt;RollingFile name=&quot;RollingFileWarn&quot; fileName=&quot;${LOG_WARN_FILE}&quot;
                 filePattern=&quot;${LOG_PATH}/warn/warn.%d{yyyy-MM-dd}.%i.log.gz&quot;&amp;gt;
      &amp;lt;ThresholdFilter level=&quot;warn&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&amp;gt;
      &amp;lt;PatternLayout pattern=&quot;${FILE_LAYOUT}&quot;/&amp;gt;
      &amp;lt;Policies&amp;gt;
        &amp;lt;TimeBasedTriggeringPolicy/&amp;gt;
        &amp;lt;SizeBasedTriggeringPolicy size=&quot;50MB&quot;/&amp;gt;
      &amp;lt;/Policies&amp;gt;
    &amp;lt;/RollingFile&amp;gt;
    &amp;lt;RollingFile name=&quot;RollingFileError&quot; fileName=&quot;${LOG_ERROR_FILE}&quot;
                 filePattern=&quot;${LOG_PATH}/error/error.%d{yyyy-MM-dd}.%i.log.gz&quot;&amp;gt;
      &amp;lt;ThresholdFilter level=&quot;warn&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&amp;gt;
      &amp;lt;PatternLayout pattern=&quot;${FILE_LAYOUT}&quot;/&amp;gt;
      &amp;lt;Policies&amp;gt;
        &amp;lt;TimeBasedTriggeringPolicy/&amp;gt;
        &amp;lt;SizeBasedTriggeringPolicy size=&quot;50MB&quot;/&amp;gt;
      &amp;lt;/Policies&amp;gt;
    &amp;lt;/RollingFile&amp;gt;
  &amp;lt;/Appenders&amp;gt;
  &amp;lt;Loggers&amp;gt;
    &amp;lt;Logger name=&quot;cn.edu.gzmu.center&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&amp;gt;
      &amp;lt;AppenderRef ref=&quot;Console&quot;/&amp;gt;
    &amp;lt;/Logger&amp;gt;
    &amp;lt;Root level=&quot;info&quot;&amp;gt;
      &amp;lt;AppenderRef ref=&quot;Console&quot;/&amp;gt;
      &amp;lt;AppenderRef ref=&quot;RollingFileInfo&quot;/&amp;gt;
      &amp;lt;AppenderRef ref=&quot;RollingFileWarn&quot;/&amp;gt;
      &amp;lt;AppenderRef ref=&quot;RollingFileError&quot;/&amp;gt;
    &amp;lt;/Root&amp;gt;
  &amp;lt;/Loggers&amp;gt;
&amp;lt;/Configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，&lt;code&gt;log4j2&lt;/code&gt; 的功能很强大，还有严格模式的 &lt;code&gt;xml&lt;/code&gt;、&lt;code&gt;json&lt;/code&gt;、&lt;code&gt;yaml&lt;/code&gt;
等配置方式，都是不错的。而且他支持控制台的颜色输出等，比如我配置的颜色是这样的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2020/01/30/深度截图_选择区域_20200131170626.png&quot; alt=&quot;color&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以去看https://logging.apache.org/log4j/2.x/manual/layouts.html[官方文档]
，非常详细。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_使用&quot; &gt;使用&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用的时候需要用的是如下两个包：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;io.vertx.core.impl.logging.LoggerFactory&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;io.vertx.core.impl.logging.Logger&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;private val log: Logger = LoggerFactory.getLogger(MainVerticle::class.java.name)

// ......

log.info(&quot;Server start......&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;或者使用如下包：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;org.slf4j.Logger&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;org.slf4j.LoggerFactory&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用的时候可以使用可变参数&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;log.info(&quot;Server start on port {}......&quot;, server.getInteger(&quot;port&quot;, 8888))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;vert.x&lt;/code&gt; 4 有很多改变，也加了很多新的特性，最大的改变莫过于
&lt;code&gt;Core futurisation&lt;/code&gt; 了。然而对于拥有协程的 &lt;code&gt;Kotlin&lt;/code&gt;
来说，有些地方编码方式没有太大改变。比较多的就是废弃了很多以前的
&lt;code&gt;API&lt;/code&gt;，比如 &lt;code&gt;JWT&lt;/code&gt; 相关的，比如 &lt;code&gt;Web&lt;/code&gt; 相关的 &lt;code&gt;API&lt;/code&gt;
都有部分被废弃，日志这里也有或多或少的改变。在 3.8.x
的时候进行逐渐的过度，新项目使用 4.0.0 还是不错的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Spring Security Oauth2 从零到一完整实践（一）]]></description><link>https://zyue.wiki/articles/2019/07/14/1563082088646.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/07/14/1563082088646.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_系列文章&quot;&gt;系列文章&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_预备知识&quot;&gt;预备知识&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_oauth2&quot;&gt;Oauth2&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_传统应用&quot;&gt;传统应用&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_现在的应用&quot;&gt;现在的应用&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_角色&quot;&gt;角色&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_四种授权模式&quot;&gt;四种授权模式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_客户端加密&quot;&gt;客户端加密&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_密码模式&quot;&gt;密码模式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_安全考虑&quot;&gt;安全考虑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_技术选型&quot;&gt;技术选型&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;很久没有写一篇长文章了，自己说起来其实年初换成 solo
到现在，写的让自己满意的技术性文章也就只有
&lt;a href=&quot;https://echocow.cn/articles/2019/01/05/1546684795983.html&quot;&gt;spring boot
restful API 从零到一完整实践&lt;/a&gt;
这篇了，其他的其实都是只属于自己比较容易理解的笔记和记录而已。想想年中了，还是需要写上这么一篇实践性文章的。这段时间比较折磨自己的，莫过于就是
&lt;a href=&quot;https://spring.io/projects/spring-security-oauth&quot;&gt;spirng security oauth2&lt;/a&gt;
了，自己折腾了很久，也算是学会了一些吧，按照原来的方式，写了一篇文章。前面也写过
&lt;a href=&quot;https://echocow.cn/articles/2019/01/22/1548148450889.html&quot;&gt;spring boot
security oauth2 构建简单安全的 restful
api&lt;/a&gt;，但是太过于基础并且那时候自己也有很多不懂，现在实践了很多，有了更加深入的了解，记录一下顺便分享给大家。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;GitHub 地址： &lt;a href=&quot;https://github.com/lizhongyue248/spring-security-oauth2-demo&quot;&gt;spring-security-oauth2-demo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;博客地址： &lt;a href=&quot;https://echocow.cn&quot;&gt;echocow.cn&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_系列文章&quot; &gt;系列文章&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;较为详细的学习 oauth2 的四种模式其中的两种授权模式&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563082247386.html&quot;&gt;spring boot
oauth2 自动配置实现&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/14/1563096109754.html&quot;&gt;spring
security oauth2 授权服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/20/1563611848587.html&quot;&gt;spring
security oauth2 资源服务器配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2019/07/30/1564498598952.html&quot;&gt;spring
security oauth2 自定义授权模式（手机、邮箱等）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://echocow.cn/articles/2020/01/20/1579503807596.html&quot;&gt;spring
security oauth2 踩坑记录&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;原本打算全部写完一起发的，但是才写到第三点，就已经上万字了，所以还是觉得分系列发吧～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_预备知识&quot; &gt;预备知识&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;具备以下基础知识能够方便你更好的阅读本篇文章&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;spring 基础&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring boot web 的使用与配置&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring security 的使用与配置&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;postman 的使用&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;idea、maven、lombok 的使用与配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_oauth2&quot; &gt;Oauth2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;学习一项新的东西之前，我们要先了解一下他为我们解决了哪些事，能够带来什么样的便利，而在
IT
行业，了解一个东西最简单的方式就是去他的官网了解，所以我们先去官网了解一下这个协议：https://oauth.net/[Oauth2]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;An &lt;strong&gt;open protocol&lt;/strong&gt; to allow &lt;strong&gt;secure authorization&lt;/strong&gt; in a &lt;strong&gt;simple&lt;/strong&gt; and
&lt;strong&gt;standard&lt;/strong&gt; method from web, mobile and desktop applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一个允许从Web、移动和桌面应用程序简单和标准方法进行安全授权的开放协议。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;The OAuth 2.0 authorization framework enables third-party applications
to obtain &lt;strong&gt;limited&lt;/strong&gt; access to a web service.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;OAuth 2.0 授权框架使第三方应用程序能够获得对 Web 服务的有限访问权限。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;从官网的解释就可以知道它可以完成如下两件事：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;对你的应用站点进行安全授权&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使第三方应用程序能够获得对 Web 服务的有限访问权限&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们这篇教程就是通过 spring security oauth2
来完成这么两件事。我们来详细了解一下这个协议，首先了解什么要使用
oauth2。我们以 web 为例来进行了解。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_传统应用&quot; &gt;传统应用&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在我们传统的 web
应用中，我们的前端页面和后端的逻辑都是一起部署的，大概流程如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190708190354.png&quot; alt=&quot;传统模式&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当我们发送一个请求的时候，直接先发给后端处理，后端处理完成后将数据发送给前端，然后前端渲染，再交给用户，所以有了模板引擎这个东西，例如
jsp、thymeleaf、freemarker
这些，都是这样的流程。而这些个东西最为重要的就是
session，你可以通过存储在 session
里面的东西对他进行授权/认证等操作，大概如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190708194101.png&quot; alt=&quot;授权&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_现在的应用&quot; &gt;现在的应用&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那么现在我们的应用是什么样的呢？现在的前端已经不再是只有
html、css、javascript 了，也不再是 bootstrap 的天下，也没有 jquery
一出，万人空巷了。前端项目组建工程化，已经能够完整的独立成为一个工程化的项目了。所以我们现在前后端是完全分离的，&lt;strong&gt;前后端各司其职，前端完成前端的事，只做页面，后端完成后端的事，只做逻辑和数据库操作，完全两个独立的引用，通过接口进行交互&lt;/strong&gt;，那么我们的大概流程如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190708191537.png&quot; alt=&quot;前后端分离&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;用户通过浏览器请求前端应用的页面，然后页面里面加载请求到数据，再渲染页面。那么现在的授权没有
session
了，前后端是完全独立的两个项目了，我们要怎么进行认证授权呢？对于一个受保护的应用来说，他的请求流程如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190708203251.png&quot; alt=&quot;现在&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这个流程中，我们后端应用其实变成了两个，一个是授权服务器一个是资源服务器，&lt;strong&gt;当然你完全可以简爱嗯他们两个同时写在一个之中&lt;/strong&gt;。单独提出来的好处是什么呢？最主要的一点就是上面提到的
&lt;strong&gt;使第三方应用程序能够获得对 Web
服务的有限访问权限&lt;/strong&gt;，简单的说就是能够更加方便的另外一个应用接入。当你写好一个授权服务器以后，其他应用就可以共用这个授权服务器，他们就作为资源服务器亦或是客户端即可。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_角色&quot; &gt;角色&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这个协议中，我们需要明确一个 &lt;strong&gt;角色&lt;/strong&gt;
的概念，在前面的和传统应用的对比中，我们提到了资源服务器和授权服务器，这就是其中两个角色，在
Oauth2 中，总共有四种角色：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 12%;&quot;&gt;
&lt;col style=&quot;width: 19%;&quot;&gt;
&lt;col style=&quot;width: 58%;&quot;&gt;
&lt;col style=&quot;width: 11%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;英文名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;web例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;资源所有者&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;resource owner&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;能够授予对受保护资源的访问权的实体。当资源所有者是一个人时，它就是用户。&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;用户&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;资源服务器&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;resource server&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;承载受保护资源的服务器，能够使用访问令牌接受和响应受保护资源请求。&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;后端资源数据&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;client&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;代表资源所有者及其授权发出受保护资源请求的应用程序。``客户端&apos;&apos;
并不意味着任何特定的实现特征(例如，应用程序是否在服务器、桌面或其他设备上执行)。&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;前端应用&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;授权服务器&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;authorization server&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;在成功认证资源所有者并获得授权后，服务器向客户端发出访问令牌。&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;后端授权&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;而授权服务器可以是与资源服务器&lt;strong&gt;相同的服务器&lt;/strong&gt;或&lt;strong&gt;单独的服务器&lt;/strong&gt;。
单个授权服务器可以发出由&lt;strong&gt;多个资源服务器接受的访问令牌&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;流程图大概如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-none&quot; data-lang=&quot;none&quot;&gt;     +--------+                               +-----------------+
     |        |--（A）------- 授权请求 --------&amp;gt;|                 |
     |        |                               | 资源所有者（用户） |
     |        |&amp;lt;-（B）------- 授权许可 ---------|                 |
     |        |                               +-----------------+
     |        |
     |        |                               +-----------------+
     |        |--（C）------- 授权许可 --------&amp;gt;|                 |
     | 客户端  |                               |  授权服务器（1    |
     |        |&amp;lt;-（D）----- Access Token ----）|                 |
     |        |                               +-----------------+
     |        |
     |        |                               +-----------------+
     |        |（-（E）---- Access Token -----&amp;gt;|                 |
     |        |                               |   资源服务器（2   |
     |        |&amp;lt;-（F）---- 获取受保护的资源 -----|                 |
     +--------+                               +-----------------+&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;图中所示的 抽象 OAuth 2.0 流程描述了四个角色之间的交互，包括以下步骤：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（A）客户机请求资源所有者（用户）的授权。授权请求可以直接发送给资源所有者(如图所示)，最好通过作为中介的授权服务器间接发送。&lt;strong&gt;简单地说，用户点击登录，会转到登录页面显示给用户。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（B）客户端接收授权许可，这是表示资源所有者授权的凭据，使用 Oauth2
规范中定义的四种授权类型之一或使用扩展授权类型表示。授权授予类型取决于客户机用于请求授权的方法和授权服务器支持的类型。&lt;strong&gt;简单地说，选择
oauth2 中四种授权模式进行授权。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（C）客户端通过向授权服务器进行认证并呈现授权授权来请求访问令牌。&lt;strong&gt;简单地说，客户端会向授权服务器使用前面选择的四种方式之一请求认证。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（D）授权服务器对客户端进行身份验证并验证授权授予，如果有效，则发出访问令牌。&lt;strong&gt;简单地说，授权成功发放令牌。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（E）客户端从资源服务器请求受保护的资源，并通过呈现访问令牌进行身份验证。&lt;strong&gt;简单地说，携带
令牌 请求资源服务器。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（F）资源服务器验证访问令牌，如果有效，则为请求服务。&lt;strong&gt;简单地说，如果令牌有效，就允许访问资源。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（1）授权服务器可以只有一台，一台授权可以发放多个资源服务器。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（2）资源服务器需要关联一台授权服务器作为资源的保护和认证。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最为重要的部分为 B 中的
授权许可，它是代表资源所有者的授权（访问其受保护的资源）的&lt;strong&gt;凭据&lt;/strong&gt;，客户端使用该授权来获得访问令牌。该规范定义了四种授权类型——&lt;strong&gt;授权代码、隐式、资源所有者密码凭证和客户端凭证&lt;/strong&gt;——以及用于定义其他类型的可扩展性机制（自定义授权）。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_四种授权模式&quot; &gt;四种授权模式&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;客户端必须得到用户的授权（authorization grant），才能获得令牌（access
token）。OAuth 2.0定义了四种授权方式如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;授权码模式（authorization code）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;密码模式（resource owner password credentials）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;简化模式（implicit）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;客户端模式（client credentials）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;扩展模式（extension）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最为常用的为第一、二种，我们这篇文章也只会完成第一二种，四种具体请参考
&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot;&gt;阮一峰 理解OAuth
2.0&lt;/a&gt; ，请注意详细看文章的 &lt;strong&gt;名词定义&lt;/strong&gt;
模块。阮一峰老师的文章已经写的很清楚了，但是我依旧还是需要指明一下我们即将开始的第一二种的
api 设计。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意：以下 api 设计为 spring security 提供实现，并不是 oauth2 的标准
api 实现&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过在那之前，我们先来了解一下 &lt;strong&gt;客户端的加密&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_客户端加密&quot; &gt;客户端加密&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 spring security oauth
中，推荐加密我们的客户端信息，客户端和授权服务器建立适合授权服务器安全要求的客户端认证方法。授权服务器可以接受满足其安全要求的任何形式的客户端身份验证。一般来说我们使用的是
&lt;strong&gt;密码验证&lt;/strong&gt; 的方式加密我们的客户端信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;推荐的方式是使用 HTTP Basic
，我们需要设置以下参数，当设置成功以后将客户端凭证加密存放在请求头中去请求授权信息，参数如下：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必填&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;client_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端 id&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;client_secret&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端密码，如果客户机secret是空字符串，则客户机可以省略该参数&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当我们请求的时候，需要设置相应的客户端认证信息，并存放在请求头中，设置方法如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-markup&quot; data-lang=&quot;markup&quot;&gt; Authorization: Basic client_id：client_secret base64编码
 eg:
 client_id:web
 client_secret:secret
 加密“web:secret” 得到 “QmFzaWMgd2ViOnNlY3JldA==”
 授权请求头中需要携带如下键值对：
 Authorization: Basic QmFzaWMgd2ViOnNlY3JldA==&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这是保证客户端安全十分重要的一环，强烈推荐对客户端进行加密！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_授权码模式&quot; &gt;授权码模式&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他是一种流程最为严密，安全性最高的授权模式，主要为以下几个步骤：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
注意：以下所有请求都必须在请求头中携带上一点中的客户端加密信息！
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;用户进入应用，携带一个 &lt;em&gt;重定向应用地址&lt;/em&gt; 到 &lt;strong&gt;授权服务器&lt;/strong&gt;
进行登录，在登录成功并且用户同意授权以后，授权服务携带一个生成的
&lt;strong&gt;授权码&lt;/strong&gt; 重定向到指定的 &lt;em&gt;重定向应用地址&lt;/em&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;应用携带接收到的 &lt;strong&gt;授权码&lt;/strong&gt; 再次去请求
&lt;strong&gt;授权服务器&lt;/strong&gt;，在验证成功后，验证服务器下发 token。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以需要两个请求，在 spring security oauth2 中，api 如下，我们将这些 api
称为 &lt;em&gt;端点&lt;/em&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_授权端点&quot; &gt;授权端点&lt;/h4&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;/oauth/authorize：授权端点，通过此端点跳转到 &lt;strong&gt;授权服务器&lt;/strong&gt;
进行认证，完成第一个请求。携带如下参数：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 70%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必填&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;response_type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;必须为 code&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;client_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端的 id&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;redirect_uri&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPTIONAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;获取授权码后重定向地址&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;scope&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPTIONAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;申请的权限范围&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;state&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RECOMMENDED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值，推荐。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;授权成功的情况，会携带以下两个参数重定向到到 &lt;strong&gt;redirect_uri&lt;/strong&gt; 中：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 15%;&quot;&gt;
&lt;col style=&quot;width: 70%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必有&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;code&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;授权服务器生成的授权代码。授权代码必须在发布后不久过期，以降低泄漏的风险。最大授权代码生命周期为10分钟&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;state&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;如果上一步中提供 &lt;code&gt;state&lt;/code&gt;
参数，会原封不动地返回这个值。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：官网中给出的解释 code 有 RECOMMENDED
推荐的情况，但是我没找到如何使用，所以没写。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;授权失败的情况分为两种&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;如果请求由于重定向URI丢失、无效或不匹配而失败，或者如果客户端标识符丢失或无效，授权服务器应通知资源所有者错误，并且&lt;strong&gt;不得自动将用户代理重定向到无效的重定向URI&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;如果资源所有者拒绝访问请求，或者如果请求由于除了丢失或无效重定向URI以外的原因而失败，则授权服务器通过使用
&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 格式&lt;strong&gt;向重定向 URI
的查询组件添加以下参数来通知客户端&lt;/strong&gt;，参数如下：(对于 spring
，目前没有遇到 error_uri 属性)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 17%;&quot;&gt;
&lt;col style=&quot;width: 7%;&quot;&gt;
&lt;col style=&quot;width: 22%;&quot;&gt;
&lt;col style=&quot;width: 54%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必有&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;值&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;error&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;invalid_request&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;请求缺少必需的参数，包括无效的参数值，不止一次地包含参数，或者存在其他形式的异常。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;unauthorized_client&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;未授权客户端使用此方法请求授权代码。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;access_denied&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;资源所有者或授权服务器拒绝了该请求。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;unsupported_response_type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;授权服务器不支持使用此方法获取授权代码。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;invalid_scope&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;请求的作用域无效、未知或格式不正确。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;server_error&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;授权服务器遇到意外情况，无法满足请求。(此错误代码是必需的，因为500内部服务器错误HTTP状态代码不能通过HTTP重定向返回给客户端。)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;temporarily_unavailable&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;由于服务器暂时过载或维护，授权服务器当前无法处理该请求。(此错误代码是必需的，因为503服务不可用的HTTP状态代码不能通过HTTP重定向返回给客户端。)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;error_description&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPTIONAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;提供附加信息的人类可读ASCII
[USASCII]文本，用于帮助客户端开发人员理解所发生的错误。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;error_uri&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPTIONAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;一种带有错误信息的可读网页的URI标识，用于向客户端开发人员提供有关错误的附加信息。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_令牌端点&quot; &gt;令牌端点&lt;/h4&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;/oauth/token：令牌端点，通过上一步获取到的 &lt;strong&gt;授权码&lt;/strong&gt;
验证与生成令牌，完成第二个请求，携带如下参数：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必填&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;grant_type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;使用的授权模式，值固定为``authorization_code&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;code&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;上一步获得的授权码&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;redirect_uri&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;重定向URI，必须与上一步中的该参数值保持一致&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;client_id&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端的 id&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;scope&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RECOMMENDED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;授权范围，必须与第一步相同&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果访问令牌请求有效且经过授权，授权服务器将发出访问令牌和可选的刷新令牌，可以得到如下响应参数：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必有&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否有实现&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;access_token&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;授权服务器颁发的访问令牌&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;是&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;token_type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;令牌类型，该值大小写不敏感，可以是bearer类型或mac类型&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;是&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;expires_in&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RECOMMENDED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;过期时间，单位为秒&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;是&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;refresh_token&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPTIONAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;表示更新令牌，用来获取下一次的访问令牌&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;是，需要设置&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;scope&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPTIONAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;权限范围，如果有，则与客户端申请的范围一致&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;是&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果请求客户端身份验证失败或无效，授权服务器将返回错误响应，授权服务器使用HTTP
400（错误请求）状态代码进行响应（除非另有说明），并在响应中包含以下参数：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width: 99%;&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 17%;&quot;&gt;
&lt;col style=&quot;width: 7%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 56%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必有&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;值&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;error&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;invalid_request&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;请求缺少必需的参数，包含不受支持的参数值(授权类型除外)，重复参数，包含多个凭据，使用多个机制来验证客户端，或者格式不正确。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;invalid_client&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;客户端身份验证失败(例如，未知客户端、不包含客户端身份验证或不支持的身份验证方法)。授权服务器可以返回一个超文本传输协议401(未授权)状态码，以指示支持哪些超文本传输协议认证方案。如果客户端试图通过&lt;code&gt;授权&apos;&apos;请求头字段进行身份验证，授权服务器必须用一个HTTP401(未授权)状态代码进行响应，并包括与客户端使用的身份验证方案相匹配的&lt;/code&gt;WWW-Authenticate&apos;&apos;响应头字段。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;invalid_grant&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;所提供的授权授予(例如，授权代码、资源所有者凭证)或刷新令牌无效、过期、已撤销、不匹配授权请求中使用的重定向URI，或已向其他客户机发出。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;unauthorized_client&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;经过身份验证的客户端无权使用此授权授权类型。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;unsupported_grant_type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;授权服务器不支持授权授权类型。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;invalid_scope&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;请求的范围无效、未知、格式错误或超出了资源所有者授予的范围。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;error_description&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPTIONAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;提供附加信息的人类可读ASCII
[USASCII]文本，用于帮助客户端开发人员理解所发生的错误。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;error_uri&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPTIONAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;一种带有错误信息的可读网页的URI标识，用于向客户端开发人员提供有关错误的附加信息。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_密码模式&quot; &gt;密码模式&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这种模式可以理解成我们普通应用的用户名密码登录，在第三方接入的时候不建议使用这种模式，但是如果是自己的应用，那么这种模式是最为简单方便快捷的了。步骤只有一个：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
注意：以下所有请求都必须在请求头中携带上面所说的客户端加密信息！
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;用户携带用户名密码请求授权服务器，验证通过后下发令牌&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他只需要一个请求，所以她只有一个令牌端点：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_令牌端点_2&quot; &gt;令牌端点&lt;/h4&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;/oauth/token：令牌端点，携带如下参数请求即可：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;请求参数&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必填&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;grant_type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;使用的密码模式，值固定为``password&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;username&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;用户名&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;password&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;密码&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;scope&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OPTIONAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;请求权限范围&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请求成功和失败的响应同授权码模式。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_安全考虑&quot; &gt;安全考虑&lt;/h3&gt;
&lt;div class=&quot;admonitionblock important&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
注意：以下所有请求都必须在请求头中携带上面所说的客户端加密信息！
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;作为一个灵活且可扩展的框架，OAuth 的安全考虑取决于许多因素。spring
security oauth 为我们提供了一些默认的端点如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;/oauth/authorize：授权端点&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;/oauth/token：令牌端点&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;/oauth/token：令牌端点也同时拥有刷新用户的功能，请求参数如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必填&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;grant_type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;固定值为``refresh_token&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;refresh_token&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;请求到 token 时传过来的 refresh_token&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;/oauth/confirm_access：用户确认授权提交端点&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;/oauth/error：授权服务错误信息端点&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;/oauth/check_token：用于资源服务访问的令牌解析端点，请求参数如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;参数名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;是否必填&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;token&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REQUIRED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;得到的有效的令牌&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;/oauth/token_key：提供公有密匙的端点，如果你使用JWT令牌的话&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_技术选型&quot; &gt;技术选型&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;核心框架：spring boot&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;构建工具：maven&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;应用框架：spring boot data jpa&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;数据库：mysql&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;web： spring boot web&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试框架：junit5、spring boot test&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;开发工具：idea&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;安全框架：spring security oauth2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要对项目的基本初始化，也就是使用 idea 创建我们 spring boot 项目&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190709093428.png&quot; alt=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709093631.png&quot; alt=&quot;2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709094513.png&quot; alt=&quot;3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709095136.png&quot; alt=&quot;4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;父项目忘记添加 web 依赖了，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190709100047.png&quot; alt=&quot;5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/08/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190709101728.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可选，配置阿里云国内源仓库&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;repositories&amp;gt;
    &amp;lt;!--阿里云主仓库，代理了maven central和jcenter仓库--&amp;gt;
    &amp;lt;repository&amp;gt;
        &amp;lt;id&amp;gt;aliyun&amp;lt;/id&amp;gt;
        &amp;lt;name&amp;gt;aliyun&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;https://maven.aliyun.com/repository/public&amp;lt;/url&amp;gt;
        &amp;lt;releases&amp;gt;
            &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
        &amp;lt;/releases&amp;gt;
        &amp;lt;snapshots&amp;gt;
            &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
        &amp;lt;/snapshots&amp;gt;
    &amp;lt;/repository&amp;gt;
    &amp;lt;!--阿里云代理Spring 官方仓库--&amp;gt;
    &amp;lt;repository&amp;gt;
        &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;
        &amp;lt;name&amp;gt;Spring Milestones&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;https://maven.aliyun.com/repository/spring&amp;lt;/url&amp;gt;
        &amp;lt;releases&amp;gt;
            &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
        &amp;lt;/releases&amp;gt;
        &amp;lt;snapshots&amp;gt;
            &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
        &amp;lt;/snapshots&amp;gt;
    &amp;lt;/repository&amp;gt;
&amp;lt;/repositories&amp;gt;
&amp;lt;!--远程插件库--&amp;gt;
&amp;lt;pluginRepositories&amp;gt;
    &amp;lt;!--阿里云代理Spring 插件仓库--&amp;gt;
    &amp;lt;pluginRepository&amp;gt;
        &amp;lt;id&amp;gt;spring-plugin&amp;lt;/id&amp;gt;
        &amp;lt;name&amp;gt;spring-plugin&amp;lt;/name&amp;gt;
        &amp;lt;url&amp;gt;https://maven.aliyun.com/repository/spring-plugin&amp;lt;/url&amp;gt;
        &amp;lt;releases&amp;gt;
            &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
        &amp;lt;/releases&amp;gt;
        &amp;lt;snapshots&amp;gt;
            &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
        &amp;lt;/snapshots&amp;gt;
    &amp;lt;/pluginRepository&amp;gt;
&amp;lt;/pluginRepositories&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
注意：请自行配置 lombok 支持！！！
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样，我们的父项目基本就构建完成了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们下一篇回来完成第二件事，spring security oauth2 自动配置实现。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[2019，最后的轻狂]]></description><link>https://zyue.wiki/articles/2019/12/31/1577769144050.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/12/31/1577769144050.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_1_3&quot;&gt;1-3&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_4_6&quot;&gt;4-6&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_7_9&quot;&gt;7-9&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_10_12&quot;&gt;10-12&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_年少轻狂&quot;&gt;年少轻狂&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_未来&quot;&gt;未来&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2019
就这样过去了，总会感时伤怀，不觉之间心里有点小失落。在这一年有太多的遗憾，也成为了我在校的最后一年。有时候会很害怕走出校园，我喜欢校园的自由与恬静，那种平淡且没有压力的日子真的很让人迷恋与迷失。但我最为深信的一点就是，世间没有永恒，时间能够证明一切。所以我要不断的学习，为自己的下一程做准备。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;事实上这一年大多数时间都是浑浑噩噩的，刚尝试走出校园的看到外面的繁华和灯红酒绿，心性不免有些动摇。但是自己依旧保持那份”轻狂“，希望的是挑战自己，挑战未来。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_1_3&quot; &gt;1-3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2019 年 1 月 1 日，博客正式入住
solo，加入黑客派这个社区，一个为未来构建的开发者社区。在这里总会发现一些不一样的东西，现在有事没事就会打开来看看，已经成为一种习惯。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在年初的时候，也定下了一些目标，假期写完&lt;code&gt;小明同学&apos;&apos;，学会 Spring
security
oauth2。但是都因为各种各样的原因没有继续下去。小明同学已经烂尾，Spring
security oauth2
也是在年中的时候完成。自己有时就在想，计划这种东西，对我而言是否有用。总会因为一些莫名其妙的事情让计划变的一团糟。在大学几年的生活里面，深刻体会到了这一点，但大多的时候自己还是不愿意面对这种&lt;/code&gt;深奥&apos;&apos;的问题。该做计划就做，至于能不能完成，谁知道呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以自己不再轻易的给自己立
flag，因为自己不想为自己挖太多的坑以至于留下太多的遗憾。遗憾这种东西，往往会降低太多幸福感。但是幸福感却不是这样来保持的，我常常做的，就是追求更新的技术来满足自己的幸福感，即使老的技术并不是完全的精通，但是不代表我没有权利去追求新的事物。所以在年初的时候自己接触到了
material design 的设计理念，自己非常喜欢这种设计理念，虽然不是专门的 ui
设计师，但是自己的前端一直不断向他靠拢。而后又是 vaadin，一个可以使用
Java 来写 Web
前端的库，一开始是有眼前一亮的感觉，自己去动手实践了他，但是发现似乎并没有想象的那么好。而后又实践了很多东西，但是进步总是感觉不大。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;贵州的春节依旧是那么冷，大家普遍的感觉就是没有以前过年热闹，也许是因为人民要求的提高，也或许是因为自己是这样觉得的。幸运的是还有压岁钱可以拿，即使自己总是不知道自己钱花在了哪里。但是我依旧喜欢放鞭炮，喜欢烟花一时的绚丽多彩，也喜欢周围小孩子的欢声笑语，事实上自己就是一个小孩子。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;开学后的日子依旧那么平淡，很享受。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_4_6&quot; &gt;4-6&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;今年是我人生的转折点，也就是在 4-6
月的期间。可以说这三个月已经算是大部分决定了我的人生。因为在这段期间有个很重要的决定：考研。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;事实上对于是否考研，自己一直从未想过。从开始到现在，都是家里希望我去考，所以我要考。但是为什么要考？考哪里？考了对我来说意味着什么？我从来没想过。以至于到
4-6 月了，我依旧还是迷茫自己如何考？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;而这个时候有两个选择摆在我面前：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;好好复习，开始考研。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;学校项目，自主开发。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个选择题我选了很久，问过家里的意见，问过老师的意见，也问过同学的意见。但是其实没有人能够帮你，他们的意见或是说笑，或是鼓励、或是随意。但对我自己而言，我完全分析不出来利弊。那时的我真的很迷茫很痛苦，选择第一条会怎样？选择第二条又会怎样？人最怕的就是迷茫，迷茫的时候就会花费大量的时间做无用功，但是我不想做无用功。所以我选择找事情做，然而我能做什么呢？无非就是学习和写代码。我自然而然的开始写起了代码，因此我也自然而然的选择了第二条。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;说实话，那个时候真的希望一个我尊敬的人来指点我。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是我就放弃考研了吗？家里还对我寄托予以希望，所以我在接手学校项目的同时，还要去复习考研。但是我发现自主开发学习的时间和考研时间的比却是
9 : 1。而在后来的开发中，自己遇到很多很多很多问题，比如：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;前后端完全分离的授权方案&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;oauth2 授权协议&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;Spring security 对 oauth2 的支持&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;RBAC 模型在 Spring security oauth2 应用中动态鉴权&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;vue 前端动态路由和动态权限认证&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;等等等等很多问题。那时候没有人教，没有人带我。自己一个人去找资料，中文资料大多复制粘贴或者太基础无营养，去
google、stackoverflow、GitHub、Twitter、官网
等等地方一个一个的找。对于一个四级都没过的人来说，自己都不知道哪儿来的毅力。因为我们大四没有任何课程，所以大三的课程白天全程满课，只有晚上的时间研究研究。就这样过了两个月，自己才堪堪的把
Spring security OAuth 的一些东西明白、理解，也啃过 oauth2 的
RFC，也学习了 vertx 的 oauth2 相关的点。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这是这一年最大的收获。也许在未来的某天，自己会很感谢这段时间的自己吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在那一段时间自己真的很寂寞，我们玩得好的有八个人，每次我在学的时候，都可以听到他们打游戏、聊女孩子的笑声。但是自己必须要把一股子的冲动压下去，好好的学。这个时候我也终于知道伴侣是多么的重要，如果那个时候我有一个伴侣，可能就是另外一种体会把。但可惜我是``渣男&apos;&apos;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时非常遗憾的是，项目进展非常不顺利。整个项目组我完全叫不动任何人，只有自己一个人做，试想又如何做得好呢？他们总说我很厉害，我只不过把他们玩儿的时间花在了敲代码上而已。甚至我还给他们讲过一段时间的课，效果不假。最后又是烂尾。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过自己终于把考了三年的驾照拿到手了，高中毕业的时候报名的，现在才拿到。不得不说自己没有什么开车的天赋，但是努力终会有结果的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_7_9&quot; &gt;7-9&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最好的一件事是：自己搭建了我们项目组的授权中心，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最坏的一件事是：自己依旧还没有在进行考研的复习。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我总会在想，其实很多时候，自己心里早就已经做了一个决定？只是自己不愿意承担这种抉择，或者说不愿意承认自己心里的这种选择。但是事实就在眼前，自己不能与事实相违。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我一步一步的分离项目的授权部分，然后搭建了属于我们学校自己的 oauth2
授权中心，在某一刻，一种自豪会油然而生。但是这种自豪升起的那一科，又有一种心慌将它压下去，时刻提醒着自己。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己在七月的时候，开始尝试准备考研，学习了半个月时间的数学，再次回到了代码里面。现在想想，如果当初先复习的是专业课，可能体会就会有很大的不同，带来的效果和坚持，可能就不一样的把。但也仅仅是想想而已，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;7
月依旧待在学校上课，自己一个人做着学校的项目，有股倔强，也有一股害怕。自己不太适合作为一个团队的领导人，或许是因为和他们关系好了，很多时候我说的话并不管用。很多东西都是看一看就明白了，但是他们总是以太难为借口，不去学习。这或许就是惰性的一种吧，但我也无能为力，改变不了他们，我只有改变自己。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;放假回家以后，自己搭建了相关的资源服务器，学习了不少东西。并且也接触到了
kotlin，买了书来看。通过 kotlin + vert.x 也搭建了一个资源服务器使用。在
8
月里面，督促学弟们进行项目代码的书写，才发现他们的差距和我那么大，写的代码在我看来真的不太行，姑且不说
jdk8
的特性从不使用，光是一些非常简单减少嵌套的办法都不去采用，甚至有一个方法里面嵌套了五个
if
这种代码，或者是永远只会一条一条数据的操作。每次都要重构半天，我也就比他们大一届而已啊。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;随后按照专业要求，七月上完小学期的课程后，开学必须去北京实习，考研的可以留校半年。我周围的同学都去了，然而我以考研的名义留校了。宿舍只有我一个人，我选择搬到了和几个考研的同学一起住，这也是决定我后面决定的一个非常重大的因素吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;系主任答应开学不再给我任何任务，事实上他也做到了。九月开学后，自己完全不太接触关于项目的任何事。突然发现，自己闲下来了，除了考研，自己似乎没有什么事是比较重要的了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个时候的我似乎进入了一种”贪``的状态，因为在开学第一周，自己完全是玩儿过来的，没有写任何代码，也没有看书，就是打游戏看电视吃饭睡觉。由于没有任何课程，变的无比&apos;&apos;轻松“。自己贪恋这种感觉，更是一种&lt;em&gt;贪得无厌&lt;/em&gt;的状态，希望就这样生活下去。一个月的时间就是这样混过去了，似乎回到了大一只会打游戏的时候，还没有挂课、上课的烦恼。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;回想起来，自从小学期放假以后，原来宿舍的室友至今都没有见过面，自己似乎完全没有和外人接触，除了室友和家人还有食堂阿姨。不再有任何人和我接触，更多的就是和电脑待在一起。时间久了，越发的话少了，变得更加沉默了，这可能是学这个专业带给我的最大诟病把。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_10_12&quot; &gt;10-12&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;十月的时候，一起准备考研的一个室友和我都觉得考研无望，正好遇到了一个人工智能协同应用开发大赛。于是一起报名参加了，也就是那个时候开始，到十二月，一直都在写这个项目。断断续续，但是感觉进步并不是很大。五个人参加比赛的，但是两个学弟只是挂个名字，实际上还是我们三个学长在做，三个人做起来任务还是挺多的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然而比较幸运的是，这段时间自己正好从一个入党积极分子转发展对象和预备党员。这是这三个月最大的收获，虽然说自己总是抱怨又要去上党课，又要去培训，又要去讨论学习，但是自己真的在党课中收获到了很多。自己以前两耳不稳窗外事，但是党课的学习真的让我为自己是一个中国人感到自豪，一些伟大的人物，还有应该铭记的历史，都让我觉得加入中国共产党是对的。党课的时候有几位老师的讲座真的是让我明白了很多人生的方向和追求，对于老师来说可能就是一场普通的讲座或者分享，但是对我而言，就是非常宝贵的人生建议。有时候就是这样，在某一刻你会突然明白一些东西。也就是这样，人生才变的十分有趣。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这期间也认识了很多优秀的人，他们都很优秀，都非常值得我去学习。和优秀的人交朋友，简直会是一种享受，再次感叹入党真的是一个非常正确的决定。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我转为了一名预备党员后，正好是比赛的决赛阶段。这个比赛的奖金十分丰厚的，一等奖五万元，二等奖三万元，三等奖一万元，优秀奖两千元。只要进入决赛，就必定得奖。在复赛阶段我们是以第二的成绩进入的决赛，我们团队开发的三个人都很努力，即使有时候我说他们，但是我知道，大家都很尽力。这也许是我们大学期间最后一次的一起出现在一个
ppt 上了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/12/31/TIM%E6%88%AA%E5%9B%BE20191231121638.png&quot; alt=&quot;ppt&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我可以很负责的说，所有比赛团队中，我们项目技术是最好的，也是最先进且完善的。从运维，到前端，到后端，再到安全，都是非常完善的。但是第一名却不是我们，以第二名告终，未免有些许可惜。但是三个人分三万元，倒也乐意。路演的时候准备的四个备选方案都没用到，导致效果不理想，有这个结果倒也知足了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己原本没有打算找公司，后来我同学说可以把我推进他们公司，环境好，离家不远，就去试一试，得了
offer，试用期工资 6k
一月，考虑毕业后去看看，环境不错。不过我们比赛完毕，前三名是有一个去戴尔公司面试的机会的，到时候希望能够拿到
offer，然后在做对比吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;随后就是考研了，考研那几天压力特别大，不知道怎么和父母交代，在考场上看着空白的卷子，自己很是无助，但是我自己乐于接受这种结果。后来自己给父母说，自己的父母意外的开明，没有说任何怪我的话，叫我好好找工作，好好去北京实习。那一科真的很感动，自己心里也放下了一块大石头，不管怎么说我都是他们的孩子，是他们的骄傲啊。自己的父母真的很好，我最庆幸的就是自己有一个幸福美满的家庭，没有多灾多难，也没有什么生离死别。但是他们身体越发的虚弱了，父亲身体不适已经一周没有上班了，请假输液，母亲也感冒很严重还坚持去开店赚钱，心疼他们，我也只能好好学习以后好好的赚钱生活。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;原打算考完研回家的，谁知又是连续一周的党课培训，自己非常抱怨。但是赛翁失马，焉知非福？他反而改掉了我晚睡晚起的坏习惯。现在回家后的生活很有规律，作息也很正常，每天就是学习，带带我侄女，听听父母唠叨，聊聊天，自己很享受。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;就在昨天，老家一个亲属过世了，我爸妈去帮忙，我帮我妈看了半天的店铺，整个人都忙得不可开交，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那一刻自己都快被忙哭了。我真的不知道我母亲一个那么瘦小的人，怎么在那么高强度的工作下坚持下来的，整个店铺不到十平米，却挤满了十多个人，门口还有很多人排队。我一个人也是忙了近两个小时才忙完，算了一下，一天
500
块。那么高强度的工作值收获了五百块。那时候我真的心疼我的母亲，她那么小的身躯是要有多大的能力和毅力才能够一个人撑起那个店铺，撑起这个家的，而且一撑就是二十多年，如果没有母亲，我父亲只靠国家的固定工资绝对没有今天的我家和我的。父母真的是世界上最伟大的人。也怪不得父亲总是在下班后去店里帮忙，他们每天八点才回家吃饭了。而我以前总是抱怨他们回家晚饿肚子，那个时候的我是多么幼稚。如果不是生活所迫谁又愿意让自己的孩子在家饿着肚子呢？&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_年少轻狂&quot; &gt;年少轻狂&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;22
岁的我，在很多人眼里都是小孩，长不大的孩子。我有很多的好朋友，在贵州的，在福建的，在山东的，在北京的，在沈阳的，在上海的。他们每一个都是我的好朋友，每次和他们聊天都是那么轻松愉快，我再怎么幼稚他们都不会嫌弃我，再怎么耍赖他们都会惯着我，觉得自己真的很幸福。但是自己要一直不断向前，一直不断的努力，因为他们每一个人都很优秀。有的考上研了，有的有各种技能，还有的要出国。这些的一些，又一些，都是我必须前进的动力。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一年除了家里给的钱，得了很多钱，来源大概有如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;压岁钱&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;国家奖学金&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;校一等奖学金&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;比赛奖金&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;项目经费&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;一些外快&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;总的加起来也有几万了，比往年多了很多。也参加了一些比赛：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;我校的程序设计大赛 —— 一等奖&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;互联网 + —— 银奖&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;人工智能技能应用大赛 —— 二等奖&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;ICPC 贵州赛区 —— 银奖&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;ICPC 贵州邀请赛 —— 银奖&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;蓝桥杯 —— 省一&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;拒绝了 ICPC 中国邀请赛
，也拒绝了蓝桥杯的国赛，转而去考了软考。竞赛相比去年少了很多，也少了国奖。想想能够拿得出来的认证也就是
RHCE 和 中级软件设计师了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是却是迎来了一个有难度的挑战：毕业设计。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我的毕业设计是由系主任指定的：毕业设计指导系统。包括毕业选题、论文管理、指导记录、毕业答辩评分等等功能，这是我最后的一次的轻狂，我要尽力的把它做好！努力的完成我大学的最后一个项目，希望他称为留给学校的最后一笔财富，是第一届软件工程专业的学长留给后面的学弟学妹的最后一个项目。所以我为他立了很多指标，希望能够一一达到，也许是我狂妄，但我觉得我有狂妄的资本。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;也许在以后，自己再也没有机会去全心全意的去完成这么一件有意义的事情了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;非常喜欢党课的时候老师说的习主席说的一句话：”&lt;strong&gt;功成不必在我，功成必定有我&lt;/strong&gt;。“&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己非常乐意为学校和专业作出一份贡献。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_未来&quot; &gt;未来&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2020
将是我踏入社会的第一年，也是我毕业的一年。未来路途遥远，但我一点都不怕，有家人，有朋友，有兄弟，我还怕什么呢？只要保持一个向上的心去面对就好；乐观而又积极，平淡而又朴实。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;送给自己一句话：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我即少年慕磊落，谁能教我坦荡荡？&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;2020，与君共勉&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Manjaro 安装 jdk 8 / docker / docker compose 等常用软件记录]]></description><link>https://zyue.wiki/articles/2019/06/20/1561008381459.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/06/20/1561008381459.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_前提&quot;&gt;前提&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_oracle_jdk_安装&quot;&gt;oracle jdk 安装&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_下载_jdk&quot;&gt;下载 jdk&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_安装_jdk&quot;&gt;安装 jdk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_docker_安装&quot;&gt;Docker 安装&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_docker_compose_安装&quot;&gt;Docker-compose 安装&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_zsh&quot;&gt;zsh&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_gradle_vim_git_peek&quot;&gt;gradle, vim ,git， peek&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_前端&quot;&gt;前端&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_teamviewer&quot;&gt;teamviewer&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_初始&quot;&gt;初始&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_切换源&quot;&gt;切换源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_中文乱码&quot;&gt;中文乱码&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_搜狗输入法&quot;&gt;搜狗输入法&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_科学上网&quot;&gt;科学上网&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_pacman的彩蛋&quot;&gt;pacman的彩蛋&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_截图&quot;&gt;截图&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_安装_qq&quot;&gt;安装 qq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_tty_中文乱码&quot;&gt;tty 中文乱码&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_快捷键备份&quot;&gt;快捷键备份&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_全局快捷键&quot;&gt;全局快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_全局快捷键_2&quot;&gt;全局快捷键&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这几天都在折腾系统，无意义的折腾的那种。从manjaro kde 崩溃后换了 xfce
原以为 xfce 占用内存会少一点，但是其实相差不到一个G，而且为了好看上了
compiz ，但是总是蜜汁卡死，昨天一天卡死其次，实在受不了，所以再次换回
kde，，，真香！&lt;strong&gt;不过发现 jdk 的安装方式和以前不同了，不能够通过
&lt;code&gt;yaourt&lt;/code&gt; 直接安装了，因为他下不下来 jdk
了，所以需要绕一下。&lt;/strong&gt;另外记录一下自己安装的东西，不然每次都要一个一个去找真的太麻烦了。。。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_前提&quot; &gt;前提&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;开机卡死每次都会遇到&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;sudo vi /ect/default/grub&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在quiet后加上 nouveau.modeset=0，然后&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;sudo update-grub&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;确保你以及配置了 已经 源，并且能够使用 &lt;code&gt;yaourt&lt;/code&gt; 进行搜索安装。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_oracle_jdk_安装&quot; &gt;oracle jdk 安装&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_下载_jdk&quot; &gt;下载 jdk&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一种是去 &lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/&quot;&gt;官网&lt;/a&gt;
下载，不过你会发现需要登录什么的很麻烦，我在七牛云上备份了一个&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://downloads.echocow.cn/jdk-8u212-linux-x64.tar.gz&quot;&gt;七牛云链接
8u212&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://downloads.echocow.cn/jdk-8u221-linux-x64.tar.gz&quot;&gt;七牛云链接
8u221&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;下载完成后存放在当前用户的家目录下的 &lt;code&gt;Downloads&lt;/code&gt; 文件夹下，没有就使用
&lt;code&gt;mkdir ~/Downloads&lt;/code&gt; 创建一个&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_安装_jdk&quot; &gt;安装 jdk&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用命令进行查找安装&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;[echo@echo-pc ~]$ yaourt jdk
# 找到大约 第 55 个如下
# 55 aur/jdk8 8u212-1 (76) (2.48)
#   Oracle Java 8 Development Kit
==&amp;gt; 输入 n° 以安装需要的软件包（例如：1 2 3 或者是 1-3）
==&amp;gt; ---------------------------------
==&amp;gt; 55

# ......

==&amp;gt; 编辑 PKGBUILD ？ [Y/n] (&quot;A&quot; 忽略)
==&amp;gt; ----------------------------
==&amp;gt; n

#......

==&amp;gt; 编辑 jdk8.install ？ [Y/n] (&quot;A&quot; 忽略)
==&amp;gt; --------------------------------
==&amp;gt; n

==&amp;gt; 继续构建 jdk8 ？[Y/n]
==&amp;gt; ----------------
==&amp;gt; y&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;设置默认 &lt;code&gt;jdk&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;[echo@echo-pc ~]$ archlinux-java status
Available Java environments:
  java-8-jdk (default)
# 如果默认不是 jdk8，就使用 sudo archlinux-java set java-8-jdk 进行修改&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_docker_安装&quot; &gt;Docker 安装&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;运行 &lt;code&gt;sudo pacman -S docker&lt;/code&gt; 或 &lt;code&gt;yaourt -S docker&lt;/code&gt; 安装&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;运行 &lt;code&gt;sudo usermod -aG docker 当前用户名&lt;/code&gt; 添加用户组&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;注销用户，重启 docker 即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置镜像 &lt;a href=&quot;https://lug.ustc.edu.cn/wiki/mirrors/help/docker&quot;&gt;USTC&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_docker_compose_安装&quot; &gt;Docker-compose 安装&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# 下载
➜  ~ sudo curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

# 修改权限
➜  ~ sudo chmod +x /usr/local/bin/docker-compose

# 查看
➜  ~ docker-compose -v
docker-compose version 1.24.0, build 0aa59064&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_zsh&quot; &gt;zsh&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yaourt -S zsh
sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_gradle_vim_git_peek&quot; &gt;gradle, vim ,git， peek&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yaourt -S gradle vim git  peek&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_前端&quot; &gt;前端&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yaourt -S nodejs npm  yarn npm-check-updates ts-node&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_teamviewer&quot; &gt;teamviewer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yaourt -S teamviewer
teamviewer --daemon start
teamviewer --daemon enable&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2019.10.1 更新&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这段时间不停的重装系统，自己记录得还是太少啦，下面全部写一下吧，免得以后麻烦死人啦=-=&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_初始&quot; &gt;初始&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_切换源&quot; &gt;切换源&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pacman-mirrors -i -c China -m rank&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改/etc/pacman.conf文件 在文件后添加如下语句&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;[archlinuxcn]
SigLevel = Optional TrustedOnly
Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;导入GPG Key&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pacman -Syyu &amp;amp;&amp;amp; sudo pacman -S archlinuxcn-keyring&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;等很久很久…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_中文乱码&quot; &gt;中文乱码&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;manjaro 18 在更新后会出现中文字体缺失得情况，需要手动安装一下中文字体&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pacman -S wqy-bitmapfont
sudo pacman -S wqy-microhei
sudo pacman -S wqy-zenhei&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;三种字体总有一种可以使用&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_搜狗输入法&quot; &gt;搜狗输入法&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pacman -S fcitx-sogoupinyin fcitx-im fcitx-configtool # 图形化的配置工具&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装完毕还不可以使用，需要进行如下配置：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vim ~/.xprofile&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加如下语句&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=&quot;@im=fcitx&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置完毕之后，可以使用可视化界面调节输入法的设置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;fcitx-configtool&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注销后就可以使用啦&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_科学上网&quot; &gt;科学上网&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yaourt -S shadowsocks-qt5 electron-ssr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_pacman的彩蛋&quot; &gt;pacman的彩蛋&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;打开 &lt;code&gt;/etc/pacman.conf&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;在 &lt;code&gt;# Misc options&lt;/code&gt; 部分，去掉  &lt;code&gt;Color&lt;/code&gt; 前的 &lt;code&gt;#&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;添加一行 &lt;code&gt;ILoveCandy&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;这样在使用 &lt;code&gt;pacman&lt;/code&gt; 安装软件的时候，可以看到一个吃豆人233，因为pacman本身就是吃豆人的意思&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_截图&quot; &gt;截图&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;除了上面说到得 peek 可以截图以外，深度截图工具很不错。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pacman -S deepin-screenshot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_安装_qq&quot; &gt;安装 qq&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;pacman -S deepin.com.qq.office&lt;/code&gt; 或 &lt;code&gt;pacman -S deepin.com.qq.im&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一个是qq，一个是tim，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果无法启动&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;yaourt -S gnome-settings-daemon&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;然后运行 &lt;code&gt;/usr/lib/gsd-xsettings&lt;/code&gt;，或者后台运行
&lt;code&gt;nohup /usr/lib/gsd-xsettings &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;启动qq/tim&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过 &lt;code&gt;sudo ln /usr/lib/gsd-xsettings ~/.config/autostart-scripts/gsd-xsettings&lt;/code&gt;
添加开机自启&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2019-10-7 更新&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_tty_中文乱码&quot; &gt;tty 中文乱码&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;manjaro 的 tty 无法显示中文，一般下载东西的时候我会选择挂在 tty
上下载而不是进桌面环境。找了 Fbterm 来显示中文，值得一提的是，Fbterm
已经停止维护，目前 aur 上面的是来自于 git
上的，测试后目前可用，不过无法使用其配套的输入法支持 fcitx-fbterm 了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;yaourt fbterm&lt;/code&gt; 直接安装&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;sudo gpasswd -a 用户名 video&lt;/code&gt; 添加用户到指定组&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;fbterm&lt;/code&gt; 命令直接运行即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以修改 &lt;code&gt;~/.fbtermrc&lt;/code&gt; 进行自定义字体和大小配置，在运行第一次`fbterm`
命令后会自动生成这个文件。可以设置颜色，大小等，例如我的部分配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;font-names=wqy-microhei
font-size=18&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2019-10-23 更新&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_快捷键备份&quot; &gt;快捷键备份&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己的一些自定义快捷键&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://downloads.echocow.cn/manjaro/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%87%E4%BB%BD&quot;&gt;全局快捷键&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://downloads.echocow.cn/manjaro/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%87%E4%BB%BD&quot;&gt;自定义快捷键&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;快捷键沿用了部分 i3
的快捷键习惯，感觉还是挺顺手的。有些快捷键也挺好玩的，不过有些需要注意&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;META&lt;/code&gt; 键就是我们说的 &lt;code&gt;WIN&lt;/code&gt; 键，如图
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/10/5/jianpan.png&quot; alt=&quot;META&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;数字键盘分为两种，一种就是普通的数字键盘，一种是小键盘，如图
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/10/5/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20191023224136.png&quot; alt=&quot;数字键盘&quot;&gt;&lt;/span&gt;
在快捷键中 &lt;code&gt;NUM+5&lt;/code&gt; 指的是小键盘上的，不是普通数字键。例如 将窗口推至上侧
的快捷键是 &lt;code&gt;META+NUM+8&lt;/code&gt;，其实就是两个键，&lt;code&gt;WIN+8&lt;/code&gt;，此时 &lt;code&gt;8&lt;/code&gt; 是小键盘的
&lt;code&gt;8&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;部分快捷键需要安装相关的应用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_全局快捷键&quot; &gt;全局快捷键&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;动作&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;快捷键&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;常用等级&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;deepin 截图&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+ALT+D&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;打开命令行&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+ENTER&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;打开/缩回 Yakuake&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;F10&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;运行命令&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ALT+空格&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;用剪贴板内容运行命令&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ALT+SHIFT+F2&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;遍历窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ALT+TAB&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;遍历窗口(反向)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ALT+TAB+BACKTAB&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;遍历当前应用程序窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ALT+～&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;遍历当前应用程序窗口(反向)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ALT+～&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;窗口操作菜单&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ALT+F3&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;窗口到桌面 1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+F1&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;窗口到桌面 2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+F2&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;窗口到桌面 3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+F3&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;窗口到桌面 4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+F4&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;窗口上移一个桌面&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+↑&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;窗口下移一个桌面&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+↓&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;窗口左移一个桌面&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+←&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;窗口右移一个桌面&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+→&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;放大&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+=&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;缩小&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+-&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;更改窗口大小&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+S&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;挂起混成器&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ALT+SHIFT+F12&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;禁特效&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;关闭窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+Q&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;激活请求注意的窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+ALT+X&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口放到全部桌面&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+A&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口放至全屏&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+5&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口快速铺至上方&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+↑&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口快速铺至下方&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+↓&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口快速铺至左方&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+←&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口快速铺至右方&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+→&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口快速铺至右上方&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+9&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口快速铺至右下方&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+3&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口快速铺至左上方&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+7&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口快速铺至左下方&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+1&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口水平扩展&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM++&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口水平收缩&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+-&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口推至上侧&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+8&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口推至下侧&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+2&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口推至左侧&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+4&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;将窗口推至右侧&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+NUM+6&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换当前窗口分类&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+F7&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到上方的窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+ALT+↑&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到下方的窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+ALT+↓&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到左方的窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+ALT+←&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到右方的窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+ALT+→&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到上面的桌面&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+CTRL+↑&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到下面的桌面&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+CTRL+↓&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到左面的桌面&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+CTRL+←&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到右面的桌面&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+CTRL+→&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到桌面 1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+F1&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到桌面 2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+F2&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到桌面 3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+F3&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换到桌面 4&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+F4&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换鼠标点击效果&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+8&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换显示窗口(对当前桌面)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+F9&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;切换显示窗口(对全部桌面)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+F10&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;清除全部鼠标标记&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+F11&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;清除上一个鼠标标记&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+F12&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;杀死窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+ALT+ESC&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;设置窗口快捷键&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+K&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;显示桌面网格&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+F8&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;移动窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+SHIFT+M&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★☆&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;移动鼠标到焦点&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+F5&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;移动鼠标到中央&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+F6&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;桌面立方&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+F10&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;桌面球体&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+F11&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;桌面圆柱&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+F12&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;最大化窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+PgUp&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;最小化窗口&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;META+PgDown&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_全局快捷键_2&quot; &gt;全局快捷键&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;动作&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;快捷键&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;常用等级&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TIM 截图&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+ALT+A&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TIM 提取命令&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;CTRL+ALT+Z&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;★★★★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><link>https://zyue.wiki/post/关于/</link><guid isPermaLink="false">https://zyue.wiki/post/关于/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;普通二本第一届软件工程小白鼠。自己选了软工，从小接触计算机，但是只会打游戏。大二真正开始学习，然后慢慢的了解计算机，渐渐的接触了编程，开始走自己的路。不过很多时候还是一个没有长大的小孩子，喜欢三毛，所以用了她的英文名 Echo，自己属性为牛，也是头顶双漩很是浑，于是定下 Echo Cow——回响的牛。亦是我性格的写照，不过依旧活的很开心，家庭幸福，爸妈爱我，直到现在发现，学习是一件很快乐的事。自律是作用最大的，自己的路还很长，97年的我，在我的眼里，依旧十八(逃。。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;嘘，用心去听，他在回响。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;主 java ，想做前端，想搞安全，想走运维，想弄Android，想搞人工智能，想找另一半，啥都想哈哈哈~~然后现在还是一个 单身狗 + 后端码农 。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;还能对计算机保持一种兴奋，能够享受时间流逝，微微的眩晕。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;依旧保持一份天真，尚且存在一份活力。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;喜欢打游戏，喜欢做一些有成就感的事，更喜欢可爱的东西。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;人不帅但很暖，爱打闹但心细，不会说话但爱笑，感觉自己是个渣男。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;朋友很多，每天都很开心。笑起来眼睛就没有了，个子硬伤但不自卑，普通话不好但爱说普通话。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;很注重外表，渐渐地开始收拾自己。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;书屯了很多，但是看得速度跟不上自己屯书的速度。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;更乐意和小哥哥待在一起，但是反而女人缘不错。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;像个小孩子但是却不喜欢小孩子。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;总是向往美好的故事，常常走不出来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;(未完待续)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;今生不悔，来生不为。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你想和我交流，可以在下方留言，或者联系 &lt;a href=&quot;mailto:lizhongyue248@163.com&quot;&gt;lizhongyue248@163.com&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果觉得文章不错或者帮到了您，帮忙点点下面广告呗～谢谢啦～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[manjaro 诡异错误：键盘失灵]]></description><link>https://zyue.wiki/articles/2019/07/21/1563700292254.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/07/21/1563700292254.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_解决办法&quot;&gt;解决办法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在使用 manjaro
的时候遇到一个非常诡异的错误：键盘失灵。说起来这个问题其实在我第一次使
用manjaro
的时候就遇到了，但是不知道怎么处理，所以只有。。。换键盘。于是暂时买了一个键盘用着，原来的失灵键盘是这款，买了两年多了，只有
manjaro 会失灵：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/21/-66361bb61e703b18.jpg&quot; alt=&quot;达尔&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是最近因为用的键盘借给同学了，所以自己只能够换回这个键盘了，但是这个键盘时灵时不灵，一直很无奈，有时候重启就可以用了，具体失灵状况如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在正常的时候灯光流动变换是没有问题的，但是一摁，灯光就会卡住，键盘输入也无效，最近又没钱买不了新的键盘，然后就寻思解决办法。又是安驱动又是检查键盘中断，然后一次突发奇想就解决了。。。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_解决办法&quot; &gt;解决办法&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实很简单，就是在开机的过程中保持键盘键入即可。也就是说在以下的两个界面都要有键入：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/21/IMG_20190721_165251.jpg&quot; alt=&quot;one&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个界面就上下移动移回来换行确认第一个就可以了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/07/21/IMG_20190721_165304.jpg&quot; alt=&quot;two&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个界面就随便键入一些字母就可以了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后启动以后就不会出现键盘失灵的情况了，去年因为这个问题又是重装又是买键盘，今年找到很快就找到了”解决办法“，哈哈哈运气真的很重要～！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[高效 manjaro i3 —— 你值得拥有]]></description><link>https://zyue.wiki/articles/2019/03/15/1552649977490.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/03/15/1552649977490.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_i3_还是_awesome&quot;&gt;i3 还是 awesome&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_安装&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_右上角日期中文乱码&quot;&gt;右上角日期中文乱码&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_浮动问题&quot;&gt;浮动问题&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_科学上网&quot;&gt;科学上网&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_shadowsocks_非图形界面&quot;&gt;&lt;code&gt;shadowsocks&lt;/code&gt; 非图形界面&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_shadowsocks_qt5_图形界面&quot;&gt;&lt;code&gt;shadowsocks-qt5&lt;/code&gt; 图形界面&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_proxychains&quot;&gt;&lt;code&gt;proxychains&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_开机自启&quot;&gt;开机自启&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_qq_tim&quot;&gt;QQ / TIM&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_遇到问题&quot;&gt;遇到问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_定制主题&quot;&gt;定制主题&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_登录壁纸&quot;&gt;登录壁纸&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_默认终端&quot;&gt;默认终端&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_polybar&quot;&gt;&lt;code&gt;polybar&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_rofi&quot;&gt;&lt;code&gt;rofi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_推荐软件&quot;&gt;推荐软件&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_结束语&quot;&gt;结束语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2019 年 3 月 11 日， &lt;a href=&quot;https://www.deepin.org/2019/03/11/%E6%B7%B1%E5%BA%A6%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0%EF%BC%882019-03-11%EF%BC%89/&quot;&gt;深度系统更新&lt;/a&gt;;3
月 13 日，小雨，升级 deepin，显卡驱动崩溃，开机卡屏 LOGO
界面，多种方式解决，无效。告别 deepin。晚上很难受，觉得用了那么久的
linux，它给我的带来的是烦恼。回想一下自己使用的方式，似乎和 windows
一样的使用方式，依旧是图形界面，点击，运行，点击运行。感觉到的好处也就莫过于不用担心太多开发环境的问题。但是这真的就是
linux 吗？自己很迷茫。然后在犹豫是否继续使用 deepin 的时候，尝试了一下
ubuntu，可惜自己启动盘制作出问题，没有成功，而且自己也对 ubuntu
有这莫名的排斥情感。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后逛回到了 arch，找到了自己的第一个实体机安装的
&lt;a href=&quot;https://www.manjaro.org/&quot;&gt;manjaro&lt;/a&gt; 。19 年的官网，比起来 18
年的，变化了很多。不仅漂亮了很多，也有了更加完善的文档说明。曾经的
&lt;a href=&quot;https://www.manjaro.org/download/&quot;&gt;download&lt;/a&gt;
也从四五个到了现在的十多个版本，各有所长。也就是在这里，我找到了真正的高效的工具
&lt;a href=&quot;https://www.manjaro.org/download/i3/&quot;&gt;i3&lt;/a&gt; 和
&lt;a href=&quot;https://www.manjaro.org/download/awesome/&quot;&gt;awesome&lt;/a&gt;
。当了解了他们之后，自己觉得这才是真正的 linux
啊，能够提高我们开发者的工作效率，能够让我们完全脱离鼠标的 wm
真的是太让人着迷了。与那些华丽的 linux
不同，他们能够用u最少的资源做最效率的工作，我果断的选择了他们。然而却也遇到了不少问题，记录一下网上很难搜到的一些困难点。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_i3_还是_awesome&quot; &gt;i3 还是 awesome&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;说实话我一开始选的是
awesome，可是我做好启动盘后，在安装界面选择中文，他的中文完全是乱码。不得已我只有换了
i3，两个都是 vm 中的佼佼者，孰优孰劣，各有所好吧。先上截图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/3/16/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_20190316141254.png&quot; alt=&quot;manjaroi3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_安装&quot; &gt;安装&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;有了 manjaro kde
的安装经验，一路畅通无阻，遇到的问题莫过于就是显卡问题，见
&lt;a href=&quot;https://echocow.cn/articles/2018/09/16/1546344571882.html#b3_solo_h3_6&quot;&gt;manjaro
笔记 显卡问题&lt;/a&gt;，这样就解决了以下问题：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;安装时启动问题&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;安装完成后启动登录卡死的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;关机的时候完全卡死的问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_右上角日期中文乱码&quot; &gt;右上角日期中文乱码&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在安装和安装好以后，右上角的日期 某月 星期几
都是框框乱码。解决办法如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;找到 &lt;code&gt;/usr/share/conky/conky_maia&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用 &lt;code&gt;vim&lt;/code&gt; 命令 &lt;code&gt;：%s/Bitstream Vera/anti/&lt;/code&gt; 统一修改把
&lt;code&gt;Bitstream Vera&lt;/code&gt; 修改为 &lt;code&gt;anti&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后就方块就变成中文了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_浮动问题&quot; &gt;浮动问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个就是因为要使用 &lt;code&gt;yakuake&lt;/code&gt;
雷神终端，但是第一次打开的时候挺好的，第二次他就平铺了。但是我希望他是浮动在上方的，所以要将它修改为浮动的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;vim ~/.i3/config&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;for_window [class=&quot;yakuake&quot;] floating enable&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样她就浮动了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_科学上网&quot; &gt;科学上网&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_shadowsocks_非图形界面&quot; &gt;&lt;code&gt;shadowsocks&lt;/code&gt; 非图形界面&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;yaourt -S shadowsocks&lt;/code&gt; 安装&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;修改配置文件 &lt;code&gt;/etc/shadowsocks/config.json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;server&quot;:&quot;remote-shadowsocks-server-ip-addr&quot;,
    &quot;server_port&quot;:443,
    &quot;local_address&quot;:&quot;127.0.0.1&quot;,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;your-passwd&quot;,
    &quot;timeout&quot;:300,
    &quot;method&quot;:&quot;chacha20-ietf&quot;,
    &quot;fast_open&quot;:false,
    &quot;workers&quot;:1
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;server&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;服务端监听地址(IPv4或IPv6)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;server_port&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;服务端端口，一般为`443`&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;local_address&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;本地监听地址，缺省为`127.0.0.1`可用-b参数设置&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;local_port&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;本地监听端口，一般为`1080`&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;password&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;用以加密的密匙&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;timeout&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;超时时间（秒）&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;method&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;参阅 &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Encryption&quot;&gt;加密&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mode&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;设置为tcp或udp或tcp_and_udp&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;fast_open&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;是否启用 &lt;a href=&quot;https://github.com/clowwindy/shadowsocks/wiki/TCP-Fast-Open&quot;&gt;TCP-Fast-Open&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;wokers&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;worker数量，如果不理解含义请不要改&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;3&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;ss-local -c /etc/shadowsocks/config.json&lt;/code&gt;
运行。或可尝试手动运行：&lt;code&gt;ss-local -s &lt;em&gt;服务器地址&lt;/em&gt; -p &lt;em&gt;服务器端口&lt;/em&gt; -l &lt;em&gt;本地端端口&lt;/em&gt; -k &lt;em&gt;密码&lt;/em&gt; -m &lt;em&gt;加密方法&lt;/em&gt;&lt;/code&gt;。配合nohup和&amp;amp;可以使之后台运行，关闭终端也不影响：&lt;code&gt;#nohup ss-local -s &lt;em&gt;服务器地址&lt;/em&gt; -p &lt;em&gt;服务器端口&lt;/em&gt; -l &lt;em&gt;本地端端口&lt;/em&gt; -k &lt;em&gt;密码&lt;/em&gt; -m &lt;em&gt;加密方法&lt;/em&gt; &amp;amp;`增加&lt;/code&gt;-v`参数获取详细log信息&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;浏览器通过 &lt;code&gt;SwitchyOmega&lt;/code&gt; 可以科学上网。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_shadowsocks_qt5_图形界面&quot; &gt;&lt;code&gt;shadowsocks-qt5&lt;/code&gt; 图形界面&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;yaourt -S shadowsocks-qt5&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;运行 &lt;code&gt;ss-qt5&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;图形界面可以直接扫码导入，很方便，改下本地端口即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_proxychains&quot; &gt;&lt;code&gt;proxychains&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;yaourt -S proxychains&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;vim /etc/proxychains.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;末尾添加配置，例如 &lt;code&gt;socks5 127.0.0.1 1080&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;遇到一个问题，我希望用 &lt;code&gt;chrome&lt;/code&gt; 登录我的 &lt;code&gt;google&lt;/code&gt;
帐号同步我的书签、插件、应用，但是 &lt;code&gt;chrome&lt;/code&gt; 不能离线安装 &lt;code&gt;SwitchyOmega&lt;/code&gt;
的文件，很奇怪。然后发现 &lt;code&gt;chrome&lt;/code&gt; 在 &lt;code&gt;arch&lt;/code&gt; 上面没有 &lt;code&gt;chromium&lt;/code&gt;
支持好，https://chromium.googlesource.com/chromium/src/+/master/docs/linux_chromium_packages.md[官网（需要科学上网）]推荐的i也是用
&lt;code&gt;chromium&lt;/code&gt;，所以我换了，但是我希望科学上网在应用商店下载 &lt;code&gt;SwitchyOmega&lt;/code&gt;
，所以需要用 &lt;code&gt;proxychains&lt;/code&gt; 启动 &lt;code&gt;chromium&lt;/code&gt;，但是报错如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;[proxychains] config file found: /etc/proxychains.conf
[proxychains] preloading /usr/lib/libproxychains4.so
[proxychains] DLL init: proxychains-ng 4.13
[proxychains] DLL init: proxychains-ng 4.13
[proxychains] DLL init: proxychains-ng 4.13
[1]    6322 trace trap (core dumped)  proxychains chromium&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;找了一段时间在 &lt;a href=&quot;https://github.com/rofl0r/proxychains-ng/issues/45&quot;&gt;github&lt;/a&gt; 找到答案。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建一个 shell 脚本如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/bin/bash
function _start-with-proxy() {
    export SOCKS_SERVER=127.0.0.1:1080
        export SOCKS_VERSION=5
        chromium %U --user-data-dir=&quot;/home/[USER]/.chromium profiles/[PROFILEDIR]&quot;
}
_start-with-proxy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后 &lt;code&gt;chmod +x 文件名&lt;/code&gt; 添加权限，使用 &lt;code&gt;./文件名&lt;/code&gt;
运行，即可完美运行并且可以科学上网，然后就可以下载 &lt;code&gt;SwitchyOmega&lt;/code&gt;
这些啦～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_开机自启&quot; &gt;开机自启&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;以守护进程形式运行&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;systemctl start shadowsocks@配置名称&lt;/code&gt;，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;比如我的配置文件叫做 &lt;code&gt;ss .json&lt;/code&gt; ，运行 &lt;code&gt;systemctl start shadowsocks@ss&lt;/code&gt;
即可开启&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行 &lt;code&gt;systemctl enable shadowsocks@ss&lt;/code&gt; 即可开机自启。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_qq_tim&quot; &gt;QQ / TIM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里使用 deepin wine qq/tim&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前提：&lt;strong&gt;添加archlinuxcn源&lt;/strong&gt;。在 &lt;code&gt;/etc/pacman.conf&lt;/code&gt; 里加入以下代码：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;[archlinuxcn]
SigLevel = Never
Server =[http://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch](http://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;修改了pacman.conf之后，执行`pacman -Sy`命令更新一下数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;安装QQ或TIM的任意一种&lt;/strong&gt;。终端里运行`pacman -S deepin.com.qq.office` 或
&lt;code&gt;pacman -S deepin.com.qq.im&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;切换到对应目录 &lt;code&gt;cd /opt/deepinwine/apps/Deepin-TIM&lt;/code&gt; 或者
&lt;code&gt;/opt/deepinwine/apps/Deepin-QQ&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;运行 &lt;code&gt;./run.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;非常感谢
&lt;a href=&quot;https://github.com/wszqkzqk&quot;&gt;wszqkzqk同学&lt;/a&gt;，&lt;strong&gt;QQ或TIM只能开一个、不能多开&lt;/strong&gt;：据称是deepin-wine防止资源占用过多而限制的，建议使用QQ/TIM自带的多帐号切换功能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_遇到问题&quot; &gt;遇到问题&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_无法启动&quot; &gt;无法启动&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;X Error of failed request: BadWindow (invalid Window parameter)
Major opcode of failed request: 20 (X_GetProperty)
Resource id in failed request:
0x0 Serial number of failed request:
10 Current serial number in output stream: 10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;yaourt -S gnome-settings-daemon&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;然后运行 &lt;code&gt;/usr/lib/gsd-xsettings&lt;/code&gt;，或者后台运行
&lt;code&gt;nohup /usr/lib/gsd-xsettings &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;切换到对应目录 &lt;code&gt;cd /opt/deepinwine/apps/Deepin-TIM&lt;/code&gt; 或者
&lt;code&gt;/opt/deepinwine/apps/Deepin-QQ&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;运行 &lt;code&gt;./run.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;完美解决！参见 &lt;a href=&quot;https://github.com/wszqkzqk/deepin-wine-ubuntu/issues/12#issuecomment-443656358&quot;&gt;github&lt;/a&gt;，然后可以将第二步添加到
&lt;code&gt;i3&lt;/code&gt; 的启动项即可。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_中文问题&quot; &gt;中文问题&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;系统语言非中文时，中文全显示成方块，需要在
&lt;code&gt;/opt/deepinwine/tools/run.sh&lt;/code&gt; 中将 WINE_CMD 那一行修改为 &lt;code&gt;WINE_CMD=&quot;LC_ALL=zh_CN.UTF-8 deepin-wine&quot;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_定制主题&quot; &gt;定制主题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;安装想要的主题，比如 &lt;code&gt;arc-gtk-theme&lt;/code&gt; 和图标主题 &lt;code&gt;numix-icon-theme&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用 &lt;code&gt;$mod + d&lt;/code&gt; 调出 &lt;code&gt;dmenu&lt;/code&gt;，输入 &lt;code&gt;lxappearance&lt;/code&gt; 打开配置工具&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;自由配置即可主题即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_登录壁纸&quot; &gt;登录壁纸&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;把壁纸放在/usr/share/backgrounds/目录下（类似的非用户目录）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用命令打开配置 &lt;code&gt;lightdm-settings&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;选择背景图片即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_默认终端&quot; &gt;默认终端&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;vim ~/.i3/config&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;搜索 &lt;code&gt;+Return&lt;/code&gt;，大概在 31 行&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;修改为对应的终端，比如我用的 &lt;code&gt;konsole&lt;/code&gt; 如下&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;bindsym $mod+Return exec konsole&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_polybar&quot; &gt;&lt;code&gt;polybar&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;yaourt -S polybar&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;install -Dm644 /usr/share/doc/polybar/config $HOME/.config/polybar/config&lt;/code&gt;
弄一份 &lt;code&gt;example&lt;/code&gt; 的配置文件过来&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;编辑启动文件 &lt;code&gt;vim ~/.config/polybar/launch.sh&lt;/code&gt; 如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/usr/bin/env bash

# Terminate already running bar instances
killall -q polybar

# Wait until the processes have been shut down
while pgrep -u $UID -x polybar &amp;gt;/dev/null; do sleep 1; done

# Launch bar1 and bar2
# polybar bar1 &amp;amp;
# polybar bar2 &amp;amp;
polybar example &amp;amp;

echo &quot;Bars launched...&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;4&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;vim ~/.i3/config&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;搜索 &lt;code&gt;start_conky&lt;/code&gt;,注释掉&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;添加 &lt;code&gt;exec_always --no-startup-id ~/.config/polybar/launch.sh&lt;/code&gt;
替换原来系统的 &lt;code&gt;conky&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;注释掉 &lt;code&gt;i3bar_command i3bar&lt;/code&gt;，添加
&lt;code&gt;i3bar_command $HOME/.config/polybar/launch.sh&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;$mod + shift + r&lt;/code&gt; 重新加载 &lt;code&gt;i3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_rofi&quot; &gt;&lt;code&gt;rofi&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;安装 &lt;code&gt;yaourt -S rofi&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;编辑 &lt;code&gt;vim .i3/config&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;注释掉有 &lt;code&gt;$mod+d&lt;/code&gt; 的那一行，添加 &lt;code&gt;bindsym $mod+d exec rofi -show run&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;$mod+shift+r&lt;/code&gt; 重新加载配置&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;$mod+shift+d&lt;/code&gt; 运行&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;切换到 &lt;code&gt;cd ~/.config/rofi/&lt;/code&gt;, 使用 &lt;code&gt;rofi -dump-Xresources &amp;gt; config&lt;/code&gt;
生成配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;rofi-theme-selector&lt;/code&gt; 选择你想要的主题即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_推荐软件&quot; &gt;推荐软件&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;ydcv —— 翻译工具&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;ranger —— 命令行文本浏览&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;w3m —— 图片预览&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;deepin-screenshot —— deepin 良心截图工具&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;zsh —— 非常好用的 shell&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其他记起来再说，，，，&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_结束语&quot; &gt;结束语&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;花了一段时间才配置好，才熟悉了
&lt;code&gt;i3wm&lt;/code&gt;，现在只是配置好一些基本的，还有一些开发工具够我折腾=-=不过在折腾的时候熟悉了，工作效率提升真的太爽了。现在笔记本去教室都不用带鼠标了，在摸索一下
&lt;code&gt;idea&lt;/code&gt; 这些工具的快捷键，真的太棒！壮哉我 manjaro，壮哉 arch！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Faas/Serverless 架构 —— 阿里云无服务器计算/函数式计算]]></description><link>https://zyue.wiki/articles/2019/05/26/1558880702189.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/05/26/1558880702189.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_serverless&quot;&gt;Serverless&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_阿里云无服务器计算函数式计算&quot;&gt;阿里云无服务器计算/函数式计算&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_开通服务&quot;&gt;开通服务&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_新建服务&quot;&gt;新建服务&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_node_环境&quot;&gt;使用 node 环境&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_创建函数&quot;&gt;创建函数&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_编写代码&quot;&gt;编写代码&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试代码&quot;&gt;测试代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_java_环境&quot;&gt;使用 java 环境&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_创建函数_2&quot;&gt;创建函数&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_编写代码_2&quot;&gt;编写代码&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试代码_2&quot;&gt;测试代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;很早以前就已经知道 Faas/Serverless 架构，当时自己还很菜，只会
html/css/js 和 ssh
的小白，随着自己不断的成长，越发的了解架构的重要性。最近开始考虑学习一下
Serverless
架构，对于他的解释，网上已经有很多了，我是这样理解他的特点的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;不需要去做&lt;strong&gt;任何&lt;/strong&gt;运维操作，专注于业务的实现&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;足够小、足够单一、能够快速启动、运行、卸载&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;真正的按需使用&lt;/strong&gt;，请求到来时才开始运行，即用即走，不会在服务器/虚拟机中常驻&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;应用&lt;strong&gt;严重依赖&lt;/strong&gt;于特定的云平台、第三方服务&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;按运行&lt;strong&gt;时间和内存&lt;/strong&gt;来算钱的&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;服务器对用户来说是&lt;strong&gt;透明的&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;按 AWS 官方对于 Serverless 的介绍是这样的：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;服务器架构是基于互联网的系统，其中应用开发不使用常规的服务进程。相反，它们仅依赖于第三方服务（例如AWS
Lambda服务），客户端逻辑和服务托管远程过程调用的组合。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_serverless&quot; &gt;Serverless&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于 Serverless 的开发模式和运行模式，大概向如下这样：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;编写业务逻辑代码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;上传到 Serverless 平台，设定触发规则&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;触发规则，创建函数，运行&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当请求比较多的时候，他会进行自动的实例的扩展；当请求比较少，就会进行请求的收缩，当没有人访问的时候，就会自动卸载请求。这个函数足够小，他按需装载，自动伸缩，不用你苦逼地去规划硬件，安装软件，还可以按照使用情况付费，是不是有点心动了呢？但是必须要泼一盆冷水，他为了完成这些目标，牺牲了一个很重要的东西：&lt;strong&gt;状态&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于一个函数来说，他是没有状态的，这也就意味着他不能够进行状态的存储，因为每次他的启动可能是在另外一个完全不一样的环境下的。所以适合
Serverless 的应用大多都是无状态的应用。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_阿里云无服务器计算函数式计算&quot; &gt;阿里云无服务器计算/函数式计算&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;原本打算是使用 aws lambda
的，但是发现注册账号的时候，需要绑定信用卡信息，可是我是一个学生并没有一张信用卡，所以不得已寻找其他的
Serverless 平台，后来找到了
&lt;a href=&quot;https://serverless.aliyun.com/?spm=5176.137990.1214002.bt1.6431224evGXX4i&quot;&gt;阿里云无服务器计算&lt;/a&gt;，研究半天，发现对于他来说，整个流程应该是这样的（开通服务等部分省略）：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;新建服务：在 阿里云 平台上 &lt;strong&gt;新建一个服务&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;新建函数：在 新建的服务之中 &lt;strong&gt;创建一个函数&lt;/strong&gt;，设定
&lt;strong&gt;触发条件&lt;/strong&gt;，学习并查看他的 函数编写 API&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;上传函数：编写好业务的函数代码，上传至 创建好的函数之中&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试函数：对函数进行测试&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;创建完成：可以通过你设定的触发条件来进行触发函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;目前阿里云支持的环境如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;nodejs 6/8 （可在线编辑）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;python 2.7/3.6 （可在线编辑）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;php 7.2 （可在线编辑）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;java 8 （不可在线编辑）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;C# dotnetcore2.1 （不可在线编辑）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_开通服务&quot; &gt;开通服务&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你需要开通 阿里云无服务器计算 才能使用，开通是免费的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526222852.png&quot; alt=&quot;开通服务&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526222814.png&quot; alt=&quot;开通服务&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_新建服务&quot; &gt;新建服务&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526223447.png&quot; alt=&quot;新建服务&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526223701.png&quot; alt=&quot;新建服务&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用_node_环境&quot; &gt;使用 node 环境&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_创建函数&quot; &gt;创建函数&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526224033.png&quot; alt=&quot;创建函数&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526224551.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526224636.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526224731.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526224806.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526224821.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_编写代码&quot; &gt;编写代码&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526225231.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var getRawBody = require(&apos;raw-body&apos;)
module.exports.handler = function (request, response, context) {
    // get requset header
    var reqHeader = request.headers
    var headerStr = &apos; &apos;
    for (var key in reqHeader) {
        headerStr += key + &apos;:&apos; + reqHeader[key] + &apos;  &apos;
    }
    // get request info
    var url = request.url
    var path = request.path
    var queries = request.queries
    var queryStr = &apos;&apos;
    for (var param in queries) {
        queryStr += param + &quot;=&quot; + queries[param] + &apos;  &apos;
    }
    var method = request.method
    var clientIP = request.clientIP
    // get request body
    getRawBody(request, function (err, data) {
        var body = data
        // you can deal with your own logic here
        // set response
        // var respBody = new Buffer(&apos;requestURI&apos; + requestURI + &apos; path&apos; + path +  &apos; method&apos; + method + &apos; clientIP&apos; + clientIP)
        var respBody = new Buffer(&apos;requestHeader:&apos; + headerStr + &apos;\n&apos; + &apos;url: &apos; + url + &apos;\n&apos; + &apos;path: &apos; + path + &apos;\n&apos; + &apos;queries: &apos; + queryStr + &apos;\n&apos; + &apos;method: &apos; + method + &apos;\n&apos; + &apos;clientIP: &apos; + clientIP + &apos;\n&apos; + &apos;body: &apos; + body + &apos;\n&apos;)
        // var respBody = new Buffer( )
        response.setStatusCode(200)
        response.setHeader(&apos;content-type&apos;, &apos;application/json&apos;)
        response.send(respBody)
    })
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_测试代码&quot; &gt;测试代码&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526225548.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526225701.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;node 的就完成了～！python/php 等都是一样的&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用_java_环境&quot; &gt;使用 java 环境&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_创建函数_2&quot; &gt;创建函数&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526230006.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526230349.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_编写代码_2&quot; &gt;编写代码&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建一个 maven 项目&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526230823.png&quot; alt=&quot;pom&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526231436.png&quot; alt=&quot;Application&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后打包成 jar 包，可以使用 maven 插件或者直接 IDEA 打包，参见
&lt;a href=&quot;https://help.aliyun.com/document_detail/58887.html?utm_source=hacpai.com&quot;&gt;函数计算
JAVA&lt;/a&gt; 我使用 IDEA 打包，点击 &lt;code&gt;File → Project Structure&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190526231926.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190526231936.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190526231956.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;执行打包操作 &lt;code&gt;Build → Build Artifacts → build&lt;/code&gt; 即可生成 &lt;code&gt;jar&lt;/code&gt; 包&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190526232240.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;右键 &lt;code&gt;Copy Path&lt;/code&gt; 可以复制路径&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_测试代码_2&quot; &gt;测试代码&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526232439.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526232620.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/26/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190526232734.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 java 的创建就完成了，对于 java 来说还是麻烦了一点。。。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;感觉用着还是挺不错的，对于解释型语言，编译型语言确实麻烦了一点，不过也不是不能接受吧。后面再慢慢尝试如何让他更加安全的访问。Gateway
的方式其实相比 http 应该会好很多，但是 http 确实是挺方便的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;去年（2018年）年末 AWS 上线了基于 Lambda + API Gateway (+DynamoDB)
可以构建 WebSocket 应用&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不知道阿里云会不会有所动作，serverless
还是我比较喜欢的，不过无状态确实局限了他太多。有利有弊，需要根据合适的业务场景去选择。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[solo 独立部署和 Tomcat 模式自动更新]]></description><link>https://zyue.wiki/articles/2019/03/12/1552380944073.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/03/12/1552380944073.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_简述&quot;&gt;简述&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用&quot;&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用记录&quot;&gt;使用记录&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_更新记录&quot;&gt;更新记录&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_2019_3_18_v1_2_0_snapshot&quot;&gt;2019-3-18 v1.2.0-SNAPSHOT&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2019_3_13_v1_1_0_snapshot&quot;&gt;2019-3-13 v1.1.0-SNAPSHOT&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2019_3_12_v1_0_0_snapshot&quot;&gt;2019-3-12 v1.0.0-SNAPSHOT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_配置&quot;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_运行&quot;&gt;运行&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_独立部署注意事项&quot;&gt;独立部署注意事项&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_tomcat_部署注意事项&quot;&gt;tomcat 部署注意事项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_其它&quot;&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_示例&quot;&gt;示例&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_独立部署&quot;&gt;独立部署&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_tomcat_部署&quot;&gt;&lt;code&gt;Tomcat&lt;/code&gt; 部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_说明&quot;&gt;说明&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_独立部署_2&quot;&gt;独立部署&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_tomcat_部署_2&quot;&gt;Tomcat 部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_我的配置&quot;&gt;我的配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_未来&quot;&gt;未来&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_构建&quot;&gt;构建&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_结语&quot;&gt;结语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近很是焦虑啊，有时候想不清楚自己要干嘛。所以干脆懒得想，找点事做吧。自己搭建
&lt;code&gt;solo&lt;/code&gt; 也有三个多月了，从 &lt;code&gt;v2.8.0&lt;/code&gt; 一直到现在的
&lt;code&gt;v3.2.0&lt;/code&gt;，一直很喜欢这种社区与博客的交互方式。中间升级过很多版本，自己也有不下五次的升级经历了，修改了很多皮肤，但是头疼的就是更新问题，每次都要上服务器，所以有点难受。自己写了一个自动检测更新。自动更新的，当然是自用的，所以只支持
&lt;code&gt;linux 系统&lt;/code&gt;，可以支持 &lt;code&gt;独立部署&lt;/code&gt; 和 &lt;code&gt;Tomcat&lt;/code&gt; 部署，我的是 &lt;code&gt;centos&lt;/code&gt;
系统。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;github 地址： &lt;a href=&quot;https://github.com/lizhongyue248/solo-auto&quot;&gt;solo-auto&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置在线生成： &lt;a href=&quot;https://lizhongyue248.github.io/solo-auto-ui/&quot;&gt;solo-auto-ui&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;UI 地址： &lt;a href=&quot;https://github.com/lizhongyue248/solo-auto-ui&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;a href=&quot;https://vertx.io&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/vert.x-3.6.3-purple.svg&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_简述&quot; &gt;简述&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;solo 博客独立部署方式自动检测更新。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;功能：自动检测版本，自动下载更新，自动解压，自动复制配置文件以及其他的文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;目前仅支持 linux 版本。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;仅支持 &lt;code&gt;linux&lt;/code&gt; 系统下的独立部署、&lt;code&gt;tomcat&lt;/code&gt; 部署。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;建议您先备份数据库以及配置文件，虽然不对数据库进行任何操作，但是定时备份是好习惯。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;为避免不必要的错误，请务必使用 &lt;code&gt;root&lt;/code&gt; 用户运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;独立部署仅支持系统命令，不能使用别名定义的命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;独立部署请检查 &lt;code&gt;pkill -9 -f org.b3log.solo.Starter&lt;/code&gt;
命令是否能够杀死你的 &lt;code&gt;solo&lt;/code&gt; 进程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用&quot; &gt;使用&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;获取最新版本&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lizhongyue248/solo-auto/releases&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://downloads.echocow.cn/solo/soloauto-1.2.0-SNAPSHOT-fat.jar&quot;&gt;七牛云&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用记录&quot; &gt;使用记录&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;2019-3-26 早 九点四十六，&lt;code&gt;centos + 独立部署&lt;/code&gt;，自动升级至 v3.4.0
版本成功&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;strong class=&quot;line-through&quot;&gt;警告：DNS
解析出现一些小问题，不影响使用，但是可以改进。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;解决办法：不使用 &lt;code&gt;vertx&lt;/code&gt; 自带的 dns 解析，使用本地 dns 解析&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;思路：每次更新都要上去修改 banner 图片的 url&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;解决办法：直接配置 &lt;code&gt;solo-auto&lt;/code&gt;
移动复制功能覆盖皮肤下的图片就好啦=-=好笨还去改 css&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/3/24/201903261159171111111.png&quot; alt=&quot;v3.4.0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;2019-3-18 晚 十二点，&lt;code&gt;centos + 独立部署&lt;/code&gt;，自动升级至 v3.3.0 版本成功&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;strong class=&quot;line-through&quot;&gt;已知问题：点对点会由于下载比较慢的问题将错误信息的写入日志&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;解决办法：完全丢弃超时响应&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong class=&quot;line-through&quot;&gt;已知问题：现在 favicon 可以自由配置&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;解决办法：所以应该删除默认复制的两个文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190318085800.png&quot; alt=&quot;v3.3.0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_更新记录&quot; &gt;更新记录&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_2019_3_18_v1_2_0_snapshot&quot; &gt;2019-3-18 v1.2.0-SNAPSHOT&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;删除默认复制的 &lt;code&gt;favicon&lt;/code&gt; 两个文件，见
&lt;a href=&quot;https://github.com/b3log/solo/issues/12706?utm_source=hacpai.com&quot;&gt;issue&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;默认检测时间由 &lt;code&gt;6&lt;/code&gt; 小时变为 &lt;code&gt;1&lt;/code&gt; 小时&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;默认版本修改为 &lt;code&gt;v3.3.0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;延长 &lt;code&gt;EventBus&lt;/code&gt; 超时等待时间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意：这可能是 &lt;code&gt;v3&lt;/code&gt; 版本最后一次更新 &lt;code&gt;solo-auto&lt;/code&gt;，因为作为一个辅助
&lt;code&gt;solo&lt;/code&gt; 的存在，不应该让他像 &lt;code&gt;solo&lt;/code&gt;
一样频繁更新。并且现在已有的功能已经适用大多情况，所以以后只要 &lt;code&gt;solo&lt;/code&gt;
不进行大版本的更新或者 &lt;code&gt;solo-auto&lt;/code&gt; 出现重大 &lt;code&gt;bug&lt;/code&gt;，将不再更新此项目。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_2019_3_13_v1_1_0_snapshot&quot; &gt;2019-3-13 v1.1.0-SNAPSHOT&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;添加 &lt;code&gt;tomcat&lt;/code&gt; 部署方式自动检测更新&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;现 &lt;code&gt;homeDir&lt;/code&gt; 末尾可以不添加文件分隔符 &lt;code&gt;/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;现 &lt;code&gt;startCommand&lt;/code&gt; 开头可以不添加英文分号 &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;添加 &lt;code&gt;debug&lt;/code&gt; 参数开启运行时的文件路径获取详情&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_2019_3_12_v1_0_0_snapshot&quot; &gt;2019-3-12 v1.0.0-SNAPSHOT&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;独立模式部署&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_配置&quot; &gt;配置&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在线配置生成：https://lizhongyue248.github.io/solo-auto-ui/[solo-auto-ui]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/solo/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190609170931.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意，你的配置将会完全覆盖默认配置！配置文件为 &lt;code&gt;json&lt;/code&gt; 格式&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;属性名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;默认值&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;latestUrl&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;String&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://api.github.com/repos/b3log/solo/releases/latest&quot; class=&quot;bare&quot;&gt;https://api.github.com/repos/b3log/solo/releases/latest&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;最新版本 solo
的 github restful 接口地址&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;homeDir&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;String&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/root/&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;解压后的文件夹路径，结尾必须有文件分隔符
&lt;code&gt;/&lt;/code&gt;，当前版本以及新版本都会存放在此目录&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;deploy&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;String&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;solo&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;部署方式，可选 &lt;code&gt;tomcat&lt;/code&gt;，其他值无效&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;tomcatDir&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;String&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;solo&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;tomcat&lt;/code&gt; 部署在 &lt;code&gt;webapps&lt;/code&gt; 目录下的 &lt;code&gt;solo&lt;/code&gt;
的文件名称&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;interval&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;几小时检测一次版本更新&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;version&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;String&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;v3.3.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;当前已经部署的版本号，格式必须与 github 上相同&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;timeOut&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Number&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Event Bus 等待时间&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;otherFiles&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Array&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[``favicon.ico&apos;&apos;, favicon.png&quot;]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;其他的需要移动的文件名称&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;startCommand&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stirng&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;;nohup java -cp WEB-INF/lib/*:WEB-INF/classes org.b3log.solo.Starter &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;启动命令，前面必须加英文符分号 &lt;code&gt;;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_运行&quot; &gt;运行&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请注意：建议以 root 身份运行，否则可能会出现权限问题无法执行命令的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;前台运行，假设配置文件与 &lt;code&gt;jar&lt;/code&gt; 包位于同一目录且名称为 &lt;code&gt;solo-auto.json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;java -jar soloauto-1.0.0-SNAPSHOT-fat.jar -conf solo-auto.json&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;后台运行，假设配置文件与 &lt;code&gt;jar&lt;/code&gt; 包位于同一目录且名称为 &lt;code&gt;solo-auto.json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;nohup java -jar soloauto-1.0.0-SNAPSHOT-fat.jar -conf solo-auto.json &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;建议，先前台运行，检查控制台输出中的配置文件是否有配置错误，确认无误且不报错后，再后台运行。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_独立部署注意事项&quot; &gt;独立部署注意事项&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;正在运行的 &lt;code&gt;solo&lt;/code&gt; 的文件夹的目录名称必须类似为 &lt;code&gt;solo-v3.1.0&lt;/code&gt; 形式。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;建议以 &lt;code&gt;root&lt;/code&gt; 方式运行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_tomcat_部署注意事项&quot; &gt;tomcat 部署注意事项&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;请注意填写以下属性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;属性&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;注意&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;homeDir&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;tomcat&lt;/code&gt; 的 &lt;code&gt;webapps&lt;/code&gt; 目录&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;deploy&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;tomcat&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;tomcatDir&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;tomcat&lt;/code&gt; 的 &lt;code&gt;webapps&lt;/code&gt; 下的部署 &lt;code&gt;solo&lt;/code&gt; 的文件夹名称&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_其它&quot; &gt;其它&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Q: 为什么会写这个？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A: 从 &lt;code&gt;V2.8.0&lt;/code&gt; 开始用 &lt;code&gt;solo&lt;/code&gt;，至今到了
&lt;code&gt;V3.2.0&lt;/code&gt;，以前除了部署应用的时候上一下服务器，其他时候都用不上，&lt;code&gt;hexo&lt;/code&gt;
这些博客基本很少更新。现在每次更新都要上去重复一边操作，实在太麻烦了。但是又特别喜欢
&lt;code&gt;solo&lt;/code&gt; 这样活跃的博客与社区，所以遇到问题当然是想自己解决下问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Q: 为什么不用 &lt;code&gt;docker&lt;/code&gt;？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A: 服务器资源有限，除了 &lt;code&gt;solo&lt;/code&gt; 还运行者其他的应用，运行 &lt;code&gt;docker&lt;/code&gt;
就会有一些资源被占用，并且想自己 &lt;code&gt;DIY&lt;/code&gt;
部分主题比较麻烦，每次都要进服务器，再进容器里面改，为了运行 &lt;code&gt;solo&lt;/code&gt;
直接上 &lt;code&gt;docker&lt;/code&gt; 觉得没必要。如果后面还有应用使用 &lt;code&gt;docker&lt;/code&gt; 会换，或者 D
大说的会重写 &lt;code&gt;Docker&lt;/code&gt; 镜像构建的时候可能会换。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Q: 为什么不用 &lt;code&gt;tomcat&lt;/code&gt;？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A: &lt;code&gt;tomcat&lt;/code&gt; 跑着其它应用，没做负载均衡，并且担心访问速度，所以直接用
&lt;code&gt;独立容器 + nginx&lt;/code&gt; 部署了。v1.1.0 版本已经可以使用tomcat&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_示例&quot; &gt;示例&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_独立部署&quot; &gt;独立部署&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;运行在指定端口：请修改 &lt;code&gt;startCommand&lt;/code&gt;, &lt;strong&gt;前面一定要加分号 &lt;code&gt;;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;startCommand&quot;:&quot;;nohup java -cp &apos;WEB-INF/lib/*:WEB-INF/classes&apos; org.b3log.solo.Starter -lp 8765 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;如果你需要复制其它文件，可以采用这个配置：请修改 &lt;code&gt;otherFiles&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;homeDir&quot;: &quot;/root/&quot;,
  &quot;version&quot;: &quot;v3.3.0&quot;,
  &quot;otherFiles&quot;: [
    &quot;favicon.ico&quot;,
    &quot;favicon.png&quot;,
    &quot;background.jpg&quot;
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;解释如下:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;col style=&quot;width: 30%;&quot;&gt;
&lt;col style=&quot;width: 30%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;属性名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;值&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;homeDir&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/home/echocow/&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;解压后的文件夹路径，结尾必须有文件分隔符，当前版本以及新版本都会存放在此目录&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;version&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;v3.3.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;当前已经启动且部署好的 solo 版本&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;otherFiles&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;[&lt;code&gt;favicon.ico&apos;&apos;, &lt;/code&gt;favicon.png&apos;&apos;, ``background.jpg&apos;&apos;]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;其它需要复制的文件，一旦填写，就会覆盖默认的，所以这里要加上默认的，然后多加了
&lt;code&gt;background.jpg&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;如果你不需要复制其它文件，可以采用这个配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;homeDir&quot;: &quot;/home/echocow&quot;,
  &quot;version&quot;: &quot;v3.2.0&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;解释如下:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;属性名&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;值&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;homeDir&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;/home/echocow/&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;解压后的文件夹路径，结尾必须有文件分隔符，当前版本以及新版本都会存放在此目录，默认
/root/&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;version&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;v3.2.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;当前已经启动且部署好的 solo 版本&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_tomcat_部署&quot; &gt;&lt;code&gt;Tomcat&lt;/code&gt; 部署&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;假设我现在已经部署好了 &lt;code&gt;solo&lt;/code&gt;，并且路径为
&lt;code&gt;/home/echo/Other/apache-tomcat-9.0.16/webapps/solo&lt;/code&gt;，配置文件如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;homeDir&quot;: &quot;/home/echo/Other/apache-tomcat-9.0.16/webapps/&quot;,
  &quot;deploy&quot;: &quot;tomcat&quot;,
  &quot;tomcatDir&quot;: &quot;solo&quot;,
  &quot;version&quot;: &quot;v3.2.0&quot;,
  &quot;otherFiles&quot;: [
    &quot;favicon.ico&quot;,
    &quot;favicon.png&quot;,
    &quot;background.jpg&quot;
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其中 &lt;code&gt;deploy&lt;/code&gt; 和 &lt;code&gt;tomcatDir&lt;/code&gt; 必填&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_说明&quot; &gt;说明&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 vertx 事件驱动，使用 &lt;code&gt;Event Bus&lt;/code&gt; 点对点消息模式，&lt;code&gt;MainVerticle&lt;/code&gt;
获取默认配置，再获取用户配置以覆盖默认配置。然后分别部署两个
&lt;code&gt;Verticle&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;WebClientVerticle&lt;/code&gt; 定时检测版本&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;FileVerticle&lt;/code&gt; 处理文件下载、移动操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_独立部署_2&quot; &gt;独立部署&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;0&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;WebClientVerticle&lt;/code&gt;
检测当前最新版是否与配置中的版本匹配，如果不匹配，携带请求的部分信息通知
&lt;code&gt;FileVerticle&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;FileVerticle&lt;/code&gt;
使用类名注册一个处理器以接受请求，收到通知以后，获取最新版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;下载最新版本的 &lt;code&gt;war&lt;/code&gt; 包，解压，然后移动用户自定义的文件（配置文件中
&lt;code&gt;otherFiles&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;移动 &lt;code&gt;solo&lt;/code&gt;
配置文件：&lt;code&gt;local.properties&lt;/code&gt;，&lt;code&gt;latke.properties&lt;/code&gt;，&lt;code&gt;solo.properties&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;复制完毕后，使用 &lt;code&gt;pkill -9 -f org.b3log.solo.Starter&lt;/code&gt; 杀死以前的
&lt;code&gt;solo&lt;/code&gt; 进程，&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用
&lt;code&gt;cd 解压后的路径;nohup java -cp WEB-INF/lib/&lt;strong&gt;:WEB-INF/classes org.b3log.solo.Starter &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/strong&gt;&lt;/code&gt;
命令启动
&lt;code&gt;solo&lt;/code&gt;，后面的启动命令用户可以自定义，*请注意：自定义启动命令前请务必加上分号！&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;FileVerticle&lt;/code&gt; 执行完毕，回复 &lt;code&gt;WebClientVerticle&lt;/code&gt;
，&lt;code&gt;WebClientVerticle&lt;/code&gt; 收到回复日志记录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_tomcat_部署_2&quot; &gt;Tomcat 部署&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个过程不会重启 tomcat。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;0-3 同上&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;修改原来版本的 &lt;code&gt;solo&lt;/code&gt; 的文件夹名称为 &lt;code&gt;tomcatDir配置的名称+当前时间&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;修改新下载的 &lt;code&gt;solo&lt;/code&gt; 的文件夹名称为 &lt;code&gt;tomcatDir&lt;/code&gt; 所配置的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;FileVerticle&lt;/code&gt; 执行完毕，回复 &lt;code&gt;WebClientVerticle&lt;/code&gt;
，&lt;code&gt;WebClientVerticle&lt;/code&gt; 收到回复日志记录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_我的配置&quot; &gt;我的配置&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2019 年 3 月 26 日&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;code&gt;solo-auto.json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;startCommand&quot;:&quot;;nohup java -cp &apos;WEB-INF/lib/*:WEB-INF/classes&apos; org.b3log.solo.Starter -lp 8765 &amp;gt;/root/solo-auto/soloInfo.log 2&amp;gt;&amp;amp;1 &amp;amp;&quot;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;version&quot;:&quot;v3.4.0&quot;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;otherFiles&quot;:[
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;skins/Finding/images/header-bg.jpg&quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;启动命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nohup java -jar soloauto-1.2.0-SNAPSHOT-fat.jar -conf solo-auto.json &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_未来&quot; &gt;未来&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;0&quot;&gt;
&lt;li &gt;
&lt;p&gt;目前没有写 &lt;code&gt;windows&lt;/code&gt; 的打算。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;打算加入邮件或者短信通知，以能够更好的感知博客更新变化。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;考虑是否加入 &lt;code&gt;web&lt;/code&gt; 页面，但是觉得没必要。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;想过做成 &lt;code&gt;solo&lt;/code&gt;
插件，但是文档太少，并且感觉局限性比较大且自己水平有限，所以放弃了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_构建&quot; &gt;构建&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./mvnw clean test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;打包&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./mvnw clean package&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./mvnw clean exec:java&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_结语&quot; &gt;结语&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;也不知道能不能帮助到您，不过还是希望这个小东西能够为您带来方便，如果有问题请在
&lt;a href=&quot;https://github.com/lizhongyue248/solo-auto/issues&quot;&gt;github&lt;/a&gt;
上提出；如果对您有帮助，欢迎给个 star 哈。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[智慧树/知到 自动看课脚本 ——js版]]></description><link>https://zyue.wiki/articles/2019/04/07/1554643306922.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/04/07/1554643306922.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_使用方式&quot;&gt;使用方式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_源代码&quot;&gt;源代码&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_截图&quot;&gt;截图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 jquery 完成自动看课，自动答题，自动倍数播放等，可以自由设置参数等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;友情提醒：刷课有风险，由于是纯 js
代码，所以我个人觉得我的这个是风险最低的几乎为零，但是却不敢保证完全没有风险。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;免责申明：本脚本仅供技术交流，请勿用于商业及非法用途，如产生法律纠纷与本人无关！使用后产生的一切后果由使用者自行承担，本人概不负责。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用方式&quot; &gt;使用方式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;F12 打开开发者工具&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;选择控制台（console）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;粘贴源代码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;设置好参数，点击开始即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_源代码&quot; &gt;源代码&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;/**
* 回答问题
*/
function echo_question() {
  if ($(&quot;#tmDialog_iframe&quot;).length &amp;gt; 0) {
    $.each($(&quot;#tmDialog_iframe&quot;).contents().find(&quot;input[type=&apos;radio&apos;]&quot;),(index,value) =&amp;gt; {
      value.click()
      if($(&quot;#tmDialog_iframe&quot;).contents().find(&quot;.exam_correct&quot;).length &amp;gt; 0){
        console.log(&quot;回答问题成功! 正确答案: &quot; + $(value).parent().text().trim())
        setTimeout(() =&amp;gt; {
          $(&quot;.popbtn_cancel&quot;).click()
        }, 1000)
        return false
      }
    });
    // 多选默认全选，不判断对错
    $.each($(&quot;#tmDialog_iframe&quot;).contents().find(&quot;input[type=&apos;checkbox&apos;]&quot;),(index,value) =&amp;gt; {
      value.click()
      setTimeout(() =&amp;gt; {
          $(&quot;.popbtn_cancel&quot;).click()
      }, 1000)
    });
  }
}

function echo_play_method () {
   if ($(&quot;#echo-play-y&quot;).prop(&quot;checked&quot;)) {
          $(&quot;.line1bq&quot;).click()
   }
}

/**
* 设置
*/
function echo_set () {
  if($(&apos;#echo-sound-y&apos;).prop(&quot;checked&quot;)){
    $(&quot;.volumeIcon&quot;).click()
  }
  if($(&apos;#echo-rate-y&apos;).prop(&quot;checked&quot;)){
    $(&quot;[rate=&apos;1.5&apos;]&quot;).click()
  }
}

/**
* 开始
*/
function echo_cow () {
  echo_play = !echo_play;
  if (echo_play) {
      echo_tip.text(&quot;停止&quot;);
      echo_status.text(&quot;状态: 运行中...&quot;);
      $(&apos;.playButton&apos;).click()
      echo_play_method()
      setTimeout(() =&amp;gt; {
        echo_set()
      }, 1000)
      echo_get()
      echo_id = setInterval(echo_get,$(&apos;#echo-time&apos;).val() * 1000)
      console.log(&quot;运行中...&quot;)
  } else {
      echo_tip.text(&quot;start&quot;)
      echo_status.text(&quot;状态: 已停止...&quot;)
      window.clearInterval(echo_id)
      console.log(&quot;已停止&quot;)
  }
}

/**
* 检测
*/
function echo_get () {
  console.log((++echo_times) + &quot; times run...&quot;);
  echo_question()
  if ($(&apos;.passTime&apos;).css(&quot;width&quot;) == &apos;100%&apos; || $(&quot;.progressbar_box_tip&quot;).html().indexOf(&quot;100%&quot;) &amp;gt; 0) {
    $(&quot;#nextBtn&quot;).click()
    setTimeout(() =&amp;gt; {
      echo_play_method()
    }, 1000)
    setTimeout(() =&amp;gt; {
      echo_set()
    }, 3000)
  }
}


var echo_box = $(&quot;&amp;lt;div style=&apos;background: wheat;padding: 20px;&apos;&amp;gt;&amp;lt;h4 style=&apos;margin: 0;&apos;&amp;gt;欢迎使用! By: &amp;lt;u&amp;gt;&amp;lt;i&amp;gt;&amp;lt;a style=&apos;color: coral&apos; href=&apos;https://www.echocow.cn&apos; target=&apos;_blank&apos;&amp;gt;EchoCow&amp;lt;/a&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/u&amp;gt;&amp;lt;/h4&amp;gt;&amp;lt;h4 id=&apos;echo_status&apos; style=&apos;margin: 0;&apos;&amp;gt;当前状态: 停止...&amp;lt;/h4&amp;gt;&amp;lt;h4 style=&apos;margin: 0;&apos;&amp;gt;现在，你可以选择 &amp;lt;button id=&apos;echo_tip&apos; onclick=&apos;echo_cow()&apos;&amp;gt;开始&amp;lt;/button&amp;gt;&amp;lt;/h4&amp;gt;&amp;lt;/div&amp;gt;&quot;);
var echo_setting = $(&quot;&amp;lt;div style=&apos;background:wheat;padding:20px;&apos;&amp;gt;&amp;lt;p&amp;gt;设置&amp;lt;/p&amp;gt;&amp;lt;div&amp;gt;&amp;lt;label for=&apos;echo-time&apos;&amp;gt;运行间隔：&amp;lt;/label&amp;gt;&amp;lt;input type=&apos;number&apos; name=&apos;echo-time&apos; id=&apos;echo-time&apos; value=&apos;10&apos;&amp;gt;秒&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;是否关闭声音：&amp;lt;label for=&apos;echo-sound-y&apos;&amp;gt;&amp;lt;input id=&apos;echo-sound-y&apos; name=&apos;echo-sound&apos; type=&apos;radio&apos; checked=&apos;true&apos;&amp;gt;是&amp;lt;/label&amp;gt;&amp;lt;label for=&apos;echo-sound-n&apos;&amp;gt;&amp;lt;input id=&apos;echo-sound-n&apos; name=&apos;echo-sound&apos; type=&apos;radio&apos;&amp;gt;否 &amp;lt;/label&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;是否1.5倍速播放：&amp;lt;label for=&apos;echo-rate-y&apos;&amp;gt;&amp;lt;input id=&apos;echo-rate-y&apos; name=&apos;echo-rate&apos; type=&apos;radio&apos; checked=&apos;true&apos;&amp;gt;是&amp;lt;/label&amp;gt;&amp;lt;label for=&apos;echo-rate-n&apos;&amp;gt;&amp;lt;input id=&apos;echo-rate-n&apos; name=&apos;echo-rate&apos; type=&apos;radio&apos;&amp;gt;否 &amp;lt;/label&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;是否流畅模式播放：&amp;lt;label for=&apos;echo-play-y&apos;&amp;gt;&amp;lt;input id=&apos;echo-play-y&apos; name=&apos;echo-play&apos; type=&apos;radio&apos;&amp;gt;是&amp;lt;/label&amp;gt;&amp;lt;label for=&apos;echo-play-n&apos;&amp;gt;&amp;lt;input id=&apos;echo-play-n&apos; name=&apos;echo-play&apos; type=&apos;radio&apos; checked=&apos;true&apos;&amp;gt;否 &amp;lt;/label&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot;)
$(&apos;.main_right&apos;).prepend(echo_box)
$(&apos;.main_right&apos;).prepend(echo_setting)
var echo_tip = $(&apos;#echo_tip&apos;)
var echo_status = $(&apos;#echo_status&apos;)
var echo_id
var echo_times = 0
var echo_play = false
$(&quot;.main_right&quot;).css(&quot;overflow&quot;, &quot;auto&quot;)
console.clear()
console.log(&quot;初始化成功!请点击开始按钮开始...&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_截图&quot; &gt;截图&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/4/8/Peek%202019-04-08%2011-39.gif&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;刚刚才发现我朋友也写了=-=早半个小时看到我就懒得写了啊！！！尴尬，见
&lt;a href=&quot;http://www.rainss.cn/essay/1104.html&quot;&gt;rainss&lt;/a&gt;。祝大家刷课愉快哦哈哈哈哈～～～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[[阅读] 2019 阅读书单]]></description><link>https://zyue.wiki/articles/2019/04/07/1554568406455.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/04/07/1554568406455.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;书籍真的是世界上最美好的东西。自己何曾想过，会喜欢上阅读。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不知道从什么时候起，自己会感觉空虚，那种&lt;code&gt;无事可做&apos;&apos;的感觉让我害怕和恐慌。自学的时候疯狂吞噬视频，闲暇时刻也不愿翻翻那些早已褪色的书籍，在视频中囫囵吞枣以求进步。是的，对于挨踢来说，视频的确是&lt;/code&gt;进步最快的方式&apos;&apos;，也许你会用了，也许就懂了。直到某天，我再次拿起一本书来阅读的时候才发现，自己以前是多么可笑。不过不可否认，视频中的系统化的学习让我的``技术&apos;&apos;得以进步，但是却让我不再去思考。不再去看看世界，不再去看看外面。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己曾经很喜欢旅游，高考毕业去了广州，那是自己第一次出省，看着繁忙的街道，来来往往的从没见过的外国人，以及蒸笼一般的天气，让我对外面憧憬渐渐淡去。后来用爸妈给的钱，大一寒假独自一人去山东济宁，第一次坐飞机，第一次独自旅行，去了自己想去的孔地，在那里感受到了北方的气息，不免留恋，但是那时早已不再阅读任何书籍。后来拿着奖学金再次去了广州，找自己朋友，那时是冬天，大二寒假，不一样的广州却让我对他的印象一点点的改变，或许是因为对的人带来不同的感觉。在回来的高铁上，再次拾起我最爱的三毛。回来后的自己开始真正的学习，Head
first 系列让我找到了自己的兴趣。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可是，后面的日子，自己在各种所谓的比赛中奔波，不知道自己到底算不算成长。总会翻出高中的时候爱听的
心里FM，听着自己以前最喜欢听的那些文章，至今依旧未变。最后一次出省是一次国赛，去北京参加比赛，去了故宫便回了学校。不喜欢首都的快节奏，那样的节奏让我在短短的三天迷失自己，只会跟着人群随波逐流，那不是我想要的生活。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;今年过年，父母开车自驾去了云南，走过了花海，看过了瀑布，但是心里依旧提不起一点兴趣。回来后的假期，再次接触阅读，拿起了书。再次看了三毛的撒哈拉的故事，看见了哑奴依旧会流泪。那时想，自己还有救，我还没有变成一个彻头彻尾的傻瓜。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我开始寻找一本本书籍，那些尘封的，想看的都被我一一寻了出来。我很幸运的找到了自己兴趣，它是我的兴趣，我坚信他也会成为我的工作，我想，我可能不能继续看着三毛了，也不能去看托尔斯泰、契诃夫、巴尔扎克、福楼拜、鲁迅、蒲松龄这些大师的作品，因为我还需要生活，我希望的我的兴趣能够成为我的工作，所以我只有不断的去学习那些能够给未来的自己带来收益并且是我感兴趣的东西，我不知道这算不算可悲，但是在阅读的时候我是快乐的，我不觉得自己有实力去感动自己，但我觉得，在以后，我回忆起来的时候，我不会心中有愧以至于追悔莫及，那种感觉是很痛苦的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是我却害怕，因为我知道我是个什么样的人，自己会不会连一本都看不完就放弃？但是想想，那又如何？自己曾经害怕写东西，害怕分享，但是如今的自己不也做了吗？总要去面对一些事情的，自己越不愿意做的事情，就越要尝试去接受，那样自己才会真正的成长。前段时间看
TED，他的观点深深打动了我，要学会说不，自己越不敢做越不想做的事情，在道德层面以及法律层面上越要勇敢的尝试去做，那样的生活才会有趣，自己才会成长。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在阅读中，最让我着迷的就是时间的充实，这与刷抖音是不一样的，在阅读完一本书后，自己的思想以及心境都会得到洗礼，哪怕是一点点，那也值了。但是自己依旧找不回来那种想出去旅游的冲动了，电脑带来了我的兴趣，但是却带走了我一些东西。我有一腔激情，可以一个人走走，没有了那种冲动，其实更愿意来一片平静，平静的走走，其实也挺好。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;熟悉我的人都知道，自己依旧还是一个没有长大的孩子啊。自己想想，2019年，一个月一本书籍我已经很满足了，自己还有更重要的事情等着我去做。这里只会记录那些我正在看和已经看完的书，不会记那些自己想看还没看的书，因为担心自己看不完，因为自己确确实实是一个眼高手低的家伙。目标一个月一本我已经很知足了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;《spring 实战》 —— 看了一半多，由于开学暂时搁置了。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;《敏捷软件开发原则、模式与实践》——
非常好的一本书，但是内容有些许过时，我不会把它全部看完，但是会选择看完精华部分，&lt;strong class=&quot;line-through&quot;&gt;预计看到第十九章&lt;/strong&gt;。十九章完成，不再继续。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;《深入浅出Docker》 —— 环境原因止步于十四章。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;《深入浅出Spring Boot 2.x》 —— 个人觉得很一般，还是比较喜欢 spring
实战 风格的。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;《计算机网络 自顶向下方法》 ——
正在阅读，真的太棒，第一章就让我喜欢上了他，就是文字太多看得有点慢=-=&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2019-05-19&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[[阅读] 计算机网络 自顶向下方法 —— 计算机网络和因特网]]></description><link>https://zyue.wiki/articles/2019/05/19/1558277640118.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/05/19/1558277640118.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_因特网_internet&quot;&gt;因特网 Internet&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_具体构成描述&quot;&gt;具体构成描述&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_服务描述&quot;&gt;服务描述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_协议_protocol&quot;&gt;协议 Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_网络边缘&quot;&gt;网络边缘&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_dsl数字用户线&quot;&gt;DSL：数字用户线&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_电缆光纤同轴电缆混合光纤同轴hfc&quot;&gt;电缆：光纤/同轴电缆(混合光纤同轴HFC)&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_ftth光纤到户&quot;&gt;FTTH：光纤到户&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_物理媒体&quot;&gt;物理媒体&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_网络核心&quot;&gt;网络核心&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_分组交换&quot;&gt;分组交换&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_电路交换&quot;&gt;电路交换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_分组交换网中的时延丢包和吞吐量&quot;&gt;分组交换网中的时延、丢包和吞吐量&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_协议层次及其服务模型&quot;&gt;协议层次及其服务模型&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_面对攻击的网络&quot;&gt;面对攻击的网络&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_历史&quot;&gt;历史&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这次选择的读书任务是一本非常好的书 —— 计算机网络
自顶向下方法。为什么选择这本书？缘由是因为自己的一个好朋友，有一次问我计算机网络的题目，这本身没有什么，事实上我也做出来了。但是后面给他讲题目的时候，他打破砂锅问到底，比如计算子网掩码需要主机号和网络号，就一定要问清楚什么时主机号什么是网络号，IP
地址为什么叫 IP 地址，MAC 为什么叫
MAC，子网掩码为什么叫子网掩码。问这些把我问的哑口无言，然后发现自己只是为了考试而学习，这本身以及脱离了我的学习的兴趣范畴，所以我决定重新学习一遍计算机网络，在我再次回顾谢希仁的计算机网络的时候发现，他许多概念也是突然就冒出来了，也就是没有经过任何解释突然冒出来的一个专业术语，让我对这本书好感突降。所以重新选择了一本，也就是现在的
计算机网络 自顶向下方法，今天开始阅读第一章。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_因特网_internet&quot; &gt;因特网 Internet&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;从两个方面来阐述因特网&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_具体构成描述&quot; &gt;具体构成描述&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;从构成因特网的基本硬件和软件组件定义：因特网将端系统彼此互联&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;主机/端系统 host/endsystem：正在与因特网相连的设备&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;端系统通过 通信链路 和 分组交换机 连接在一起&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通信链路 communication
link：由不同类型的物理媒体组成，不同的链路能够以不同的速率传输数据。传输速率
比特/秒(bit/s,或bps)&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;分组 packet：发送端系统将数据分段，并为每段加上首部字节，形成信息包。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;分组交换机 packet
switch：从他的一条入通信链路接受到达的分组，并从他的一条出通信链路转发该分组。&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;路由器 router —— 网络核心&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;链路层交换机 link-layer switch —— 接入网&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;路径
route/path：从发送端到接收端，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;因特网服务提供商 ISP：端系统接入因特网&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;协议 protocol：控制因特网中信息的接受和发送&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求评论
RPC：因特网工程任务组（IETF）的标准文档，目的是解决因特网先驱者们面临的网络和协议问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/19/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190518125013.png&quot; alt=&quot;概念&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_服务描述&quot; &gt;服务描述&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;从为应用程序提供服务的基础设施定义：因特网作为应用程序的平台&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;分布式应用 distributed
application：涉及多个相互交换数据的端系统的应用程序&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;套接字接口 socket
interface：与因特网相连的端系统提供一个套接字接口，规定了运行在一个端系统上的程序请求因特网基础设施向另一个端系统上的特定目的地程序交付数据的方式。他是一套发送程序必须遵守的规则集合。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/19/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190518125350.png&quot; alt=&quot;套接字&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_协议_protocol&quot; &gt;协议 Protocol&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;定义了在两个或多个通信实体之间交换的报文的格式和顺序，以及报文发送和/或接受一条报文或其他时间所采取的动作。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_网络边缘&quot; &gt;网络边缘&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;即我们日常使用的计算机、智能手机和其他设备。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;边缘路由器：端系统到任何其他远程端系统的路径上的第一台路由器。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;接入网：将端系统物理连接到 边缘路由器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;家庭接入：DSL、电缆、FTTH、拨号和卫星&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;本地电话/公司的中心局：光纤线路端接器 OLT&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;企业(和家庭)接入：以太网和 WIFI&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;广域网接入：3G 和 LTE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_dsl数字用户线&quot; &gt;DSL：数字用户线&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;DSL 调制解调器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;DSL 复用器 DSLAM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_电缆光纤同轴电缆混合光纤同轴hfc&quot; &gt;电缆：光纤/同轴电缆(混合光纤同轴HFC)&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;电缆调制解调器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;电缆调制解调器端接系统 CMTS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;主要特征：共享广播媒体&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_ftth光纤到户&quot; &gt;FTTH：光纤到户&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;主动光纤网络 AON&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;被动光纤网络 PON&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;家庭：光纤网络端接器 ONT&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_物理媒体&quot; &gt;物理媒体&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;导引型媒体：电波随着固体媒体前行。如光缆、双绞铜线或同轴电缆。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;双绞铜线：最便宜、最常用&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;同轴电缆：较高的传输速率&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;光纤：细而柔软的、能够导引光脉冲的媒体。不受电磁干扰，很难窃听&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;非导引型媒体：电波在空气或外层空间中传播，如无线局域网或数字卫星频道中。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;陆地无线电信通&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;卫星无线电信通&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_网络核心&quot; &gt;网络核心&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;即由互联因特网端系统的分组交换机和链路构成的网状网络&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;报文
message：能够包含协议设计者需要的任何东西，称之为报文。端系统彼此交换报文&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;分组 packet：源将长报文划分为较小的数据块，称之为分组&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;分组交换 packet switching&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;电路交换 circuit switching&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_分组交换&quot; &gt;分组交换&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;存储转发传输：指在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接收到整个分存储转发传输组。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;端到端时延&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;输出缓存/队列：用于存储路由器准备发往那条链路的分组&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;排队时延：等待该链路分组传输&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;分组丢失/丢包：到达的分组或者已经排队的分组之一将被丢弃&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;转发表：由特殊的路由选择协议自动设置，用于将目的地址（IP地址）或目的地址的一部分映射为输出链路&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;一台主机经过分组交换网络向另外一台足记发送分组，该分组经过一系列通信链路传输，被发送出网络后，不预留任何链路资源之类的东西。如果因为此时其他分组也需要经该链路进行传输而使链路之一出现拥塞，则该分组不得不在传输链路发送侧的缓存中等待而产生时延。因特网尽最大可能以实时方式交付分组，但他不做任何保证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_电路交换&quot; &gt;电路交换&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;在端系统间通信会话期间，预留了端系统间沿路径通信所需要的资源&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;创建一条专用的端到端连接，发送方和接收方之间路径的交换机都将为该连接维护连接状态，将之称为一条电路。他在连接期间在该网络链路上预留了恒定的传输速率&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;链路中的电路 通过频分复用 FDM /时分复用 TDM 实现的&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;FDM：链路的频谱由跨越链路创建的所有连接共享。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;TDM：时间被划分为固定期间的帧，并且每个帧又被划分为固定数量的时隙。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;带宽：连接期间链路为每条连接专用一个频段&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;网络的网络&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;ISP 接入&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;等级&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;多宿 mullti-home&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;对等 peer&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;因特网交换点 IXP&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;内容供应商网络&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_分组交换网中的时延丢包和吞吐量&quot; &gt;分组交换网中的时延、丢包和吞吐量&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;处理时延：检查分组首部和决定该分组导向何处所需要的时间是其中一部分，还有其他检查比特级别的差错所需要的时间&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;排队时延：当分组在链路上等待传输时，他经受排队时延&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;传输时延：将所有分组的比特推向链路（即传输、或者说发射）所需要的时间&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;路由器退出分组所需要的时间，他是分组长度和链路传输速率的函数，与两台路由器之间的距离无关&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;传播时延：一旦一个比特被推向链路，该比特需要向路由器B传播，从该链路的起点到路由器B传播所需要的时间。取决于该链路的物理媒体&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;一个比特从一台路由器传播到另一台路由器所需要的时间，他是两台路由器之间距离的函数，而与分组长度或链路传输速率无关&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;丢包：到达的分组发现一个满的队列，由于没有地方存储这个分组，路由器将丢弃该分组，即该分组将会丢失。一个节点的性能通常不仅根据时延来度量，而且根据丢包的概率来度量。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;端到端时延&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;traceroute 进行跟踪 三次往返时延&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/19/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190519214722.png&quot; alt=&quot;traceroute&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;吞吐量&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;瞬时吞吐量&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;平均吞吐量&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_协议层次及其服务模型&quot; &gt;协议层次及其服务模型&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;分层的体系结构&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;以分层的方式组织协议以及实现这些协议的网络硬件和软件&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;某层向他的上一层提供 服务 ，即所谓一层的服务模型&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;各层的所有协议被称为协议栈&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;五层因特网协议栈&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;应用层：分布在多个端系统上，而一个短系统中的应用程序使用协议与另一个端系统中的引用程序交换信息分组，位于应用层的信息分组称为报文
message&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;运输层：在应用程序端点之间传递应用层报文。运输层的分组称为报文段
segment&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;网络层：负责将成为数据报 datagram
的网络层分组从一台主机移动到另外一台主机&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;链路层：通过源和目的地之间的一系列路由器路由数据报,将整个帧从一个网络元素移动到邻近的网络元素。链路层的分组称为
帧 frame&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;物理层：将该帧中的一个个比特从一个节点移动到一个节点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;OSI 模型&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;表示层：使通信的应用程序能够解释交换数据的含义&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;会话层：提供了数据交换的定界和同步功能，包括了建立检查点和恢复方案的方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/19/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190519220133.png&quot; alt=&quot;网络&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;封装 encapsulation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_面对攻击的网络&quot; &gt;面对攻击的网络&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;有害程序&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;僵尸网络 botnet&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;自我复制 self-replicating&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;病毒 virus&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;蠕虫 worm&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;攻击&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;拒绝服务器攻击 Denial-of-Service dos&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;嗅探&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;分组嗅探器 packet sniffer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;伪装&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;IP 哄骗 IP spoofing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_历史&quot; &gt;历史&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;分组交换的发展 1961-1972&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;专用网络和网络互联 1972-1980&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;网络的激增 1980-1990&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;因特网爆炸 20 世纪 90 年代&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;阅读一番下来真的太棒！所有的抽象概念都有具体的例子，不仅如此，还有贴近生活的一些例子来进行描述，所有的概念都能在脑子里面形成一个图，这本书不仅告诉概念的意思，还告诉他的由来，简直大爱！自己心里也渐渐的清楚了一些以前许多模棱两可的东西，不过总结的时候后面东西实在太多，一大段一大段的，就没有摘抄了。自己很久以前就买了
第六版 一直没有看，现在回来看还算不是很迟！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Manjaro 安装 rabbitmq]]></description><link>https://zyue.wiki/articles/2019/05/05/1557020097819.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/05/05/1557020097819.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_pacman_安装&quot;&gt;pacman 安装&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_docker_安装_推荐&quot;&gt;docker 安装 —— 推荐&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试&quot;&gt;测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近项目中使用了 &lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;rabbitmq&lt;/a&gt; ，我是 manjaro
系统，记录一下安装的过程。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_pacman_安装&quot; &gt;pacman 安装&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;作为 arch 衍生版，最大的好处就是他庞大的软件仓库了～安装是极其方便的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# 使用 pacman
sudo pacman -S rabbitmq rabbitmqadmin
# 使用 yarourt
yarourt -S rabbitmq rabbitmqadmin
# 或自己选择相应的版本
yarourt rabbitmq&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# 开启管理模块
sudo rabbitmq-plugins enable rabbitmq_management
# 启动
sudo rabbitmq-server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;启动报错&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-none&quot; data-lang=&quot;none&quot;&gt;&amp;nbsp; &amp;nbsp;args: []
&amp;nbsp;&amp;nbsp;&amp;nbsp;format: &quot;Error when reading /var/lib/rabbitmq/.erlang.cookie: eacces&quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;label: {error_logger,error_msg}
   2019-05-05 09:16:40.312473 crash_report &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#{label=&amp;gt;{proc_lib,crash},report=&amp;gt;[[{initial_call,{auth,init,[&apos;Argument__1&apos;]}},{pid,&amp;lt;0.59.0&amp;gt;},{registered_name,[]},{error_info,{error,&quot;Error w
hen reading /var/lib/rabbitmq/.erlang.cookie: eacces&quot;,[{auth,init_cookie,0,[{file,&quot;auth.erl&quot;},{line,286}]},{auth,init,1,[{file,&quot;auth.erl&quot;},{line,140}]},{gen_server,init_it,2,[{file,&quot;gen_ser
ver.erl&quot;},{line,374}]},{gen_server,init_it,6,[{file,&quot;gen_server.erl&quot;},{line,342}]},{proc_lib,init_p_do_apply,3,[{file,&quot;proc_lib.erl&quot;},{line,249}]}]}},{ancestors,[net_sup,kernel_sup,&amp;lt;0.46.0&amp;gt;
]},{message_queue_len,0},{messages,[]},{links,[&amp;lt;0.57.0&amp;gt;]},{dictionary,[]},{trap_exit,true},{status,running},{heap_size,987},{stack_size,27},{reductions,937}],[]]}
2019-05-05 09:16:40.312741 supervisor_report &amp;nbsp;&amp;nbsp;#{label=&amp;gt;{supervisor,start_error},report=&amp;gt;[{supervisor,{local,net_sup}},{errorContext,start_error},{reason,{&quot;Error when reading /var/lib/rabbi
tmq/.erlang.cookie: eacces&quot;,[{auth,init_cookie,0,[{file,&quot;auth.erl&quot;},{line,286}]},{auth,init,1,[{file,&quot;auth.erl&quot;},{line,140}]},{gen_server,init_it,2,[{file,&quot;gen_server.erl&quot;},{line,374}]},{ge
n_server,init_it,6,[{file,&quot;gen_server.erl&quot;},{line,342}]},{proc_lib,init_p_do_apply,3,[{file,&quot;proc_lib.erl&quot;},{line,249}]}]}},{offender,[{pid,undefined},{id,auth},{mfargs,{auth,start_link,[]}
},{restart_type,permanent},{shutdown,2000},{child_type,worker}]}]}
......&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;解决，问题在于
&lt;code&gt;Error when reading /var/lib/rabbitmq/.erlang.cookie: eacces&lt;/code&gt;，修改权限即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie
sudo chmod 600 /var/lib/rabbitmq/.erlang.cookie&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo rabbitmq-server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_docker_安装_推荐&quot; &gt;docker 安装 —— 推荐&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull rabbitmq:3.7-management&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d --hostname localhost --name myrabbit -p 15672:15672 -p 5672:5672 rabbitmq:3.6.15-management&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;-d 后台进程运行&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;hostname RabbitMQ主机名称&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;name 容器名称&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;-p port:port 本地端口:容器端口&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;-p 15672:15672 http访问端口&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;-p 5672:5672 amqp访问端口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_测试&quot; &gt;测试&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;访问 &lt;a href=&quot;http://127.0.0.1:15672&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:15672&lt;/a&gt; ，默认账号密码 guest。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[spring boot freemarker 制作专属代码生成器]]></description><link>https://zyue.wiki/articles/2019/05/10/1557456119712.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/05/10/1557456119712.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_这篇文章能够带给你什么&quot;&gt;这篇文章能够带给你什么&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_开始&quot;&gt;开始&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_数据库&quot;&gt;数据库&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_配置&quot;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_连接&quot;&gt;连接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_书写模板&quot;&gt;书写模板&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_生成模板&quot;&gt;生成模板&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_探究过程&quot;&gt;探究过程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_工具类&quot;&gt;工具类&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近在做学校的项目，自己从零开始一步一步搭建与设计，遇到了一堆的问题，不过也感觉到了自己在不断成长，只有在实践中才会发现会有那么多的问题存在。记录一下遇到的一个典型的问题，&lt;strong&gt;代码生成&lt;/strong&gt;。因为项目使用的是
spring data jpa 而不是 mybatis，所以并没有 mybatis-plus
的代码生成器，就寻思自己写一个了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;实例地址：https://github.com/lizhongyue248/spring-boot-freemarker-generate[spring-boot-freemarker-generate]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;项目模块：https://github.com/gzmuSoft/lesson-cloud/tree/master/lesson-cloud-generate[lesson-cloud-generate]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;博客地址：https://echocow.cn[EchoCow]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_这篇文章能够带给你什么&quot; &gt;这篇文章能够带给你什么&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;spring boot 配置文件读取&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring boot 与 freemarker 的最佳实践&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;如何从数据库中读取到有用的元数据和表信息&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring boot 事件监听机制&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring boot starter freemarker 的分析与探究&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;期间遇到了很多问题，网上搜寻了半天，都没有使用 spring boot + freemarker
来只做模板引擎的，我的思路其实来源于他的源码，具体后面会说。一开始准备单独写的，但是发现如果需要读取配置文件又要去找一堆库，还有一些工具类，为什么不直接用
spring boot 呢？当然还有以下的一些原因&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;项目使用 spring boot 构建，父项目直接继承 spring
boot，子项目用起来很方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring boot 配置文件读取方便，比较熟悉他的使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;优秀的的依赖注入很方便。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;依赖很少，不需要再去麻烦的找一些库&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;总结起来就是一个词，方便！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你需要构建一个 spring boot 项目，并且将他作为你的依赖管理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时需要一些必备的依赖，我们只用需要的，尽可能的简化，只有如下几个：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;!--FreeMarker模板引擎依赖--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!--mysql 驱动--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!--主要用来读取配置文件--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt;
    &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!--lombok 工具--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
    &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!--测试依赖--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果使用的是 idea,那么依赖如下
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190509235702.png&quot; alt=&quot;dependency&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_开始&quot; &gt;开始&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在我们需要明确一下如何完成这么一个生成的过程,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;配置数据库并读取，连接数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;书写模板&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;生成文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_数据库&quot; &gt;数据库&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_配置&quot; &gt;配置&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;直接通过 spring-boot-configuration-processor
来读取即可，非常简单的一个过程，我们需要一个 &lt;code&gt;application.yml&lt;/code&gt; 或者
&lt;code&gt;application.properties&lt;/code&gt; 文件，我选择 &lt;code&gt;yml&lt;/code&gt;，配置如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;application:
  generate:
    # 驱动类
    driver-class: com.mysql.cj.jdbc.Driver
    # 用户名
    username: root
    # 密码
    password: 123456
    # 库名
    catalog: generate
    # 数据库地址
    url: jdbc:mysql://127.0.0.1:3306/generate&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你可以发现下面飘黄色警告，别急，慢慢来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510001047.png&quot; alt=&quot;yml&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要一个实体类来和他对应&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Data   // lombok 自动生成必要的方法
@Component
// 和配置文件前缀进行对应
@ConfigurationProperties(prefix = &quot;application.generate&quot;)
public class GenConfig {
    /**
     * 数据库驱动类
     */
    private String driverClass;

    /**
     * 数据库用户名
     */
    private String username;

    /**
     * 密码
     */
    private String password;

    /**
     * 库名
     */
    private String catalog;

    /**
     * 链接地址
     */
    private String url;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用一个测试类进行读取测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import static org.junit.Assert.*;

@RunWith(SpringRunner.class)
@SpringBootTest
public class GenDemoApplicationTests {

    @Autowired
    private GenConfig genConfig;

    @Test
    public void contextLoads() {
        assertNotNull(genConfig);
        assertEquals(genConfig.getUsername(), &quot;root&quot;);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试用例通过，配置读取是没有问题的。运行一次以后，你回去看配置文件，会发现没有警告了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_连接&quot; &gt;连接&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用最简单 jdbc 链接，也是最快捷的方式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_获取数据库元数据&quot; &gt;获取数据库元数据&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实就是获取数据库链接后获取元数据，jdbc 基础&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// 自动注入
private final GenConfig genConfig;

public GenDatabaseUtil(GenConfig genConfig) {
    this.genConfig = genConfig;
}

/**
 * 获取数据库元数据
 *
 * @return 元数据
 * @throws Exception 异常
 */
private DatabaseMetaData getMetaData() throws Exception {
    Class.forName(genConfig.getDriverClass());
    return DriverManager.getConnection(genConfig.getUrl(),
            genConfig.getUsername(), genConfig.getPassword()).getMetaData();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后获取所有的表&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 获取库的所有表
 *
 * @return 所有表
 */
public List&amp;lt;String&amp;gt; getTables() {
    List&amp;lt;String&amp;gt; tables = new ArrayList&amp;lt;&amp;gt;();
    try {
        ResultSet resultSet = getMetaData().getTables(genConfig.getCatalog(), null,
                &quot;%&quot;, new String[]{&quot;TABLE&quot;});
        while (resultSet.next()) {
            String tableName = resultSet.getString(&quot;TABLE_NAME&quot;);
            tables.add(tableName);
        }
        resultSet.close();
    } catch (Exception e) {
        log.error(&quot;Please check your database conf! {}&quot;, e.getMessage());
        e.printStackTrace();
    }
    return tables;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试一下方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Autowired
private GenDatabaseUtil genDatabaseUtil;

@Test
public void testTables() {
    // 直接打印了
    genDatabaseUtil.getTables().forEach(System.out::println);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_获取列信息&quot; &gt;获取列信息&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我们需要一个实体类来和列进行对应&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Data
@AllArgsConstructor
@NoArgsConstructor
public class ColumnClass {
    /**
     * 表名称
     */
    private String tableName;
    /**
     * 列名称
     */
    private String columnName;
    /**
     * 列大小
     */
    private Integer columnSize;
    /**
     * 列的类型
     */
    private String columnType;
    /**
     * 列的注释
     */
    private String columnComment;
    /**
     * 是否能为空值
     */
    private Boolean nullAble;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接着我们就需要一个方法来获取一个表的所有列，里面有一个自己写得工具类，请查看
github，这个工具类封装了一些方法进行使用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 获取指定表的所有列
 *
 * @param tableName 表名
 * @return 所有列的集合
 */
public List&amp;lt;ColumnClass&amp;gt; getColumns(String tableName) {
    try (ResultSet resultSet = getMetaData().getColumns(genConfig.getCatalog(), null, tableName, &quot;%&quot;)) {
        return getColumns(resultSet, tableName);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}

/**
 * 获取某列的结果集抽取
 *
 * @param resultSet 结果集
 * @param tableName 表名
 * @throws SQLException 异常
 */
private List&amp;lt;ColumnClass&amp;gt; getColumns(ResultSet resultSet, String tableName) throws SQLException {
    List&amp;lt;ColumnClass&amp;gt; columns = new ArrayList&amp;lt;&amp;gt;();
    while (resultSet.next()) {
        String columnName = resultSet.getString(&quot;COLUMN_NAME&quot;);
        String remarks = resultSet.getString(&quot;REMARKS&quot;);
        Boolean nullAble = resultSet.getInt(&quot;NULLABLE&quot;) == 1;
        columns.add(new ColumnClass(
            tableName,
            GenUtil.underlineToHump(columnName),
            resultSet.getInt(&quot;COLUMN_SIZE&quot;),
            GenUtil.fieldConversion(resultSet.getString(&quot;TYPE_NAME&quot;)),
            remarks, nullAble
        ));
    }
    return columns;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同样，测试一下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
public void testColumns() {
    genDatabaseUtil.getColumns(&quot;user&quot;).forEach(System.out::println);
}

// 结果
// ColumnClass(tableName=user, columnName=id, columnSize=10, columnType=java.lang.Integer, columnComment=, nullAble=false)
// ColumnClass(tableName=user, columnName=name, columnSize=255, columnType=java.lang.String, columnComment=, nullAble=false)
// ColumnClass(tableName=user, columnName=pwd, columnSize=255, columnType=java.lang.String, columnComment=, nullAble=false)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就没有问题了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_书写模板&quot; &gt;书写模板&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 &lt;code&gt;resource&lt;/code&gt; 下创建 &lt;code&gt;templates&lt;/code&gt; 文件夹，同时创建一个 &lt;code&gt;entity.ftl&lt;/code&gt; 的
&lt;code&gt;freemarker&lt;/code&gt; 文件：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;package ${package_name};

import lombok.Data;

import javax.persistence.Entity;
import javax.persistence.Table;
import java.io.Serializable;

/**
* ${table_name}
*
* @author echo cow
* @date ${.now?datetime}
*/
@Data
@Table(name = &quot;${table_name}&quot;)
@Entity(name = &quot;${table_name}&quot;)
public class ${class_name} implements Serializable {
&amp;lt;#list columns as column&amp;gt;

    /**
    * ${column.columnComment}
    */
    private ${column.columnType} ${column.columnName};
&amp;lt;/#list&amp;gt;
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_生成模板&quot; &gt;生成模板&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;生成模板有很多种方式，本质都是对 spring
的应用进行监听，当他启动的时候调用某个时间或者进行监听。这里我使用实现
&lt;code&gt;ApplicationRunner&lt;/code&gt; 的方式，他会需要实现一个 &lt;code&gt;run&lt;/code&gt;
方法，通过实现这个方法，会在应用启动完成后调用此方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先上成品代码：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Slf4j
@Component
public class GenEntity implements ApplicationRunner {

    // 读取配置文件
    private final GenDatabaseUtil genDatabaseUtil;
    //  FreeMarker 配置工程
    private final FreeMarkerConfigurationFactory freeMarkerConfigurationFactory;

    public GenEntity(GenDatabaseUtil genDatabaseUtil, FreeMarkerConfigurationFactory freeMarkerConfigurationFactory) {
        this.genDatabaseUtil = genDatabaseUtil;
        this.freeMarkerConfigurationFactory = freeMarkerConfigurationFactory;
    }

    @Override
    public void run(ApplicationArguments args) throws Exception {
        Configuration configuration = freeMarkerConfigurationFactory.createConfiguration();
        // 他会自己寻找 resources 下的 templates 目录下的模板文件
        Template entityTemplate = configuration.getTemplate(&quot;entity.ftl&quot;);
        // 获取数据库所有表
        List&amp;lt;String&amp;gt; tables = genDatabaseUtil.getTables();
        // 存放模板变量
        Map&amp;lt;String, Object&amp;gt; data = new HashMap&amp;lt;&amp;gt;();
        data.put(&quot;package_name&quot;, &quot;cn.echocow.generate.entity&quot;);
        // 文件写入
        FileWriter fileWriter;
        for (String table : tables) {
            // 工具类将下划线命名转化为驼峰
            String entityClassName = GenUtil.underlineToHump(table, true);
            data.put(&quot;table_name&quot;, table);
            data.put(&quot;class_name&quot;, entityClassName);
            // 获取当前表的所有列
            data.put(&quot;columns&quot;, genDatabaseUtil.getColumns(table));
            // 文件创建
            File file = new File(&quot;src/main/java/cn/echocow/gendemo/entity/&quot; + GenUtil.underlineToHump(table, true) + GenUtil.SUFFIX);
            if (!file.exists()) {
                if (!new File(&quot;src/main/java/cn/echocow/gendemo/entity&quot;).mkdirs()) {
                    log.error(&quot;创建文件夹失败&quot;);
                    return;
                }
                if (!file.createNewFile()) {
                    log.error(&quot;{} 创建文件失败&quot;, table);
                    return;
                }
            }
            fileWriter = new FileWriter(file);
            entityTemplate.process(data, fileWriter);
            log.info(&quot;Table {} generate succeed!&quot;, table);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_探究过程&quot; &gt;探究过程&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;其实对于一个生成的过程，就是一个 &lt;code&gt;模板 + 数据&lt;/code&gt;
组合的过程，对于任何模板引擎都是如此，需要获取到一个模板，然后讲数据带过去，模板引擎使用数据对页面进行渲染，就是这么一个过程。所以我们就需要很重要的两个东西&lt;/strong&gt;
- 模板 —— template - 数据 —— 直接使用 map 携带过去&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以我们在引入的 freemarker 依赖中，可以找到
&lt;code&gt;freemarker.template.Template&lt;/code&gt; 这么一个类，来看看他远吗的注释&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510093223.png&quot; alt=&quot;tempalte&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以他提供了两种方式来创建 template 1.
&lt;code&gt;use Configuration#getTemplate(String) to create/get Template objects&lt;/code&gt;
⇒ 使用 Configuration 的 getTemplate 方法来进行创建。 2.
&lt;code&gt;you can also construct a template from a Reader or a String that contains the template source code&lt;/code&gt;
⇒ 使用他的构造方法来进行创建。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我去查询 Configuration
类，里面有的只是如何使用，有兴趣的可以自己去看看，但是如何在 spring boot
中使用呢？这个时候我就想到了我们引入的 &lt;code&gt;spring-boot-starter-freemarker&lt;/code&gt;
依赖，既然有 Starter
依赖，那么必定就会有相应的自动配置，所以我们需要去找寻一下他自动装配的
Bean 在哪里。如果你了解 spring boot
自动装配的话，应该能够找到，直接在在自动装配的文件中，直接搜索就可以找到如下地方：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510094443.png&quot; alt=&quot;search&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那么我们继续看看这个类&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510095002.png&quot; alt=&quot;FreeMarkerAutoConfiguration&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他的核心就是条件装配，当我们没有引入 freemarker
的时候，是不会进行自动配置的；同时他引入了三个配置，分别如下 -
&lt;code&gt;FreeMarkerServletWebConfiguration&lt;/code&gt; 对于 servlet web 环境下进行自动配置
- &lt;code&gt;FreeMarkerReactiveWebConfiguration&lt;/code&gt; 对于 reactive web
环境下进行自动配置 - &lt;code&gt;FreeMarkerNonWebConfiguration&lt;/code&gt; 对于 non web
环境想进行自动配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们现在是 non web 环境，我们只用看 &lt;code&gt;FreeMarkerNonWebConfiguration&lt;/code&gt;
即可，其他两个是不会进行自动装配的。里看看这个类&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190510095915.png&quot; alt=&quot;FreeMarkerNonWebConfiguration&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你会发现他就自动装配了一个 Bean，在我们没有配置
&lt;code&gt;FreeMarkerConfigurationFactoryBean&lt;/code&gt; 的时候，
进行自动装配。所以他的核心就是
&lt;code&gt;FreeMarkerConfigurationFactoryBean&lt;/code&gt;，来看看这个类&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190510100627.png&quot; alt=&quot;FreeMarkerConfigurationFactoryBean&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他已经说的十分清楚了，我们直接来看
&lt;code&gt;FreeMarkerConfigurationFactor&lt;/code&gt;,上面的注释非常清楚，我们直接来看需要的方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190510100912.png&quot; alt=&quot;FreeMarkerConfigurationFactor&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过这个类的 &lt;code&gt;createConfiguration&lt;/code&gt; 方法我们可以创建一个 &lt;code&gt;Configuration&lt;/code&gt;
配置，然后通过他的 &lt;code&gt;getTemplate&lt;/code&gt; 方法可以获取到 &lt;code&gt;Template&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/05/10/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_plasmashell_20190510101233.png&quot; alt=&quot;Configuration&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他使用多态，创建一个默认的
&lt;code&gt;Template&lt;/code&gt;，对于我们来说够用了，所以在上面的生成的代码中，我们直接注入
&lt;code&gt;FreeMarkerConfigurationFactory&lt;/code&gt; 使用即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Configuration configuration = freeMarkerConfigurationFactory.createConfiguration();
Template entityTemplate = configuration.getTemplate(&quot;entity.ftl&quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于数据就是一个 map 而已，封装好后使用 &lt;code&gt;process&lt;/code&gt; 方法生成即可，需要一个
&lt;code&gt;Writer&lt;/code&gt;
的子类，可以自由选择。具体去查看下他的源码就知道了，都很好找到，主要调用的是
&lt;code&gt;createProcessingEnvironment(Object dataModel, Writer out)&lt;/code&gt; 这个方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Map&amp;lt;String, Object&amp;gt; data = new HashMap&amp;lt;&amp;gt;(4);
FileWriter fileWriter = new FileWriter(file);
entityTemplate.process(data, fileWriter);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_工具类&quot; &gt;工具类&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Slf4j
public class GenUtil {
    private static final String UNDERLINE = &quot;_&quot;;
    private static final Map&amp;lt;String, String&amp;gt; MYSQL_TO_JAVA = new HashMap&amp;lt;&amp;gt;();
    public static final String SUFFIX = &quot;.java&quot;;

    static {
        MYSQL_TO_JAVA.put(&quot;VARCHAR&quot;, &quot;java.lang.String&quot;);
        MYSQL_TO_JAVA.put(&quot;BIGINT&quot;, &quot;java.lang.Long&quot;);
        MYSQL_TO_JAVA.put(&quot;DATE&quot;, &quot;java.time.LocalDate&quot;);
        MYSQL_TO_JAVA.put(&quot;FLOAT&quot;, &quot;java.lang.Float&quot;);
        MYSQL_TO_JAVA.put(&quot;TINYINT&quot;, &quot;java.lang.Integer&quot;);
        MYSQL_TO_JAVA.put(&quot;INT&quot;, &quot;java.lang.Integer&quot;);
        MYSQL_TO_JAVA.put(&quot;BINARY&quot;, &quot;java.lang.Byte&quot;);
        MYSQL_TO_JAVA.put(&quot;SMALLINT&quot;, &quot;java.lang.Short&quot;);
        MYSQL_TO_JAVA.put(&quot;DATETIME&quot;, &quot;java.time.LocalDateTime&quot;);
        MYSQL_TO_JAVA.put(&quot;BIT&quot;, &quot;java.lang.Boolean&quot;);
    }


    /**
     * 下划线命名转驼峰式命名
     *
     * @param para 下划线命名
     * @return 驼峰式命名
     */
    public static String underlineToHump(String para) {
        StringBuilder result = new StringBuilder();
        for (String s : para.split(UNDERLINE)) {
            if (!para.contains(&quot;_&quot;)) {
                result.append(s);
                continue;
            }
            if (result.length() == 0) {
                result.append(s.toLowerCase());
            } else {
                result.append(s.substring(0, 1).toUpperCase());
                result.append(s.substring(1).toLowerCase());
            }
        }
        return result.toString();
    }

    /**
     * 下划线命名转驼峰式命名
     *
     * @param para            下划线命名
     * @param firstCharChange 首字母是否转换
     * @return 驼峰式命名
     */
    public static String underlineToHump(String para, boolean firstCharChange) {
        String result = underlineToHump(para);
        return firstCharChange ? result.substring(0, 1).toUpperCase() + result.substring(1) : result;
    }

    /**
     * 数据库字段转换
     *
     * @param mysqlDataType 数据库字段类型
     * @return 转换结果
     */
    public static String fieldConversion(String mysqlDataType) {
        return MYSQL_TO_JAVA.getOrDefault(mysqlDataType, &quot;Object&quot;);
    }


}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实还是很简单的，只要了解了 spring boot
的自动装配机制，找到他对某个库是如何支持的，那么思路就会很畅通，然后就可以在他的基础上来做更多的事情。当然这个是简化版的代码生成，其实还可以做很多自定义化，比如在我们项目中就增加了下面的功能：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;指定生成的模块&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;自定义各种配置&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;指定生成时排除某些表&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;指定生成时排除某些列&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;指定生成时按照条件添加某些注解&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同样，如果你对于 &lt;code&gt;spring&lt;/code&gt; 的事件熟悉的话，可以自定义生成顺序，比如
&lt;code&gt;@Order&lt;/code&gt; 注解，比如使用 &lt;code&gt;SpringApplicationBuilder&lt;/code&gt;
自己启动并添加事件监听都是可行的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过如果有多个代码生成的话，就会有设计方面的问题，如何设计才能够更优雅而没有一堆重复的代码。我在当初就没考虑到这个问题，写出来的代码可维护性就很差，自己重构半天出现更多的问题=-=然后暂时放弃重构，后面再说吧～～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[spring data rest 缓存/spring boot Jpa 二级缓存 ehcache 与 redis]]></description><link>https://zyue.wiki/articles/2019/04/13/1555159292055.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/04/13/1555159292055.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_问题分析&quot;&gt;问题分析&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_ehcache&quot;&gt;使用 ehcache&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_redis&quot;&gt;使用 redis&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_更细致化配置&quot;&gt;更细致化配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这两天都在为学校的项目做准备，期间也遇到了很多问题，比如自己写代码生成器，比如授权这些，发现自己还是有点太弱了。但是最为棘手的莫过于缓存的问题。主要原因还是自己太想用
spring data rest
了，这个在假期就没有解决缓存的问题，现在还是要来再次面对，不过相隔几个月，今非昔比。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题分析&quot; &gt;问题分析&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;项目直接使用 spring data rest 进行资源暴露，repository
完全接手，所以我舍去了 service 层，controller
也基本没有方法，就算有也被抽象出来了。那么没有 service
如何做缓存呢？那就是用他 Jpa 底层实现的 hibernate
了，一级缓存我们是默认开启的，那么我们就要使用 &lt;strong&gt;二级缓存&lt;/strong&gt; 来提高性能。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用_ehcache&quot; &gt;使用 ehcache&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第一种方式就是使用非常快速的 ehcache 来提高性能，配合 hibernate-jcache
使用，就可以达到很好的效果，具体如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 引入依赖，没有加上版本号是因为 spring boot
的版本管理会自动下载合适的版本。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;        &amp;lt;!--ehcache--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;hibernate-jcache&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.ehcache&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;ehcache&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 添加 &lt;code&gt;ehcache.xml&lt;/code&gt; 配置文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;eh:config
        xmlns:xsi=&apos;http://www.w3.org/2001/XMLSchema-instance&apos;
        xmlns:eh=&apos;http://www.ehcache.org/v3&apos;
        xsi:schemaLocation=&quot;http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core-3.3.xsd&quot;&amp;gt;
    &amp;lt;eh:persistence directory=&quot;${java.io.tmpdir}/lesson-cloud-cache-data&quot;/&amp;gt;

    &amp;lt;eh:cache-template name=&quot;default&quot;&amp;gt;
        &amp;lt;eh:expiry&amp;gt;
            &amp;lt;eh:ttl unit=&quot;seconds&quot;&amp;gt;600&amp;lt;/eh:ttl&amp;gt;
        &amp;lt;/eh:expiry&amp;gt;
        &amp;lt;eh:resources&amp;gt;
            &amp;lt;!--堆内内存可以放2000个条目，超出部分堆外100MB--&amp;gt;
            &amp;lt;eh:heap unit=&quot;entries&quot;&amp;gt;2000&amp;lt;/eh:heap&amp;gt;
            &amp;lt;eh:offheap unit=&quot;MB&quot;&amp;gt;100&amp;lt;/eh:offheap&amp;gt;
        &amp;lt;/eh:resources&amp;gt;
    &amp;lt;/eh:cache-template&amp;gt;
&amp;lt;/eh:config&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 添加 &lt;code&gt;hibernate.properties&lt;/code&gt; 配置文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;hibernate.format_sql=true
hibernate.cache.use_second_level_cache=true
hibernate.cache.use_query_cache=true
hibernate.cache.region_prefix=gzmu_lesson_cloud_
hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
hibernate.cache.provider_configuration_file_resource_path=ehcache.xml
hibernate.cache.use_structured_entries=true
hibernate.generate_statistics=false
hibernate.javax.cache.missing_cache_strategy=create&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你不喜欢使用 &lt;code&gt;properties&lt;/code&gt; 文件，可以在 &lt;code&gt;application.yml&lt;/code&gt; 里面配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;spring:
  jpa:
    show-sql: true
    properties:
      hibernate:
        generate_statistics: true
        javax:
          cache:
            missing_cache_strategy: create
        cache:
          format_sql: true
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
          region_prefix: lesson_cloud_
          use_structured_entries: true
          provider_configuration_file_resource_path: ehcache.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 不需要在 service 层添加注解，而是在实体类添加注解，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Data
@Cacheable // 缓存
@Table(name = &quot;sys_log&quot;)
@Entity(name = &quot;sys_log&quot;)
@Where(clause = &quot;is_enable = 1&quot;)
@EqualsAndHashCode(callSuper = true)
@Cache(region = &quot;sys_log&quot;, usage = CacheConcurrencyStrategy.READ_WRITE ) // 缓存名字以及策略
public class SysLog extends BaseEntity {
    // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;默认对查询的列表不缓存，一方面是因为命中率低，另一方面查询的列表会因为其中的一个改变就要销毁，操作频繁，没有缓存的必要。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用_redis&quot; &gt;使用 redis&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个是真的搞了好久，因为系统涉及到分布式，所以使用 ehcache
肯定是不太好的，所以要把它缓存
redis。一开始自己尝试了很多办法，自己尝试实现一个缓存机制（效率太低并且代码不忍直视）。所以就想到去找别人的，所以在
github 上一搜真的有，找到一个
&lt;a href=&quot;https://github.com/debop/hibernate-redis&quot;&gt;hibernate-redis&lt;/a&gt;，但是一使用发现很多很多问题，然后自己一个一个的排除，最后遇到一个无法解决的问题&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-none&quot; data-lang=&quot;none&quot;&gt;java.lang.IncompatibleClassChangeError: Expected static method org.hibernate.cache.internal.DefaultCacheKeysFactory.createEntityKey(Ljava/lang/Object;Lorg/hibernate/persister/entity/EntityPersister;Lorg/hibernate/engine/spi/SessionFactoryI&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后发现这个问题是个 bug，已经在未来的版本解决，见
&lt;a href=&quot;https://github.com/debop/hibernate-redis/issues/115&quot;&gt;issue&lt;/a&gt;，
由于没有上传到 maven 仓库，需要自己切换到 2.4
版本的分支自己构建自己打包，并且还要用本地 jar
导入的方式导入，实在太过麻烦，暂时放弃。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后找资料，网上乱七八糟的一大堆，没一个有用的，重复的还非常多。最后又回到
hibernate-redis，然后查看的时候发现了他引用了 redisson
的依赖，就很好奇这个是什么，然后去 &lt;a href=&quot;https://redisson.org/&quot;&gt;官网&lt;/a&gt;
看了下，发现他是一个 java 的 redis client，可以通过它来操作
redis，并且观望上给出的标语 &amp;gt; Redis based cache implementations for Java
like JCache API, Hibernate 2nd Level Cache, Spring Cache and application
level caching.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他也可以作为 JCache API, Hibernate, Spring Cache
的二级缓存，那么是不是意味着我可以用它呢？于是去他的
&lt;a href=&quot;https://github.com/redisson/redisson/wiki/14.-%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88&quot;&gt;github
wiki&lt;/a&gt; 看了下，果然有！而且还有 spring cache
的！不过我们不用，因为我们不用那几个注解来进行缓存控制，而是通过
hibernate，所以我尝试一下，完美整合！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 导入依赖，不同的是，我们导入的不是 &lt;code&gt;redisson&lt;/code&gt; 的依赖，而是
&lt;code&gt;redisson-hibernate&lt;/code&gt; ，这里算是坑到我了，导入 &lt;code&gt;redisson&lt;/code&gt; 没用，然后去
maven 中央仓库逛了一波才发现
&lt;code&gt;redisson-hibernate&lt;/code&gt;，然后尝试了一波才发现居然可以。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;!-- 注意先导入你的 hibernate-core --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.redisson&amp;lt;/groupId&amp;gt;
    &amp;lt;!-- 对于 Hibernate v4.x --&amp;gt;
    &amp;lt;artifactId&amp;gt;redisson-hibernate-4&amp;lt;/artifactId&amp;gt;
    &amp;lt;!-- 对于 Hibernate v5.0.x - v5.1.x --&amp;gt;
    &amp;lt;artifactId&amp;gt;redisson-hibernate-5&amp;lt;/artifactId&amp;gt;
    &amp;lt;!-- 对于 Hibernate v5.2.x --&amp;gt;
    &amp;lt;artifactId&amp;gt;redisson-hibernate-52&amp;lt;/artifactId&amp;gt;
    &amp;lt;!-- 对于 Hibernate v5.3.x - v5.4.x --&amp;gt;
    &amp;lt;artifactId&amp;gt;redisson-hibernate-53&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.10.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 添加 &lt;code&gt;hibernate.properties&lt;/code&gt; 如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;hibernate.format_sql=true
hibernate.cache.use_second_level_cache=true
hibernate.cache.use_query_cache=true
hibernate.cache.region_prefix=gzmu_lesson_cloud_
hibernate.cache.region.factory_class=org.redisson.hibernate.RedissonRegionFactory
hibernate.cache.redisson.config=redisson.yaml
hibernate.cache.use_structured_entries=true
hibernate.generate_statistics=false
hibernate.javax.cache.missing_cache_strategy=create&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 添加 &lt;code&gt;redisson.yaml&lt;/code&gt; 如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;# 配置参见 https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95

# 单节点设置，其余模式待测试
singleServerConfig:
  idleConnectionTimeout: 10000
  pingTimeout: 1000
  connectTimeout: 1000
  timeout: 1000
  retryAttempts: 1
  retryInterval: 1000
  reconnectionTimeout: 3000
  failedAttempts: 5
  password: null
  subscriptionsPerConnection: 5
  clientName: null
  address: &quot;redis://127.0.0.1:6379&quot;
  subscriptionConnectionMinimumIdleSize: 1
  subscriptionConnectionPoolSize: 25
  connectionMinimumIdleSize: 5
  connectionPoolSize: 100
  database: 0
threads: 0
# Codec
codec: !&amp;lt;org.redisson.codec.SnappyCodec&amp;gt; {}
eventLoopGroup: null&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 同样，实体类添加注解&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Data
@Cacheable // 缓存
@Table(name = &quot;sys_log&quot;)
@Entity(name = &quot;sys_log&quot;)
@Where(clause = &quot;is_enable = 1&quot;)
@EqualsAndHashCode(callSuper = true)
@Cache(region = &quot;sys_log&quot;, usage = CacheConcurrencyStrategy.READ_WRITE ) // 缓存名字以及策略
public class SysLog extends BaseEntity {
    // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;5、 测试即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过在使用的时候发现 &lt;code&gt;redisson-hibernate-53&lt;/code&gt; 比 &lt;code&gt;redisson-hibernate-52&lt;/code&gt;
少了一些包，其查看 jar 结构的时候会很奇怪&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/4/13/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190413103247.png&quot; alt=&quot;redisson-hibernate-52&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/4/13/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190413103214.png&quot; alt=&quot;redisson-hibernate-53&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用的时候优势会出问题有时候不会，一开始提示找不到类，试了很多次，后来莫名其妙又可以了。。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_更细致化配置&quot; &gt;更细致化配置&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 yaml 进行配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;spring:
  jpa:
    show-sql: true
    properties:
      hibernate:
        cache:
          redisson:
            config: redisson.yaml
          region:
            factory_class: org.redisson.hibernate.RedissonRegionFactory
          region_prefix: gzmu_lesson_cloud_
          use_query_cache: true
          use_second_level_cache: true
          use_structured_entries: true
          provider_configuration_file_resource_path: classpath:conf/hibernate-redis.properties
        format_sql: true
        generate_statistics: false
        javax:
          cache:
            missing_cache_strategy: create&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加 &lt;code&gt;hibernate-redis.properties&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;##########################################################2
#
# properities for hibernate-redis 可以在这里进行更加细致化的 redis 配置
#
##########################################################

# Redisson configuration file
redisson-config=classpath:conf/redisson.yaml

# Cache Expiry settings
# &apos;hibernate&apos; is second cache prefix
# &apos;common&apos;, &apos;account&apos; is actual region name
redis.expiryInSeconds.default=120
redis.expiryInSeconds.hibernate.common=0
redis.expiryInSeconds.hibernate.account=1200&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;redisson&lt;/code&gt; 配置同上&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;值得注意的是，redis 同样不会缓存查询的列表，理由同上。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_总结&quot; &gt;总结&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;搞这个搞了一天多才成功，集群还没尝试，不过应该不难了，还是需要多多熟悉才行啊。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[[阅读] 敏捷软件开发 —— 薪水支付案例研究（二）]]></description><link>https://zyue.wiki/articles/2019/04/06/1554562203987.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/04/06/1554562203987.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_推迟考虑数据库&quot;&gt;推迟考虑数据库&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_用例&quot;&gt;用例&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_搜寻&quot;&gt;搜寻&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_设计&quot;&gt;设计&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;放假总是悠闲的，找不到事做就看看书吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那些在任何情况下都是e迷离的事物，其美丽是就其本性而言的。美丽的终结也是就其本性而言的，赞美并不是其本性的一部分。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;就第一篇写的记录开始学习。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_推迟考虑数据库&quot; &gt;推迟考虑数据库&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们构建一个应用程序，最先考虑到的应该是数据库，往往是先设计数据库然后再来设计，对于该类问题同样，他可以使用某些关系型数据库，并且从需求中可以清楚地知道表和字段的可能样子。可以容易设计出一个可用的数据库模式，然后再构建一些查询。不过，在这种方法产生的应用程序中，数据库就成了关注的中心。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们换个思路，把数据库看成我们实现的细节！尽可能地推迟考虑数据库。按照&lt;strong&gt;抽象&lt;/strong&gt;的定义，我们应该把本质的部分放大，无关紧要部分的去掉，在项目的当前阶段数据库就是无关紧要的，他不过是一项用来存储和访问数据的技术而已。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_用例&quot; &gt;用例&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那我们如何分析呢？在一开始的 xp
编程中，提到一个非常重要的概念——用户素材。&lt;strong&gt;用例&lt;/strong&gt;就是用稍多一点的细节描述的用户素材，在进行分析的时候，我们关注用户素材和验收测试。不陷入过多的细节。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_搜寻&quot; &gt;搜寻&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;来看看这章做了哪些事&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;将用户描述转化为了具有细节的用例，而不是过于简单用户素材。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;对用例进行一个一个的分析，弄清楚系统怎样去响应这些操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;前半部分通过对六个用例的分析，初步确定 &lt;code&gt;COMMAND 模式&lt;/code&gt; 以及可能的
静态模型。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过一个用例以及他的变体，改变初步确定的设计模式，由 &lt;code&gt;COMMAND 模式&lt;/code&gt;
改为 &lt;code&gt;STRATEGY 模式&lt;/code&gt; ，同时加上了 &lt;code&gt;NULL OBJECT&lt;/code&gt;
模式设计出修订后的系统类图。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过协同图明确了可能出现的用例变体/情景。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;寻找描述中的抽象。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过抽象发现从属关系，移除 &lt;code&gt;NULL OBJECT&lt;/code&gt; 模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_设计&quot; &gt;设计&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在设计中，&lt;strong&gt;不包含任何对数据库的内容&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;首先将用户素材n加沙改一些适当的细节描述成为用例&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过对用例的分析，获取到有用的信息以及设计的洞察力&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;设计不是一成不变的，它可以随着迭代的进行不断修改，最终迭代完成后确定下来&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;遵循面向对象设计的五大原则&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;寻找出有用的抽象&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;设计模式不是用的越多越好&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这章节似乎是一个小型会议一般，在商讨第一次迭代的点滴与内容，值得注意的是，多次强调妖抵制住数据库的诱惑。i回想一下，我们似乎总是在&lt;strong&gt;面向数据库编程&lt;/strong&gt;，这并不是一个好习惯。同时也多次提到了五大原则，在设计时，五大原则是能够架构一个友好的软件架构的重要因素。这次的目的只是为了发起一种思考，但是依旧都是可变的，只是一个快速设计的一个会话展现。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[[阅读] 敏捷软件开发 —— 薪水支付案例研究（一）]]></description><link>https://zyue.wiki/articles/2019/04/03/1554263896709.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/04/03/1554263896709.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_command_模式和_active_object_模式&quot;&gt;COMMAND 模式和 ACTIVE OBJECT 模式&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_command_模式&quot;&gt;COMMAND 模式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_active_object_模式&quot;&gt;ACTIVE OBJECT 模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_template_method_模式和_strategy_模式继承与委托&quot;&gt;TEMPLATE METHOD 模式和 STRATEGY 模式：继承与委托&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_template_method_模式&quot;&gt;TEMPLATE METHOD 模式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_strategy_模式&quot;&gt;STRATEGY 模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_facade_模式和_mediator_模式&quot;&gt;FACADE 模式和 MEDIATOR 模式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_singleton_模式和_monostate_模式&quot;&gt;SINGLETON 模式和 MONOSTATE 模式&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_singleton_模式&quot;&gt;SINGLETON 模式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_monostate_模式&quot;&gt;MONOSTATE 模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_null_object_模式&quot;&gt;NULL OBJECT 模式&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一部分与前面的两部分不太一样，他通过实际操作来完成一个完整的案例。并且引入一些常见的设计模式，开篇介绍了薪水支付系统的初步规格说明，相当于需求分析。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;对于钟点工，按照他们雇员记录中&lt;strong&gt;每小时报酬字段&lt;/strong&gt;的值对他们进行支付。每天提交工作时间卡，其中记录了&lt;strong&gt;日期以及工作小时数&lt;/strong&gt;。如果一天超过八小时，超过的部分会按照&lt;strong&gt;正常报酬的
1.5 倍&lt;/strong&gt;进行支付，&lt;strong&gt;每周五&lt;/strong&gt;对他们进交付。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;有些雇员完全以&lt;strong&gt;月薪&lt;/strong&gt;进行交付。&lt;strong&gt;每个月的最后一个工作日&lt;/strong&gt;对他们进行交付，在他们的雇员记录中有一个*月薪字段*。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;带薪雇员，根据销售情况，支付&lt;strong&gt;一定量的酬金&lt;/strong&gt;。他们会提交销售凭条，其中记录了&lt;strong&gt;销售的日期&lt;/strong&gt;和&lt;strong&gt;数量&lt;/strong&gt;，在他们的雇员记录中有一个&lt;strong&gt;酬金字段&lt;/strong&gt;。&lt;strong&gt;每隔一周的周五&lt;/strong&gt;对他们进行交付。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;加入协会的雇员，有一个&lt;strong&gt;每周应付款项字段&lt;/strong&gt;。将会从他们&lt;strong&gt;薪水中扣除&lt;/strong&gt;。协会有时也会&lt;strong&gt;针对单个协会成员征收服务费用&lt;/strong&gt;。协会每周会提交这些&lt;strong&gt;服务费用&lt;/strong&gt;，服务费用必须要从&lt;strong&gt;相应雇员的下个月的薪水总额中扣除&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;应用程序&lt;strong&gt;每个工作日运行一次&lt;/strong&gt;，并在&lt;strong&gt;当天&lt;/strong&gt;为相应的雇员进行交付，系统会被告知雇员的&lt;strong&gt;支付日期&lt;/strong&gt;，这样他会计算从雇员&lt;strong&gt;上次支付日期到规定的本次支付日期间应支付的数额&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_command_模式和_active_object_模式&quot; &gt;COMMAND 模式和 ACTIVE OBJECT 模式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;没有人天生就具有命令他人的权利。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先从简单的入手，COMMAND
模式是最简单、最优雅但同时也是适用性最广的设计模式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_command_模式&quot; &gt;COMMAND 模式&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他非常简单，看一下下面的接口&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface Command {
    //　书中为　do()，但是　do　是　java　的关键字，无法作为函数名
    public void execute();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;正如看到的一样，他只是封装了一个没有任何变量的函数。从严格的面向对象的意义上来说，这种做法是被强烈反对的————因为他具有功能分解的味道，他把函数层面的任务提升到了类的层面。然而这正是他有趣的地方。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;作者举了一个&lt;em&gt;复印机软件的例子&lt;/em&gt;，其中通过对依稀的一些的简单的
command　的封装。解除了系统的逻辑互联关系和实际链接的设备之间的耦合。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;另外一个例子是&lt;strong&gt;创建和执行事务操作&lt;/strong&gt;，例如在对数据库进行操作之前，对数据进行
validate
操作。他很好的解除了从用户获取数据代码、验证并操作数据的代码以及业务对象本身之间的耦合关系。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第三个例子是&lt;em&gt;回退&lt;/em&gt;，可以对某个命令进行撤销操作。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_active_object_模式&quot; &gt;ACTIVE OBJECT 模式&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他是实现多线程的一项古老的技术，他可以自动完成动作或改变状态，隔离了方法执行和方法调用的过程，提高了并行性，对内部拥有控制线程的主动对象，降低了异步访问的复杂性。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要一个例子，看看以下的代码：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface Command {
    /**
     * 执行
     */
    public void execute();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;建立一个`ActiveObjectEngine`&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 维护一个 Command 对象的链表
 *
 * @author echo
 */
public class ActiveObjectEngine {
    private LinkedList&amp;lt;Command&amp;gt; itsCommands = new LinkedList&amp;lt;&amp;gt;();

    /**
     * 添加命令
     *
     * @param command 命令
     */
    public void addCommand(Command command) {
        itsCommands.add(command);
    }

    /**
     * 遍历链表，执行并去除每个命令
     */
    public void run() {
        while (!itsCommands.isEmpty()){
            Command command = itsCommands.getFirst();
            itsCommands.removeFirst();
            command.execute();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;以及一个实现&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * sleep 命令
 * 等待指定数目的毫秒，然后执行 wakeup 命令
 *
 * @author echo
 */
public class SleepCommand implements Command {
    private Command wakeupCommand;
    private ActiveObjectEngine engine;
    private long sleepTime;
    private long startTime = 0;
    private boolean started = false;

    public SleepCommand(int milliseconds, ActiveObjectEngine engine, Command wakeupCommand) {
        this.sleepTime = milliseconds;
        this.engine = engine;
        this.wakeupCommand = wakeupCommand;
    }

    /**
     * 执行时，检查自己是以前是已经执行过
     * 如果没有，记录下开始时间
     * 如果没有过延迟时间，就把自己再加到 ActiveObjectEngine 中
     * 如果过了延迟时间，就把 wakeup 命令对象加到 ActiveObjectEngine 中
     */
    @Override
    public void execute() {
        long currentTime = System.currentTimeMillis();
        if (!started) {
            // 未开始时
            started = true;
            startTime = currentTime;
            engine.addCommand(this);
        } else if ((currentTime - startTime) &amp;lt; sleepTime) {
            // 没有过延迟时间
            engine.addCommand(this);
        } else {
            // 过了延迟时间,添加 -&amp;gt; 执行
            engine.addCommand(wakeupCommand);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后一个测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class TestSleepCommand {
    private boolean commandExecuted = false;

    @Test
    void testSleep() {
        Command wakeup = () -&amp;gt; commandExecuted = true;
        ActiveObjectEngine activeObjectEngine = new ActiveObjectEngine();
        SleepCommand sleepCommand = new SleepCommand(1000, activeObjectEngine, wakeup);
        activeObjectEngine.addCommand(sleepCommand);
        long start = System.currentTimeMillis();
        activeObjectEngine.run();
        long stop = System.currentTimeMillis();
        long sleepTime = stop - start;
        assertTrue(commandExecuted, &quot;Command executed!&quot;);
        System.out.println(&quot;SleepTime &quot; + sleepTime);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;具体的已经添加注释，在处理事件的时候，他不进行阻塞，常常在不符合执行条件的时候，他就把自己再次放回到
&lt;code&gt;ActiveObjectEngine&lt;/code&gt; 之中。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;采用该技术的变体去构建多线程系统已经是很常见的实践，这种类型的线程被称为
run-to-completion （RTC），意味着 command 不会阻塞。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们来模拟一个例子&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class DelayedTyper implements Command {
    private int itsDelay;
    private char itsChar;
    private static ActiveObjectEngine engine = new ActiveObjectEngine();
    private static boolean stop = false;

    public DelayedTyper(int delay, char c) {
        itsDelay = delay;
        itsChar = c;
    }

    public static void main(String[] args) {
        // 进行循环
        engine.addCommand(new DelayedTyper(100, &apos;1&apos;));
        engine.addCommand(new DelayedTyper(300, &apos;3&apos;));
        engine.addCommand(new DelayedTyper(500, &apos;5&apos;));
        engine.addCommand(new DelayedTyper(700, &apos;7&apos;));
        // 设置 stop，停止循环
        Command startCommand = () -&amp;gt; stop = true;
        // 最后一个命令
        engine.addCommand(new SleepCommand(20000, engine, startCommand));
        engine.run();
    }

    /**
     * 打印在构造时传入的字符
     */
    @Override
    public void execute() {
        System.out.print(itsChar);
        if (!stop) {
            delayAndRepeat();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;COMMAND
模式的简单性掩盖了他的多功能性，但是它可能是不符合面向对象的思维范式的，因为他对函数的关注查过了类，但是在实际开发中，他确实是非常有用的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_template_method_模式和_strategy_模式继承与委托&quot; &gt;TEMPLATE METHOD 模式和 STRATEGY 模式：继承与委托&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;业精于勤&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;``业精于勤，荒于嬉；行成于思，毁于随。&apos;&apos;一本外国的书引入了我们中国的《进学解》，让人意外。这句话很好理解，学业由于勤奋而专精，由于玩乐而荒废；德行由于独立思考而有所成就，由于因循随俗而败坏。在软件开发中，使用继承我们可以基于差异编程，通过集成可以建立完整的软件结构分类。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是继承的过度使用是非常糟糕的，代价十分昂贵&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;优先使用对象组合而不是类继承&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_template_method_模式&quot; &gt;TEMPLATE METHOD 模式&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_华氏度转摄氏度&quot; &gt;华氏度转摄氏度&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他是通过继承来解决问题。现在我们有一个程序如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 输入华氏度转化为摄氏度
 *
 * @author echo
 * @version 1.0
 * @date 19-4-3 09:01
 */
public class Ftocraw {
    public static void main(String[] args) throws Exception {
        // 初始化流
        InputStreamReader isr = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(isr);
        boolean done = false;
        // 主循环中完成工作
        while (!done) {
            String fabrString = br.readLine();
            if (fabrString == null || fabrString.length() == 0) {
                done = true;
            } else {
                double fahr = Double.parseDouble(fabrString);
                double celcius = 5.0 / 9.0 * (fahr - 32);
                System.out.println(&quot;F=&quot; + fahr + &quot;, C=&quot; + celcius);
            }
        }
        System.out.println(&quot;ftoc exit!&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他是一个简单且正常运行的主循环结构。我们可以应用 TEMPLATE METHOD
模式把这个基本结构从 &lt;code&gt;floc&lt;/code&gt; 程序中分离出来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;我们把所有的通用代码放入一个抽象基类的实现方法中，这个实现方法完成这个通用算法，但是将所有的实现细节都交付给该积累的抽象方法，修改后的如下：&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 描绘了一个通用的主循环应用程序
 *
 * @author echo
 * @version 1.0
 * @date 19-4-3 09:10
 */
public abstract class Application {
    private boolean isDone = false;
    protected abstract void init();
    protected abstract void idle();
    protected abstract void cleanup();

    public void run() {
        // 初始化
        init();
        // 执行
        while (!done()) {
            idle();
        }
        // 清除
        cleanup();
    }

    protected boolean done() {
        return isDone;
    }

    protected void setDone(boolean done) {
        isDone = done;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在，我们可以通过继承 &lt;code&gt;Application&lt;/code&gt; 来重写 &lt;code&gt;floc&lt;/code&gt;
类，只需要实现抽象方法即可，修改后的如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 09:15
 */
public class FtocTemplateMethod extends Application {
    private InputStreamReader inputStreamReader;
    private BufferedReader bufferedReader;

    public static void main(String[] args) {
        new FtocTemplateMethod().run();
    }

    @Override
    protected void init() {
        inputStreamReader = new InputStreamReader(System.in);
        bufferedReader = new BufferedReader(inputStreamReader);
    }

    @Override
    protected void idle() {
        String fahrString = readLineAndReturnNullIfError();
        if (fahrString == null || fahrString.length() == 0) {
            setDone();
        } else {
            double fahr = Double.parseDouble(fahrString);
            double celcius = 5.0 / 9.0 * (fahr - 32);
            System.out.println(&quot;F=&quot; + fahr + &quot;, C=&quot; + celcius);
        }
    }

    /**
     * 异常处理
     *
     * @return 读取结果
     */
    private String readLineAndReturnNullIfError() {
        String s;
        try {
            s = bufferedReader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
            s = null;
        }
        return s;
    }

    @Override
    protected void cleanup() {
        System.out.println(&quot;ftoc exit!&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这就是 TEMPLATE METHOD
模式的一个简单应用。在这个特定的简单的程序中，我们很容易理解。但是我们真的需要这样吗？&lt;strong&gt;其实，上面的这个是一个滥用模式的好礼自，在这个特定程序中，使用
TEMPLATE METHOD
模式是荒谬的，他使得程序变得复杂庞大，他的意义不大，因为俄他的代价高于他所带来的好处。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_冒泡排序&quot; &gt;冒泡排序&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;设计模式是很好的东西，但是并不意味着必须要经常使用它们，下面我们看一个设计模式稍微有用些的例子。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 冒泡排序
 *
 * @author echo
 * @version 1.0
 * @date 19-4-3 09:29
 */
public class BubbleSorter {
    static int operations = 0;

    public static int sort(int[] array) {
        operations = 0;
        if (array.length &amp;lt;= 1) {
            return operations;
        }
        for (int nextToLast = array.length - 2; nextToLast &amp;gt;= 0; nextToLast--) {
            for (int index = 0; index &amp;lt;= nextToLast; index++) {
                compareAndSwap(array, index);
            }
        }
        return operations;
    }

    private static void compareAndSwap(int[] array, int index) {
        if (array[index] &amp;gt; array[index + 1]) {
            swap(array, index);
        }
        operations++;
    }

    private static void swap(int[] array, int index) {
        int tmp = array[index];
        array[index] = array[index + 1];
        array[index + 1] = tmp;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这是一个非常普通的冒泡排序算法，现在我们使用 TEMPLATE METHOD
模式，把冒泡排序算法分离出来，放到一个抽象类中，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 抽象
 *
 * @author echo
 * @version 1.0
 * @date 19-4-3 09:35
 */
public abstract class BubbleSorterAbstract {
    private int operations = 0;
    protected int length = 0;

    protected int doSort() {
        operations = 0;
        if (length &amp;lt;= 1) {
            return operations;
        }
        for (int nextToLast = length - 2; nextToLast &amp;gt;= 0; nextToLast--) {
            for (int index = 0; index &amp;lt;= nextToLast; index++) {
                if (outOfOrder(index)) {
                    swap(index);
                }
                operations++;
            }
        }
        return operations;
    }

    protected abstract void swap(int index);
    protected abstract boolean outOfOrder(int index);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过继承这个类，就可以完成一些变化的排序如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * int 类型冒泡排序
 *
 * @author echo
 * @version 1.0
 * @date 19-4-3 09:39
 */
public class IntBubbleSorter extends BubbleSorterAbstract {
    private int[] array = null;

    public int sort(int[] theArray) {
        array = theArray;
        length = array.length;
        return doSort();
    }

    @Override
    protected void swap(int index) {
        int tmp = array[index];
        array[index] = array[index + 1];
        array[index + 1] = tmp;
    }

    @Override
    protected boolean outOfOrder(int index) {
        return array[index] &amp;gt; array[index+1];
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * double 类型冒泡排序
 *
 * @author echo
 * @version 1.0
 * @date 19-4-3 09:41
 */
public class DoubleBubbleSorter extends BubbleSorterAbstract {
    private double[] array = null;
    public int sort(double[] theArray) {
        array = theArray;
        length = array.length;
        return doSort();
    }

    @Override
    protected void swap(int index) {
        double tmp = array[index];
        array[index] = array[index + 1];
        array[index + 1] = tmp;
    }

    @Override
    protected boolean outOfOrder(int index) {
        return array[index] &amp;gt; array[index+1];
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过 TEMPLATE METHOD
模式的继承，把通用方法放在基类中，并且通过继承在不同的上下文中实现该通用算法。但是继承是一种非常强的关系，派生类不得不和基类绑定在一起。例如，其他类型的排序算法也要重新实现
&lt;code&gt;outOfOrder&lt;/code&gt; 和 &lt;code&gt;swap&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;em&gt;java 中有范型能够很好的解决上面的例子的问题。&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过，STRATEGY 提供了一种可选的方案。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_strategy_模式&quot; &gt;STRATEGY 模式&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_华氏度转摄氏度_2&quot; &gt;华氏度转摄氏度&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们考虑刚才 华氏度转摄氏度
的例子，我们不再将通用的应用算法放进一个抽象基类中，而是放到一个
&lt;code&gt;ApplicationRunner&lt;/code&gt;
具体类中。我们把通用算法必须要调用的抽象方法定义在一个 &lt;code&gt;Application&lt;/code&gt;
接口中，再从这个接口中派生出 &lt;code&gt;FlocStrategy&lt;/code&gt;，再传给具
&lt;code&gt;ApplicationRunner&lt;/code&gt;，之后，就可以把具体工作委托给接口去完成。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先来写 &lt;code&gt;Application&lt;/code&gt; 接口&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 10:00
 */
public interface Application {
    public void init();
    public void idle();
    public void cleanup();
    public boolean done();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;看看 &lt;code&gt;ApplicationRunner&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 09:59
 */
public class ApplicationRunner {
    public Application itsAppliction = null;

    public ApplicationRunner(Application itsAppliction) {
        this.itsAppliction = itsAppliction;
    }

    public void run() {
        itsAppliction.init();
        while (!itsAppliction.done()) {
            itsAppliction.idle();
        }
        itsAppliction.cleanup();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后使用 STRATEGY 模式来进行改造 华氏度转摄氏度 的例子&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 10:02
 */
public class FtocStrategy implements Application {
    private InputStreamReader inputStreamReader;
    private BufferedReader bufferedReader;
    private boolean isDone = false;

    public static void main(String[] args) {
        new ApplicationRunner(new FtocStrategy()).run();
    }

    @Override
    public void init() {
        inputStreamReader = new InputStreamReader(System.in);
        bufferedReader = new BufferedReader(inputStreamReader);
    }

    @Override
    public void idle() {
        String fahrString = readLineAndReturnNullIfError();
        if (fahrString == null || fahrString.length() == 0) {
            isDone = true;
        } else {
            double fahr = Double.parseDouble(fahrString);
            double celcius = 5.0 / 9.0 * (fahr - 32);
            System.out.println(&quot;F=&quot; + fahr + &quot;, C=&quot; + celcius);
        }
    }

    @Override
    public void cleanup() {
        System.out.println(&quot;ftoc exit!&quot;);
    }

    @Override
    public boolean done() {
        return isDone;
    }

    /**
     * 异常处理
     *
     * @return 读取结果
     */
    private String readLineAndReturnNullIfError() {
        String s;
        try {
            s = bufferedReader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
            s = null;
        }
        return s;
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他和 TEMPLATE METHOD 实现的相比怎么样呢？很明显，STRATEGY
模式代价更高一点，涉及到更多数量的类和间接层次，&lt;code&gt;ApplicationRunner&lt;/code&gt;
委托指针的使用会造成比继承稍微多一点的运行时间和数据空间开销。&lt;strong&gt;但是另一方面，如果有许多不同的程序妖运行，就可以重用
&lt;code&gt;ApplicationRunner&lt;/code&gt; 实例，并把许多不同的 &lt;code&gt;Application&lt;/code&gt;
实现传给他，从而减小了通用算法和该算法所控制的及具体细节之间的耦合。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_冒泡排序_2&quot; &gt;冒泡排序&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过最烦人的问题是 STRATEGY 模式需要很多额外的类，我们来考虑一下使用
STRATEGY 模式实现 冒泡排序 看看。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;排序接口&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 10:13
 */
public interface SortHandle {
    public void swap(int index);
    public boolean outOfOrder(int index);
    public int length();
    public void setArray(Object array);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他的一个实现&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 10:13
 */
public class IntSortHandle implements SortHandle {
    private int[] array = null;

    @Override
    public void swap(int index) {
        int tmp = array[index];
        array[index] = array[index + 1];
        array[index + 1] = tmp;
    }

    @Override
    public boolean outOfOrder(int index) {
        return (array[index] &amp;gt; array[index + 1]);
    }

    @Override
    public int length() {
        return array.length;
    }

    @Override
    public void setArray(Object array) {
        this.array = (int[]) array;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;排序算法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 10:12
 */
public class BubbleSorter {
    private int operations = 0;
    private int length = 0;
    private SortHandle itsSortHandle = null;

    public BubbleSorter(SortHandle itsSortHandle) {
        this.itsSortHandle = itsSortHandle;
    }

    public int sort(Object array) {
        itsSortHandle.setArray(array);
        length = itsSortHandle.length();
        operations = 0;
        if (length &amp;lt;= 1) {
            return operations;
        }
        for (int nextToLast = length - 2; nextToLast &amp;gt;= 0; nextToLast--) {
            for (int index = 0; index &amp;lt;= nextToLast; index++) {
                if (itsSortHandle.outOfOrder(index)) {
                    itsSortHandle.swap(index);
                }
                operations++;
            }
        }
        return operations;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;和 TEMPLATE METHOD 不同的是，接口实现 &lt;code&gt;IntSortHandle&lt;/code&gt; 对 &lt;code&gt;BubbleSorter&lt;/code&gt;
一无所知，布依赖于任何实现方式。在 TEMPLATE METHOD 中，&lt;code&gt;swap&lt;/code&gt; 和
&lt;code&gt;outOfOrder&lt;/code&gt; 的实现依赖于冒泡排序算法，所以他部分违反了 &lt;code&gt;DIP&lt;/code&gt;，而
STRATEGY 总不包含这样的依赖。所以可以在 &lt;code&gt;BubbleSorter&lt;/code&gt; 之外的其他任何从
&lt;code&gt;SortHandle&lt;/code&gt; 派生出来的类。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_冒泡排序的变体&quot; &gt;冒泡排序的变体&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在，我们创建冒泡排序的一个变体，如果他在一次对于数组的遍历中发现数组的元素已经是按序排列的话，就提前结束。创建一个
&lt;code&gt;QuickBubbleSorter&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 10:27
 */
public class QuickBubbleSorter {
    private int operations = 0;
    private int length = 0;
    private SortHandle itsSortHandle = null;

    public QuickBubbleSorter(SortHandle itsSortHandle) {
        this.itsSortHandle = itsSortHandle;
    }

    public int sort(Object array) {
        itsSortHandle.setArray(array);
        length = itsSortHandle.length();
        operations = 0;
        if (length &amp;lt;= 1) {
            return operations;
        }
        boolean thisPassInOrder = false;
        for (int nextToLast = length - 2; nextToLast &amp;gt;= 0 &amp;amp;&amp;amp; !thisPassInOrder; nextToLast--) {
            thisPassInOrder = true;
            for (int index = 0; index &amp;lt;= nextToLast; index++) {
                if (itsSortHandle.outOfOrder(index)) {
                    itsSortHandle.swap(index);
                    thisPassInOrder = false;
                }
                operations++;
            }
        }
        return operations;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;QuickBubbleSorter&lt;/code&gt; 同样可以使用 &lt;code&gt;IntSortHandle&lt;/code&gt;，或者任何其他从
&lt;code&gt;SortHandle&lt;/code&gt; 派生出来的类。它完全遵循 DIP
原则，从而允许每个具体实现都可以被多个不同的通用算法操纵。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;相比起来，两个模式都可以
&lt;strong&gt;用来分离高层的算法和底层的具体实现细节，都允许高层的算法独立于他的具体实现细节重用。&lt;/strong&gt;
此外 STRATEGY
模式也允许具体实现细节独立于高层的算法重用，不过要以一些额外的复杂性、内存以及运行时间开销作为代价。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_facade_模式和_mediator_模式&quot; &gt;FACADE 模式和 MEDIATOR 模式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;尊贵的符号外表下，隐藏着卑劣的梦想。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;FACADE 模式和 MEDIATOR
模式有着共同的目的，他们都把某种策略施加到另外一组对象上。 - FACADE
模式从上面施加策略，使用是明显且受限的。 -
可以为一组具有复杂且全面的接口的对象提供一个简单且特定的接口，简单的说，就是应藏了具体的内部细节，提供一个非常简单且特定的接口来完成。FACADE
对其就施加了策略。 - MEDIATOR
模式从下面施加策略，使用是不明显且不受限的。 -
无需被施加者允许或者知晓。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_singleton_模式和_monostate_模式&quot; &gt;SINGLETON 模式和 MONOSTATE 模式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这是对万物的祝福！除此之外再无其他&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这章的两个模式，是强制对象单一性的模式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_singleton_模式&quot; &gt;SINGLETON 模式&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;SINGLETON 模式 是一个很简单的模式，通过一个一些测试用例来看看。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 单例模式
 *
 * @author echo
 * @version 1.0
 * @date 19-4-3 11:08
 */
public class Singleton {
    private static Singleton theInstance = null;
    private Singleton(){}
    public static Singleton instance() {
        if (theInstance == null) {
            theInstance = new Singleton();
        }
        return theInstance;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 11:07
 */
class TestSimpleSingleton {
    @Test
    void testCreateSingleton() {
        Singleton s1 = Singleton.instance();
        Singleton s2 = Singleton.instance();
        assert s1 == s2;
    }

    @Test
    void testNoPublicConstructors() throws ClassNotFoundException {
        Class&amp;lt;?&amp;gt; singleton = Class.forName(&quot;four.singleton.Singleton&quot;);
        Constructor[] constructors = singleton.getConstructors();
        assert constructors.length == 0;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以看出，通过私有化构造函数，实现了 SINGLETON 模式&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;好处：&lt;/strong&gt; 1. 跨平台：使用合适的中间件，可以把 SINGLETON 模式扩展为跨多个
JVM 和多个计算机工作。 2.
适用于任何类：只要把一个类的构造函数私有化，并且增加相应的静态函数和变量，就可以把这个类变成
SINGLETON。 3. 可以通过派生创建：给定一个类，可以创建他的一个 SINGLETON
子类。 4. 延迟求值：如果 SINGLETON 从未使用过，那么就不会创建他。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;代价：&lt;/strong&gt; 1. 摧毁方法未定义：没有好的摧毁方法去摧毁一个
SINGLETON，或者解除其职责，可能会同时存在两个实例。 2. 不能继承：从
SINGLETON 类派生出来的类不是 SINGLETON 的。 3. 效率问题：每次调用
instance 都会执行 if 语句 4. 不透明性：SINGLETON
使用者指定他们在使用一个 SINGLETON，因为他们必须调用 instance 方法。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_monostate_模式&quot; &gt;MONOSTATE 模式&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;MONOSTATE
模式是获取单一对象的另外一种方法。它使用了一种完全不同的工作机制，看看下面的一个例子：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 11:20
 */
public class Monostate {
    private static int itsX = 0;
    public Monostate(){}
    public void setX(int x) {
        itsX = x;
    }
    public int getX() {
        return itsX;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试用例&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 11:21
 */
class TestMonostate {
    @Test
    void testInstance() {
        Monostate monostate = new Monostate();
        for (int x = 0; x &amp;lt; 10; x++) {
            monostate.setX(x);
            assert x == monostate.getX();
        }
    }

    @Test
    void testInstanceBehaveAsOne() {
        Monostate m1 = new Monostate();
        Monostate m2 = new Monostate();
        for (int x = 0; x &amp;lt; 10; x++) {
            m1.setX(x);
            assert x == m2.getX();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;两个对象共享相同的变量，&lt;code&gt;itsX&lt;/code&gt;
是静态的，但是方法不是静态的，这一点很重要。无论创建多少个 &lt;code&gt;Monostate&lt;/code&gt;
对象的实例，他们都表现得&lt;strong&gt;像一个对象一样，甚至把当前的所有实例都销毁或者解除职责，也不会丢失数据。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;好处：&lt;/strong&gt; 1. 透明性：使用 MONOSTATE
对象和使用常规对象没有什么区别，使用者不知道对象是 MONOSTATE。 2.
可派生性：MONOSTATE 的派生类都是 MONOSTATE，事实上，MONOSTATE
的所有派生类都是同一个 MONOSTATE 的一部分，他们共享相同的静态变量。 3.
多态性：由于 MONOSTATE 的方法不是静态的，所以可以在派生类中总重写。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;代价&lt;/strong&gt; 1. 不可转换性：不能通过派生类把常规类转换成 MONOSTATE 类。 2.
效率问题：因为 MONOSTATE 是真正的对象，所以会导致许多的创建和销毁开销。
3. 内存占用：即使从未使用过 MONOSTATE，他的变量也要占据内存空间。 4.
平台局限性：MONOSTATE 不能跨多个 JVM 或者多个平台工作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;两个模式，一个关注行为，一个。 - SINGLETON
模式关注结构，强制结构上的单一性。防止创建出多个对象实例。如果希望通过派生去约束一个现存类，并且不介意他的所有调用这都必须要调用
&lt;code&gt;instance()&lt;/code&gt; 方法来获取访问权，那么他是最合适的。 - MONOSTATE
模式关注行为，强制行为上的单一性，而没有强加结构方面的限制。如果希望类的单一性本质对使用者透明，或者希望使用单一对象的多态派生对象，那么他是最合适的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;MONOSTATE 的测试用例对 SINGLETON 类是有效的，但是 SINGLETON
的测试用例却不远不适用于 MONOSTATE 类。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_null_object_模式&quot; &gt;NULL OBJECT 模式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;残缺即是完美，冷淡即是虚无，死亡即是圆满，没有即是更多。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;java 中可能最常见的一个异常就是空指针异常了，使用 &lt;code&gt;if&lt;/code&gt; 和 &lt;code&gt;try/catch&lt;/code&gt;
都不是很优雅，现在我们俩看个 NULL OBJECT 模式的例子。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先编写测试用例&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 11:42
 */
class TestEmployee {

    @Test
    void testNull() {
        // 不存在的数据
        Employee employee = DB.getEmployee(&quot;Bob&quot;);
        assert employee.isTimeToPay(new Date()) || Employee.NULL == employee;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;书写接口&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface Employee {
    public boolean isTimeToPay(Date payDate);
    public void pay();
    public static final Employee NULL = new Employee() {
        @Override
        public boolean isTimeToPay(Date payDate) {
            return false;
        }

        @Override
        public void pay() {

        }
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author echo
 * @version 1.0
 * @date 19-4-3 11:43
 */
public class DB {
    public static Employee getEmployee(String name) {
        return Employee.NULL;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们通过使无效的数据成为一个匿名内部类是一个确保只有单一实例的方法，实际上并不存在。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我突然想到了 jdk 8 的 optional～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;相比来说，前半部分较难，后面比较简单。周六看完的，但是周三才实现部分代码，理解提高了一点，作业实在太多=-=脑壳疼，加油吧！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[我校资源仓库 使用详解]]></description><link>https://zyue.wiki/articles/2019/03/01/1551410272344.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/03/01/1551410272344.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_私服介绍&quot;&gt;私服介绍&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_优点&quot;&gt;优点&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_maven&quot;&gt;Maven&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_全局使用私服&quot;&gt;全局使用私服&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_当前_maven_项目使用私服&quot;&gt;当前 maven 项目使用私服&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_当前_gradle_项目使用私服&quot;&gt;当前 gradle 项目使用私服&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_验证&quot;&gt;验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_npm&quot;&gt;Npm&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前_2&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_全局使用私服_2&quot;&gt;全局使用私服&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_临时使用私服&quot;&gt;临时使用私服&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_验证_2&quot;&gt;验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_pip&quot;&gt;Pip&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前_3&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_全局使用私服_3&quot;&gt;全局使用私服&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_安装单个库&quot;&gt;安装单个库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_yum&quot;&gt;Yum&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_epel&quot;&gt;Epel&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_docker&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_其它&quot;&gt;其它&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_jrebel_激活&quot;&gt;Jrebel 激活&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近在上 分布式应用系统 的课程，在使用 maven、npm、pip
等这些依赖管理工具的时候，出现了一个很严重的问题，就是我们校园网由于 dns
的问题，造成了下载依赖的时候总是下不全，dns
总是要解析第二遍才能成功，为此，我特地利用学校已有的资源服务器，搭建了我们学校的私服仓库，此篇文章就是如何使用的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意：校内私服只有在新校区连接校园网以后才能使用。只连接 wifi
，不用登录校园网也可以使用。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_私服介绍&quot; &gt;私服介绍&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过 nexus3 搭建校内私服，可以在通过 &lt;code&gt;&lt;a href=&quot;http://10.100.0.11:5741&quot; class=&quot;bare&quot;&gt;http://10.100.0.11:5741&lt;/a&gt;&lt;/code&gt;
进行查看和搜索当前私服已经下载的包和仓库，已经开启匿名访问免登陆，如果发现有下载不全的情况，请联系`&lt;a href=&quot;mailto:lzy@echocow.cn&quot;&gt;lzy@echocow.cn&lt;/a&gt;`
，有奖励哦～！现在私服仓库如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;☒ Maven → 建议配置永久的&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ Npm → 建议配置临时的&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ Pip → 建议配置临时的&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☐ Yum&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☐ Epel&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☐ Docker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;还可以搭建很多，但是都不在计划之内&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_优点&quot; &gt;优点&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;内网传输，可靠性高，速度快&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;内网无需 DNS
解析，完美解决学校校园网问题（如果使用阿里云或者其他私服，依旧可能出现
DNS 解析或者网络缓慢的问题）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;可以直接搜索和查看 Maven 私服的库&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_maven&quot; &gt;Maven&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这之前，你需已经成功安装并配置 maven 环境变量，请通过 &lt;code&gt;mvn -v&lt;/code&gt;
检测。并且要拥有 maven 的基础知识，你需要选择性的明白以下内容：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;如果你希望全局使用私服，你需要了解 maven 全局配置文件 &lt;code&gt;setting.xml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;如果你希望当前项目使用私服，你需要了解当前项目的 maven 配置文件
&lt;code&gt;pom.xml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;如果你希望 gradle 项目使用私服，你需要了解当前项目的 gradle 配置文件
&lt;code&gt;build.gradle&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;maven 私服地址：http://10.100.0.11:5741/repository/maven-public/&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;如果你曾经有过未下载完全的依赖，请先删除原来的本地仓库： - windows
默认目录 &lt;code&gt;C:/Users/用户名/.m2&lt;/code&gt; 的隐藏文件夹，请直接删除， - linux
默认目录 &lt;code&gt;/home/用户名/.m2&lt;/code&gt; ，请直接删除 - 如果你自己在 &lt;code&gt;setting.xml&lt;/code&gt;
配置了本地仓库地址，即使用了 &lt;code&gt;localRepository&lt;/code&gt;
标签，请找到你指定的文件夹进行删除。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_全局使用私服&quot; &gt;全局使用私服&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你需要找到你当前 maven 的`setting.xml` 配置文件，找到 &lt;code&gt;&amp;lt;mirrors&amp;gt;&lt;/code&gt;
标签，添加如下内容即可：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;    &amp;lt;mirror&amp;gt;
      &amp;lt;id&amp;gt;com.gzmu&amp;lt;/id&amp;gt;
      &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt;
      &amp;lt;name&amp;gt;gzmu-maven&amp;lt;/name&amp;gt;
      &amp;lt;url&amp;gt;http://10.100.0.11:5741/repository/maven-public/&amp;lt;/url&amp;gt;
    &amp;lt;/mirror&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;请注意，如果你使用 &lt;code&gt;IDEA&lt;/code&gt; 进行项目构建，必须使用以下方式进行构建。在
&lt;code&gt;windows/linux&lt;/code&gt; 下你需要进入
&lt;code&gt;File → Setting → Build…​ →  Build Tools  → maven&lt;/code&gt;
中，有以下几种方式 1. 修改 maven 为你 本地的而不是使用内置的，同时修改
&lt;code&gt;User Setting File&lt;/code&gt; 为你本地的。 2. 使用内置的 maven 修改
&lt;code&gt;User Setting File&lt;/code&gt; 为你本地的。 3. 都不修改，找到
`User Setting File`中的文件（没有就自己加一个或者复制过来）然后添加上面的
配置&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_当前_maven_项目使用私服&quot; &gt;当前 maven 项目使用私服&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你使用 maven 进行项目构建，你的 maven 项目根目录下存在一个 &lt;code&gt;pom.xml&lt;/code&gt;
依赖管理配置文件，你需要 &lt;code&gt;project&lt;/code&gt; 标签下添加子标签如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    &amp;lt;repositories&amp;gt;
        &amp;lt;repository&amp;gt;
            &amp;lt;id&amp;gt;com.gzmu&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;gzmu-maven&amp;lt;/name&amp;gt;
            &amp;lt;url&amp;gt;http://10.100.0.11:5741/repository/maven-public/&amp;lt;/url&amp;gt;
        &amp;lt;/repository&amp;gt;
    &amp;lt;/repositories&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_当前_gradle_项目使用私服&quot; &gt;当前 gradle 项目使用私服&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你使用 gradle 进行项目构建，你的 gradle 项目根目录下存在一个
&lt;code&gt;build.gradle&lt;/code&gt; 项目构建文件，你需要添加 &lt;code&gt;repositories&lt;/code&gt;
闭包，设置仓库地址如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    repositories {
        mavenLocal()
        maven { url &quot;http://10.100.0.11:5741/repository/maven-public/&quot;}
        // .... 其它maven中心，以备万一
        mavenCentral()
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_验证&quot; &gt;验证&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;使用任何一个 ide，在 maven
项目添加一个依赖，观察右下角依赖下载地址是否为私服地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用命令行，切换到一个 maven 项目根目录，添加一个依赖，使用
&lt;code&gt;mvn install&lt;/code&gt; 进行部署，会自动下载依赖，观察下载地址是否为私服地址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_npm&quot; &gt;Npm&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_在这之前_2&quot; &gt;在这之前&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这之前，你需已经成功安装并配置 npm 环境变量(Windows
安装版会自动配置)，请通过 &lt;code&gt;npm -v&lt;/code&gt; 检验，并且你需要具有基础的 npm
知识，你需要选择性的明白以下内容： - 如果你希望全局使用私服，你需要了解
npm 全局配置文件 &lt;code&gt;.npmrc`或者 `命令配置&lt;/code&gt; -
如果你希望临时使用私服，你需要了解 npm 命令&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;单个项目中也可以指定使用私服，修改 &lt;code&gt;package.json&lt;/code&gt; 配置文件，修改
&lt;code&gt;install&lt;/code&gt; 命令，但是非常不友好，故而不做阐述。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_全局使用私服_2&quot; &gt;全局使用私服&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_修改配置文件&quot; &gt;修改配置文件&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你需要找到你的 npm 配置文件目录，默认情况下，他存在于 当前用户的家目录
下（如果没有可以自行创建或者通过下一种方式安装），例如&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;windows：&lt;code&gt;C:\Users(用户)\用户名\.npmrc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;linux/mac：&lt;code&gt;/home/用户名/.npmrc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加如下配置即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;registry=http://10.100.0.11:5741/repository/npm-publilc/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_命令配置&quot; &gt;命令配置&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行如下命令即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;// 配置仓库
npm config set registry http://10.100.0.11:5741/repository/npm-publilc/

// 查看配置
npm config list&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他会自动在家目录里面添加上面提到的配置文件&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_临时使用私服&quot; &gt;临时使用私服&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;只需要一个命令即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;npm --registry http://10.100.0.11:5741/repository/npm-publilc install express&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;请注意，此方法的私服的配置是临时的，将会只对当前命令行有效，一旦关闭，下次使用活打开新的命令行还需要重新修改。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_验证_2&quot; &gt;验证&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;使用任何一个 ide，在 npm
项目添加一个依赖，观察右下角依赖下载地址是否为私服地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用命令行，安装整个项目依赖，切换到一个 npm
项目根目录，添加一个依赖，使用 &lt;code&gt;npm -loglevel info install&lt;/code&gt;
进行依赖下载，观察下载地址是否为私服地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用命令行，安装单个全局依赖，例如
&lt;code&gt;npm -loglevel info i -g @vue/cli&lt;/code&gt;，观察下载地址是否为私服地址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_pip&quot; &gt;Pip&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_在这之前_3&quot; &gt;在这之前&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这之前，你需已经成功安装并配置 pip 环境变量(windows
安装版需要注意勾选加入环境变量选项)，请通过 &lt;code&gt;pip --version&lt;/code&gt;
检测。并且要拥有 pip 的基础知识，你需要选择性的明白以下内容：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;如果你希望全局使用私服，&lt;code&gt;命令配置&lt;/code&gt; 你的 pip 需要在 10 以上。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;如果你希望安装单个库时使用，你需要在每次安装的时候添加参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意，此处我不使用配置文件进行配置，通过配置文件也可以修改，但是因为他的配置不像
npm 一样固定，有些系统是不一样的，所以有需要请自行去查找资料。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_全局使用私服_3&quot; &gt;全局使用私服&lt;/h3&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;// 配置仓库
pip config set global.index-url http://10.100.0.11:5741/repository/pypi-public/simple

// 添加信任
pip config set install.trusted-host 10.100.0.11&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他会输出自动写入的配置文件的位置。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_安装单个库&quot; &gt;安装单个库&lt;/h3&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;pip install --trusted-host 10.100.0.11 -i http://10.100.0.11:5741/repository/pypi-public/simple 库名&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;pip install --trusted-host 10.100.0.11 -i http://10.100.0.11:5741/repository/pypi-public/simple flask&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_yum&quot; &gt;Yum&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;待完成……&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_epel&quot; &gt;Epel&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;待完成……&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_docker&quot; &gt;Docker&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;待完成……&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用以上方式，安装依赖速度快很多，因为服务器 DNS
是没有问题的，并且外网速度也比校园网给力的。如果遇到问题请及时和我联系！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_其它&quot; &gt;其它&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_jrebel_激活&quot; &gt;Jrebel 激活&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;除了私服的搭建，我也搭建了 Jrebel
的激活服务，如果有需要的请自取。http://58.16.40.236:8889/[网页链接]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[[阅读] 敏捷软件开发 —— 敏捷设计（二）]]></description><link>https://zyue.wiki/articles/2019/03/23/1553311043768.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/03/23/1553311043768.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_回顾&quot;&gt;回顾&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_listov_替换原则lsp&quot;&gt;Listov 替换原则（LSP）&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_一个违反_lsp_的简单例子&quot;&gt;一个违反 LSP 的简单例子&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_微妙的违反_lsp_的例子&quot;&gt;微妙的违反 LSP 的例子&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_基于契约设计dbc&quot;&gt;基于契约设计（DBC）&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_抽取公共部分的方法代替继承&quot;&gt;抽取公共部分的方法代替继承&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_其他&quot;&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_依赖倒置原则dip&quot;&gt;依赖倒置原则（DIP）&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_接口隔离原则isp&quot;&gt;接口隔离原则（ISP）&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_参考链接&quot;&gt;参考链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;有时候觉得读书真的很有用，在文字中的感觉很美好，特别是喜欢朗读出来的感觉，越发的那样，越发能够体验书的境遇。这周的计划依旧被自己推迟，总是拖延症，不知不觉又到了周六，疲惫十分。不过依旧觉得不能放弃继续看这本书。世间太美，诱人的东西太多，有多少人可以面不改色呢？有时候觉得一个人的时候，才是自己变化最大的时候。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_回顾&quot; &gt;回顾&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;上一周的两个原则 ——
SRP、OCP。都是十分简单但是却偏偏难以满足的，需要不断地去实践。相比较来说，SRP
更好理解，书中的 OCP 是 C 的例子，始终有些懵，网上找了写 java
其他的例子，也是理解了部分。不过这种的代码，依旧是 C
的例子，但是比起来却好理解了一些。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_listov_替换原则lsp&quot; &gt;Listov 替换原则（LSP）&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;子类型必须能够替换掉他们的基类型。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;替换性质：若对每个类型 S 的对象 o1，都存在一个类型 T 的对象
o2，使得在所有针对 T 编写的程序 P 中，用 o1 替换 o2 后，程序 P
行为功能不变，则 S 是 T 的子类型。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;违反 LSP 原则是很严重的，因这常常会导致明显违反 OCP
原则，就像一条连锁链一样。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_一个违反_lsp_的简单例子&quot; &gt;一个违反 LSP 的简单例子&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;书中的代码使用 C++ 完成，我采用 java 类似的完成了一下如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// Point.java
public class Point {
    double x;
    double y;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// Shape.java ，书中代码使用了枚举，java 可以省略，因为他有更好的判断类型的方式
// 构造函数使用默认即可
public class Shape {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// Circle.java  我全部暴露出去，省掉 get/set 方法
public class Circle extends Shape {
    public Point itsCenter;
    public double itsRadius;

    public void draw() {
        System.out.println(&quot;circle&quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// Square.java 同上
public class Square extends Shape {
    public Point itsTopLeft;
    public double itsSide;

    public void draw() {
        System.out.println(&quot;square&quot;);
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// ShapeTest.java
class ShapeTest {

    @Test
    void testDrawShape() {
        drawShapeV1(new Circle());
    }

    // 按照书上的这样写，先假设这样写。
    private void drawShapeV1(Shape shape) {
        if (shape instanceof Circle) {
            ((Circle) shape).draw();ShapeTest
        } else if (shape instanceof Square) {
            ((Square) shape).draw();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样的模型，&lt;code&gt;drawShape&lt;/code&gt; 函数也就违反 OCP，因为他必须知道所有的 &lt;code&gt;Shape&lt;/code&gt;
的派生类，一旦有变化就要来修改此函数，但是我是仿照书上的 C++
的代码写的，这是一个很明显违反了 LSP 的例子。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_微妙的违反_lsp_的例子&quot; &gt;微妙的违反 LSP 的例子&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下面我们来看一个更为微妙的违反了 LSP
的方式。现在已有一个正在运行的矩形如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;// Rectangle.java
public class Rectangle {
    private Point itsTopLeft;
    private double itsWidth;
    private double itsHeight;

    public double getItsWidth() {
        return itsWidth;
    }

    public void setItsWidth(double itsWidth) {
        this.itsWidth = itsWidth;
    }

    public double getItsHeight() {
        return itsHeight;
    }

    public void setItsHeight(double itsHeight) {
        this.itsHeight = itsHeight;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果我们现在要添加正方形呢？从一般意义上来讲，一个正方形就是一个矩形，所以把
&lt;code&gt;Square&lt;/code&gt; 类视为从 &lt;code&gt;Rectangle&lt;/code&gt; 类派生是合乎逻辑的。他们存在一种 IS-A
的关系。当然，IS-A
这种用法有时会被认为是面向对象分析（OOA）基本技术之一。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当我们在编写代码的时候会注意到一些问题，比如，对于 &lt;code&gt;Square&lt;/code&gt;
来说，其实并不同时需要 &lt;code&gt;itsHeight&lt;/code&gt; 和
&lt;code&gt;itsWidth&lt;/code&gt;，但是由于继承的关系，他依旧会获得这两个属性，这显然是一种浪费。我们暂且不在乎内存的问题，换一个角度上看，当
&lt;code&gt;Square&lt;/code&gt; 会同事继承 &lt;code&gt;setItsWidth&lt;/code&gt; 和 &lt;code&gt;setItsHeight&lt;/code&gt;
函数，这两个函数其实并不适用于正方形，因为他的长和宽都是相等的，现在我们作出些许改变：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Square extends Rectangle {
    @Override
    public void setItsWidth(double itsWidth) {
        super.setItsWidth(itsWidth);
        super.setItsHeight(itsWidth);
    }

    @Override
    public void setItsHeight(double itsHeight) {
        super.setItsHeight(itsHeight);
        super.setItsWidth(itsHeight);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在长宽同时改变，保持了 &lt;code&gt;Square&lt;/code&gt;
几何上的不变性。接下来我们考虑下面的这个函数。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;void f(Rectangle r){
    r.setItsWidth(32);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 java 中这个函数是没有问题，但是在 c++ 中就要将他们声明为 虚函数
才能正确运行，因而不再讨论。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样的设计似乎是正确的，但是我们考虑下面的这个函数。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;void f(Rectangle r){
    r.setItsWidth(5);
    r.setItsHeight(4);
    assertEquals(20);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个函数认为传递过来的一定是 &lt;code&gt;Rectangle&lt;/code&gt;，并调用了他的两个方法，对于
&lt;code&gt;Rectangle&lt;/code&gt; 来说是正确的，但是如果是 &lt;code&gt;Square&lt;/code&gt; 来说确断言错误。函数 &lt;code&gt;f&lt;/code&gt;
对于 &lt;code&gt;Square/Rectangle&lt;/code&gt; 层次结构来说是脆弱的。&lt;code&gt;f&lt;/code&gt;
的编写者完全可以对和这个不变的性质进行断言，倒是 &lt;code&gt;Square&lt;/code&gt;
违反了这个不变性。然而 &lt;code&gt;Square&lt;/code&gt; 并没有违反正方形的不变性，违反的应该是
&lt;code&gt;Rectangle&lt;/code&gt; 的不变性。。。。（绕晕了=-=）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;LSP
让我们得出一个非常重要的结论，一个模型，如果独立地看，并不具有真正意义上的有效性。模型的有效性只能通过他的客户程序来表现。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_基于契约设计dbc&quot; &gt;基于契约设计（DBC）&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;许多开发人员可能会对``合理假设&apos;&apos;行为方式的概念感到不安，有一种技术可以使合理的假设明确化，从而支持了
LSP，他被称为基于契约设计（DBC）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;简单的说就是为一个方法增加一个&lt;strong&gt;前置&lt;/strong&gt;条件和一个&lt;strong&gt;后置&lt;/strong&gt;条件，前置条件必须为真，执行完毕后，该方法要保证后置条件为真。对于
&lt;code&gt;Rectangle&lt;/code&gt; 的 &lt;code&gt;setItsWidth&lt;/code&gt; 的后置条件可以是：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    assert ((this.itsWidth == itsWidth) &amp;amp;&amp;amp; (this.itsHeight == old.itsHeight));&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;后面的介绍有点懵，一段文字中一会儿出现换句话，一会儿出现也就是说。按照我的理解，对于派生类，其前置条件应该更弱，后置条件应该更强。对于
&lt;code&gt;Square&lt;/code&gt; 来说，他的 &lt;code&gt;setItsWidth&lt;/code&gt; 方法违反了基类定下的契约。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过对于 C++ 和 java 来说，并没有此项语言特征。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是我们可以选择在单元测试中指定契约，比如 &lt;code&gt;@BeforeEach&lt;/code&gt; 这些 &lt;code&gt;junit&lt;/code&gt;
注解。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_抽取公共部分的方法代替继承&quot; &gt;抽取公共部分的方法代替继承&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在书中举了一个曾经实际开发的一个例子，不过是用 C++
实现，所以有点晕，不过理解了倒是不难。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;提取公共部分是一个设计工具，最好在代码不是很多的应用。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_其他&quot; &gt;其他&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;完成功能少于其基类的派生类通常是不能替换其基类的，因此就违反了 LSP。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;派生类中存在 &lt;em&gt;退化函数&lt;/em&gt; 并不总是表示违反了
LSP，但是当存在这种情况时，还是值得注意一下的。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;派生类不应该抛出&lt;em&gt;异常&lt;/em&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;术语 &lt;code&gt;IS-A&apos;&apos;
的含义国语宽泛以至于不能作为子类型的定义。子类型的正确定义是
&lt;/code&gt;可替换性的&apos;&apos;，这里的可替换性可以通过显式或者隐式的契约来定义。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_依赖倒置原则dip&quot; &gt;依赖倒置原则（DIP）&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;决不能再让国家的重大利益依赖于那些会动摇人类薄弱意志的众多可能性。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;高层模块不应该依赖于底层模块，二者都应该依赖于抽象。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;抽象不应该依赖于细节，细节应该依赖于抽象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;举个例子来说，假如我们设计一辆汽车，那么我们需要如下步骤：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;先设计轮子&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;根据轮子大小设计底盘&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;接着根据底盘设计车身&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;最后根据车身设计好整个汽车&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如上就出现了一个 &lt;em&gt;依赖&lt;/em&gt;
的关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/3/24/v2-c68248bb5d9b4d64d22600571e996446_hd.jpg&quot; alt=&quot;example&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样的设计看起来没问题，但是可维护性却很低。假设设计完工之后，上司却突然说根据市场需求的变动，要我们把车子的轮子设计都改大一码。这下我们就蛋疼了：因为我们是根据轮子的尺寸设计的底盘，轮子的尺寸一改，底盘的设计就得修改；同样因为我们是根据底盘设计的车身，那么车身也得改，同理汽车设计也得改——整个设计几乎都得改！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们现在换一种思路。我们先设计汽车的大概样子，然后根据汽车的样子来设计车身，根据车身来设计底盘，最后根据底盘来设计轮子。这时候，依赖关系就倒置过来了：轮子依赖底盘，
底盘依赖车身， 车身依赖汽车。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/3/24/v2-e64bf72c5c04412f626b21753aa9e1a1_hd.jpg&quot; alt=&quot;example&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这时候，上司再说要改动轮子的设计，我们就只需要改动轮子的设计，而不需要动底盘，车身，汽车的设计了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这就是依赖倒置原则——把原本的高层建筑依赖底层建筑&lt;code&gt;倒置&apos;&apos;过来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。这样就不会出现前面的&lt;/code&gt;牵一发动全身&apos;&apos;的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实刚开始看到这个模式的时候想到的第一个词就是：&lt;strong&gt;面向接口编程&lt;/strong&gt;。在 java
中的表现可以看成下面的几点：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象产生的。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;接口或抽象类不依赖于实现类。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;实现类依赖接口或抽象类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过找出那些不随具体细节的改变而改变的真理，即抽象。找出这些抽象，倒置这些依赖关系，他就是面向对象的设计的核心。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;spring 中的 依赖注入
正是一种依赖倒置的方法，他依据的依赖倒置的一种实现思路——控制反转（IOC）。通过上层控制下层，&lt;strong&gt;把底层类作为参数传入上层类，实现上层类对下层类的“控制&lt;/strong&gt;”。这正是一个
DIP 的典型例子。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_接口隔离原则isp&quot; &gt;接口隔离原则（ISP）&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不应该强迫客户依赖于他们不用的方法。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果强迫客户程序依赖于那些他们不使用的方法，那么这些客户程序就面临着由于这些未使用方法的改变所带来的变更。这无意中导致了所有客户程序之间的耦合。换句话说，如果一个客户程序依赖于一个含有他不使用的方法的类，但是其他的客户程序却要使用该方法，那么当其他客户要求这个类改变时，就会影响到这个客户程序。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如何理解呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;客户端需要什么接口，就依赖什么接口，不需要的就不要给他。如果依赖了他不需要的接口，那么就代表着他有着未使用的冗余，并且还会因为其他的变更带来其他的危险。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;接口应该分离。这个和单一职责有点相似，也就是一个接口就去满足一个类似的功能即可，不应该为他去负责更多的功能。不过单一职责原则主要是类与方法，而接口隔离原则却是对接口而言的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那么在Java中怎么体现呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;一个类实现多个接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;功能尽可能的简单单一&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个原则相对来说还是比较好理解的，因为在写代码的时候也多次发现一些使用的地方，所以体会较深且理解比较透彻。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这周的其实相比起上周的比较简单，对于 Listov 其实 java
是有很好的支持，天生没有虚函数的概念的存在还是十分友好的。而后面的依赖倒置原则则是归功于使用
spring
后的体会，以至于理解很快，随后医德接口隔离原则则是多次见到一些实现且已经了解过单一职责原则的基础上理解会很快。这周还是很轻松的，不过回顾了一下，面向对象设计的五大原则&lt;strong&gt;SOLID&lt;/strong&gt;（&lt;strong&gt;单一职责、开闭原则、里氏替换、接口隔离&lt;/strong&gt;以及*依赖反转*）中最难贯彻以及实现的就是&lt;strong&gt;开闭原则&lt;/strong&gt;和*单一职责*，还是需要不断的实战来进行学习。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_参考链接&quot; &gt;参考链接&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/people/sevenvidia/activities&quot;&gt;知乎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[[阅读] 敏捷软件开发 —— 敏捷设计（一）]]></description><link>https://zyue.wiki/articles/2019/03/16/1552732721283.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/03/16/1552732721283.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_回顾&quot;&gt;回顾&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_开篇&quot;&gt;开篇&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_什么是敏捷设计&quot;&gt;什么是敏捷设计&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_单一职责原则srp&quot;&gt;单一职责原则（SRP）&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_开放封闭原则ocp&quot;&gt;开放——封闭原则（OCP）&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;敏捷的开发能够让我们开发出来的软件变得易用且优秀。如果敏捷性是以最小增量的方式构建软件，那么我们如何去设计软件呢？《敏捷软件开发》第二部分就是对敏捷设计的学习，与第一部分不同的是，他注重的更多是设计而不是代码的书写与实践，所以相比起来这章是对思想的一种锤炼。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_回顾&quot; &gt;回顾&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;上周真正的体验了一次 XP
的实战，里面学习到了不少。但是总会有一个疑问，因为多次发现许多重构后提出来的私有方法都是一句话代码，都是
&lt;code&gt;return&lt;/code&gt;
直接返回回去了，除了更易读以外似乎没有太多明显的好处了。而在这章开篇就提到了这个问题：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果以最小增量的方式构建软件，难道不是打着重构的旗号，而实际上却导致了去多无用的代码碎片和返工吗？&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以也激起来了我的兴趣。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_开篇&quot; &gt;开篇&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在开始，我们必须知道如何衡量一个软件设计的优劣，因为这样才能够更好的了解如何去评判一个软件。而后则是一写开发的原则，一些经历了时间沉淀下来的经验，能够让我们软件更加优雅的原则。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_什么是敏捷设计&quot; &gt;什么是敏捷设计&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在按照我的理解方式审查了软件开发的生命周期后。我得出一个结论：实际上满足工程设计标准的唯一软件文档，就是代码清单。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;曾经自己以为的设计，应该是有一个设计图，对每一个类详细的标识出一些方法这些。但是书中的设计，则有很大不同：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;软件项目的设计是一个抽象的概念，他和程序的概括形状、结构以及每一个模块、类和方法的详细形状和结构够管，可以使用许多不同的媒介uq描绘他，但是他最终体现为源代码。最后源代码就是设计。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;的确，回想起来，所有的文档都没有源代码具有说服力。文档作为辅助，代码作为主体，相辅相成。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;评判一个软件的优劣，往往通过下面的特征：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;僵化性：进行一个改动的时候，程序的其他的许多地方都有可能出现问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;牢固性：设计中包含了对其他地方有用的部分，但是却无法把这些部分从系统中分离出来，或者需要巨大的风险和代价。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;粘滞性：&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;软件：面临一个改动的时候，开发人员往往会有多种改动的方法。其中一些方法会保持设计，而另外一些方法会破坏设计。而当那些可以保持系统设计的方法比那些波坏设计的方法更加难以应用时，就表明设计具有高的粘滞性。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;环境：当开发环境迟钝、低效时，就会产生环境的粘滞性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;不必要的复杂性：如果设计中包含当前没有用的组成部分，他就含有不必要的复杂性。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;不必要的重复：复制——粘贴 的重复性代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;晦涩性：模块难以理解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们面对一个好的设计，最大的挑战莫过于软件的需求在不断的变化。所以，一个好的团队，必须要找到一种办法，使得设计对于这种变化具有弹性，并且应用一些实践来防止设计腐化。并且最为重要的是，敏捷的团队依靠变化来获取活力，他们几乎不会预先的设计，保持系统设计尽可能的干净、简单。通过许多的单元测试，保持设计的灵活性、易于理解性。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;书中为我们举了一个 copy
程序的例子，展现了&lt;strong&gt;需求的需求的变化带来的设计的退化&lt;/strong&gt;。然而这就是软件开发最重要的事实之一：&lt;strong&gt;需求总在变化&lt;/strong&gt;。不过，再一次强调，对于敏捷开发团队来说，&lt;strong&gt;如果我们软件的设计由于需求变化了而退化，那么我们就不是敏捷的。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;从软件开发的三个方面来发现要做什么。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;遵循敏捷实践去发现问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;应用设计原则去诊断问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;应用适当的设计模式去解决问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;软件开发的三个方面间的相互作用就是设计。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;敏捷设计是一个过程，不是一个事件。&lt;strong&gt;敏捷开发人员不会对一个庞大的预先设计应用那些原则和模式。相反，这些原则和模式被应用在一次次的迭代中，力图使代码以及代码所表达的设计保持干净。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_单一职责原则srp&quot; &gt;单一职责原则（SRP）&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;只有佛自己应当担负起公布玄妙秘密的职责&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;曾经我们在写保龄球实例的时候，最后的重构中，将一个 &lt;code&gt;Game&lt;/code&gt;
给分离到了两个类中，一个负责游戏，一个负责积分，各司其职。这就是单一职责。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果一个类承担的职责过多，那么就会产生耦合，这样的设计往往会造成一个职责的变化可能会影响或削弱其他职责的能力。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里的 &lt;em&gt;职责&lt;/em&gt; 怎么理解好呢？应该将它定义为
``变化的原因&apos;&apos;。如果有多于一个动机去改变一个类，那么这个类就不符合单一职责原则。这个时候我们就要进行分离。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是万事皆有特例，有时候可能会由于一些客观原因造成我们没有办法，我们就要采用其他的方法进行处理，比如抽象。书中举例了一个类实现两个接口的例子，虽然在类中多于一个职责，但是通过分离他的接口，也实现了解耦。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;SRP 最简单，也是最难运用的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_开放封闭原则ocp&quot; &gt;开放——封闭原则（OCP）&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;``对于扩展是开放的&apos;&apos;：这意味着模块的行为是可以扩展的，当应用的需求改变时，我们可以对模块及性能扩展，使其具有满足那些改变的新行为。换句话说，我们可以改变模块的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;``对于更改是封闭的&apos;&apos;：对模块行为进行扩展时，不必改动模块的源代码或者二进制代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个还是比较好理解的，最好的实现就是抽象。例子是C++的有点不太明白。书中有一点我非常同意：为了防止软件背着不必要的复杂性，我们会允许自己被愚弄一次，这意味着我们在最初的代码编写时，假设变化不会发生，当变化发生时，我们就创建抽象来隔离发生的同类变化。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;始终遵循该原则才能从面向对象技术中持续地获得最大的益处，例如：可重用性和可维护性。而更确切的说，它需要程序我们更专注于将抽象技术应用到程序中那些趋于变化的部分上。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这周感觉难度不是很大，20页很快就过了，不过自己没有动手实现。后面应该找事件实践一下。而且这周可能是由于电脑系统的原因，自己静不下来好好的看书。要好好调整自己的状态才行。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[[阅读] 敏捷软件开发 —— 敏捷开发（二）]]></description><link>https://zyue.wiki/articles/2019/03/09/1552119273889.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/03/09/1552119273889.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_回顾&quot;&gt;回顾&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_一次编程实战&quot;&gt;一次编程实战&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_保龄球规则&quot;&gt;保龄球规则&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试驱动开发&quot;&gt;测试驱动开发&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_普通情况&quot;&gt;普通情况&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_简单重构&quot;&gt;简单重构&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_补中情况&quot;&gt;补中情况&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_全中情况&quot;&gt;全中情况&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_重构&quot;&gt;重构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;快一周过去了，再次拿起这本书。周六是美好的日子，没有学校的课程，不用担心作业，没有人约，也不用去考虑太多其他琐事，只需要静下来看会儿书，多么惬意美好。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_回顾&quot; &gt;回顾&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;总得回顾一下上周看了些什么的，然而写读后感的好处莫过于不用再去翻书啦。看看自己上周写的文章，文字不多不少，但是也是体会颇深，也会有一些不同的体会。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;敏捷是有组织的，是团队性的。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;敏捷开发方法：极限编程。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;用户素材 与 任务计划。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试驱动开发，从无到有的构建。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;重构是必要的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;今天开始学习第六章，一次编程实战，&lt;strong&gt;长文预警！&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_一次编程实战&quot; &gt;一次编程实战&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;设计和编程都是人的活动，忘记了这一点，将会失去一切。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一章节，是一次 XP
的编程的实践，章节中采用的是以对话的形式展现，相比于无聊的阐述，以故事的方式却好了很多。汲取朋友的经验，在这之前先去最后一页翻看了
保龄球比赛
规则，了解了规则后再看看确实棒很多！但是发现光看的话不能全身心的投入进去，所以准备实践一番。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这里，我将我所学习到的分为连个部分来总结，不过在那之前，还是需要了解的应该是保龄球规则&lt;sub&gt;~&lt;/sub&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_保龄球规则&quot; &gt;保龄球规则&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;保龄球是一种比赛，比赛者把一个哈密瓜大小的球顺着一条窄窄的球道投向10个木瓶。目的是在每次投球中击倒尽可能多的木瓶。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一局比赛由10轮组成。每轮开始，10个木瓶都是竖立摆放的。比赛者可以投球两次，尝试击倒所有木瓶。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果比赛者在第一次投球中就击倒了所有木瓶，称之为``全中&apos;&apos;，并且本轮结束。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果比赛者在第一次投球中没有击倒所有木瓶，但在第二次投球中成功击倒了所有剩余的木瓶，称之为``补中&apos;&apos;。一轮中第二次投球后，即使还有未被击倒的木瓶，本轮也宣告结束。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;全中轮的记分规则为：10，加上接下来的两次投球击倒的木瓶数，再加上前一轮的得分。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;补中轮的记分规则为：10，加上接下来的一次投球击倒的木瓶数，再加上前一轮的得分。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;其他轮的记分规则为：本轮中两次投球所击倒的木瓶数，加上前一轮的得分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果在第10轮全中，那么比赛者可以再多投球两次，以完成对全中的记分。同样，如果第10轮为补中，那么比赛者可以再多投球一次，以完成对补中的记分。因此，第10轮可以包含3次投球而不是2次。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;保龄球：bowling&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;木瓶：ball&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;局：game&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;轮：frame&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;全中：strike&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;补中：spare&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_测试驱动开发&quot; &gt;测试驱动开发&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;两个人的 XP
编程，一起商讨需求，在确定好了以后，每次首先进行的就是编写测试用例。&lt;strong&gt;主人公分别是
RSK 和 RCM，以下简称 S 和 C。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_普通情况&quot; &gt;普通情况&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于这个实战，我们需要明白 &lt;code&gt;输入&lt;/code&gt; 和 &lt;code&gt;输出&lt;/code&gt; 是什么。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;输入： 一个投掷（throw）的序列&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;输出：每一轮（Frame）的得分&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然而，S 提出对于 &lt;code&gt;Throw&lt;/code&gt; 类并不需要测试：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;关注有实际行为的对象，而不是仅仅存储数据的对象。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;很明显，throw 不过是一个存储数据的对象。所以，将目光移至依赖链上的
&lt;code&gt;Frame&lt;/code&gt; 类，所以，为他编写测试用例。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;测试用例
&lt;code&gt;java      @Test      void testScoreNoThrows(){          Frame frame = new Frame();          frame.add(5);          assertEquals(5, frame.getScore());      }&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;编译通过 ```java public class Frame \{ private int itsScore = 0;
public void add(int pins) \{&lt;/p&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt; }

 public int getScore() {
     return 0;
 }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;} &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Frame {
    private int itsScore = 0;
    public void add(int pins) {
        itsScore += pins;
    }

    public int getScore() {
        return itsScore;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个时候，最最最基本的要求就达到了。但是对于 &lt;code&gt;add&lt;/code&gt;
方法，是十分脆弱的，当参数为 &lt;code&gt;11&lt;/code&gt;
的时候，就会出现预料之外的情况。但是现在其实并不需要太过多的考虑，我们首先做的不过是基础的进球能够实现。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这时 C 提出，现在的代码却有一个问题，我们以 &lt;em&gt;一轮&lt;/em&gt;
为单位，但是保龄球比赛是有十轮的，当进行到后面几轮的时候，调用
&lt;code&gt;getScore&lt;/code&gt; 是没有意义的，因为一个 &lt;code&gt;Frame&lt;/code&gt;
只代表了一轮。而且，当计算总分的时候还需要将所有的 &lt;code&gt;Frame&lt;/code&gt;
给一起计算起来，是十分繁琐的，那么我们希望的是什么呢？ —— &lt;code&gt;Frame&lt;/code&gt;
之间互相知晓，而谁会持有这些不同的 &lt;code&gt;Frame&lt;/code&gt;
对象呢？那应该上升依赖链，多个`Frame`
是属于一场游戏（Game）的，这个时候，输出应该由 &lt;code&gt;Frame&lt;/code&gt; 变成
&lt;code&gt;Game&lt;/code&gt;。&lt;code&gt;Game&lt;/code&gt; 对象构建了 &lt;code&gt;Frame&lt;/code&gt;
并把他们串连起来，所以，我们注意力开始再次变化：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Throws 分数 ——&amp;gt; Frame 轮数 ——&amp;gt; Game 一场游戏&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在我们将注意力放到 &lt;code&gt;Game&lt;/code&gt; 上面，写一个同样的测试用例。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;测试用例&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    void testOneThrows() {
        Game game = new Game();
        game.add(5);
        assertEquals(5, game.score());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;编译通过 ```java public class Game \{ private int itsScore = 0; public
int score()\{ return 0; }&lt;/p&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt; public void add(int pins) {

 }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;} &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Game {
    private int itsScore = 0;
    public int score(){
        return itsScore;
    }

    public void add(int pins) {
        itsScore += pins;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;它具有和 &lt;code&gt;Frame&lt;/code&gt; 具有同样的功能。但我们任然需要解决以及寻找需要多个
&lt;code&gt;Frame&lt;/code&gt; 的证据，因为他是我们使用 &lt;code&gt;Game&lt;/code&gt; 的最初理由。我们逐步完成
&lt;code&gt;Game&lt;/code&gt;，S 提出编写一个有两次投掷但是没有补中的测试。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;测试用例&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    void testTwoThrowsNoMark(){
        Game game = new Game();
        game.add(5);
        game.add(4);
        assertEquals(9, game.score());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;无需修改其他，编译通过&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;无需修改其他，测试通过&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一轮两次的投掷，是没有问题，那么如果两轮四次呢？并且我们需要知道每一轮之后的分数是多少，接下来我们继续测试用例的书写。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;测试用例&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    void testFourThrowsNoMark(){
        Game game = new Game();
        game.add(5);
        game.add(4);
        game.add(7);
        game.add(2);
        assertEquals(18, game.score());
        assertEquals(9, game.scoreForFrame(1));
        assertEquals(18, game.scoreForFrame(2));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;编译通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    public int scoreForFrame(int frame) {
        return 0;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Game {
    /**
     * 投掷序列，最大可能的投掷次数是 21 次 —— C 的回答
     */
    private int[] itsThrows = new int[21];
    /**
     * 当前第几轮投掷
     */
    private int itsCurrentThrow = 0;

    private int itsScore = 0;
    public int score(){
        return itsScore;
    }

    public void add(int pins) {
        // 存放到 投掷序列 中
        itsThrows[itsCurrentThrow++] = pins;
        itsScore += pins;
    }

    public int scoreForFrame(int frame) {
        // 到指定轮数的总分
        int score = 0;
        for (int ball = 0;
             frame &amp;gt; 0 &amp;amp;&amp;amp; (ball &amp;lt; theFrame);
             ball += 2, frame --) {
            score += itsThrows[ball] + itsThrows[ball + 1];
        }
        return score;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在测试用例已经通过了，但是 S 提出他似乎不是那么美观，因为他违反了
单一职责原则（SRP），所以需要重构，不过我们暂且把重构这件事情放放，C
来简化这个循环。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    public int scoreForFrame(int theFrame) {
        // 到指定轮数的总分
        int score = 0;
        int ball = 0;
        for (int currentFrame = 0;
             currentFrame &amp;lt; theFrame;
             currentFrame ++) {
            score += itsThrows[ball++] + itsThrows[ball++];
        }
        return score;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样看上去比上面的好了很多，但是 C
觉得会不会有其他问题呢？是的，他可能存在的的问题就是运算符的优先级问题，对于
&lt;code&gt;score&lt;/code&gt; 的值似乎和我们预想的不一样。我们稍微修改一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    public int scoreForFrame(int theFrame) {
        // 到指定轮数的总分
        int score = 0;
        int ball = 0;
        for (int currentFrame = 0; currentFrame &amp;lt; theFrame; currentFrame ++) {
            int firstThrow = itsThrows[ball++];
            int secondThrow = itsThrows[ball++];
            score += firstThrow + secondThrow;
        }
        return score;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样可能就明白了很多，对于密友补中和全中的情况，我们似乎已经完成了，来进行一次完整的测试——运行整个
&lt;code&gt;TestGame&lt;/code&gt; 类，他的三个已有的测试方法都会是绿色通过。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_简单重构&quot; &gt;简单重构&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C 提出我们现在的测试似乎有点问题&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class TestGame {
    @Test
    void testOneGame(){
        Game game = new Game();
        //... other code
    }

    @Test
    void testTwoThrowsNoMark(){
        Game game = new Game();
        //... other code
    }

    @Test
    void testFourThrowsNoMark(){
        Game game = new Game();
        //... other code
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;是的，似乎都是重复性的 &lt;code&gt;new&lt;/code&gt;
，十分不友好，也&lt;em&gt;不敏捷&lt;/em&gt;，那我们简单的重构下测试吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;class TestGame {
    private Game game;
    // 对于 junit 4 ，你应该使用 @Before 注解
    @BeforeEach
    void setUp() {
        game = new Game();
    }

    @Test
    void testOneGame() {
        game.add(5);
        assertEquals(5, game.score());
    }

    @Test
    void testTwoThrowsNoMark(){
        game.add(5);
        game.add(4);
        assertEquals(9, game.score());
    }

    @Test
    void testFourThrowsNoMark(){
        game.add(5);
        game.add(4);
        game.add(7);
        game.add(2);
        assertEquals(18, game.score());
        assertEquals(9, game.scoreForFrame(1));
        assertEquals(18, game.scoreForFrame(2));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改完后，应该运行整个类，以保证所有的测试方法都是可以通过的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_补中情况&quot; &gt;补中情况&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;简单重构测试完成，那么我们继续来写关于补中的情况，同样，测试驱动：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;测试用例&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    void testSimpleSpare(){
        game.add(3);
        game.add(7);
        game.add(3);
        assertEquals(13, game.scoreForFrame(1));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;无需修改，编译通过&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    public int scoreForFrame(int theFrame) {
        // 到指定轮数的总分
        int score = 0;
        int ball = 0;
        for (int currentFrame = 0;
             currentFrame &amp;lt; theFrame;
             currentFrame ++) {
            int firstThrow = itsThrows[ball++];
            int secondThrow = itsThrows[ball++];
            // 这一轮的分数
            int frameScore = firstThrow + secondThrow;
            // 是否补选
            if (frameScore == 10){
                // 补选的情况需要加上下一轮的第一次分数
                score += frameScore + itsThrows[ball++];
            } else {
                score += frameScore;
            }
        }
        return score;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C
觉得看起来似乎不错，因为测试用例通过了，但是是否就完成了呢？来进行一个测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    void testSimpleFrameAfterSpare() {
        game.add(3);
        game.add(7);
        game.add(3);
        game.add(2);
        assertEquals(13, game.scoreForFrame(1));
        assertEquals(18, game.score());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;结果是红灯，为什么呢？（C
似乎很高兴发现这个错误）看看期望值的得到的值的区别&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Expected :18
Actual   :15&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;结果相差三分，就是第三次 投掷 的分数，因为我们在 &lt;code&gt;scoreForFrame&lt;/code&gt;
方法最后，使得 &lt;code&gt;ball&lt;/code&gt; 加一了，所以跳过了第三次 投掷 的分数，那我们去掉
&lt;code&gt;++&lt;/code&gt; 看看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    if (frameScore == 10){
        // 补选的情况需要加上下一轮的第一次分数
        score += frameScore + itsThrows[ball++];
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试结果&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Expected :18
Actual   :15&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;依旧不对且不变，那么我们试着把 &lt;code&gt;game.score()&lt;/code&gt; 换成
&lt;code&gt;game.scoreForFrame(2)&lt;/code&gt; 试试？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    void testSimpleFrameAfterSpare() {
        game.add(3);
        game.add(7);
        game.add(3);
        game.add(2);
        assertEquals(13, game.scoreForFrame(1));
        assertEquals(18, game.scoreForFrame(2));
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;嘿，他通过了，那么问题应该是出在 &lt;code&gt;score()&lt;/code&gt; 方法上了，我们来看看 &lt;code&gt;score&lt;/code&gt;
方法：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    public int score(){
        return itsScore;
    }

    public void add(int pins) {
        // 存放到 投掷序列 中
        itsThrows[itsCurrentThrow++] = pins;
        itsScore += pins;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C 发现了错误：是的，似乎问题，确实出在这里，因为返回的是 &lt;code&gt;itsScore&lt;/code&gt;
，而这个变量标识的仅仅是木瓶数目的综合，但他却不是得分，我们应该让
&lt;code&gt;score&lt;/code&gt; 做的是用当前轮作为参数去调用 &lt;code&gt;scoreForFrame()&lt;/code&gt;
方法。我们不知道当前哪轮，所以我们需要先写一个能够让我们知道当前第几轮的方法，完善下前面已经通过的所有测试用例：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;完善测试用例&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void testOneGame() {
    game.add(5);
    assertEquals(5, game.score());
    // 当前第一轮
    assertEquals(1, game.getCurrentFrame());
}

@Test
void testTwoThrowsNoMark(){
    game.add(5);
    game.add(4);
    assertEquals(9, game.score());
    // 当前第一轮
    assertEquals(1, game.getCurrentFrame());
}

@Test
void testFourThrowsNoMark(){
    game.add(5);
    game.add(4);
    game.add(7);
    game.add(2);
    assertEquals(18, game.score());
    assertEquals(9, game.scoreForFrame(1));
    assertEquals(18, game.scoreForFrame(2));
    // 当前第二轮
    assertEquals(2, game.getCurrentFrame());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;编译通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-hava&quot; data-lang=&quot;hava&quot;&gt;public int getCurrentFrame() {
    return 0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    /**
     * 当前第几轮
     */
    private int itsCurrentFrame = 0;
    /**
     * 是否是第一次投掷
     */
    private boolean firstThrow = true;

    public int getCurrentFrame() {
        return itsCurrentFrame;
    }

    public void add(int pins) {
        // 存放到 投掷序列 中
        itsThrows[itsCurrentThrow++] = pins;
        itsScore += pins;
        // 计算当前轮
        if (firstThrow){
            firstThrow = false;
            itsCurrentFrame++;
        } else {
            firstThrow = true;
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们为他添加了两个成员变量用来让我们更好的查找当前轮，然后在 &lt;code&gt;add&lt;/code&gt;
里面设置值，这时运行修改的测试用例都是通过了的。不过 &lt;code&gt;add&lt;/code&gt;
函数的功能似乎有点多了，我们来把他修改得更易读一些。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    public void add(int pins) {
        // 存放到 投掷序列 中
        itsThrows[itsCurrentThrow++] = pins;
        itsScore += pins;
        adjustCurrentFrame();
    }

    /**
     *  计算当前轮
     */
    private void adjustCurrentFrame() {
        if (firstThrow){
            firstThrow = false;
            itsCurrentFrame++;
        } else {
            firstThrow = true;
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;S 觉得似乎好多了，但是 当前轮 &lt;code&gt;itsCurrentFrame&lt;/code&gt; 初始化为 0
，是不是不太好？因为他不应该初始化为 0 ，应该为
1，游戏是从第一轮开始而不是第 0
轮。并且当前轮应该是正在进行的投掷的所在轮，应该在最后一次投掷完毕，才对他进行递增，而不是第一次投掷就递增，所以修改一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;修改测试用例&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void testTwoThrowsNoMark(){
    game.add(5);
    game.add(4);
    assertEquals(9, game.score());
    // 第一轮已经结束，到了第二轮了
    assertEquals(2, game.getCurrentFrame());
}

@Test
void testFourThrowsNoMark(){
    game.add(5);
    game.add(4);
    game.add(7);
    game.add(2);
    assertEquals(18, game.score());
    assertEquals(9, game.scoreForFrame(1));
    assertEquals(18, game.scoreForFrame(2));
    // 第二轮已经结束，到了第三轮了
    assertEquals(3, game.getCurrentFrame());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;无需修改，编译通过&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private int itsCurrentFrame = 1;

/**
 *  计算当前轮
 */
private void adjustCurrentFrame() {
    if (firstThrow){
        firstThrow = false;
    } else {
        firstThrow = true;
        itsCurrentFrame++;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C 觉得不错，修改了后，更容易让人理解了。现在我们来为 &lt;code&gt;getCurrentFrame&lt;/code&gt;
方法编写两个具有补中情况的测试用例。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    void testSimpleSpare(){
        game.add(3);
        game.add(7);
        game.add(3);
        assertEquals(13, game.scoreForFrame(1));
        assertEquals(2, game.getCurrentFrame());
    }

    @Test
    void testSimpleFrameAfterSpare() {
        game.add(3);
        game.add(7);
        game.add(3);
        game.add(2);
        assertEquals(13, game.scoreForFrame(1));
        assertEquals(18, game.scoreForFrame(2));
        assertEquals(3, game.getCurrentFrame());
//        assertEquals(18, game.score());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过了，现在我们回到原来的 &lt;code&gt;score&lt;/code&gt; 的问题上来，现在已经有了
当前轮，那么我们可以大胆的调用 &lt;code&gt;scoreForFrame&lt;/code&gt; 方法了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;测试用例&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void testSimpleFrameAfterSpare() {
    game.add(3);
    game.add(7);
    game.add(3);
    game.add(2);
    assertEquals(13, game.scoreForFrame(1));
    assertEquals(18, game.scoreForFrame(2));
    assertEquals(3, game.getCurrentFrame());
    assertEquals(18, game.score());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;无需修改，编译通过&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public int score(){
    return scoreForFrame(getCurrentFrame() - 1);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;是的，这个方法测试通过了，但是其他的方法呢？在运行整个
测试类，&lt;code&gt;testOneGame&lt;/code&gt; 似乎有点问题：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Expected :5
Actual   :0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void testOneGame() {
    game.add(5);
    assertEquals(5, game.score());
    // 当前第一轮
    assertEquals(1, game.getCurrentFrame());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;是代码的问题吗？不，你会发现这个测试用例根本不符合保龄球的规则，所以这个测试用例是不合法的。所以大可以将他直接去掉。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;补中的情况就完成了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_全中情况&quot; &gt;全中情况&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们依旧来编写一个全中的测试用例&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;测试用例&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void test(){
    game.add(10);
    game.add(3);
    game.add(6);
    assertEquals(19, game.scoreForFrame(1));
    assertEquals(28, game.score());
    assertEquals(3, game.getCurrentFrame());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;无需修改，编译通过&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试通过&lt;/p&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 投掷
 *
 * @param pins 得分
 */
public void add(int pins) {
    // 存放到 投掷序列 中
    itsThrows[itsCurrentThrow++] = pins;
    adjustCurrentFrame(pins);
}

/**
 *  计算当前轮
 */
private void adjustCurrentFrame(int pins) {
    if (firstThrow){
        if (pins == 10){
            // 全中
            itsCurrentFrame++;
        } else {
            firstThrow = false;
        }
    } else {
        firstThrow = true;
        itsCurrentFrame++;
    }
}

/**
 * 指定轮的总分
 *
 * @param theFrame 轮
 * @return 总分
 */
public int scoreForFrame(int theFrame) {
    // 到指定轮数的总分
    int score = 0;
    int ball = 0;
    for (int currentFrame = 0; currentFrame &amp;lt; theFrame; currentFrame ++) {
        int firstThrow = itsThrows[ball++];
        if (firstThrow == 10){
            // 全中
            score += 10 + itsThrows[ball] + itsThrows[ball + 1];
        } else {
            int secondThrow = itsThrows[ball++];
            // 这一轮的分数
            int frameScore = firstThrow + secondThrow;
            // 是否补选
            if (frameScore == 10){
                // 补选的情况需要加上下一轮的第一次分数
                score += frameScore + itsThrows[ball];
            } else {
                score += frameScore;
            }
        }
    }
    return score;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过啦！全中的情况似乎完成了？C 提出我们来一次完美的比赛评分看看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    void testPerfectGame() {
        for (int i = 0; i &amp;lt; 12; i++) {
            game.add(10);
        }
        assertEquals(300, game.score());
        assertEquals(10, game.getCurrentFrame());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是似乎结果与我们相信的不同&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Expected :300
Actual   :330&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;S 一眼就看出来了，是的，当前轮一直被累加到了 12，所以我们应该将他限定在
10，修改一下方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    private void adjustCurrentFrame(int pins) {
        if (firstThrow){
            if (pins == 10){
                // 全中
                itsCurrentFrame++;
            } else {
                firstThrow = false;
            }
        } else {
            firstThrow = true;
            itsCurrentFrame++;
        }
        itsCurrentFrame = Math.min(10, itsCurrentFrame);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是。。。C 很暴躁的发现结果似乎不对，因为代码似乎是没有问题的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Expected :300
Actual   :270&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;S 细心的发现， &lt;code&gt;score&lt;/code&gt;
需要减一，所以他只给出了第九轮的得分，而不是第十轮，所以因该是十一&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private void adjustCurrentFrame(int pins) {
    if (firstThrow){
        if (pins == 10){
            // 全中
            itsCurrentFrame++;
        } else {
            firstThrow = false;
        }
    } else {
        firstThrow = true;
        itsCurrentFrame++;
    }
    itsCurrentFrame = Math.min(11, itsCurrentFrame);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是运行后，发现当前轮似乎不对。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Expected :10
Actual   :11&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C 和 S
讨论了一下，似乎觉得这也应该是正确的结果及时有点不舒服（What？）所以应该修改的是测试用例：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    void testPerfectGame() {
        for (int i = 0; i &amp;lt; 12; i++) {
            game.add(10);
        }
        assertEquals(300, game.score());
        assertEquals(11, game.getCurrentFrame());
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;S 又想到了一种情况，如果最后数组全满了呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void testEndOfArray() {
    for (int i = 0; i &amp;lt; 9; i++) {
        game.add(0);
        game.add(0);
    }
    game.add(2);
    game.add(8);
    game.add(10);
    assertEquals(20, game.score());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;很好，S 很开心因为他也通过了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;再来测试下如果记分板的所有数据输入到程序中呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void testSampleGame() {
    game.add(1);
    game.add(4);
    game.add(4);
    game.add(5);
    game.add(6);
    game.add(4);
    game.add(5);
    game.add(5);
    game.add(10);
    game.add(0);
    game.add(1);
    game.add(7);
    game.add(3);
    game.add(6);
    game.add(4);
    game.add(10);
    game.add(2);
    game.add(8);
    game.add(6);
    assertEquals(133, game.score());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过啦，C 提议再来测试一下边界情况&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void testHeartBreak(){
    for (int i = 0; i &amp;lt; 11; i++) {
        game.add(10);
    }
    game.add(9);
    assertEquals(299, game.score());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过啦，C 再次提议第十轮补中的情况如何：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Test
void testTenthFrameSpare() {
    for (int i = 0; i &amp;lt; 9; i++) {
        game.add(10);
    }
    game.add(9);
    game.add(1);
    game.add(1);
    assertEquals(270, game.score());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_重构&quot; &gt;重构&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C 和 S
都想不出其他的测试用例了，他们觉得应该重构这个这个程序。在这之前，应该测试一下整个
&lt;code&gt;TestGame&lt;/code&gt; 测试类的所有方法，保证他们都能够通过。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请注意，重构过程中一定保证所有测试用例都是通过的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/3/9/QQ%E6%88%AA%E5%9B%BE20190309224101.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下面来看看第一个需要重构的 &lt;code&gt;scoreForFrame&lt;/code&gt; 方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public int scoreForFrame(int theFrame) {
    // 到指定轮数的总分
    int score = 0;
    int ball = 0;
    for (int currentFrame = 0; currentFrame &amp;lt; theFrame; currentFrame ++) {
        int firstThrow = itsThrows[ball++];
        if (firstThrow == 10){
            // 全中
            score += 10 + itsThrows[ball] + itsThrows[ball + 1];
        } else {
            int secondThrow = itsThrows[ball++];
            // 这一轮的分数
            int frameScore = firstThrow + secondThrow;
            // 是否补选
            if (frameScore == 10){
                // 补选的情况需要加上下一轮的第一次分数
                score += frameScore + itsThrows[ball];
            } else {
                score += frameScore;
            }
        }
    }
    return score;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;emmmmm，，，的确很乱。C 提议可以把 &lt;code&gt;else&lt;/code&gt; 下的一堆都给抽离为一个方法，S
提议把局部变量变成成员变量，S 抢过键盘，进行重构。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    /**
     * 是否是第一次投掷
     */
    private boolean firstThrowInFrame = true;
    /**
     * 当前序列
     */
    private int ball;
    /**
     * 第一次投掷
     */
    private int firstThrow;
    /**
     * 第二次投掷
     */
    private int secondThrow;
    /**
     *  计算当前轮
     */
    private void adjustCurrentFrame(int pins) {
        if (firstThrowInFrame){
            if (pins == 10){
                // 全中
                itsCurrentFrame++;
            } else {
                firstThrowInFrame = false;
            }
        } else {
            firstThrowInFrame = true;
            itsCurrentFrame++;
        }
        itsCurrentFrame = Math.min(11, itsCurrentFrame);
    }

    /**
     * 指定轮的总分
     *
     * @param theFrame 轮
     * @return 总分
     */
    public int scoreForFrame(int theFrame) {
        // 到指定轮数的总分
        int score = 0;
        ball = 0;
        for (int currentFrame = 0; currentFrame &amp;lt; theFrame; currentFrame ++) {
            firstThrow = itsThrows[ball++];
            if (firstThrow == 10){
                // 全中
                score += 10 + itsThrows[ball] + itsThrows[ball + 1];
            } else {
                score += handleSecondThrow();
            }
        }
        return score;
    }

    /**
     * 第二次投掷的结果
     *
     * @return 分数
     */
    private int handleSecondThrow(){
        int score = 0;
        secondThrow = itsThrows[ball++];
        // 这一轮的分数
        int frameScore = firstThrow + secondThrow;
        // 是否补选
        if (frameScore == 10){
            // 补选的情况需要加上下一轮的第一次分数
            score += frameScore + itsThrows[ball];
        } else {
            score += frameScore;
        }
        return score;
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这似乎好多了，&lt;strong&gt;修改完成后，一定要记得运行所有的测试用例保证通过。&lt;/strong&gt;但是对于
&lt;code&gt;scoreForFrame&lt;/code&gt; 似乎不是那么易理解，C 提出的伪代码&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;if strike
    score += 10 + nextTwoBalls();
else if spare
    score += 10 + nextBall();
else
    score += twoBallInFrame();&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;S 看到很高兴，因为这不就是保龄球的积分规则吗？我们改改看，并且去掉
&lt;code&gt;firstThrow&lt;/code&gt; 和 &lt;code&gt;secondThrow&lt;/code&gt; 两个成员变量，并用恰当的函数来替代他。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 指定轮的总分
 *
 * @param theFrame 轮
 * @return 总分
 */
public int scoreForFrame(int theFrame) {
    // 到指定轮数的总分
    int score = 0;
    ball = 0;
    for (int currentFrame = 0; currentFrame &amp;lt; theFrame; currentFrame ++) {
        if (strike()){
            ball ++;
            // 全中
            score += 10 + nextTwoBalls();
        } else {
            score += handleSecondThrow();
        }
    }
    return score;
}

/**
 * 第二次投掷的结果
 *
 * @return 分数
 */
private int handleSecondThrow(){
    int score = 0;
    // 是否补中
    if (spare()){
        // 补中的情况需要加上下一轮的第一次分数
        ball += 2;
        score += 10 + nextBall();
    } else {
        score += twoBallsInFrame();
        ball += 2;
    }
    return score;
}

/**
 * 2. 添加方法：是否全中
 *
 * @return 结果
 */
private boolean strike() {
    return itsThrows[ball] == 10;
}

/**
 * 3. 添加方法：下面两次投掷的结果之和
 *
 * @return 和
 */
private int nextTwoBalls(){
    return itsThrows[ball] + itsThrows[ball + 1];
}

/**
 * 4. 添加方法，是否补中
 *
 * @return 补中
 */
private boolean spare() {
    return (itsThrows[ball] + itsThrows[ball + 1]) == 10;
}

/**
 * 5. 添加方法：下一次投掷分数
 *
 * @return 分数
 */
private int nextBall() {
    return itsThrows[ball];
}

/**
 * 6. 一轮中的两个投掷结果之和
 *
 * @return 和
 */
private int twoBallsInFrame() {
    return itsThrows[ball] + itsThrows[ball + 1];
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行测试用例全部通过，并且不会再有 &lt;code&gt;firstThrow&lt;/code&gt; 和 &lt;code&gt;secondThrow&lt;/code&gt; 和
&lt;code&gt;frameScore&lt;/code&gt; 三个成员变量了。接下来我们看看，C 提出唯一耦合的就是 &lt;code&gt;ball&lt;/code&gt;
这个变量了，现在都是独立处理三种情况的，那我们合并处理看看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 指定轮的总分
 *
 * @param theFrame 轮
 * @return 总分
 */
public int scoreForFrame(int theFrame) {
    // 到指定轮数的总分
    int score = 0;
    ball = 0;
    for (int currentFrame = 0; currentFrame &amp;lt; theFrame; currentFrame ++) {
        if (strike()){
            // 全中
            score += 10 + nextTwoBalls();
            ball ++;
        } else if (spare()){
            // 补中
            score += 10 + nextBallForSpare();
            ball += 2;
        } else {
            score += handleSecondThrow();
        }
    }
    return score;
}
/**
 * 一轮中的两个投掷结果之和
 *
 * @return 和
 */
private int twoBallsInFrame() {
    return itsThrows[ball] + itsThrows[ball + 1];
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就很帮棒了，一眼就看出来规则。不过 C 和 S
又吵起来了。有一句话非常好：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自上而下，测试优先设计，坦白地说，我不知道这是不是一个好的规则，只是这次，他帮了我们。所以下次，我会再次尝试看看他会发生什么。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他们最后商定将他们分成几个对象，一些小规模的更改。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Game {
    /**
     * 当前第几轮
     */
    private int itsCurrentFrame = 1;
    /**
     * 分数
     */
    private int itsScore = 0;
    /**
     * 得分运动员
     */
    private Scorer itsScorer = new Scorer();
    /**
     * 是否是第一次投掷
     */
    private boolean firstThrowInFrame = true;
    /**
     * 计算总分
     *
     * @return 总分
     */
    public int score(){
        return itsScorer.scoreForFrame(getCurrentFrame() - 1);
    }

    /**
     * 投掷
     *
     * @param pins 得分
     */
    public void add(int pins) {
        // 存放到 投掷序列 中
        itsScorer.addThrow(pins);
        itsScore += pins;
        adjustCurrentFrame(pins);
    }

    /**
     *  计算当前轮
     */
    private void adjustCurrentFrame(int pins) {
        if (firstThrowInFrame){
            if (pins == 10){
                // 全中
                itsCurrentFrame++;
            } else {
                firstThrowInFrame = false;
            }
        } else {
            firstThrowInFrame = true;
            itsCurrentFrame++;
        }
        itsCurrentFrame = Math.min(11, itsCurrentFrame);
    }



    /**
     * 当前第几轮
     *
     * @return 当前轮
     */
    public int getCurrentFrame() {
        return itsCurrentFrame;
    }

    public int scoreForFrame(int theFrame) {
        return itsScorer.scoreForFrame(theFrame);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Scorer {
    /**
     * 当前序列
     */
    private int ball;
    /**
     * 投掷序列，最大可能的投掷次数是 21 次
     */
    private int[] itsThrows = new int[21];
    /**
     * 当前第几轮投掷
     */
    private int itsCurrentThrow = 0;

    public void addThrow(int pins) {
        itsThrows[itsCurrentThrow++] = pins;
    }
    /**
     * 指定轮的总分
     *
     * @param theFrame 轮
     * @return 总分
     */
    public int scoreForFrame(int theFrame) {
        // 到指定轮数的总分
        int score = 0;
        ball = 0;
        for (int currentFrame = 0; currentFrame &amp;lt; theFrame; currentFrame ++) {
            if (strike()){
                // 全中
                score += 10 + nextTwoBalls();
                ball ++;
            } else if (spare()){
                // 补中
                score += 10 + nextBallForSpare();
                ball += 2;
            } else {
                score += handleSecondThrow();
            }
        }
        return score;
    }

    /**
     * 第二次投掷的结果
     *
     * @return 分数
     */
    private int handleSecondThrow(){
        int score = 0;
        // 是否补中
        if (spare()){
            // 补中的情况需要加上下一轮的第一次分数
            ball += 2;
            score += 10 + nextBallForSpare();
        } else {
            score += twoBallsInFrame();
            ball += 2;
        }
        return score;
    }

    /**
     * 2. 添加方法：是否全中
     *
     * @return 结果
     */
    private boolean strike() {
        return itsThrows[ball] == 10;
    }

    /**
     * 3. 添加方法：下面两次投掷的结果之和
     *
     * @return 和
     */
    private int nextTwoBalls(){
        return itsThrows[ball + 1] + itsThrows[ball + 2];
    }

    /**
     * 4. 添加方法，是否补中
     *
     * @return 补中
     */
    private boolean spare() {
        return (itsThrows[ball] + itsThrows[ball + 1]) == 10;
    }

    /**
     * 5. 添加方法：下一次投掷分数
     *
     * @return 分数
     */
    private int nextBallForSpare() {
        return itsThrows[ball + 2];
    }

    /**
     * 6. 一轮中的两个投掷结果之和
     *
     * @return 和
     */
    private int twoBallsInFrame() {
        return itsThrows[ball] + itsThrows[ball + 1];
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;S 很高兴，因为现在 &lt;code&gt;Game&lt;/code&gt; 只知晓 &lt;code&gt;Frame&lt;/code&gt;，&lt;code&gt;Scorer&lt;/code&gt;
只计算得分，完全符合单一职责原则。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C 发现多余的变量 &lt;code&gt;itsScore&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public void add(int pins) {
    itsScorer.addThrow(pins);
    adjustCurrentFrame(pins);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在应该来看看 &lt;code&gt;adjustCurrentFrame&lt;/code&gt; 啦&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 *  计算当前轮
 */
private void adjustCurrentFrame(int pins) {
    if (firstThrowInFrame){
        if (pins == 10){
            // 全中
            itsCurrentFrame++;
        } else {
            firstThrowInFrame = false;
        }
    } else {
        firstThrowInFrame = true;
        itsCurrentFrame++;
    }
    itsCurrentFrame = Math.min(11, itsCurrentFrame);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C 非常不喜欢那个 十一 ，但是却没有办法。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private void adjustCurrentFrame(int pins) {
    if (firstThrowInFrame){
        if (pins == 10){
            advanceFrame();
        } else {
            firstThrowInFrame = false;
        }
    } else {
        firstThrowInFrame = true;
        advanceFrame();
    }
}

private void advanceFrame() {
    itsCurrentFrame = Math.min(11, itsCurrentFrame + 1);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来我们把关于全中的情况判断取出来作为一个独立的方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private void adjustCurrentFrame(int pins) {
    if (firstThrowInFrame){
        if(!adjustFrameForStrike(pins)){
            firstThrowInFrame = false;
        }
    } else {
        firstThrowInFrame = true;
        advanceFrame();
    }
}

private boolean adjustFrameForStrike(int pins) {
    if (pins == 10){
        advanceFrame();
        return true;
    }
    return false;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来，去掉 &lt;code&gt;getCurrentFrame&lt;/code&gt; 方法，也去掉调用的地方，就可以把 11 改成
10 啦。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * 计算总分
 *
 * @return 总分
 */
public int score(){
return itsScorer.scoreForFrame(itsCurrentFrame);
}

private void advanceFrame() {
    itsCurrentFrame = Math.min(10, itsCurrentFrame + 1);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;adjustCurrentFrame&lt;/code&gt; 似乎有点表意不明&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private void adjustCurrentFrame(int pins) {
    if (!firstThrowInFrame || pins == 10){
        advanceFrame();
    } else {
        firstThrowInFrame = false;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;让他表意更加明确&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;private void adjustCurrentFrame(int pins) {
    if (lastBallInFrame(pins)){
        advanceFrame();
    } else {
        firstThrowInFrame = false;
    }
}

private boolean lastBallInFrame(int pins) {
    return strike(pins) || !firstThrowInFrame;
}

private boolean strike(int pins) {
    return firstThrowInFrame &amp;amp;&amp;amp; pins == 10;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C 和 S 很高兴，因为终于完成了。我也很高兴，因为终于看懂了 T
T，所以实践真的很重要。完整的测试（添加显示的名称）
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/file/2019/3/9/QQ%E6%88%AA%E5%9B%BE20190309224835.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;理论结合实践，是学习的不变真理。上周学习的时候不过是一些理论的东西，这周参与实践了一番，不得不说的是，敏捷开发真的挺累，但是效率与结果都让人满意，不过这不就是他诱人的地方吗？其中比较出名的
XP
编程，对于结对的思想也有了概念，但是有时候在想，倘若两个人的思想、基础都存在太大差异，对于弱势方自然收益匪浅，但是对于强势方就是有点累了。不过相比起一个团队的和谐程度，以及进步水平都是具有十分快速的提高的。就像敏捷开发里面的思想：&lt;strong&gt;你大可以选择你完全没有接触过和你不懂的专业领域，因为你相信在那里会有人和你一起结对，你可以在这个团队中快速的进步，这就是敏捷开发，一个自组织团队应该有的。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这次实践中，从一开始两个人的互相思考，再到各自的思想结合，C
总能发现一些小细节，S
总能提出一些很好的解决问题的办法，他们两个能够想到覆盖后面可能出现的情况，从开始设计，到编程，两个人都进行了互补。而我也从这个过程彻底明白了&lt;strong&gt;测试驱动开发&lt;/strong&gt;，在我总结下来三个非常重要的步骤&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;编写测试用例&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;编译通过&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试通过&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;并且，他们对用户素材非常清楚，在最后的重构中，一直不断往用户素材靠拢，例如，他们一直记得保龄球的三种情况，随后重构出来的几个方法的语句是完全和保龄球的规则是对应的。并且每一个语句都能够见名知意，即使有些变量封装成了方法，但是也是一眼就知道什么意思了。他们两总能在彼此看不到的地方提出新的建议，结对莫过于此，忽然感觉，自己一个人学了那么久，变得了自私了很多，这是可悲的，有时候一个人久了，就不太想和别人一起了，以前学习的时候找过别人，但都没有人陪我走下去，最后剩下的也只有自己。这可能是我非常喜欢
XP
思想结对编程的原因之一吧，因为自己十分羡慕这么一份团队。所以也慢慢反省这两年来的大学生活，在余下的大学生活里面也会慢慢改变自己。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;后面的章节，学习到了很多重构的细节，但是重构真的是一门学问，始终不太清楚重构到一种什么程度才算完美，可能就是不断地不断地让代码更加易读更加友好，这或许就是重构的意义。重构最后思考来或许可以从以下几点入手：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;代码易读性，能够见名知意。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;尽量消除成员变量，因为永远不知道多少个地方进行修改了，能够选择函数最好。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;一个函数最好负责已经事情，不要让他负责过多的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;多对条件语句的条件进行封装，能够增加代码的易读性。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;尽量遵循一些必要的原则，例如 开放封闭原则、单一职责原则等。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;对于耦合的变量，尽量消除。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;每一次重构，务必要保证所有已有的测试用例通过，才算成功一半。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;有意义的重构，才算成功的另一半。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;而作者在结论最后一章提到了几个很重要的点。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;面向对象不是必须的，某些时候，敏捷开发也提倡简单。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;图示有时是不需要的，在创建了他们而没有验证他们的代码就打算遵循他们时，图示就是无意的。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;有时，最好的设计是在你首先编写测试，一小步一小步前进时逐渐形成的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下一章开始敏捷设计，期待到来。晚安各位～&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[[阅读] 敏捷软件开发 —— 敏捷开发（一）]]></description><link>https://zyue.wiki/articles/2019/03/01/1551401439594.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/03/01/1551401439594.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_开篇&quot;&gt;开篇&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_开始之前&quot;&gt;开始之前&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_第一章_敏捷开发&quot;&gt;第一章 敏捷开发&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_敏捷软件开发宣言&quot;&gt;敏捷软件开发宣言&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_敏捷软件开发原则&quot;&gt;敏捷软件开发原则&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_回看&quot;&gt;回看&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_第二章_敏捷软件开发原则模式与实践&quot;&gt;第二章 敏捷软件开发、原则、模式与实践&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_第三章_计划&quot;&gt;第三章 计划&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_初始探索&quot;&gt;初始探索&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_发布计划&quot;&gt;发布计划&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_迭代计划&quot;&gt;迭代计划&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_任务计划&quot;&gt;任务计划&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_迭代的中点&quot;&gt;迭代的中点&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_迭代&quot;&gt;迭代&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_结论&quot;&gt;结论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_第四章_测试&quot;&gt;第四章 测试&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_第五章_重_构&quot;&gt;第五章 重 构&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_疑问&quot;&gt;疑问&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_结论_2&quot;&gt;结论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;很久没有好好的静下来看一本经典的书籍了，一些经典的书籍即使已经有些年头了，但是却依旧能够带给后人不少启示，寒假的时候选择的是
《spring 实战》，开学了，在刘欣老师的推荐下，选择了《敏捷软件开发
、原则、模式与实践》，也决定要写下的自己的观后感。其实反观这大学的几年，自己底子过于虚浮，不重视基础，总是过于追求于新的流行技术，然后对底层却一无所知，自己需要更多的书籍来为自己以后的道路奠下基础。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_开篇&quot; &gt;开篇&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对用户来说，通过直观、简单的界面呈现出恰当特性的程序就是美的。对软件设计者来说，被简单、直观地分割，并且有最小内部耦合的内部结构就是美的。对开发人员来说和管理者来说，每周都会取得重大进展，并且生产出无缺陷的具有活力的团队就是美的。
——中文版序：软件之美&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;从开篇本书就很明确的说明了一点&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我要告诉你，使本书的内容跟得上最新的技术知识是很困难的。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在挨踢行业，技术的更替是非常快的，至今为止摩尔定律依旧适用。在如此快的情况下，需要一本书不断的对技术进行跟进和更新很明显是十分困难的，本书更加注重的是思想方面的学习以及软件开发的原则、模式等，并不是对一项最新的技术进行学习与使用，这与一些实用性的工具书有非常不同的性质的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_开始之前&quot; &gt;开始之前&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在读这本书之前，我有过一次为学校开发项目的经历，也是体验不太好的一次经历，我就以此次经历为背景来阅读此书。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2018 年 7
月，我们学校接到一个项目，在我们老师的带领下我们参与了这个项目。我作为学生这边的负责人之一，由我对项目做了技术上的选型，然后自己尝试，搭建了以后书写了文档，给予了我们组内成员，他们根据我的文档进行环境上的搭建。由于时间紧迫，我们自己以及老师并没有书写任何关于需求的分析文档，仅有的不过一张流程图而已，并且由于在学校的客观原因，我们之间的交流基本使用
QQ
语言进行交流，项目从七月中旬正式开始，每两三天语音一次，然而是和老师进行语音以了解需求，到八月中旬结束，后面又继续了长达半年的修修补补与维护，整个过程变得十分缓慢以及冗长，到了今年二月，才正式结束。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;以此为背景，来写对于敏捷软件开发的读后感。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_第一章_敏捷开发&quot; &gt;第一章 敏捷开发&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;人与人之间的交互是复杂的，并且其效果从来都是难以预测的，但却是工作中最为重要的方面。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一章从一开始就&lt;strong&gt;强调了人是影响软件开发过程的最大的一项重要因素&lt;/strong&gt;。一个项目的成功，是需要一个具有&lt;strong&gt;合作精神、自组织&lt;/strong&gt;的团队。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在没有任何项目经验之前，去完成一个新的项目，并且没有太多人进行带头的情况下，想要制作出一个优秀的软件作品是十分困难的，当完成后，就不会再想去看自己写出来的如此劣质的产品，正如书中所说，&lt;strong&gt;一旦经历了这样的惨败，就会害怕重蹈覆辙&lt;/strong&gt;。在我们学校项目构建过程中，老师由于工作原因十分有限，只能给予我们数据库的设计的一些帮助，然后我们自己去开发、研究以及设计，最后回头看，整个代码犹如一坨翔一般，这也是造成我们后期维护的过程十分痛苦的原因之一，最可怕的是他不仅降低了我们团队的开发效率，还完全压灭了我们团队的开发的积极性。这个结果让我们十分不满意，但是也不得不接受，以至于我们在后面其它项目的设计中十分小心翼翼和提醒吊胆。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_敏捷软件开发宣言&quot; &gt;敏捷软件开发宣言&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;个体和交互 胜过 过程和工具&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以工作的软件 胜过 面面俱到的文档&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;客户合作 胜过 合同谈判&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;响应变化 胜过 遵循计划&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_敏捷软件开发原则&quot; &gt;敏捷软件开发原则&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;尽早的、持续的交付有价值的软件&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;欢迎改变需求，敏捷过程利用变化来为客户创造竞争优势&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;经常性地交付可以工作的软件&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;开发期间，业务人员和开发人员必须天天都在一起工作&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;围绕被激励起来的个人来构建项目，给他们提供所需要的环境和支持，并且信任他们能够完成工作&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;面对面交谈&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;工作的软件是首要的进度度量标准&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;可持续的开发速度、责任人、开发者和活用应该能够保持一个长期的、恒定的开发速度&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;不断关注优秀的集合和好的设计增强敏捷能力&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;简单——使未完成的工作最大化的艺术——是根本的&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;最好的架构、需求和设计出自于自组织的团队&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;每隔一定时间，团队会在如何才能更有效地工作方面进行反省，然后相应地对自己的行为进行调整。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_回看&quot; &gt;回看&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;以我前面开始之前的背景为例子，进行一一验证，可以发现自己上一次失败的经历完全背离了敏捷开发的宣言和原则，我对自己曾经的项目进行反思&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;企图使用任何最新的工具，能够带给我们最好的开发效率。后来发现，最新的不一定是最好的，自己最大的要求就是必须使用
IDEA 2018.02
进行开发，但是对于我们项目而言，此要求纯粹是强迫症作祟，后来也证明，2016
也是一样可以完整开发的。没错，2018 的确在某些方面也带给了我相应的烦恼。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;企图用一个完整的文档去进行软件的交接，我把文档看得十分重要，见我博客的分类https://echocow.cn/category/%E5%AD%A6%E6%A0%A1[学校]，还有很多没有发出来，为了写文档，花费了不少时间，有时候一个下午就在完善一个文档。因而造成的结果就是，大家都在等我的文档出来后，再进行部署和搭建，并且其中有问题只能通过
QQ
进行交流，到时进度的拖延，这是一个严重的问题。后来我意识到了问题所在，但是却还是放不下写文档。应该明白的是
&lt;strong&gt;直到迫切需要并且重大意义时，才来编制文档&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;企图通过老师就了解整个需求。可以说让我们这个项目``失败&apos;&apos;的最大原因就是因为客户合作。我们从头到尾，真正见过客户只有一次，其他的所有东西都是由老师进行转达，老师进行测试。后面许多地方完全和客户想的不一样，造成了做许多重复功以及非常垃圾的设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;企图期望客户不去修改需求。按照我们的计划，能够把 流程图
上面的流程做完即可，但是却忘记，客户的需求是在不断交付中进行修改的，因为每次检验与交付时间过长，客户的计划改变，造成我们这边手忙脚乱，完全没有办法保持一个良好的进度，而是不断的去修改以前乃至很久以前的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;团队过于松散。我们的团队是由几个学生组织而来，虽然我是负责人，但是同是学生的身份，没有谁可以命令谁这一说，大家刚开始，并不太能配合，自己也没有作为一个管理者天赋。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;企图一个人一个功能模块。一开始我只负责架构与部署，然后后面的开发过程我来写好了文档让他们看和学习，然后分配功能一个一个的完成，以至于到了后来，作为一个开发人员，都不能完整的过一遍程序，因为有一大部分不是由我开发，后面的流程是什么我都不清楚。应该做的是，要在项目中的所有方面都参与，一个地方出问题，大家可以一起解决，而不是说一句，这里不是我写的我不知道，你自己看看这种话。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;不会反省。作为几个还在大学的 90
后，实在是抱怨大于反省，用我们学姐的话说，就说过于愤青，常常有问题不是想着如何解决，而是抱怨。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;回看下来，项目的失败不是没有原因的，只是当局者迷。反思之后也会有很多需要改进的地方的。一个敏捷开发的团队，在我看来应该有如下一些特点&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;几个友好交流的团队成员组成的自组织团队&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;持续性的、短期的交付有价值的软件&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;敏捷软件开发，欢迎改变需求&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;不断关注优秀的技能和设计&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;采取与目标一直的最简单的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;面对面的交流&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;必须能够一起工作&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;时常反省，积极改变 9.文档必要，但不是全部&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;为下两周做详尽计划，为下三个月做粗略计划&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;自组织团队&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_第二章_敏捷软件开发原则模式与实践&quot; &gt;第二章 敏捷软件开发、原则、模式与实践&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;作为开发人员，我们应该记住，XP 并非唯一选择。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;敏捷方法很多，极限编程（cXtreme Programing，简称
XP）是最著名的一个，他是由许多相互依赖的实践组成。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;客户作为团队成员：
无论谁是客户，他们都是能够和团队一起工作的团队成员。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;用户素材：他是一个计划工具，客户可以使用它并根据他的优先级和估算代价来安排实现该需求的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;短交付周期：每两周交付一个可以工作的软件。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;验收测试：由能够自动并且反复运行的某种脚本语言编写，这些测试共同验证胸痛按照客户指定的行为运转。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;结对编程：所有的产品代码都是由结对的程序员使用同一台电脑共同完成。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;测试驱动开发：所有的代码都是先编写测试用例再去书写业务。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;集体所有权：结对编程中的每一对都具有拆出任何模块并对他进行改进的权力。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;持续集成：XP 团队会进行多次系统构建，重新创建整个系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;可持续的开发速度：团队必须保持旺盛的精力和敏锐的警觉。不允许团队加班工作，在版本发布前的一个星期是例外。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;开放的工作空间：团队在一个开放的房间中一起工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;计划游戏：划分业务人员和开发人员之间的职责，业务人员（客户）决定特性的重要性，开发人员决定实现一个特性所花费的代价。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;简单的设计：设计尽可能的简单、具有表现力。XP 指导原则&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;考虑能够工作的最简单的事情：尽可能寻找能够实现用户素材的最简单的设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;你将不需要他：只有在有证据，或则至少由十分明显的迹象表明现在引入这些基础结构比继续等待更加合算时，才会引入这些基础机构。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;一次，并且只有一次：不能容忍重复的代码。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;重构：经常性的代码重构并保证测试用例能够通过。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;隐喻：XP
所有实践中中最重要的实践之一，他是将整个系统联系再一次的全局视图。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;以上来自于书中或者自己的总结，加粗的是我自己体验过的，他们的确为我带来了不小的助力。其实
XP
的中的单个实践都不足以为道，但是一旦他们结合起来形成一个系统或整体，就带来了意想不到的效果。其中我最赞同的莫过于
&lt;strong&gt;隐喻&lt;/strong&gt;
，为什么？因为如果能够为当前的系统建造一个隐喻出来，那么你开发的时候就能够很快的知道自己是否达到了目标，能够尽可能早的发现错误；而且他的有趣与幽默，不仅能够减少错误，还为工作带来一点新的乐趣。不太好理解的，便是用户素材和计划游戏。用户素材其实是一个包含的需求、时间、优先级、代价等信息的计划列表，在这个列表中，客户和开发人员都能够很快的知道最值得做的事情是什么，什么事情可以暂时放一放；而计划游戏，则是由开发人员根据自己最近一次发布和迭代得到下次的预算（比如能完成几个用户素材），然后客户根据预算，选择下一个版本需要发布的不超过预算的用户素材。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 XP
中，有许多实践都是相辅相成的，比如在开放的环境中进行工作，需要结对编程的辅助。如果各自为营，那么即使是开放的环境，也是没有太大的意义了。XP
正式由这些一个又一个实践组合而成，才能够带来如此高效的敏捷开发过程。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_第三章_计划&quot; &gt;第三章 计划&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当你能够度量你所说的，并且能够用数字去表达他时，就表示你了解了他；若你不能度量他，不能用数字去表达他，那么说明你的知识就是匮乏的，不能令人满意的。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;正如上面所说，用户素材和计划游戏是我认为较为难以理解的两个点，在第三章就对这俩个进行了很形象和详细的解释。我换一种方式来描述一下我对这两个的理解&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_初始探索&quot; &gt;初始探索&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;假设我是一位游戏代练人员，而我的客户则是希望我为他代练代练游戏账号，在一开始进行交涉的的时候，他就提出了他代练的需求：等级从0级到达50级，拥有一套极品装备。这就是他的需求，我们将他转化为用户素材，0级到50级是一个漫长的过程，随着等级提高，难度逐渐增加，他是一个过大的素材点，所以我们将他进行分解：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;等级 0-10&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;等级 11-18&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;等级 19-25&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就完成了一个大的用户素材的分解，而一身的极品装备也是一个过大的用户素材，将他分解&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;拥有一个极品头盔&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;拥有一件极品翅膀&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时我们假设一个初始的速度因子，两天的时间完成一个用户素材，并对他们分配素材任务点，对于等级代练，都可以是一个固定的
2 点，也就是一个用户素材，需要 2×2=4 天完成；对于装备，将他固定为 3
点，那么也就需要 2×3=6 天完成，当然，这个猜测 2
天是会改变的，这就完成我们的&lt;strong&gt;初始探索&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_发布计划&quot; &gt;发布计划&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此时，等级代练属于简单并且容易实现的素材，而极品装备的代练属于重要并且代价高昂的素材，业务人员(客户)寻爱的那个哪些能够嗲来最大化利益的素材，对第一次交接（发布）达成一致，并确定这些素材的实现顺序。这就是&lt;strong&gt;发布计划&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_迭代计划&quot; &gt;迭代计划&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们与客户决定迭代的规模，一般需要两周，客户选择了素材后，这期间的实现顺序则是由代练人员进行决定，采用最具有技术意义的顺序来实现这些素材。一旦开始，就不能够改变实现期间的素材，除正在完成的素材，其他的都可以修改。由第一次的迭代能够得出速度，能够及时调整任务点。例如代练预计两天的速度因子，但是由于游戏活动期间，经验翻倍，爆率翻倍，那么第一次迭代完成了十四个任务点，速度因子应该调整为一天，同时计划下一次迭代中也完成十四个点，速度就是每次迭代十四个点。这样的速度反馈是非常及时的，能够有助于保持计划与实际状况的同步，这就是&lt;strong&gt;迭代计划&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_任务计划&quot; &gt;任务计划&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;等级代练中，0-10
级为一个用户素材，我们将他分解为一个一个的代练任务任务，一个任务就是能够在4-16小时内完成的功能，在客户的帮组下对素材进行分析，尽可能完全地列举出所有的任务。每个代练的人员都知道最近一次的迭代中所完成的任务点数，那么下次接任务的时候，就不会超过个人预算。同样如果你是等级代练的人员，你可以选择去代练极品装备，因为并没有强制要求必须对口，更加希望的是能够将知识传播给每个团队成员。这就是&lt;strong&gt;任务计划&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_迭代的中点&quot; &gt;迭代的中点&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在我们代练的过程中，完成了素材一半的时候，应该召开一次会议，
同时应该有一般的用户素材被完成。如果没有完成要及时告知客户，以做出新的策略和改变。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_迭代&quot; &gt;迭代&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;客户在每次迭代过程中都能看到代练的进度，代练进入了以各种可以预测的、舒适的节奏。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_结论&quot; &gt;结论&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一个完整计划是复杂的，但是一旦完成，那么收获和后期都是一个十分美好和轻松的，它意味着管理人员能够控制着团队以最小的代价获得最大的商业价值。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_第四章_测试&quot; &gt;第四章 测试&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;烈火验真金，逆境磨意志。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一章是内容是让我们了解测试驱动开发（TDD）的方法和理念，自己深受影响。引用中的&lt;code&gt;烈火&apos;&apos;和&lt;/code&gt;逆境&apos;&apos;，就像是一次次测试的失败，当你测试成功后，就是你代码完成的时候。而正如开头的几个疑问句，都问进我心里，测试驱动的开发方式有什么好处呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;程序中的每一项功能都有测试来验证它的操作的正确性。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;迫使我们使用不同的观察点。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;迫使我们把程序设计为可测试的。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;无价的文档格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;有意图的编程。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;暴露程序中应该被解耦合的区域。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样，使用测试就潜移默化的在改变着我们程序的构架，在他的用例中，先写测试，再按照测试所按时的接口去写，再通过测试，对于junit来说，就是从
&lt;strong&gt;红灯 —— 绿灯&lt;/strong&gt; 的过程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过以前自己以为写一个 junit
单元测试（对java来说）就算是测试用例了，没错，单元测试是必要的，但是不够充分。一个项目是一个整体，我们需要去验证系统作为一个整体时工作的正确性，这个时候就是需要&lt;strong&gt;验收测试&lt;/strong&gt;了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;单元测试：用来验证系统中个别机制的白盒测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;验收测试：用来验证系统满足客户需求的黑盒测试。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一个黑盒，一个白盒，具有很大的区别。前期验收测试使用自动化，会对我们的迭代带来意想不到的效果。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_第五章_重_构&quot; &gt;第五章 重 构&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;大千世界中，唯一缺乏的就是人类的注意力。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;的确，世界那么大，你注意到了多少美好呢？你能够专注于多少事呢？书中提到在我们软件开发中，每一个软件模块都有三项职责&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;能够运行起来所完成的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;它要应对的变化。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;要和阅读他的人沟通。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这一章节他通过一个案例进行讲述，我也去实现了这个案例，但是发现似乎在某些方面自己不能够理解。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;/**
 * 这是一个重构代码示例，此代码为原始代码
 * &amp;lt;p&amp;gt;
 * 他的功能是计算 0 到某个最大值区间的所有素数
 *
 * @author EchoCow
 */
class GeneratePrimes {
    static int[] generatePrimes(int maxValue) {
        if (maxValue &amp;gt;= 2) {
            // 初始化
            int s = maxValue + 1;
            boolean[] f = new boolean[s];
            int i;

            // 初始化所有数组为 真
            for (i = 0; i &amp;lt; s; i++) {
                f[i] = true;
            }

            f[0] = f[1] = false;

            // 筛选
            int j;
            for (i = 2; i &amp;lt; Math.sqrt(s) + 1; i++) {
                for (j = 2 * i; j &amp;lt; s; j += i) {
                    f[j] = false;
                }
            }

            int count = 0;
            for (i = 0; i &amp;lt; s; i++) {
                if (f[i]) {
                    count++;
                }
            }
            int[] primes = new int[count];
            for (i = 0, j = 0; i &amp;lt; s; i++) {
                if (f[i]) {
                    primes[j++] = i;
                }
            }
            return primes;
        } else {
            return new int[0];
        }
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这是项目的初始代码，在我看来的确一般，正如一个初学者一样，曾经自己写的代码也是如此，一个方法走到底，各种垃圾变量名满天飞，但是他确实是能够很好的达到目标的，测试如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * 单元测试
 *
 * @author EchoCow
 */
class GeneratePrimesTest {
    @Test
    void test() {
        int[] nullArray = GeneratePrimes.generatePrimes(0);
        assertEquals(nullArray.length, 0);
        int[] minArray = GeneratePrimes.generatePrimes(2);
        assertEquals(minArray.length, 1);
        int[] threeArray = GeneratePrimes.generatePrimes(3);
        assertEquals(threeArray.length, 2);
        assertEquals(threeArray[0], 2);
        assertEquals(threeArray[1], 3);
        int[] centArray = GeneratePrimes.generatePrimes(100);
        assertEquals(centArray.length, 25);
        assertEquals(centArray[24], 97);
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;绿灯通过，似乎我们的任务完成了？如果你不想被以后来的程序员在心里大骂大可以放心走了
，但是作为有点代码洁癖的人，是不能够忍受的。我们按照他的路程，先将一个冗长的方法修改为各司其职的私有方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;/**
 * 这是一个重构代码示例，此代码为修改的第一个版本
 * &amp;lt;p&amp;gt;
 * 在这个版本里，我们将他一个方法修改了三个方法，各司其职
 * 并抽取了公共变量并改名为 PrimesGenerateV1
 *
 * @author EchoCow
 */
class PrimesGenerateV1 {
    private static int s;
    private static boolean[] f;
    private static int[] primes;

    static int[] generatePrimes(int maxValue) {
        if (maxValue &amp;lt; 2) {
            return new int[0];
        } else {
            initSieve(maxValue);
            sieve();
            loadPrimes();
            return primes;
        }
    }

    /**
     *  加载素数
     */
    private static void loadPrimes() {
        int i,j;
        int count = 0;
        for (i = 0; i &amp;lt; s; i++) {
            if (f[i]) {
                count++;
            }
        }
        primes = new int[count];
        for (i = 0, j = 0; i &amp;lt; s; i++) {
            if (f[i]) {
                primes[j++] = i;
            }
        }
    }

    /**
     * 筛选
     */
    private static void sieve() {
        int i, j;
        for (i = 2; i &amp;lt; Math.sqrt(s) + 1; i++) {
            for (j = 2 * i; j &amp;lt; s; j += i) {
                f[j] = false;
            }
        }
    }

    /**
     * 初始化
     *
     * @param maxValue 最大值
     */
    private static void initSieve(int maxValue) {
        // 初始化
        s = maxValue + 1;
        f = new boolean[s];
        int i;

        // 初始化所有数组为 真
        for (i = 0; i &amp;lt; s; i++) {
            f[i] = true;
        }

        f[0] = f[1] = false;
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这个版本里，我们将他一个方法修改了三个方法，各司其职。哪里出了问题都能够及时找出来。但是依旧可以看到一些
s 还有杂乱的 initSieve 方法，我们继续修改得到第二版&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;/**
 * 这是一个重构代码示例，此代码为修改的第二个版本
 * &amp;lt;p&amp;gt;
 * 在这个版本里，我们对 initSieve 方法进行了整理
 * 修改了三个函数的名字
 *
 * @author EchoCow
 */
class PrimesGenerateV2 {
    private static boolean[] f;
    // 修改一个变量名，结果
    private static int[] result;

    static int[] generatePrimes(int maxValue) {
        if (maxValue &amp;lt; 2) {
            return new int[0];
        } else {
            // 修改函数名称
            initArrayOfIntegers(maxValue);
            crossOutMultiples();
            putUncrossedIntegerIntoResult();
            return result;
        }
    }

    /**
     * 加载素数
     */
    private static void putUncrossedIntegerIntoResult() {
        int i, j;
        int count = 0;
        for (i = 0; i &amp;lt; f.length; i++) {
            if (f[i]) {
                count++;
            }
        }
        result = new int[count];
        for (i = 0, j = 0; i &amp;lt; f.length; i++) {
            if (f[i]) {
                result[j++] = i;
            }
        }
    }

    /**
     * 筛选
     */
    private static void crossOutMultiples() {
        int i, j;
        for (i = 2; i &amp;lt; Math.sqrt(f.length) + 1; i++) {
            for (j = 2 * i; j &amp;lt; f.length; j += i) {
                f[j] = false;
            }
        }
    }

    /**
     * 初始化
     *
     * @param maxValue 最大值
     */
    private static void initArrayOfIntegers(int maxValue) {
        // 修改初始化方式
        f = new boolean[maxValue + 1];
        int i;
        f[0] = f[1] = false;
        for (i = 2; i &amp;lt; f.length; i++) {
            f[i] = true;
        }
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这个版本里，我们对 initSieve
方法进行了整理，修改了三个函数的名字。以及一些变量的名字，依旧可以看到一些不知名的变量比如
·int i = 0`还有`f`，继续修改&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;/**
 * 这是一个重构代码示例，此代码为修改的第三个版本
 * &amp;lt;p&amp;gt;
 * 在这个版本里，我们对许多变量进行了重构
 * 去掉了初始化语句，提取循环
 * 添加一个新的函数消除歧义
 * 所有的循环变量都是在 for 内有效，所有 i 都从 2 开始
 *
 * @author EchoCow
 */
class PrimesGenerateV3 {
    // 修改变量名，同时修改了所有布尔值的含义
    private static boolean[] isCrossed;
    private static int[] result;

    static int[] generatePrimes(int maxValue) {
        if (maxValue &amp;gt;= 2) {
            initArrayOfIntegers(maxValue);
            crossOutMultiples();
            putUncrossedIntegerIntoResult();
            return result;
        }
        return new int[0];
    }

    /**
     * 加载素数
     */
    private static void putUncrossedIntegerIntoResult() {
        // 获取到没有被过滤掉的整数条目，初始化
        result = new int[numberOfUncrossedIntegers()];
        // 把没有被过滤掉的整数搬移到结果数组中
        for (int j = 0, i = 2; i &amp;lt; isCrossed.length; i++) {
            if (notCrossed(i)) {
                result[j++] = i;
            }
        }
    }

    /**
     * 计算数组中没有被过滤掉的整数条目
     *
     * @return 没有被过滤掉的整数条目
     */
    private static int numberOfUncrossedIntegers() {
        int count = 0;
        for (int i = 2; i &amp;lt; isCrossed.length; i++) {
            if (notCrossed(i)) {
                count++;
            }
        }
        return count;
    }

    /**
     * 筛选
     */
    private static void crossOutMultiples() {
        for (int i = 2; i &amp;lt; calcMaxPrimeFactor(); i++) {
            if (notCrossed(i)) {
                crossOutMultiplesOf(i);
            }
        }
    }

    /**
     * 初始化
     *
     * @param maxValue 最大值
     */
    private static void initArrayOfIntegers(int maxValue) {
        // 修改初始化方式
        isCrossed = new boolean[maxValue + 1];
        for (int i = 2; i &amp;lt; isCrossed.length; i++) {
            isCrossed[i] = false;
        }
    }

    private static void crossOutMultiplesOf(int i) {
        for (int multiple = 2 * i; multiple &amp;lt; isCrossed.length; multiple += i) {
            isCrossed[multiple] = true;
        }
    }

    /**
     * 修改原来的 if
     */
    private static boolean notCrossed(int i) {
        return !isCrossed[i];
    }

    /**
     * 获取到条件值
     */
    private static int calcMaxPrimeFactor() {
        return (int) (Math.sqrt(isCrossed.length) + 1);
    }

}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第三个版本改动比较多，我们对许多变量进行了重构，最重要的是以前只有三个方法，虽然三个方法都描述了功能，但是却一个方法里面包含了多个功能以及多个
&lt;code&gt;for&lt;/code&gt;
循环，因此，我们将他抽取了出来，能够见名知意，到了这，重构其实已经很成功了，但是我们还需要再次阅读，然后发现有些地方还是有瑕疵，再次重构。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;/**
 * 这是一个重构代码示例，此代码为修改的第四个版本
 * &amp;lt;p&amp;gt;
 * 在这个版本里，我们再次对方法名和变量名进行重构
 *
 * @author EchoCow
 */
class PrimesGenerateV4 {
    // 修改变量名
    private static boolean[] crossedOut;
    private static int[] result;

    static int[] generatePrimes(int maxValue) {
        if (maxValue &amp;gt;= 2) {
            uncrossIntegersUpTo(maxValue);
            crossOutMultiples();
            putUncrossedIntegerIntoResult();
            return result;
        }
        return new int[0];
    }

    /**
     * 把没有被过滤掉的整数搬移到结果数组中
     */
    private static void putUncrossedIntegerIntoResult() {
        // 获取到没有被过滤掉的整数条目，初始化
        result = new int[numberOfUncrossedIntegers()];
        for (int j = 0, i = 2; i &amp;lt; crossedOut.length; i++) {
            if (notCrossed(i)) {
                result[j++] = i;
            }
        }
    }

    /**
     * 计算数组中没有被过滤掉的整数条目
     *
     * @return 没有被过滤掉的整数条目
     */
    private static int numberOfUncrossedIntegers() {
        int count = 0;
        for (int i = 2; i &amp;lt; crossedOut.length; i++) {
            if (notCrossed(i)) {
                count++;
            }
        }
        return count;
    }

    /**
     * 筛选
     */
    private static void crossOutMultiples() {
        for (int i = 2; i &amp;lt; determineIterationLimit(); i++) {
            if (notCrossed(i)) {
                crossOutMultiplesOf(i);
            }
        }
    }

    private static void uncrossIntegersUpTo(int maxValue) {
        crossedOut = new boolean[maxValue + 1];
        for (int i = 2; i &amp;lt; crossedOut.length; i++) {
            crossedOut[i] = false;
        }
    }

    private static void crossOutMultiplesOf(int i) {
        for (int multiple = 2 * i; multiple &amp;lt; crossedOut.length; multiple += i) {
            crossedOut[multiple] = true;
        }
    }

    /**
     * 修改原来的 if
     */
    private static boolean notCrossed(int i) {
        return !crossedOut[i];
    }

    /**
     * 获取到条件值
     */
    private static int determineIterationLimit() {
        /*
          去掉了 +1 ，因为他是不必要的，
          真正的遍历上限是小于或者等于数组长度的平方根的最大素数
         */
        return (int) Math.sqrt(crossedOut.length) ;
    }

}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第四个版本也是最后一个版本，在这里，做了一点小小的改动，一个是修改名称，另外一个是去掉了
&lt;code&gt;+1&lt;/code&gt;，测试用例通过。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这就是重构，我们没有修改他的功能，而只是对内部进行了修改，使他能够满足三项职责的
二、三。重构后的代码，能够更加友好，为了每天清洁代码，保持代码的清洁，对于由代码洁癖的同学，重构简直的天生定制一般。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_疑问&quot; &gt;疑问&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;Q：书中多次提到自组织团队，到底是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;A：在经过刘大指点后，自己理解的自组织团队应该具有这么几个特点&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;对产品由所有权&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;能够自觉干活，自觉改进&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;全能型团队，具有各色的人&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;能够自治，主动的完成任务&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;定期讨论，积极友好&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样的团队多么友好，在极限编程那一章节中，多次提到的就是不需要一个人完全只负责他专业对口的模块，即使他是做
UI
的，他也可以接受数据库的任务，在与结对编程实践与数据库专家学习的途中，能够很好的提升专业知识，能够很好的是的团队专业水平提高，我想这也是极限编程核心之一，一个团队的平均水平上来了，远强于于只有一个大佬的团队。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;Q：为什么在重构中提取了一句话代码单独封装到一个私有方法中？&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在实践书中重构的的示例的时候，发现有两个方法都是一句话代码&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    private static int determineIterationLimit() {
        /*
          去掉了 +1 ，因为他是不必要的，
          真正的遍历上限是小于或者等于数组长度的平方根的最大素数
         */
        return (int) Math.sqrt(crossedOut.length) ;
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此方法是获取 遍历的极限 的方法，他会的就是 &lt;code&gt;for&lt;/code&gt;
循环中的条件，但是为什么要单独拿出来一个方法呢？因为多点注释？还是因为能够更好的明白这一句呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    private static boolean notCrossed(int i) {
        return !crossedOut[i];
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此方法只是单纯为能够更好的读懂代码。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那如果按照这种思路，实际开发中，一个 class
里面要多少个一句话私有方法啊？我一直没有想明白这点。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_结论_2&quot; &gt;结论&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;三十多页还是很快就看完了，大多都是理论上的知识，不过也架构了敏捷开发的一个知识体系，能够更好读懂一些必要的东西，下一章的一个实例就占据前五章的篇幅，想必是个很有意思的期待吧。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[Vaadin —— Java 从后端到前端 （路由与导航）]]></description><link>https://zyue.wiki/articles/2019/02/25/1551107245928.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/02/25/1551107245928.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_定义路由&quot;&gt;定义路由&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_导航的生命周期&quot;&gt;导航的生命周期&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_beforeleaveevent&quot;&gt;BeforeLeaveEvent&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_beforeenterevent&quot;&gt;BeforeEnterEvent&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_reroute&quot;&gt;Reroute&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_afternavigationevent&quot;&gt;AfterNavigationEvent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_路由器布局和嵌套路由器目标&quot;&gt;路由器布局和嵌套路由器目标&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_routerlayout&quot;&gt;RouterLayout&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_具有parentlayout的多个父布局&quot;&gt;具有@parentlayout的多个父布局&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_routeprefix_的_parentlayout_路由控制&quot;&gt;使用 &lt;code&gt;@routeprefix&lt;/code&gt; 的 parentlayout 路由控制&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_绝对路由&quot;&gt;绝对路由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_路由和_url_参数&quot;&gt;路由和 URL 参数&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_导航目标的_url_参数&quot;&gt;导航目标的 URL 参数&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_导航目标的可选_url_参数&quot;&gt;导航目标的可选 URL 参数&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_导航目标的通配符_url_参数&quot;&gt;导航目标的通配符 URL 参数&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_查询参数&quot;&gt;查询参数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_url_生成&quot;&gt;URL 生成&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_带参数导航目标的_url_生成&quot;&gt;带参数导航目标的 URL 生成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_在路线之间导航&quot;&gt;在路线之间导航&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_路由器异常处理&quot;&gt;路由器异常处理&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_重新路由到错误视图&quot;&gt;重新路由到错误视图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_获取已注册的路由&quot;&gt;获取已注册的路由&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_按父布局获取已注册路由&quot;&gt;按父布局获取已注册路由&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_更新导航页面标题&quot;&gt;更新导航页面标题&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_使用_pagetitle_注解&quot;&gt;使用 &lt;code&gt;@PageTitle&lt;/code&gt; 注解&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_动态设置页面标题&quot;&gt;动态设置页面标题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_结束语&quot;&gt;结束语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前段时间无聊逛 maven 仓库的时候，无意中看到一个名为 spring boot
的框架，但是却发布到了 12 的版本，我很奇怪，spring boot
最近在用，没那么高啊，然后点进去才发现是 Vaadin 12 集成 spring boot
的库。于是一时好奇去查看了一下 Vaadin，感觉还不错，Vaadin早期叫IT Mill
Toolkit，前端用一种专有的Javascript实现的，开发非常复杂。2007年底，这种专有的Javascript实现就被放弃了，转而拥抱GWT。2009年改名字叫Vaadin
Framework。然而现在的 Vaadin 其实在也是有一席之地的，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;相比来说不用写 js 还是不错的，不过 css 还是要写的，可以理解是 GWT
的一个超集吧。虽然说google工程已经使用 dart 和 angular dart 来取代GWT
写的应用了，但我还是比较想试试使用 Vaadin
如何，不过可惜的是文章实在少，只有从官网上看了，英语听力差的一批，不得已只能看文章慢慢学习啦。不过先体验一番，可以的话在考虑深入学习。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_定义路由&quot; &gt;定义路由&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;@route 注释允许您将任意组件定义为给定 URL 片段的路由目标。例如：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(&quot;&quot;)
public class HelloWorld extends Div {
  public HelloWorld() {
    setText(&quot;Hello world&quot;);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里，我们将 Helloworld
组件定义为应用程序的默认路由目标（空路由）。您可以为不同的路由定义单独的组件，如下所示：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(&quot;some/path&quot;)
public class SomePathComponent extends Div {
  public SomePathComponent() {
    setText(&quot;Hello @Route!&quot;);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;每当用户访问 &lt;a href=&quot;http://yourdomain.com/some/path&quot; class=&quot;bare&quot;&gt;http://yourdomain.com/some/path&lt;/a&gt;
时（假设应用程序是从根上下文运行的）通过单击应用程序内的链接或直接在地址栏上键入地址，SomePathComponent
组件将显示在页面上。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果省略了 @Route 的值，则路由的路径默认将从类名派生。例如，MyEditor
将变为 &lt;code&gt;myeditor&apos;&apos;，personView 将变为 &lt;/code&gt;person&apos;&apos;，mainView 将变为“”。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;PS: 很简单的一个路由注解就完成路由设置，类似于 spring boot 的
@RequestMapping&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_导航的生命周期&quot; &gt;导航的生命周期&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在将导航从一种状态应用到另一种状态时，将触发许多生命周期事件。事件触发将会调用到
&lt;code&gt;UI&lt;/code&gt; 实例的侦听器和实现特殊观察者接口的附加组件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_beforeleaveevent&quot; &gt;BeforeLeaveEvent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在导航期间激发的第一个事件是BeforeLeaveEvent。该事件允许延迟或取消导航，或者将导航更改为转到其他目的地。此事件将传递到实现
BeforeLeaveObserver 并在导航开始前附加到 &lt;code&gt;UI&lt;/code&gt;
的任何组件实例。也可以使用UI中的
addBeforeLeaveListener（beforeLeaveListener）方法为此事件注册独立的侦听器。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此事件的一个典型用例是，在导航到应用程序的其他部分之前，询问用户是否要保存任何未保存的更改。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_postpone_推迟导航&quot; &gt;Postpone 推迟导航&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;BeforeLeaveEvent有一个 Postpone
方法，可用于推迟当前导航转换，直到满足特定条件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;E.g. 在离开页面前请求用户确认：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class SignupForm extends Div implements BeforeLeaveObserver {
    @Override
    public void beforeLeave(BeforeLeaveEvent event) {
        if (this.hasChanges()) {
            ContinueNavigationAction action = event.postpone();
            ConfirmDialog.build(&quot;Are you sure you want to leave this page?&quot;)
                    .ifAccept(action::proceed).show();
        }
    }

    private boolean hasChanges() {
        // no-op implementation
        return true;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 &lt;code&gt;postpone&lt;/code&gt;
方法将会暂时中断观察者和监听者，当他恢复以后，将会启用推迟的观察者之后的观察者。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;例如，我们假设当前页面有 &lt;code&gt;A&lt;/code&gt; &lt;code&gt;B&lt;/code&gt; &lt;code&gt;C&lt;/code&gt; 三个观察者（即实现了 Observer
结尾接口），按照这些顺序通知这些观察者，如果 &lt;code&gt;B&lt;/code&gt; 调用推迟，对 &lt;code&gt;C&lt;/code&gt;
的调用以及转换过程的其余部分将被推迟。如果 &lt;code&gt;B&lt;/code&gt; 推迟的转换没有恢复，&lt;code&gt;C&lt;/code&gt;
将不会收到有关此事件的通知，并且转换永远不会结束。但是，如果 &lt;code&gt;B&lt;/code&gt; 执行其
&lt;code&gt;ContinueNavigationAction&lt;/code&gt; 以恢复转换，则从中断的位置继续。因此，&lt;code&gt;A&lt;/code&gt; 和
&lt;code&gt;B&lt;/code&gt; 不再被调用，但 &lt;code&gt;C&lt;/code&gt; 被通知。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;任何时候最多可以推迟一个导航事件；当前一个导航事件处于推迟状态时启动新的导航转换将取消推迟状态。之后，执行之前保存的
&lt;code&gt;ContinueNavigationAction&lt;/code&gt; 将没有任何效果&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;PS: 其实类似于 axios 的 路由前置守卫&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_beforeenterevent&quot; &gt;BeforeEnterEvent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在导航期间触发的第二个事件是
&lt;code&gt;BeforeEnterEvent&lt;/code&gt;。它允许将导航更改为转到其他目的地。此事件通常用于响应特殊情况，例如，如果没有要显示的数据或用户没有适当的权限。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;只有在通过 &lt;code&gt;BeforeLeaveEvent&lt;/code&gt; 的任何 &lt;code&gt;postpone&lt;/code&gt;
都已继续之后，才会激发该事件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此事件将传递到任何实现 &lt;code&gt;BeforeEnterObserver&lt;/code&gt;
的组件实例，该实例将在导航完成后附加到
&lt;code&gt;UI&lt;/code&gt;。请注意，在分离并到达组件或使`UI`
导航到的位置匹配之前，将激发该事件。也可以使用 &lt;code&gt;UI&lt;/code&gt; 中的
&lt;code&gt;addBeforeEnterListener（beforeEnterListener）&lt;/code&gt;
方法为此事件注册独立的侦听器。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_reroute&quot; &gt;Reroute&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果需要在某些状态下显示完全不同的信息，可以使用 BeforeEnterEvent 或
BeforeLeaveEvent
动态重新路由。重新路由后，不会再激发任何其他侦听器或观察器。相反，将根据新的导航目标触发新的导航阶段，而事件将根据该导航触发。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;E.g. 下面的例子发生在进入 &lt;code&gt;BlogList&lt;/code&gt; 没有任何结果的时候&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(&quot;no-items&quot;)
public class NoItemsView extends Div {
    public NoItemsView() {
        setText(&quot;No items found.&quot;);
    }
}

@Route(&quot;blog&quot;)
public class BlogList extends Div implements BeforeEnterObserver {
    @Override
    public void beforeEnter(BeforeEnterEvent event) {
        // implementation omitted
        Object record = getItem();

        if (record == null) {
            event.rerouteTo(NoItemsView.class);
        }
    }

    private Object getItem() {
        // no-op implementation
        return null;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;rerouteto&lt;/code&gt; 有几个重载来服务不同的用例。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_afternavigationevent&quot; &gt;AfterNavigationEvent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;导航过程中的第三个也是最后一个触发事件是
&lt;code&gt;AfterNavigationEvent&lt;/code&gt;。此事件通常用于在实际导航完成后更新 &lt;code&gt;UI&lt;/code&gt;
的各个部分。例如，调整 &lt;code&gt;breadcrumb&lt;/code&gt;
组件的内容，并在菜单中直观地将活动条目标记为 active。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;事件在 &lt;code&gt;beforeenterEvent&lt;/code&gt; 和更新附加的 &lt;code&gt;UI&lt;/code&gt;
组件后激发。此时，可以预期当前的导航状态将实际显示给用户，也就是说，不会有任何进一步的重新路由或类似的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此事件将传递到完成导航后附加的实现 &lt;code&gt;AfterNavigationOnBServer&lt;/code&gt;
的任何组件实例。也可以使用 &lt;code&gt;UI&lt;/code&gt; 中的
&lt;code&gt;AddAfterNavigationListener（AfterNavigationListener）&lt;/code&gt;
方法为此事件注册独立的侦听器。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class SideMenu extends Div implements AfterNavigationObserver {
    Anchor blog = new Anchor(&quot;blog&quot;, &quot;Blog&quot;);

    @Override
    public void afterNavigation(AfterNavigationEvent event) {
        boolean active = event.getLocation().getFirstSegment()
                .equals(blog.getHref());
        blog.getElement().getClassList().set(&quot;active&quot;, active);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;PS:其实就是路由后置守卫&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_路由器布局和嵌套路由器目标&quot; &gt;路由器布局和嵌套路由器目标&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_routerlayout&quot; &gt;RouterLayout&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 &lt;code&gt;@route（“path”）&lt;/code&gt; 定义路由时，默认情况下，组件将呈现在页面上的
&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标记内（&lt;code&gt;hasElement.getElement()&lt;/code&gt; 返回的元素附加到 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以使用 &lt;code&gt;route.layout()&lt;/code&gt; 方法定义父布局。例如，在名为 &lt;code&gt;Mainlayout&lt;/code&gt;
的布局中呈现 &lt;code&gt;CompanyComponent&lt;/code&gt;，代码如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Tag(&quot;div&quot;)
@Route(value=&quot;company&quot;, layout=MainLayout.class)
public class CompanyComponent extends Component {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;所有用作父布局的布局都必须实现 &lt;code&gt;RouterLayout&lt;/code&gt; 接口。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果有多个路由器目标组件使用相同的父布局，那么当用户在子组件之间导航时，父布局实例将保持不变。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;PS:类似于 HTML 的元素嵌套&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_具有parentlayout的多个父布局&quot; &gt;具有@parentlayout的多个父布局&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在某些情况下，可能需要在应用程序中为父布局提供父布局。一个例子是，我们有一个用于所有内容的主布局和一个可重用为视图的菜单栏。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为此，我们可以进行以下设置：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MainLayout extends Div implements RouterLayout {
}

@ParentLayout(MainLayout.class)
public class MenuBar extends Div implements RouterLayout {
    public MenuBar() {
        addMenuElement(TutorialView.class, &quot;Tutorial&quot;);
        addMenuElement(IconsView.class, &quot;Icons&quot;);
    }
    private void addMenuElement(Class&amp;lt;? extends Component&amp;gt; navigationTarget,
            String name) {
        // implementation omitted
    }
}

@Route(value = &quot;tutorial&quot;, layout = MenuBar.class)
public class TutorialView extends Div {
}

@Route(value=&quot;icons&quot;, layout = MenuBar.class)
public class IconsView extends Div {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这种情况下，我们将拥有一个始终封装 &lt;code&gt;MenuBar&lt;/code&gt; 的 &lt;code&gt;MainLayout&lt;/code&gt;，而
&lt;code&gt;MenuBar&lt;/code&gt; 又封装 &lt;code&gt;TutorialView&lt;/code&gt; 或
&lt;code&gt;IconsView&lt;/code&gt;，具体取决于我们导航到的位置。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这个示例中，我们有两个父层，但是嵌套布局的数量没有限制。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_使用_routeprefix_的_parentlayout_路由控制&quot; &gt;使用 &lt;code&gt;@routeprefix&lt;/code&gt; 的 parentlayout 路由控制&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在某些情况下，父布局应该通过添加到路由位置来补充导航路由。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这可以通过用 &lt;code&gt;@RoutePrefix(&quot;prefix_to_add&quot;)&lt;/code&gt; 注解父布局来完成。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(value = &quot;path&quot;, layout = SomeParent.class)
public class PathComponent extends Div {
    // Implementation omitted
}

@RoutePrefix(&quot;some&quot;)
public class SomeParent extends Div implements RouterLayout {
    // Implementation omitted
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在本例中，&lt;code&gt;PathComponent&lt;/code&gt; 将接收的路由是 &lt;code&gt;some/path&lt;/code&gt;，就像前面提到的
&lt;code&gt;somePathComponent&lt;/code&gt; 一样。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_绝对路由&quot; &gt;绝对路由&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;有时，我们可能有一个设置，我们希望在许多部分中使用相同的父组件，但在某些情况下，不使用父链中的任何
&lt;code&gt;@RoutePrefix&lt;/code&gt;，或仅将它们用于定义的部分。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这些情况下，我们可以将 &lt;code&gt;absolute=true&lt;/code&gt; 添加到 &lt;code&gt;@Route&lt;/code&gt; 或
&lt;code&gt;@RoutePrefix&lt;/code&gt; 注释中。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;因此，如果我们想在 &lt;code&gt;SomeParent&lt;/code&gt;
布局的许多地方使用某些内容，但不想将路由前缀添加到导航路径中，我们可以用以下方式构建一个类
&lt;code&gt;MyContent&lt;/code&gt;：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(value = &quot;content&quot;, layout = SomeParent.class, absolute = true)
public class MyContent extends Div {
    // Implementation omitted
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这种情况下，即使完整的链路径应该是
&lt;code&gt;some/content&lt;/code&gt;，我们实际上得到路径是 &lt;code&gt;content&lt;/code&gt;
正如我们所定义的，这应该是绝对的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当在链的中间有绝对定义时，也可以这样做，例如：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@RoutePrefix(value = &quot;framework&quot;, absolute = true)
@ParentLayout(SomeParent.class)
public class FrameworkSite extends Div implements RouterLayout {
    // Implementation omitted
}

@Route(value = &quot;tutorial&quot;, layout = FrameworkSite.class)
public class Tutorials extends Div {
    // Implementation omitted
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这种情况下，绑定的路由将是 &lt;code&gt;framework/tutorial&lt;/code&gt; 即使整个链接是
&lt;code&gt;some/framework/tutorial&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_路由和_url_参数&quot; &gt;路由和 URL 参数&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_导航目标的_url_参数&quot; &gt;导航目标的 URL 参数&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;支持通过URL传递参数的导航目标应实现 &lt;code&gt;HasUrlParameter&lt;/code&gt;
接口，并使用泛型定义参数类型。通过这种方式，路由器 API
可以提供一种类型安全的方式来构造指向特定目标的 URL。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;HasUrlParameter&lt;/code&gt; 定义路由器根据从 URL 提取的值调用的 &lt;code&gt;setParameter&lt;/code&gt;
方法。该方法将始终在激活导航目标之前被调用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在下面的代码段中，我们定义了一个导航目标，它接受一个字符串参数并从中生成一个
hello 字符串，然后目标将其设置为自己的导航文本内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(value = &quot;greet&quot;)
public class GreetingComponent extends Div
        implements HasUrlParameter&amp;lt;String&amp;gt; {

    @Override
    public void setParameter(BeforeEvent event, String parameter) {
        setText(String.format(&quot;Hello, %s!&quot;, parameter));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;启动时，此导航目标将自动配置为格式 &lt;code&gt;greet/&amp;lt;anything&amp;gt;&lt;/code&gt;
的每个路径，除非已将具有精确 &lt;code&gt;@Route&lt;/code&gt; 的单独导航目标配置为匹配
&lt;code&gt;greet/&amp;lt;some specific path&amp;gt;&lt;/code&gt; ,因为在解析URL时，精确导航目标优先。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_导航目标的可选_url_参数&quot; &gt;导航目标的可选 URL 参数&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以使用 &lt;code&gt;@OptionalParameter&lt;/code&gt; 对 URL 参数进行注释，使路由同时匹配
&lt;code&gt;greet&lt;/code&gt; 和 &lt;code&gt;greet/&amp;lt;anything&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(&quot;greet&quot;)
public class OptionalGreeting extends Div
        implements HasUrlParameter&amp;lt;String&amp;gt; {

    @Override
    public void setParameter(BeforeEvent event,
            @OptionalParameter String parameter) {
        if (parameter == null) {
            setText(&quot;Welcome anonymous.&quot;);
        } else {
            setText(String.format(&quot;Welcome %s.&quot;, parameter));
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;另外，对于可选参数，特定路由将优先于参数化路由。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_导航目标的通配符_url_参数&quot; &gt;导航目标的通配符 URL 参数&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在需要更多参数的情况下，还可以使用 &lt;code&gt;@WildcardParameter&lt;/code&gt; 对 URL
参数进行注释，以使路由匹配问候语以及之后的任何内容，例如问候语
&lt;code&gt;/one/five/three&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(&quot;greet&quot;)
public class WildcardGreeting extends Div
        implements HasUrlParameter&amp;lt;String&amp;gt; {

    @Override
    public void setParameter(BeforeEvent event,
            @WildcardParameter String parameter) {
        if (parameter.isEmpty()) {
            setText(&quot;Welcome anonymous.&quot;);
        } else {
            setText(String.format(&quot;Handling parameter %s.&quot;, parameter));
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通配符参数的参数永远不会为空。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;更具体的路径将优先于通配符目标。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_查询参数&quot; &gt;查询参数&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;也可以获取包含在 URL 中的查询参数。e.g.&amp;nbsp;&lt;code&gt;?name1=value1&amp;amp;name2=value2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以通过 &lt;code&gt;Location&lt;/code&gt; 类的 &lt;code&gt;getQueryParameters()&lt;/code&gt;
方法访问这些查询参数。位置类可以通过 &lt;code&gt;setParameter&lt;/code&gt; 方法的 &lt;code&gt;BeforeEvent&lt;/code&gt;
参数获得。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;Location&lt;/code&gt; 对象表示由路径段和查询参数组成的相对
URL，但不用主机名，e.g.&amp;nbsp;&lt;code&gt;new Location(&quot;foo/bar/baz?name1=value1&quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;@Override
public void setParameter(BeforeEvent event,
        @OptionalParameter String parameter) {

    Location location = event.getLocation();
    QueryParameters queryParameters = location.getQueryParameters();

    Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; parametersMap = queryParameters.getParameters();
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;getQueryParameters()&lt;/code&gt; 支持与同一个键关联的多个值。 Example:
&lt;code&gt;&lt;a href=&quot;https://example.com/?one=1&amp;amp;two=2&amp;amp;one=3&quot; class=&quot;bare&quot;&gt;https://example.com/?one=1&amp;amp;two=2&amp;amp;one=3&lt;/a&gt;&lt;/code&gt; 3将生成对应的映射
&lt;code&gt;{&quot;one&quot; : [1, 3], &quot;two&quot;: [2]}}&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_url_生成&quot; &gt;URL 生成&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;路由器公开了获取已注册导航目标的导航 URL 的方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于一个普通的导航目标，请求是一个简单的调用
&lt;code&gt;Router.getUrl(Class target)&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(&quot;path&quot;)
public class PathComponent extends Div {
  public PathComponent() {
    setText(&quot;Hello @Route!&quot;);
  }
}

public class Menu extends Div {
    public Menu() {
        String route = UI.getCurrent().getRouter()
                .getUrl(PathComponent.class);
        Anchor link = new Anchor(route, &quot;Path&quot;);
        add(link);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这种情况下，返回的 URL 将简单地解析为
&lt;strong&gt;路径&lt;/strong&gt;，但在我们在父布局有添加部分路径情况下，手工生成路径可能不那么简单。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_带参数导航目标的_url_生成&quot; &gt;带参数导航目标的 URL 生成&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于具有所需参数的导航目标，参数被赋予解析器，返回的字符串将包含参数，e.g.&amp;nbsp;&lt;code&gt;Router.getUrl(Class target, T parameter)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(value = &quot;greet&quot;)
public class GreetingComponent extends Div
        implements HasUrlParameter&amp;lt;String&amp;gt; {

    @Override
    public void setParameter(BeforeEvent event,
            String parameter) {
        setText(String.format(&quot;Hello, %s!&quot;, parameter));
    }
}

public class ParameterMenu extends Div {
    public ParameterMenu() {
        String route = UI.getCurrent().getRouter()
                .getUrl(GreetingComponent.class, &quot;anonymous&quot;);
        Anchor link = new Anchor(route, &quot;Greeting&quot;);
        add(link);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_在路线之间导航&quot; &gt;在路线之间导航&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;您可以使用 &lt;code&gt;RouterLink&lt;/code&gt; 组件创建链接，以引导到应用程序中的路由目标。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;带或不带 url 参数的导航目标的 &lt;code&gt;RouterLink&lt;/code&gt; 示例&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;void routerLink() {
    Div menu = new Div();
    menu.add(new RouterLink(&quot;Home&quot;, HomeView.class));
    menu.add(new RouterLink(&quot;Greeting&quot;, GreetingComponent.class, &quot;default&quot;));
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;带URL参数的 &lt;code&gt;GreetingComponent&lt;/code&gt; 组件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(value = &quot;greet&quot;)
public class GreetingComponent extends Div
        implements HasUrlParameter&amp;lt;String&amp;gt; {

    @Override
    public void setParameter(BeforeEvent event,
            String parameter) {
        setText(String.format(&quot;Hello, %s!&quot;, parameter));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;也可以使用普通的类型链接进行导航，但这些链接会导致页面重新加载。相反，使用
&lt;code&gt;RouterLink&lt;/code&gt;
导航会获取新组件的内容，该组件在不重新加载页面的情况下就地更新。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过向常规链接添加 &lt;code&gt;router-link&lt;/code&gt;
属性，您可以告诉框架它应在不重新加载的情况下处理导航，e.g.&amp;nbsp;&lt;code&gt;&amp;lt;a router-link href=&quot;company&quot;&amp;gt;Go to the company page&amp;lt;/a&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;要从服务器端触发导航，请使用 &lt;code&gt;UI.navigate(String)&lt;/code&gt;，其中 String
参数是要导航到的位置。还有，&lt;code&gt;UI.navigate(Class&amp;lt;? extends Component&amp;gt; navigationTarget)&lt;/code&gt;
或
&lt;code&gt;navigate(Class&amp;lt;? extends C&amp;gt; navigationTarget, T parameter)&lt;/code&gt;，这样就不必手动生成路由字符串。这将触发浏览器位置的更新并添加新的历史记录状态条目。单击按钮时指向
&lt;code&gt;company&lt;/code&gt; 路线目标的示例导航：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;NativeButton button = new NativeButton(&quot;Navigate to company&quot;);
button.addClickListener( e-&amp;gt; {
     button.getUI().ifPresent(ui -&amp;gt; ui.navigate(&quot;company&quot;));
});&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;即使会话 session
已过期，路由器链接也可以工作，因此您应该更喜欢使用这些链接，而不是处理导航服务器端。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_路由器异常处理&quot; &gt;路由器异常处理&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;vaadin
对于导航目标有特殊的支持，因为在&lt;strong&gt;导航过程&lt;/strong&gt;中引发了未处理的异常而激活这些目标，以便向用户显示``错误视图&apos;&apos;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这些目标通常与常规导航目标的工作方式相同，尽管它们通常没有任何特定的
&lt;code&gt;@Route&lt;/code&gt;，因为它们是为任意 URL 显示的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;错误导航根据导航期间引发的异常类型解析为 target。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在启动时，将收集实现接口 &lt;code&gt;HasErrorParameter&amp;lt;T extends Exception&amp;gt;&lt;/code&gt;
的所有类，以便在导航期间用作异常 targets。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;例如，这里是 &lt;code&gt;NotFoundException&lt;/code&gt; 的默认目标，当给定的 URL
没有目标时，将显示该目标。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;RouteNotFoundError for NotFoundException during routing&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Tag(Tag.DIV)
public class RouteNotFoundError extends Component
        implements HasErrorParameter&amp;lt;NotFoundException&amp;gt; {

    @Override
    public int setErrorParameter(BeforeEnterEvent event,
            ErrorParameter&amp;lt;NotFoundException&amp;gt; parameter) {
        getElement().setText(&quot;Could not navigate to &apos;&quot;
                    + event.getLocation().getPath() + &quot;&apos;&quot;);
        return HttpServletResponse.SC_NOT_FOUND;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这将返回 404 的 HTTP 响应并向用户显示设置的文本。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;异常匹配将首先按异常原因运行，然后按异常超类型运行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;实现的默认异常为 &lt;code&gt;NotFoundException（404）&lt;/code&gt; 的 &lt;code&gt;RouteNotFoundError&lt;/code&gt;
，&lt;code&gt;Java.lang.Exception（500）&lt;/code&gt; 的 &lt;code&gt;InternalServerError&lt;/code&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;默认的异常处理程序可以通过如下方式进行扩展来重写：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Custom route not found that is using our application layout&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@ParentLayout(MainLayout.class)
public class CustomNotFoundTarget extends RouteNotFoundError {

    @Override
    public int setErrorParameter(BeforeEnterEvent event,
            ErrorParameter&amp;lt;NotFoundException&amp;gt; parameter) {
        getElement().setText(&quot;My custom not found class!&quot;);
        return HttpServletResponse.SC_NOT_FOUND;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;作为一个更复杂的示例，我们可以有一个仪表板，它可以收集和向用户显示小部件，并且可以有不应为未经身份验证的用户显示的小部件。出于某种原因，为未经身份验证的用户加载
&lt;code&gt;ProtectedWidget&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;集合本应捕获受保护的小部件，但出于某种原因实例化了它，但幸运的是，该小部件检查创建时的身份验证，并抛出
&lt;code&gt;AccessDeniedException&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此未处理的异常在导航过程中传播，并由 &lt;code&gt;AccessDeniedExceptionHandler&lt;/code&gt;
处理，该处理程序仍保留主布局的菜单栏，但显示发生异常的信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;错误加载受保护的小部件时访问被拒绝的异常示例&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(value = &quot;dashboard&quot;, layout = MainLayout.class)
@Tag(Tag.DIV)
public class Dashboard extends Component {
    public Dashboard() {
        init();
    }

    private void init() {
        getWidgets().forEach(this::addWidget);
    }

    public void addWidget(Widget widget) {
        // Implementation omitted
    }

    private Stream&amp;lt;Widget&amp;gt; getWidgets() {
        // Implementation omitted, gets faulty state widget
        return Stream.of(new ProtectedWidget());
    }
}

public class ProtectedWidget extends Widget {
    public ProtectedWidget() {
        if (!AccessHandler.getInstance().isAuthenticated()) {
            throw new AccessDeniedException(&quot;Unauthorized widget access&quot;);
        }
        // Implementation omitted
    }
}

@Tag(Tag.DIV)
public abstract class Widget extends Component {
    public boolean isProtected() {
        // Implementation omitted
        return true;
    }
}

@Tag(Tag.DIV)
@ParentLayout(MainLayout.class)
public class AccessDeniedExceptionHandler extends Component
        implements HasErrorParameter&amp;lt;AccessDeniedException&amp;gt; {

    @Override
    public int setErrorParameter(BeforeEnterEvent event,
            ErrorParameter&amp;lt;AccessDeniedException&amp;gt; parameter) {
        getElement().setText(
            &quot;Tried to navigate to a view without correct access rights&quot;);
        return HttpServletResponse.SC_FORBIDDEN;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;异常目标可以定义 &lt;code&gt;ParentLayouts&lt;/code&gt;，并且在进行导航之前和之后发送的
&lt;code&gt;NavigationEvent&lt;/code&gt; 将与正常导航相同。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一个异常只能有一个异常处理程序（只允许扩展实例）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_重新路由到错误视图&quot; &gt;重新路由到错误视图&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以从 &lt;code&gt;BeforeEnterEvent&lt;/code&gt; 和 &lt;code&gt;BeforeLeaveEvent&lt;/code&gt;
重新路由到为异常注册的错误视图。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重新路由是通过使用其中一个重载来完成的，该重载用于只将异常类重新路由到目标或添加自定义错误消息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重新路由到错误视图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class AuthenticationHandler implements BeforeEnterObserver {
    @Override
    public void beforeEnter(BeforeEnterEvent event) {
        Class&amp;lt;?&amp;gt; target = event.getNavigationTarget();
        if (!currentUserMayEnter(target)) {
            event.rerouteToError(AccessDeniedException.class);
        }
    }

    private boolean currentUserMayEnter(Class&amp;lt;?&amp;gt; target) {
        // implementation omitted
        return false;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果重新路由方法捕获到异常，并且需要添加自定义消息，则可以使用
&lt;code&gt;rerouteToError(Exception, String)&lt;/code&gt; 方法设置自定义消息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;包含自定义消息的日志示例错误视图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Tag(Tag.DIV)
public class BlogPost extends Component implements HasUrlParameter&amp;lt;Long&amp;gt; {

    @Override
    public void setParameter(BeforeEvent event, Long parameter) {
        removeAll();

        Optional&amp;lt;BlogRecord&amp;gt; record = getRecord(parameter);

        if (!record.isPresent()) {
            event.rerouteToError(IllegalArgumentException.class,
                    getTranslation(&quot;blog.post.not.found&quot;,
                            event.getLocation().getPath()));
        } else {
            displayRecord(record.get());
        }
    }

    private void removeAll() {
        // NO-OP
    }

    private void displayRecord(BlogRecord record) {
        // NO-OP
    }

    public Optional&amp;lt;BlogRecord&amp;gt; getRecord(Long id) {
        // Implementation omitted
        return Optional.empty();
    }
}

@Tag(Tag.DIV)
public class FaultyBlogPostHandler extends Component
        implements HasErrorParameter&amp;lt;IllegalArgumentException&amp;gt; {

    @Override
    public int setErrorParameter(BeforeEnterEvent event,
            ErrorParameter&amp;lt;IllegalArgumentException&amp;gt; parameter) {
        Label message = new Label(parameter.getCustomMessage());
        getElement().appendChild(message.getElement());

        return HttpServletResponse.SC_NOT_FOUND;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_获取已注册的路由&quot; &gt;获取已注册的路由&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;要检索应用程序中所有已注册的路由，可以使用：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Router router = UI.getCurrent().getRouter();
List&amp;lt;RouteData&amp;gt; routes = router.getRoutes();&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;RouteData&lt;/code&gt; 对象包含有关已定义路由的所有相关信息，如 URL、参数和父布局。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_按父布局获取已注册路由&quot; &gt;按父布局获取已注册路由&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;要获取由父布局定义的所有路由，可以使用：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Router router = UI.getCurrent().getRouter();
Map&amp;lt;Class&amp;lt;? extends RouterLayout&amp;gt;, List&amp;lt;RouteData&amp;gt;&amp;gt; routesByParent = router.getRoutesByParent();
List&amp;lt;RouteData&amp;gt; myRoutes = routesByParent.get(MyParentLayout.class);&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_更新导航页面标题&quot; &gt;更新导航页面标题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;导航期间有两种更新页面标题的方法：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;使用 &lt;code&gt;@PageTitle&lt;/code&gt; 注解&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;实现 &lt;code&gt;HasDynamicTitle&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这两种方法是互斥的：在同一个类上同时使用这两种方法将在启动时导致运行时异常。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_使用_pagetitle_注解&quot; &gt;使用 &lt;code&gt;@PageTitle&lt;/code&gt; 注解&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;更新页面标题的最简单方法是在组件类上使用 &lt;code&gt;@PageTitle&lt;/code&gt; 注释。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@PageTitle(&quot;home&quot;)
class HomeView extends Div {

  HomeView(){
    setText(&quot;This is the home view&quot;);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;@PageTitle&lt;/code&gt; 注释仅从实际导航目标读取；不考虑其超类或其父视图。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_动态设置页面标题&quot; &gt;动态设置页面标题&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;实现 &lt;code&gt;HasDynamicTitle&lt;/code&gt; 接口使我们可以在运行时从 Java 更改标题：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Route(value = &quot;blog&quot;)
class BlogPost extends Component
        implements HasDynamicTitle, HasUrlParameter&amp;lt;Long&amp;gt; {
  private String title = &quot;&quot;;

  @Override
  public String getPageTitle() {
    return title;
  }

  @Override
  public void setParameter(BeforeEvent event,
        @OptionalParameter Long parameter) {
    if (parameter != null) {
      title = &quot;Blog Post #&quot; + parameter;
    } else {
      title = &quot;Blog Home&quot;;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_结束语&quot; &gt;结束语&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;路由这一块还不错，相比于 vertx
至少他的注解是很友好的（其实两者不是一性质哈哈），不过 html
组件构建方面有点麻烦，慢慢学习适应下咯只有，不过重点是
资料少！资料少！资料少！ 啊！不过我喜欢（逃。。。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[submail 短信接口以及 spring boot 集成]]></description><link>https://zyue.wiki/articles/2019/02/22/1550766482735.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/02/22/1550766482735.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_这篇文章能够带给你什么&quot;&gt;这篇文章能够带给你什么&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_submail_的使用&quot;&gt;submail 的使用&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_接口说明&quot;&gt;接口说明&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_创建模板&quot;&gt;创建模板&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_创建_appid&quot;&gt;创建 APPID&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试短信&quot;&gt;测试短信&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_发送一条信息&quot;&gt;发送一条信息&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_发送多条信息&quot;&gt;发送多条信息&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_在_spring_boot_中集成_submail&quot;&gt;在 spring-boot 中集成 submail&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_添加配置文件读取类&quot;&gt;添加配置文件读取类&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_创建组件&quot;&gt;创建组件&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用组件&quot;&gt;使用组件&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试&quot;&gt;测试&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_发送多条短信&quot;&gt;发送多条短信&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;短信接口这种东西，在现在的环境下基本 web
应用都会去准备的，毕竟移动端还是占据不少市场的，方便快捷与可控都是比起用户名密码方便很多。在对比多个短信提供商后，我最终选择了
&lt;a href=&quot;https://www.mysubmail.com/&quot;&gt;submail&lt;/a&gt;，主要是有以下几点原因：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;接口的灵活性，提供多种类型接口
，包括单/多条内容自定义短信，单/多条模板变量短信，模板控制接口，短信日志接口，余额接口。这些接口包含了所有场景，而对比阿里大鱼、腾讯云，每次都要申请还要上传一堆东西（什么域名证书啊，还必须一致），时间两小时内，然而
submail
不需要上传任何东西，写好后直接发起审核，并且白天几分钟就通过，刚才是晚上十二点，我发起审核，半小时不到就通过了，速度太赞。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;后台真的好看，比起阿里大鱼、腾讯云、106这些，真的好看了不是一点，提供了可视化图表，余额提醒这些，最赞提供了非常详细的错误日志，方便排错，&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;价格优惠，短信分为事务类和运营类，一般应用事务类就足够了。第一次体验
35 元就有 1K 条，后面购买 400 元 1W 条，比阿里大鱼，腾讯云便宜 50 元。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;操作十分简单，请求接口就完事儿（好像都是这样，，逃～）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_这篇文章能够带给你什么&quot; &gt;这篇文章能够带给你什么&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;submail 的使用&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用 &lt;code&gt;httpclient&lt;/code&gt; + &lt;code&gt;fastjson&lt;/code&gt; 工具发送一条信息&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;使用 &lt;code&gt;httpclient&lt;/code&gt; + &lt;code&gt;fastjson&lt;/code&gt; 工具发送多条信息&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;在 spring-boot 中集成 submail&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_submail_的使用&quot; &gt;submail 的使用&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一个网站的使用是非常简单的，无非就是官网
&lt;a href=&quot;https://www.mysubmail.com/&quot;&gt;submail&lt;/a&gt;
注册登录控制台，所以我直接从控制台这里开始，我姑且假设你已经购买了优惠包已经拥有了
1K 条的短信量。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_接口说明&quot; &gt;接口说明&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在开始之前，我们需要了解一下
&lt;a href=&quot;https://www.mysubmail.com/chs/documents/developer/YPWD84&quot;&gt;submail
的短信接口&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;message/send
接口，优点：方便、快速对接使用，&lt;strong&gt;免模板，可直接提交任意内容（需要符合短信发送规范，短信签名前置）&lt;/strong&gt;，缺点：并发效率不高，适用于并发小，内容变动或模板变动较多的场景（并发效率低指高于每秒1000的并发，低于这个并发需求请无视）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;message/xsend
接口，优点：高稳定性，&lt;strong&gt;低延迟，高并发&lt;/strong&gt;，适用验证码类要求低延迟，高请求效率的场景，缺点：接入时需要提前创建模板，并指定模板ID&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;message/multisend
接口，优点：接入方便，&lt;strong&gt;免模板，可直接提交任意内容（需要符合短信发送规范，短信签名前置），支持大批量群发&lt;/strong&gt;，缺点：效率低于multixsend，如果每小时的发送量低于百万级，请无视此缺点&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;message/multixsend
接口，优点：高效，&lt;strong&gt;高稳定性，低延迟，超高并发&lt;/strong&gt;，适用大批量群发场景（50个号码/API,100线程并发，每分钟可处理15万左右的群发需求）缺点：接入时需要提前创建模板，并指定模板ID&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;message/template 接口，可以获取、创建、编辑或删除您的短信模板。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;log/message 接口，
可以方便的查询详细的短信发送日志和状态记录，也还可以按短信模板、手机号码、发送状态、开始/结束日期等条件筛选日志的返回结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;balance/sms 接口，可以实时获取账户的短信余额。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_创建模板&quot; &gt;创建模板&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们选择使用 &lt;code&gt;2&lt;/code&gt; 和 &lt;code&gt;4&lt;/code&gt;
的接口，因为它具有高稳定性和高并发的特点。使用这两个接口的前提是我们需要创建短信模板&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/2/22/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190222005719.png&quot; alt=&quot;创建模板&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190222005948.png&quot; alt=&quot;创建&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建完成耐心等待审核即可&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_创建_appid&quot; &gt;创建 APPID&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在有了模板后，我们需要创建一个
APPID，简单的说就是密钥，用来进行认证短信发送的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;image::https://resources.echocow.cn/file/2019/2/22/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190222010204.png[创建
APPID]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_测试短信&quot; &gt;测试短信&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;完成上面两步就可以测试短信了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/2/22/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190222010429.png&quot; alt=&quot;测试短信&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后点击最下面的发送即可，这就是 submail
的使用方式，所测的更多功能需要大家自己多多探索，非常简单。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_发送一条信息&quot; &gt;发送一条信息&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 maven 或者 gradle 引入依赖 &lt;code&gt;fastjson&lt;/code&gt; 和 &lt;code&gt;httpclient&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt; &apos;fastjson&apos; : &apos;com.alibaba:fastjson:1.2.56&apos;,
`&apos;httpClient&apos; : &apos;org.apache.httpcomponents:httpclient:4.5.7&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们采用 &lt;strong&gt;明文的密匙验证模式&lt;/strong&gt;，因为他简单，具体参见
&lt;a href=&quot;https://www.mysubmail.com/chs/documents/developer/gbibb3&quot; class=&quot;bare&quot;&gt;https://www.mysubmail.com/chs/documents/developer/gbibb3&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建测试用例，具体请看注释&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Test
    public void messageOneTest() throws Exception {
        CloseableHttpClient httpclient = HttpClients.createDefault();
        // api 地址
        String url = &quot;https://api.mysubmail.com/message/xsend&quot;;
        // 需要使用 POST 请求
        HttpPost httpPost = new HttpPost(url);
        JSONObject jsonParam = new JSONObject();
        // 创建的 APPID
        jsonParam.put(&quot;appid&quot;, &quot;&quot;);
        // 创建的 APPID 的 APPKEY
        jsonParam.put(&quot;signature&quot;, &quot;ae54fe1399bafd5728e88ca29a7e22f8&quot;);
        // 你的模板编号，见 https://www.mysubmail.com/chs/documents/developer/MmSw12
        jsonParam.put(&quot;project&quot;, &quot;&quot;);
        // 接收人手机号
        jsonParam.put(&quot;to&quot;, &quot;&quot;);
        JSONObject vars = new JSONObject();
        // 模板变量
        vars.put(&quot;code&quot;, &quot;1234&quot;);
        vars.put(&quot;time&quot;, &quot;30&quot;);
        jsonParam.put(&quot;vars&quot;, vars.toJSONString());
        StringEntity entity = new StringEntity(jsonParam.toJSONString(), &quot;UTF-8&quot;);
        entity.setContentEncoding(&quot;UTF-8&quot;);
        entity.setContentType(&quot;application/json&quot;);
        httpPost.setEntity(entity);
        // 响应体
        HttpResponse resp = httpclient.execute(httpPost);
        String respContent = null;
        if (resp.getStatusLine().getStatusCode() == 200) {
            HttpEntity he = resp.getEntity();
            respContent = EntityUtils.toString(he, &quot;UTF-8&quot;);
        }
        System.out.println(respContent);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_发送多条信息&quot; &gt;发送多条信息&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 maven 或者 gradle 引入依赖 &lt;code&gt;fastjson&lt;/code&gt; 和 &lt;code&gt;httpclient&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt; &apos;fastjson&apos; : &apos;com.alibaba:fastjson:1.2.56&apos;,
`&apos;httpClient&apos; : &apos;org.apache.httpcomponents:httpclient:4.5.7&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建测试用例，重复地方不再加注释啦&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    @Test
    public void messageManyTest() throws Exception {
        CloseableHttpClient httpclient = HttpClients.createDefault();
        String url = &quot;https://api.mysubmail.com/message/multixsend&quot;;
        HttpPost httpPost = new HttpPost(url);
        JSONObject jsonParam = new JSONObject();
        jsonParam.put(&quot;appid&quot;, &quot;&quot;);
        jsonParam.put(&quot;signature&quot;, &quot;&quot;);
        jsonParam.put(&quot;project&quot;, &quot;&quot;);

        // 模板变量
        JSONObject vars = new JSONObject();
        vars.put(&quot;code&quot;, &quot;&quot;);
        vars.put(&quot;time&quot;, &quot;&quot;);

        // 第一个接受者
        JSONObject person1 = new JSONObject();
        person1.put(&quot;to&quot;, &quot;&quot;);
        // 此人的模板变量，因为我做测试，所以所有的人都用同一个变量即可
        person1.put(&quot;vars&quot;, vars);

        // 第二个接受者
        JSONObject person2 = new JSONObject();
        person2.put(&quot;to&quot;, &quot;&quot;);
        // 此人的模板变量，因为我做测试，所以所有的人都用同一个变量即可
        person2.put(&quot;vars&quot;, vars);

        // 接受者数组
        JSONArray multi = new JSONArray();
        multi.add(person1);
        multi.add(person2);

        jsonParam.put(&quot;multi&quot;, multi.toJSONString());

        // 答应出来瞅瞅
        System.out.println(jsonParam.toString());

        StringEntity entity = new StringEntity(jsonParam.toJSONString(), &quot;UTF-8&quot;);
        entity.setContentEncoding(&quot;UTF-8&quot;);
        entity.setContentType(&quot;application/json&quot;);
        httpPost.setEntity(entity);
        HttpResponse resp = httpclient.execute(httpPost);
        String respContent = null;
        if (resp.getStatusLine().getStatusCode() == 200) {
            HttpEntity he = resp.getEntity();
            respContent = EntityUtils.toString(he, &quot;UTF-8&quot;);
        }
        System.out.println(respContent);
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果响应报错，请参照
&lt;a href=&quot;https://www.mysubmail.com/chs/documents/developer/c8ujr&quot; class=&quot;bare&quot;&gt;https://www.mysubmail.com/chs/documents/developer/c8ujr&lt;/a&gt; 文档拍错&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_在_spring_boot_中集成_submail&quot; &gt;在 spring-boot 中集成 submail&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于在 spring boot 中，我们有几个要求 1. 把他作为一个组件来使用 2.
批量发送时，需要异步不阻塞 2. 使用配置文件进行配置 APPID 等信息&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_添加配置文件读取类&quot; &gt;添加配置文件读取类&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;/**
 * @author Echo
 * @version 1.0
 * @date 2019-02-22 01:26
 */
@Data
@Component
@ConfigurationProperties(prefix = &quot;application.message&quot;)
public class MessageConfig {
    /**
     * appid
     */
    private String appId;
    /**
     * appkey
     */
    private String appKey;
    /**
     * 注册模板
     */
    private String registerTemplate;
    /**
     * 作业提醒模板
     */
    private String homeworkTipTemplate;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;application.yml&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;application:
  message:
    app-id: 1111
    app-key: 111
    register-template: 111
    homework-tip-template:111&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_创建组件&quot; &gt;创建组件&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加一个 httpclient 的 bean&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    @Bean
    public HttpClient httpClient(){
        return HttpClients.createDefault();
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;组件创建&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;/**
 * @author Echo
 * @version 1.0
 * @date 2019-02-22 01:17
 */
@Component
@Slf4j
public class SubMailUtils {

    private final HttpClient httpClient;
    private final MessageConfig messageConfig;
    private static final String X_SEND = &quot;https://api.mysubmail.com/message/xsend&quot;;

    @Autowired
    public SubMailUtils(HttpClient httpClient, MessageConfig messageConfig) {
        this.httpClient = httpClient;
        this.messageConfig = messageConfig;
    }

    /**
     * 发送一条信息
     *
     * @param to   接收人
     * @param vars 模板变量
     */
    public boolean sendOneMessage(String to, String project, JSONObject vars) {
        HttpPost httpPost = new HttpPost(X_SEND);
        JSONObject jsonParam = new JSONObject();
        jsonParam.put(&quot;appid&quot;, messageConfig.getAppId());
        jsonParam.put(&quot;signature&quot;, messageConfig.getAppKey());
        jsonParam.put(&quot;project&quot;, project);
        jsonParam.put(&quot;to&quot;, to);
        jsonParam.put(&quot;vars&quot;, vars);
        StringEntity entity = new StringEntity(jsonParam.toJSONString(), &quot;UTF-8&quot;);
        entity.setContentEncoding(&quot;UTF-8&quot;);
        entity.setContentType(&quot;application/json&quot;);
        httpPost.setEntity(entity);
        HttpResponse resp;
        try {
            resp = httpClient.execute(httpPost);
            HttpEntity he = resp.getEntity();
            log.info(EntityUtils.toString(he, &quot;UTF-8&quot;));
            return resp.getStatusLine().getStatusCode() == 200;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_使用组件&quot; &gt;使用组件&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我注册的时候需要发送一条短信，那么我应该在 controller 里面这样写&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    @GetMapping(&quot;/mobile/{phone}&quot;)
    public HttpEntity&amp;lt;?&amp;gt; mobileCode(@PathVariable String phone) {
        // 当前手机号是否已被注册
        SysUser sysUser = new SysUser();
        sysUser.setPhone(phone);
        String result = sysUserService.existUser(sysUser);
        if (result != null) {
            throw new ResourceExistException(result);
        }
        // 生成 key 和 code
        String key = MOBILE + phone;
        String code = RandomStringUtils.randomNumeric(
                applicationProperties.getValidate().getMobileCodeMinLength(),
                applicationProperties.getValidate().getMobileCodeMaxLength());
        // 存放
        oauth2Service.saveValidateCode(key, code,
                applicationProperties.getValidate().getMobileCodeValidityPeriod(),
                TimeUnit.MINUTES);
        // 创建模板变量
        JSONObject vars = new JSONObject();
        vars.put(&quot;code&quot;, code);
        vars.put(&quot;time&quot;, applicationProperties.getValidate().getMobileCodeValidityPeriod());
        // 发送短信
        if (!subMailUtils.sendOneMessage(phone, messageConfig.getRegisterTemplate(), vars)) {
            throw new RuntimeException(&quot;message send failed!&quot;);
        }
        log.info(&quot;{} 短信验证码已经发送：{}&quot;, phone, code);
        return ResponseEntity.ok().build();
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_测试&quot; &gt;测试&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请求验证码&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/2/22/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190222015734.png&quot; alt=&quot;验证码&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/2/22/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190222005019.png&quot; alt=&quot;接受验证码&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/file/2019/2/22/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_crx_fhbjgbiflinjbdggehcddcbncdddomop_20190222020030.png&quot; alt=&quot;验证&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_发送多条短信&quot; &gt;发送多条短信&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;发送多条短信封装类似，不过多加一个异步`@Async`注解，再配置下异步线程池即可，就不再详述了，太困了。。。。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;到这里就算结束了，难度不大，但是很好玩儿，其实难点在于如何手动生成
oauth2 的 jwt
加密那里。。。其余地方都不是很难，后面写这个应用总结的时候再详述吧～短信接口感觉还是很贵的，学生党，玩玩儿就够啦哈哈。晚安啦&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[记录一下即将重构的项目 spring boot + restful]]></description><link>https://zyue.wiki/articles/2019/02/18/1550500427954.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/02/18/1550500427954.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_能带给你什么&quot;&gt;能带给你什么&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_技术选型&quot;&gt;技术选型&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_带来的烦恼&quot;&gt;带来的烦恼&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_mysql_多对多的无限查询问题&quot;&gt;mysql 多对多的无限查询问题&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_redis_序列化问题&quot;&gt;redis 序列化问题&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_公共部分抽取&quot;&gt;公共部分抽取&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_baseentity&quot;&gt;BaseEntity&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_baserepository&quot;&gt;BaseRepository&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_baseservice&quot;&gt;BaseService&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_baseserviceimpl&quot;&gt;BaseServiceImpl&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_basecontroller&quot;&gt;BaseController&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_为什么不用_spring_data_rest&quot;&gt;为什么不用 spring data rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_感受&quot;&gt;感受&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;真的很心累，说实话自己真的不想重构，因为自己真的很喜欢 spring data
jpa，他的简洁方便再加上 jdk 1.8
的特性，真的不忍心将他从我项目中剥离，但是他的多对多问题真的给我带来了太多的烦恼，自己能力不足以解决这些问题，一路下来，磕磕碰碰，最终却还是不得不放弃它，又爱又恨。这篇博客，记录一下到目前为止自己不太满意的的一个项目吧，他在刚才已经被mybatis完全替换，为他保留一个分支。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;项目地址：https://github.com/lizhongyue248/xiaoming[XIAOMING]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;分支地址：https://github.com/lizhongyue248/xiaoming/tree/master[XIAOMING-JPA]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_能带给你什么&quot; &gt;能带给你什么&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;spring data jpa 无限查询的一些解决办法&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring data redis 新的配置方式&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring boot restful 公共部分抽取&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_技术选型&quot; &gt;技术选型&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;核心框架：spring boot&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;持久层：spring data jpa&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;数据库：mysql&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;安全：spring security oauth2&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;加密：jwt&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;缓存：redis&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_带来的烦恼&quot; &gt;带来的烦恼&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;mysql 多对多的无限查询问题&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;redis 序列化问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_mysql_多对多的无限查询问题&quot; &gt;mysql 多对多的无限查询问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;就像所描述那样，&lt;code&gt;sys_user&lt;/code&gt; 表里面有 &lt;code&gt;roles&lt;/code&gt; 字段存放所有权限，
&lt;code&gt;sys_role&lt;/code&gt; 里面有 &lt;code&gt;users&lt;/code&gt; 字段。如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;public class SysUser extends BaseEntity implements UserDetails {

    // ...

    /**
     * 当前用户的权限
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JsonIgnoreProperties(value = &quot;users&quot;)
    @JoinTable(name = &quot;sys_user_role&quot;,
            joinColumns = {@JoinColumn(name = &quot;user_id&quot;, nullable = false)},
            inverseJoinColumns = {@JoinColumn(name = &quot;role_id&quot;, nullable = false)})
    private List&amp;lt;SysRole&amp;gt; roles;

    // ...
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;public class SysRole extends BaseEntity {

    // ...

    /**
     * 当前角色的菜单
     */
    @JsonIgnoreProperties(value = &quot;roles&quot;)
    @ManyToMany(cascade = CascadeType.MERGE, fetch = FetchType.EAGER)
    @JoinTable(name = &quot;sys_permission_role&quot;, joinColumns = @JoinColumn(name = &quot;role_id&quot;),
            inverseJoinColumns = @JoinColumn(name = &quot;permission_id&quot;))
    private List&amp;lt;SysPermission&amp;gt; permissions = new ArrayList&amp;lt;&amp;gt;();

    /**
     * 当前角色对应的用户
     * 双向映射造成数据重复查询死循环问题
     */
    @ManyToMany(mappedBy = &quot;roles&quot;)
    private List&amp;lt;SysUser&amp;gt; users = new ArrayList&amp;lt;&amp;gt;();

}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;public class SysPermission extends BaseEntity {
    // ...

    /**
     * 菜单角色
     * 双向映射造成数据重复查询死循环问题
     */
    @ManyToMany(mappedBy = &quot;permissions&quot;)
    private List&amp;lt;SysRole&amp;gt; roles = new ArrayList&amp;lt;&amp;gt;();
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;存放拥有当前角色的所有用户，然后带来的结果是，他们两一直互相无限查询，打印无数
sql 语句最后&lt;strong&gt;堆栈溢出&lt;/strong&gt;。尝试过很多解决办法，大概有如下几种： -
&lt;code&gt;@JsonIgnore&lt;/code&gt;
注解，但是在数据库查询出来的时候会忽略掉此字段，所以不可行。 -
&lt;code&gt;@JsonIgnoreProperties&lt;/code&gt; 注解，奇怪的是时而有效时而无效。 -
&lt;code&gt;@Proxy(lazy = false)&lt;/code&gt; 注解，无效 - &lt;code&gt;fetch = FetchType.EAGER&lt;/code&gt;
属性，需要在配置文件中添加如下配置才有小，不然要产生一个 什么 bag 异常&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;jpa:
  properties:
    hibernate:
      enable_lazy_load_no_trans: true&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是会带来`N+1` 问题，查询效率有所降低，不过小项目无所谓=0= -
&lt;code&gt;@ToString(exclude = {&quot;users&quot;, &quot;permissions&quot;})&lt;/code&gt; 同时需要生成的 tostring
方法忽略掉这些字段，不然在使用时会报
&lt;code&gt;LazyInitializationException …​ no session&lt;/code&gt; 错误。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_redis_序列化问题&quot; &gt;redis 序列化问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我缓存选择的是 redis 缓存，而在将他存入的时候遇到了一个 spring data jpa
分页查询无法序列化的问题，因为他没有默认的无参构造，因而我的分页查询无法使用
redis 缓存。为啥不自己写一个？懒=-=&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;redis 的 &lt;code&gt;CacheManager&lt;/code&gt; 网上搜到的方式大多不管用，我的方式如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    @Bean
    @Override
    public CacheManager cacheManager() {
        // 配置在这里配置
        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofHours(12)) // 过期时间
                .prefixKeysWith(applicationProperties.getName()) // 缓存前缀
                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(keySerializer())) // 序列化键
                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(valueSerializer())) // 序列化值
                .disableCachingNullValues();
        // 创建缓存管理器
        return RedisCacheManager
                .builder(RedisCacheWriter.nonLockingRedisCacheWriter(connectionFactory))
                .cacheDefaults(redisCacheConfiguration)
                .transactionAware()
                .build();
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己也写了 &lt;code&gt;gson&lt;/code&gt; 和 &lt;code&gt;FastJson&lt;/code&gt; 的序列化，有兴趣的可以看看 github 项目的
&lt;code&gt;RedisConfig&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;然而真正让我放弃 spring data jpa
的原因，其实是因为在我前几天修改后，尝试查询，第一次查询成功并存入redis，然后再次查询他就报序列化错误，我尝试解决了三天，实在找不到解决的办法了，也在
&lt;a href=&quot;https://stackoverflow.com/questions/54722546/sprng-boot-jpa-redis-lazyinitializationexception&quot;&gt;stackoverflow&lt;/a&gt;
发起提问但是依旧没有办法解决，所以只有完全放弃 spring data jpa 换成
mybatis试试了。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_公共部分抽取&quot; &gt;公共部分抽取&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于一个 restful 风格的项目，他的 controller、service、repository
层都是有公共的部分的，如果不抽取，需要写很多重复的代码，作为一个合(zhuang)格(bi)的
JAVA
程序员，肯定是不容许他的存在，更何况还会带来一处修改处处修改的尴尬，所以对他进行了公共部分抽取。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_baseentity&quot; &gt;BaseEntity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;提取实体类的公共字段&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;package cn.echocow.xiaoming.base;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.persistence.*;
import java.io.Serializable;
import java.time.LocalDateTime;

/**
 * 实体类基类
 *
 * @author Echo
 * @version 1.0
 * @date 2019-02-02 22:03
 */
@Getter
@Setter
@MappedSuperclass // 重点
@EntityListeners(AuditingEntityListener.class) // 自动填充创建、修改时间和创建、修改用户
public abstract class BaseEntity implements Serializable {

    /**
     * id 主键
     */
    @Id
    @Column(name = &quot;id&quot;, nullable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 排序
     */
    @OrderColumn(name = &quot;sort&quot;)
    private Integer sort;

    /**
     * 创建时间
     */
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @CreatedDate
    @Column(name = &quot;create_time&quot;, nullable = false, columnDefinition = &quot;datetime not null default now() comment &apos;创建时间&apos;&quot;)
    private LocalDateTime createTime;

    /**
     * 创建用户
     */
    @CreatedBy
    @Column(name = &quot;create_user&quot;)
    private String createUser;

    /**
     * 修改时间
     */
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @LastModifiedDate
    @Column(name = &quot;modify_time&quot;, nullable = false, columnDefinition = &quot;datetime not null default now() comment &apos;修改时间&apos;&quot;)
    private LocalDateTime modifyTime;

    /**
     * 修改用户
     */
    @LastModifiedBy
    @Column(name = &quot;modify_user&quot;)
    private String modifyUser;

    /**
     * 备注
     */
    @Column(name = &quot;remark&quot;)
    private String remark;

}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_baserepository&quot; &gt;BaseRepository&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;公共的仓库基类，一般适用于对公共字段的条件查询等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;package cn.echocow.xiaoming.base;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.NoRepositoryBean;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

import java.io.Serializable;
import java.util.List;

/**
 * 资源仓库基类
 *
 * @author Echo
 * @version 1.0
 * @date 2019-02-02 20:25
 */
@NoRepositoryBean
public interface BaseRepository&amp;lt;T, ID&amp;gt; extends JpaRepository&amp;lt;T, ID&amp;gt;, JpaSpecificationExecutor&amp;lt;T&amp;gt; {

    /**
     * 批量删除
     *
     * @param ids ids
     */
    @Modifying
    @Transactional(rollbackFor = Exception.class)
    @Query(&quot;delete from #{#entityName} e where e.id in (:ids)&quot;)
    void deleteBatch(@Param(&quot;ids&quot;)List&amp;lt;Long&amp;gt; ids);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_baseservice&quot; &gt;BaseService&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;service 公共接口&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;package cn.echocow.xiaoming.base;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.io.Serializable;
import java.util.List;

/**
 * 服务接口基类
 *
 * @author Echo
 * @version 1.0
 * @date 2019-02-02 20:25
 */
public interface BaseService&amp;lt;T extends BaseEntity, ID extends Serializable, R extends BaseRepository&amp;lt;T, ID&amp;gt;&amp;gt; {

    /**
     * 通过 id 更新实体
     *
     * @param id     id
     * @param entity 实体
     * @return 更新后的实体
     */
    T update(ID id, T entity);

    /**
     * 保存实体
     *
     * @param entity 实体对象
     * @return 保存后的实体
     */
    T save(T entity);

    /**
     * 通过 id 查询
     *
     * @param id id
     * @return 实体
     */
    T findById(ID id);

    /**
     * 通过 id 删除
     *
     * @param id id
     */
    void deleteById(ID id);

    /**
     * 判断是否存在指定 id 对象
     *
     * @param id id
     * @return 结果
     */
    boolean exists(ID id);

    /**
     * 查询所有
     *
     * @return 集合
     */
    List&amp;lt;T&amp;gt; findAll();

    /**
     * 分页查询
     *
     * @param pageable 分页
     * @return 结果
     */
    Page&amp;lt;T&amp;gt; findAll(Pageable pageable);

    /**
     * 批量删除
     *
     * @param ids id 集合
     */
    void deleteBatch(List&amp;lt;Long&amp;gt; ids);
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_baseserviceimpl&quot; &gt;BaseServiceImpl&lt;/h3&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;package cn.echocow.xiaoming.base.impl;

import cn.echocow.xiaoming.utils.CustomBeanUtils;
import cn.echocow.xiaoming.base.BaseEntity;
import cn.echocow.xiaoming.base.BaseRepository;
import cn.echocow.xiaoming.base.BaseService;
import cn.echocow.xiaoming.exception.ResourceNoFoundException;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.util.Assert;

import java.io.Serializable;
import java.util.List;

/**
 * 服务实现基类
 *
 * @author Echo
 * @version 1.0
 * @date 2019-02-02 20:26
 */
@CacheConfig(cacheNames = {&quot;baseService&quot;}, keyGenerator = &quot;cacheKeyGenerator&quot;)
public abstract class BaseServiceImpl&amp;lt;T extends BaseEntity, ID extends Serializable, R extends BaseRepository&amp;lt;T, ID&amp;gt;&amp;gt; implements BaseService&amp;lt;T, ID, R&amp;gt; {

    @Autowired
    protected R baseRepository;

    @Override
    @CachePut
    public T update(ID id, T entity) {
        T exist = baseRepository.findById(id).orElseThrow(() -&amp;gt;
                new ResourceNoFoundException(String.format(&quot;the resource by id %s not found!&quot;, id)));
        BeanUtils.copyProperties(entity, exist, CustomBeanUtils.getNullPropertyNames(entity));
        return exist;
    }

    @Override
    @CacheEvict
    public T save(T entity) {
        return baseRepository.save(entity);
    }

    @Override
    @Cacheable
    public T findById(ID id) {
        return baseRepository.findById(id).orElseThrow(() -&amp;gt;
                new ResourceNoFoundException(String.format(&quot;the resource by id %s not found!&quot;, id))
        );
    }

    @Override
    @CacheEvict(allEntries = true)
    public void deleteById(ID id) {
        if (!baseRepository.existsById(id)) {
            throw new ResourceNoFoundException(String.format(&quot;the resource by id %s not found!&quot;, id));
        }
        baseRepository.deleteById(id);
    }

    @Override
    @Cacheable
    public boolean exists(ID id) {
        return baseRepository.existsById(id);
    }

    @Override
    @Cacheable
    public List&amp;lt;T&amp;gt; findAll() {
        return baseRepository.findAll();
    }

    @Override
    public Page&amp;lt;T&amp;gt; findAll(Pageable pageable) {
        return baseRepository.findAll(pageable);
    }

    @Override
    @CacheEvict(allEntries = true)
    public void deleteBatch(List&amp;lt;Long&amp;gt; ids) {
        Assert.notNull(ids, &quot;ids can not is null!&quot;);
        baseRepository.deleteBatch(ids);
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_basecontroller&quot; &gt;BaseController&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最重要的，restful 风格基类 controller&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;RestResource 是对单个资源的封装，使用 spring boot hateoas 生成对应的
hateoas&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;RestResources 是对多个资源集合的封装，使用 spring boot hateoas
生成对应的 hateoas&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;package cn.echocow.xiaoming.base;

import cn.echocow.xiaoming.exception.InvalidRequestException;
import cn.echocow.xiaoming.resource.ApplicationResource;
import cn.echocow.xiaoming.resource.PageSimple;
import cn.echocow.xiaoming.resource.RestResource;
import cn.echocow.xiaoming.resource.RestResources;
import cn.echocow.xiaoming.resource.annotation.PageResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.hateoas.Resources;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author Echo
 * @version 1.0
 * @date 2019-02-03 21:43
 */
public abstract class BaseController&amp;lt;T extends BaseEntity, S extends BaseService&amp;gt; {

    @Autowired
    private S baseService;

    /**
     * 获取控制器，通过反射添加 rest hateoas
     *
     * @return 控制器
     */
    public abstract Class getControllerClass();

    /**
     * 保存一个资源
     * POST    /{entity}
     *
     * @param entity        实体
     * @param bindingResult 检验结果
     * @return http 响应
     */
    @PostMapping
    public HttpEntity&amp;lt;?&amp;gt; saveResource(@Valid @RequestBody T entity, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            throw new InvalidRequestException(&quot;Invalid parameter&quot;, bindingResult);
        }
        entity.setId(null);
        return new ResponseEntity&amp;lt;&amp;gt;(new RestResource&amp;lt;&amp;gt;(baseService.save(entity), getControllerClass()), HttpStatus.CREATED);
    }

    /**
     * 删除指定 id 的资源
     * DELETE   /sysUsers/{id}
     *
     * @param id 资源 id
     * @return http 响应
     */
    @DeleteMapping(&quot;/{id}&quot;)
    public HttpEntity&amp;lt;?&amp;gt; deleteResource(@PathVariable Long id) {
        baseService.deleteById(id);
        return new ResponseEntity&amp;lt;&amp;gt;(new ApplicationResource(), HttpStatus.NO_CONTENT);
    }

    /**
     * 更新一个资源，提供当前资源的所有信息
     * PUT    /{entity}/{id}
     *
     * @param id            资源 id
     * @param entity        更新后的资源
     * @param bindingResult 参数校验
     * @return http 响应
     */
    @PutMapping(&quot;/{id}&quot;)
    public HttpEntity&amp;lt;?&amp;gt; putResource(@PathVariable Long id, @Valid @RequestBody T entity, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            throw new InvalidRequestException(&quot;Invalid parameter&quot;, bindingResult);
        }
        return patchResource(id, entity);
    }

    /**
     * 更新一个资源，提供当前资源的部分信息
     * PATCH    /{entity}/{id}
     *
     * @param id     资源 id
     * @param entity 更新后的资源
     * @return http 响应
     */
    @PatchMapping(&quot;/{id}&quot;)
    public HttpEntity&amp;lt;?&amp;gt; patchResource(@PathVariable Long id, @RequestBody T entity) {
        return ResponseEntity.ok(new RestResource&amp;lt;&amp;gt;(baseService.update(id, entity), getControllerClass()));
    }

    /**
     * 获取指定 id 的资源
     * Get    /{entity}/{id}
     *
     * @param id 资源 id
     * @return http 响应
     */
    @GetMapping(&quot;/{id}&quot;)
    public HttpEntity&amp;lt;?&amp;gt; getResource(@PathVariable Long id) {
        return ResponseEntity.ok(new RestResource&amp;lt;&amp;gt;(baseService.findById(id), getControllerClass()));
    }

    /**
     * 获取所有资源/分页，可以直接使用 Pageable 来接受，忘记改了=-=
     *
     * @param page 页码
     * @param size 大小
     * @return http 响应
     */
    @GetMapping
    @PageResult
    public HttpEntity&amp;lt;?&amp;gt; getAllOrPagesResources(
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer size) {
        if (page == null || size == null || page &amp;lt;= 0 || size &amp;lt;= 0) {
            List&amp;lt;T&amp;gt; all = baseService.findAll();
            return ResponseEntity.ok(new Resources&amp;lt;&amp;gt;(all.stream()
                    .map(entity -&amp;gt; new RestResource&amp;lt;&amp;gt;(entity, getControllerClass()))
                    .collect(Collectors.toList())));
        }
        Page&amp;lt;T&amp;gt; result = baseService.findAll(PageRequest.of(--page, size));
        RestResources&amp;lt;RestResource&amp;gt; resources = new RestResources&amp;lt;&amp;gt;(result.stream()
                .map(entity -&amp;gt; new RestResource&amp;lt;&amp;gt;(entity, getControllerClass()))
                .collect(Collectors.toList()));
        resources.setPage(new PageSimple(result.getSize(), result.getNumber() + 1, result.getTotalElements(),
                result.getTotalPages(), result.hasPrevious(), result.hasNext()));
        return ResponseEntity.ok(resources);
    }

}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后基础的 rest 风格就完成了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_为什么不用_spring_data_rest&quot; &gt;为什么不用 spring data rest&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他不能用缓存！！！他不能用缓存！！！他不能用缓存！！！我找了一段时间的资料，都没找到，难受。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为了加 hateoas 真的累死我了，到后面还不满意，分页的 hateoas 我用 aop
进行的单独封装，通过添加注解进行拦截再次封装，不过尝试了很多很多办法，最后只能使用字符串拼接。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;package cn.echocow.xiaoming.aop;

import cn.echocow.xiaoming.resource.RestResources;
import cn.echocow.xiaoming.resource.annotation.PageResult;
import cn.echocow.xiaoming.resource.PageSimple;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.mvc.ControllerLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

/**
 * 对于分页的集合，进行添加分页信息
 *
 * @author Echo
 * @version 1.0
 * @date 2019-02-02 15:55
 */
@Component
@Aspect
public class RestResultAop {

    @Pointcut(&quot;@annotation(cn.echocow.xiaoming.resource.annotation.PageResult)&quot;)
    public void pageResult() { }

    @AfterReturning(value = &quot;pageResult()&quot;, returning = &quot;result&quot;)
    public void doAfterReturningAdvice1(JoinPoint joinPoint, Object result) {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        PageResult annotation = signature.getMethod().getAnnotation(PageResult.class);
        if (annotation == null) {
            return;
        }
        try {
            ResponseEntity res = (ResponseEntity) result;
            if (!res.hasBody()) {
                return;
            }
            if (!(res.getBody() instanceof RestResources)) {
                return;
            }
            RestResources resources = (RestResources) res.getBody();
            if (resources == null) {
                return;
            }
            PageSimple pageInfo = resources.getPage();
            if (pageInfo == null) {
                return;
            }
            Integer size = pageInfo.getSize();
            Integer page = pageInfo.getNumber();
            // 尝试多次，只能手动封装
            String uri = ControllerLinkBuilder.linkTo(joinPoint.getTarget().getClass()).toString();
            resources.add(new Link(uri + &quot;?page=&quot; + page + &quot;&amp;amp;size=&quot; + size).withSelfRel());
            if (pageInfo.hasPrevioud()) {
                resources.add(new Link(uri + &quot;?page=&quot; + (page - 1) + &quot;&amp;amp;size=&quot; + size).withRel(Link.REL_PREVIOUS));
            }
            if (pageInfo.hasNext()) {
                resources.add(new Link(uri + &quot;?page=&quot; + (page + 1) + &quot;&amp;amp;size=&quot; + size).withRel(Link.REL_NEXT));
            }
            resources.add(new Link(uri + &quot;?page=&quot; + 1 + &quot;&amp;amp;size=&quot; + size).withRel(Link.REL_FIRST));
            resources.add(new Link(uri + &quot;?page=&quot; + pageInfo.getTotalPages() + &quot;&amp;amp;size=&quot; + size).withRel(Link.REL_LAST));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_感受&quot; &gt;感受&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;因为前面说的一个https://stackoverflow.com/questions/54722546/sprng-boot-jpa-redis-lazyinitializationexception[redis
的问题]不得不放弃，自己还是太菜了。这是最后一个项目，完成了他，自己就要开始考研道路，估计基本不会再去写项目了。不想留下遗憾，他的结构也是我比较满意的，不过是实话，不太喜欢分层架构，跟喜欢一捅到底的架构，不过也希望这个项目不会让自己失望，加油！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[vue 加 Material Design 等于 vuetify]]></description><link>https://zyue.wiki/articles/2019/01/27/1548583400911.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/01/27/1548583400911.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_絮絮叨叨&quot;&gt;絮絮叨叨&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_material_design&quot;&gt;Material Design&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_搭建一个_vuetify_环境&quot;&gt;搭建一个 vuetify 环境&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_开始&quot;&gt;开始&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_创建&quot;&gt;创建&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_引入&quot;&gt;引入&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_运行&quot;&gt;运行&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_其它&quot;&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_回看&quot;&gt;回看&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近一段时间，莫名从一个后端码农走了前端，越来越多的时间接触前端，从一个只会
html + css 布局的小菜鸟到一些易上手的库，再到现在接触最多的
vue，逐渐发现前端的世界广阔无比，比起后端有过之而无不及。自己定义自己希望成为一个全栈，但是后来渐渐发现自己理解的全栈似乎并不是前后端贯通，而似乎是一种渴求新知识的精神，或许自己也需要仔细思考一下这个问题。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_絮絮叨叨&quot; &gt;絮絮叨叨&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我本身不是一个安分的人，所以在使用 vue
中一直寻找着一个易用组件库，能够满足我需求的同时，有着良好的交互，注意这里说的是交互，而不是简单的样式等等。自己以前封装过一点，但是代码可读性实在太差，自己写起来也费时费力，并且有基础不扎实等诸多原因，最后自己没有完成。然而寻找的路程却一直没有放弃，这段时间我用过效果好的两套组件库分别是
&lt;a href=&quot;http://element-cn.eleme.io/#/zh-CN&quot;&gt;element ui&lt;/a&gt; 和
&lt;a href=&quot;https://www.iviewui.com/&quot;&gt;iview&lt;/a&gt;，相比起来我更加喜欢 iview，在他发布 3.0
以后也一直关注，相比起 element
他拥有更多的灵活性，`render 函数`也让他的可定制性提高了很多。不过前段时间找组件的时候无意中发现一款国外的组件库
——
&lt;a href=&quot;https://vuetifyjs.com/zh-Hans/&quot;&gt;vuetify&lt;/a&gt;，简直大爱，特别是他的交互，真的让我身心舒畅。在视觉上的设计的确出类拔萃，而且组件的多样化也让我十分激动，很多东西我需要在前面两个框架中使用都是需要自己自定义组件一部分的，可是
vuetify 为我们准备好了很多，举几个例子：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;表格的可编辑&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;输入框组交互/动画&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;时间轴&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;大量的数据嵌套/目录树&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这些在前两个框架中都需要耗费时间去自定义的，然而在 vuetify
却轻松无比。组件库的存在不正就是解决开发时间和效率的问题吗？在这前提下有着更好的交互和视觉，为什么不选择呢？有个不算缺点的缺点就是中文文档实在太少，然而这何尝不是一种挑战。而且
vuetify 诞生至今不过一年却在
&lt;a href=&quot;https://github.com/vuetifyjs/vuetify&quot;&gt;github&lt;/a&gt; 上面拥有了 16K
star，社区也十分活跃，更新也很积极，可以看看他的版本记录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/d1e997304f1c497faaa2b332f3ea6b52_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_material_design&quot; &gt;Material Design&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;而且更为重要的一点，就是 &lt;code&gt;vuetify&lt;/code&gt; 完全根据
&lt;a href=&quot;https://material.io/&quot;&gt;原质化设计 Material Design&lt;/a&gt;
规范开发。每个组件都是手工制作的。Material Design 其实 14
年就已经提出，我也是上个月才知晓，后悔当初不好好学习=-=&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他&lt;strong&gt;强调了物理定律的扁平化设计&lt;/strong&gt;，将设计的重心从仅仅关注表面转移到了人与设计之间的交互。而这种风格正中我下怀，真的让我爱不释手，国外高使用频率的
app 大多都采用了这种规范进设计，比起国内的 ios 风格个人更加愿意花时间在
MD 上面，而且 MD
是官方的设计规范，大方向上并不会错的。说实话真正让我喜欢 md 的来源于
&lt;a href=&quot;http://v.youku.com/v_show/id_XNzMxNzUyNzQ0&quot;&gt;谷歌安卓Material主题 Google
Material design&lt;/a&gt;, 看了后真心喜欢。虽然自己还不能够实际完全符合 Material
Design 的 ui 界面，但是自己也在不断努力与尝试。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;而 &lt;code&gt;vue + Material Design&lt;/code&gt; 诞生了 &lt;code&gt;vuetify&lt;/code&gt;，同时预计今年二月会迎来 1.5
release，现在已经发布了 1.5 测试的第三个版本,2.0
也在积极开发中。今天他就是我们的主角。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_搭建一个_vuetify_环境&quot; &gt;搭建一个 vuetify 环境&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们将要使用 vue-cli 3 进行搭建，并且最重要的，使用他的 ui
界面进行管理我们的 vuetify 应用&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你需要安装 &lt;code&gt;npm&lt;/code&gt; 或者 &lt;code&gt;yarn&lt;/code&gt; ，通过这两个工具安装 &lt;code&gt;vue cli 3&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;~$ yarn global add @vue/cli
// 或者
~$ npm install @vue/cli -g&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_开始&quot; &gt;开始&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;开启 &lt;code&gt;vue cli 3&lt;/code&gt; 的 &lt;code&gt;web&lt;/code&gt; 管理界面&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;~$ vue ui&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后他会自动打开浏览器并跳转到 &lt;code&gt;&lt;a href=&quot;http://localhost:8000/project/select&quot; class=&quot;bare&quot;&gt;http://localhost:8000/project/select&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/4614573e36d041bd993d4c7b8c9bd910_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_创建&quot; &gt;创建&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们创建一个 &lt;code&gt;vue cli 3&lt;/code&gt; 项目&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/9897b78b9e6e4527a6c3da0fe7ebf383_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/71097e29c15b410e80d5d8bd38b0087b_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/c28678c5a7c44475a19a4da747b474f5_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/100948748d67499a95b9fa7f9280ad2e_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/533ff1da1bb94b7cbcad8bb349713cbb_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;耐心等待&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/d419d3f3e724462a8fcb126a87e485c3_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_引入&quot; &gt;引入&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;初始化完成项目后&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/a2e0e9965c824b858da9cd125907b740_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加插件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/73047d23ebd8406e9690ce9bba7f9b1b_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/35eaf42145ae477ca096811b7db13de4_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/0f627f779c9245fe94e12ff125b2a75c_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/78e9cf5ba3c04c339b28123570aabdeb_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/38b9aa7c92ab4a54b146afaa1d451986_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_运行&quot; &gt;运行&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/eb9b78ad7eec4b1c965422392a047d24_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行查看下，在创建项目的时候，他自动帮我们用选择的构建工具下载好了依赖，直接运行借口&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;npm run dev
// 或者
yarn serve&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过如果你使用了
eslint，那么运行会直接报错的，因为插件修改后的文件格式不符合默认的 elint
规范的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/19bea1ef09f04874b954fe2d62126c52_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改后运行&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/dcd7afa96c7c4b21965b8163c5b65220_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;访问测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/c3ae74f70aa641a2b1922056fa0c8b1b_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_其它&quot; &gt;其它&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;全局 stylus 引入&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;发现使用 &lt;code&gt;loaderOptions&lt;/code&gt; 方式可以引入&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;// vue.config.js
css: {
  loaderOptions: {
  stylus: {
    import:  path.resolve(__dirname, &apos;./src/styles/index.styl&apos;)
  }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是查看网页代码会发现引入了很多次，所以我换了一种方式。在 &lt;code&gt;App.vue&lt;/code&gt;
中引入&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/f0c95c10ee1846faaa4cfb10cba9486c_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li &gt;
&lt;p&gt;vuetify 默认给页面加了滚动条&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Vuetify默认开启了html滚动条，页面即使没有超出屏幕高度，他都是拥有滚动条的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/2b5868f1d9234bc094030e4b8ca9b722_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;App.vue&lt;/code&gt; 中覆盖样式即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/e656015eb62646a79c197e89bb1c899a_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_回看&quot; &gt;回看&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;总的来说搭建非常简单，使用也是及其简单，可能因为英语原因造成一点困难不过不碍事。上个月就想用了，不过项目已经上了
element UI 且时间紧，所以没办法，后面是用了一段时间的
iview，在这次的另外一个项目中果断换了
vuetify，希望谈能够带给我惊喜。也希望通过它提高一下自己网页设计。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[新年新气象，博客迁移，迎来 solo！]]></description><link>https://zyue.wiki/articles/2019/01/01/1546349681570.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/01/01/1546349681570.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_服务器部署&quot;&gt;服务器部署&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_hexo_迁移&quot;&gt;hexo 迁移&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_nginx_配置&quot;&gt;nginx 配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_问题&quot;&gt;问题&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_从_hexo_迁移过来的数据时不时包_nginx_502_错误&quot;&gt;从 hexo 迁移过来的数据时不时包 nginx 502 错误，&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_页面渲染问题&quot;&gt;页面渲染问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;好久没有更新博客啦！～一部分原因是期末了作业多事情多，还有一部分是
hexo-admin
真的让人头疼，访问速度感人。自己选了很多博客系统，选择的博客有那么点要求&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;好看！必须的。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;我能够自定义！&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;能够方便管理的（自从用过hexo后觉得这很重要，毕竟我不是部署在 github
上而是自己的服务器）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;能够支持自己的 七牛云 更好啦！&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;必须支持 markdown&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;上手简单&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己找了好多博客，wordpress、typecho 这些动态博客，还有 hexo
静态博客，都试过了，但是都没有满足上面几个条件的，特别是由于只会java和前端的缘故（逃，最后今年九月发现了一款基于
java 的一款小而美的博客系统
&lt;a href=&quot;https://github.com/b3log/solo&quot;&gt;solo&lt;/a&gt;，都要动手换了，但是发现没有太喜欢的皮肤，所以在https://github.com/b3log/solo/issues/12449[皮肤推荐]中推荐了一款
&lt;a href=&quot;https://github.com/ahonn/hexo-theme-even&quot;&gt;hexo-even&lt;/a&gt;，当初就是因为这款主题用上了
hexo，宁愿受点苦都要用这个主题(可见一款好的皮肤真的会吸引人的哈哈哈)，原本打算等
V姐 出了后自己就立刻换的（自己前端真的渣），但是在这次 12 月发布的
&lt;a href=&quot;https://github.com/b3log/solo/releases/tag/v2.9.7&quot;&gt;2.9.7&lt;/a&gt;
版本上，加了一个新的皮肤
Jane！简直太棒了，在放假作业完成后，立刻花时间把他安排到了我的服务器上，不论前台还是后台，速度都是很给力！不过中间也大大小小的遇到些问题，记录下～～&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;服务器配置：centos7.2 + jdk8 + nginx 使用端口：8765
访问地址：https://echocow.cn&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_服务器部署&quot; &gt;服务器部署&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;使用 scp 复制 war 包到服务器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt; scp solo-2.9.7.war  root@**.**.***.**:/root/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li &gt;
&lt;p&gt;输入密码复制，然后创建 solo 文件夹并解压 war 包&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;mkdir solo
mv solo-2.9.7.war solo
cd solo/
jar -xvf solo-2.9.7.war&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;3&quot;&gt;
&lt;li &gt;
&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;cd WEB-INF/classes/
vim latke.properties

#### Server ####
# Browser visit protocol
serverScheme=https
# Browser visit domain name 最终要访问的路径
serverHost=echocow.cn
# Browser visit port, 80 as usual, THIS IS NOT SERVER LISTEN PORT! 我使用 https ，所以指定 443
serverPort=443


vim local.properties
# 添加自己数据库的密码，我使用mysql数据库&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;4&quot;&gt;
&lt;li &gt;
&lt;p&gt;登录数据库创建 solo 库&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; create database solo;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;5&quot;&gt;
&lt;li &gt;
&lt;p&gt;开启后台服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;# 通过 -lp 选项指定部署在 8765 端口
nohup java -cp &quot;WEB-INF/lib/*:WEB-INF/classes&quot; org.b3log.solo.Starter -lp 8765 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;solo 也就算部署完毕啦&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为什么不用 tomcat？因为我自己的 tomcat
已经部署多个应用并且还要去修改配置文件，十分麻烦，所以选择这种方式运行，8080端口被tomcat使用，由nginx
转发，443、80 端口被 nginx 使用，所以随便选了一个 8765 端口进行部署。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_hexo_迁移&quot; &gt;hexo 迁移&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不得不说最棒的就是提供了 hexo 的迁移，让我省去好多功夫！&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;直接复制 hexo 下的 source 文件夹到 solo/markdown 即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;# 我直接移动过去了=-=
mv source ../solo/
# 然后终于可以停止掉慢出翔的 hexo-admin 啦
[root@EchoLZY blog]# ps -ef | grep hexo
root       647 29099  0 22:34 pts/1    00:00:00 grep --color=auto hexo
root     15475 27799  0  2018 ?        00:50:17 node /root/blog/hexo_run.js
root     15481 15475  0  2018 ?        00:05:35 hexo
[root@EchoLZY blog]# kill -9 15475
[root@EchoLZY blog]# kill -9 15481&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_nginx_配置&quot; &gt;nginx 配置&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;要求，支持 https 访问。同时访问 &lt;a href=&quot;http://echocow.cn&quot; class=&quot;bare&quot;&gt;http://echocow.cn&lt;/a&gt;
、http://www.echocow.cn 、https://www.echocow.cn 都直接转到
&lt;a href=&quot;https://echocow.cn&quot; class=&quot;bare&quot;&gt;https://echocow.cn&lt;/a&gt; 上面去&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;由于以前配置 hexo 的时候已经配置好了 ssl 证书，所以需要改动的只有
location 那里，对于 &lt;a href=&quot;http://echocow.cn&quot; class=&quot;bare&quot;&gt;http://echocow.cn&lt;/a&gt; 、http://www.echocow.cn
、https://www.echocow.cn 这三个都是用重定向即可，如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;server {
        listen       80;
        server_name  echocow.cn, www.echocow.cn;
        access_log  logs/http_echocow.access.log  main;
        location / {
           return 301 https://echocow.cn$request_uri;
        }
}

server {
        listen       443;
        server_name  www.echocow.cn;
        ssl_certificate   cert/www.echocow.cn.crt;
        ssl_certificate_key  cert/www.echocow.cn.key;
        access_log  logs/https_www_echocow.access.log  main;
        location / {
           return 301 https://echocow.cn$request_uri;
        }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li &gt;
&lt;p&gt;配置 &lt;a href=&quot;https://echocow.cn&quot; class=&quot;bare&quot;&gt;https://echocow.cn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;server {
    listen 443 ssl;
    server_name echocow.cn;
    ssl_certificate   cert/echocow.cn.crt;
    ssl_certificate_key  cert/echocow.cn.key;
    access_log  logs/https_echocow.access.log  main;
    # 以前的 hexo 配置
    #location / {
    #    root   /usr/local/nginx/html/public;
    #    index index.html index.htm;
    #}
    # 现在的 solo 配置
    location / {
        proxy_pass http://127.0.0.1:8765$request_uri;
        proxy_set_header  Host $host:$server_port;
        proxy_set_header  X-Real-IP  $remote_addr;
        client_max_body_size  10m;
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;3&quot;&gt;
&lt;li &gt;
&lt;p&gt;重启 nginx 即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;cd /usr/local/nginx/sbin
./nginx -s reload&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题&quot; &gt;问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_从_hexo_迁移过来的数据时不时包_nginx_502_错误&quot; &gt;从 hexo 迁移过来的数据时不时包 nginx 502 错误，&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;查看 access 日志没有发现什么，查看 nginx error 日志发现错误如下&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;tail /var/log/nginx/error.log
2019/01/01 21:18:55 [error] 24232#0: *112566 upstream sent too big header while reading response header from upstream, client: 1.48.57.4, server: echocow.cn, request: &quot;GET /articles/2018/02/12/1546344575473.html?pjax=true HTTP/1.1&quot;, upstream: &quot;http://127.0.0.1:8765/articles/2018/02/12/1546344575473.html?pjax=true&quot;, host: &quot;echocow.cn&quot;, referrer: &quot;https://echocow.cn/&quot;
2019/01/01 21:18:55 [error] 24232#0: *112566 upstream sent too big header while reading response header from upstream, client: 1.48.57.4, server: echocow.cn, request: &quot;GET /articles/2018/02/12/1546344575473.html HTTP/1.1&quot;, upstream: &quot;http://127.0.0.1:8765/articles/2018/02/12/1546344575473.html&quot;, host: &quot;echocow.cn&quot;, referrer: &quot;https://echocow.cn/&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li &gt;
&lt;p&gt;`sent too big header`说得很明确，发送太大的头了，所以配置下nginx.conf&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;vim conf/nginx.conf
# 在http块内添加如下
proxy_buffer_size  128k;
proxy_buffers   32 32k;
proxy_busy_buffers_size 128k;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_页面渲染问题&quot; &gt;页面渲染问题&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用默认的渲染引擎造成的结果就是，中间含有代码块有序列表全部都是1所以不得已要使用
marked 进行渲染。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;cd solo
npm install marked --save
nohup node js/marked/http.js &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
# 自定义的 solo 启动别名，直接启动
solo&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;效果就好多啦&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;总的来说还算顺利，部署加搭建前后一个小时不到吧，感觉solo还是挺友好的，后台方面也好，分类也好，都挺不错，话说他的陪图功能简直大爱！唯一有个缺点就是搜索好丑啊哈哈哈。自己看看有没有能力改再说吧。2019
来了，再见了 2018.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;再见,2018,有得有失。 你好,2019,与君共勉。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[spring boot security oauth2  构建简单安全的 restful api]]></description><link>https://zyue.wiki/articles/2019/01/22/1548148450889.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/01/22/1548148450889.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_oauth2&quot;&gt;Oauth2&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_这篇文章能够带给你什么&quot;&gt;这篇文章能够带给你什么&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_请求_url&quot;&gt;请求 url&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_自动配置&quot;&gt;自动配置&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_使用默认配置&quot;&gt;使用默认配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_自定义配置&quot;&gt;自定义配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试访问&quot;&gt;测试访问&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_开启_资源服务器&quot;&gt;开启 资源服务器&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_解析_token&quot;&gt;解析 token&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_刷新_token&quot;&gt;刷新 token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_参考链接&quot;&gt;参考链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前段时间写了一篇博客，https://echocow.cn/articles/2019/01/05/1546684795983.html[spring
boot restful API 从零到一完整实践] ，通过上篇文章构建了两个版本的
restful api，这篇博客，则是要在这基础上面，添加一个安全措施，我选择的是
oauth2 和 jwt 进行保护我们的 API，通过 spring security oauth2
进行一步一步的配置我们的安全 API 接口服务。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;博客地址：https://echocow.cn&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;项目地址：https://github.com/lizhongyue248/spring-boot-restful-api/tree/security-one[github-security-one
分支]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_oauth2&quot; &gt;Oauth2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;OAuth
2.0关注客户端开发者的简易性。要么通过组织在资源拥有者和HTTP服务商之间的被批准的交互动作代表用户，要么允许第三方应用代表用户获得访问的权限。同时为Web应用，桌面应用和手机，和起居室设备提供专门的认证流程。https://baike.baidu.com/item/OAuth2.0/6788617?fr=aladdin[百度百科]。这篇文章同上一篇一样，将会详细记录如何使用
spring security oauth2 进行构建一个安全 restful api ，当然，oauth2
的概念和核心我不再赘述，具体可查看文末的参考链接。在这之前，我们需要先做一番准备。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_这篇文章能够带给你什么&quot; &gt;这篇文章能够带给你什么&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 spring security oauth2 autoconfigure 自动配置一个简单的 oauth2 认证&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你需要拥有一个已经能够成功构建起来的 spring boot
的项目，它能够正常启动与访问访问，在这里我们使用上一篇
&lt;a href=&quot;https://echocow.cn/articles/2019/01/05/1546684795983.html&quot;&gt;spring boot
restful API 从零到一完整实践&lt;/a&gt; 构建的 restful API
作为基础。如果你需要快速体验，你只需要建立一个拥有 Helloworld api
接口的新项目即可。然后你需要加入以下依赖（gradle）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;// 提供 spring security 支持
implementation(&apos;org.springframework.boot:spring-boot-starter-security&apos;)
// 提供 oauth2 自动化配置
implementation(&quot;org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:${springBootVersion}&quot;)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/49c932992ee34adebd7b3c3e624d92a2_image.png&quot; alt=&quot;在这之前&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;同时你必须具备如下知识：&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;oauth2 中什么是 授权服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;oauth2 中什么是 资源服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;oauth2 中的四种授权模式（我们会使用到 授权码 模式和 密码 模式）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;spring security 的部分知识&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;jpa 的使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;以上概念本文不再提起，如有疑惑可选择去文末的参考链接自行选择性学习。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_请求_url&quot; &gt;请求 url&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;虽然上面说明了需要知道的东西，但是我在这里还是需要对我们需要使用到的 url
进行一个简单说明，但是参数我不再详说。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;/oauth/authorize GET 授权码模式获取授权码&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;/oauth/token POST 获取token、刷新token&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;/oauth/check_token POST 检测 token&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_自动配置&quot; &gt;自动配置&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;spring boot
之所以能够如此受欢迎，最大的原因莫过于他提供的模板配置以及自动配置，我们甚至不需要写什么代码，只需要见得修改一下配置文件即可构建一个基于内存的简单的安全服务，所以最重要的，需要先配置一个
&lt;strong&gt;授权服务器&lt;/strong&gt;，通过它下发令牌&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_使用默认配置&quot; &gt;使用默认配置&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 添加注解：你需要为我们启动类添加一个启动的注解&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/eec9a5a1d76b4645b6d4517d61a0233f_image.png&quot; alt=&quot;授权服务器&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 我们通过一个注解就已经完成一个安全的授权的创建，运行查看输出日志。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/ef02659d7bc74ce48528c9a6484195d2_image.png&quot; alt=&quot;使用默认配置&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 携带生成的 client id 进行访问，这里 /api
是我自己添加项目路径，如果没有添加亲直接访问 /oauth/authorize&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;http://localhost:8080/api/oauth/authorize?response_type=code&amp;amp;client_id=d7003bdc-981c-4745-9eb4-673028b4c4e0&amp;amp;redirect_uri=http://example.com&amp;amp;scope=all&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/5821ad7971024e67a7aa0c478f9d6980_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 访问报错，这是因为我们没有配置 spring security
造成的，所以需要回去配置一下，使用默认配置即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;image::https://resources.echocow.cn//file/2019/01/46bac0e60a024af89ec55896509e6743_image.png[spring
security]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;5、 再次运行，跳转登录界面&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/1d480c70ade941749ad2df5ee2e15358_image.png&quot; alt=&quot;访问&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;6、 用户名 &lt;code&gt;user&lt;/code&gt;，密码为刚才生成的 随机密码,登录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/9d9aede6f73b4521995753bc74583dbe_image.png&quot; alt=&quot;登录&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;7、 修改配置文件。注册一下回调地址&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/6a206b4ad888453cb3d53d0cf5d33495_image.png&quot; alt=&quot;修改配置文件&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;8、 重启，使用新生成的 client id ，重新访问以及登录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/15d8ea79040349fc8b69ee18d5aa91d8_image.png&quot; alt=&quot;登录成功&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;9、 选择 Approve 同意授权，获取到授权码&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/7e68ec23752b47c18e4b20468be9bffe_image.png&quot; alt=&quot;Approve&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;10、 使用授权码请求token&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/9b9bbf0762e042a0aec1ac1c3f9d18ec_image.png&quot; alt=&quot;使用授权码请求token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/45f06da95b294d75a4a1105bb783c3ac_image.png&quot; alt=&quot;使用授权码请求token&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/eaa2b00de92643f289e61d850c341312_image.png&quot; alt=&quot;获取成功&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这就是使用他的自动配置的认证过程，接下来我们通过配置文件进行控制他的自动配置&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_自定义配置&quot; &gt;自定义配置&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 修改 spring boot 的一些默认配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/b4e0be84b5864f5a8837535f35365d13_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 配置两个用户&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/32d02da8d3124b43be9a308a2b1e539e_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 现在我们拥有两个用户了，就可以去使用密码模式获取 token 了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/ca3031eec3484516be64a136d7e853b2_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/07cfd4841e884e0fa62c8a4b98be990e_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/356671ef064c41249b3bdc36b9c58780_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_测试访问&quot; &gt;测试访问&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 直接访问我们已有的资源&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/ce2affc8848b4ad0ba4944f77b501970_image.png&quot; alt=&quot;直接访问我们已有的资源&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 携带上一步获取的 token 访问&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;image::https://resources.echocow.cn//file/2019/01/32fae0a7f55044618a338d33b40a56ac_image.png[携带上一步获取的
token 访问]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;发现还是失败，为什么呢？因为我么并没有开启 资源服务器
他没办法进行验证，所以我们接下来就是开启一个资源服务器&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_开启_资源服务器&quot; &gt;开启 资源服务器&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同样，一个注解即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/ed740b7613af4bf5bfe73bd4c8ec5e24_image.png&quot; alt=&quot;资源服务器&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重新获取token后，携带 token 访问&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;image::https://resources.echocow.cn//file/2019/01/73f58d0b76564206bf42712234f606ef_image.png[携带
token 访问]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_解析_token&quot; &gt;解析 token&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 尝试解析 token&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;image::https://resources.echocow.cn//file/2019/01/05163891823d4a768e0ba1c3e6a942e4_image.png[尝试解析
token]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 403，我们需要配置以支持 token 解析。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;image::https://resources.echocow.cn//file/2019/01/96a634bddeea42f495fbf13120c3f4a1_image.png[支持
token 解析]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 重启后获取token再次解析&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/9dc42141faa1418a87f902c141b16398_image.png&quot; alt=&quot;重启后获取token再次解析&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_刷新_token&quot; &gt;刷新 token&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;遗憾的是，如果只是用配置文件，是不能够 刷新 token 的，至少我没有成功。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/79d18b46df3c41c2b65d31e2fad9d97f_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/b8eff0fb4910412fa1f0618f6c4883cb_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;发现不行，查看原因&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/44b4875d231e44a4b4466bced77d801c_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可惜通过尝试各种办法都不行（在不增加类的情况下）解决办法参见&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30454480/spring-security-oauth2-2-0-7-refresh-token-userdetailsservice-configuration-us&quot;&gt;stackoverflow：spring-security-oauth2
2.0.7 refresh token UserDetailsService Configuration -
UserDetailsService is required&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012338044&quot;&gt;segmentfault: spring
security oauth2之refresh token&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用他的配置文件，我们不需要写任何代码，就完成了一个简单的内存认证，甚至我们可以直接通过修改
userDetailsService
完成用户的认证，不过也发现了，他使用配置文件的方式功能很有限，局限性很强，不能够刷新
token 是一个痛点啊，所以我们更期望于手动配置。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_参考链接&quot; &gt;参考链接&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot;&gt;理解OAuth 2.0
阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/9d0264d27c3b&quot;&gt;Oauth2 授权&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-security-oauth2-boot/docs/current/reference/htmlsingle/&quot;&gt;spring
oauth2 auto config&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[vue cli 3 项目与 electron 记录]]></description><link>https://zyue.wiki/articles/2019/01/15/1547551133170.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/01/15/1547551133170.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_一些说明&quot;&gt;一些说明&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_问题一_项目整合&quot;&gt;问题一： 项目整合&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_1_默认入口&quot;&gt;1. 默认入口&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2_打包目录&quot;&gt;2. 打包目录&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_3_全局引入&quot;&gt;3. 全局引入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_问题二vue&quot;&gt;问题二：vue&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_1_滚动条问题&quot;&gt;1. 滚动条问题&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2_soketio&quot;&gt;2. soketio&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_3_打包问题&quot;&gt;3. 打包问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_待解决的问题&quot;&gt;待解决的问题&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_小总结&quot;&gt;小总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近在重构我们上学期参加比赛做的一个小软件，https://github.com/GeneralAndKing/help-teacher[help
teacher] 主要是作业收取的一款小工具，局域网内进行作业传输，简单用 vert.x
做了一个登录注册以及数据备份与同步。为了参加比赛写的小软件，时间紧迫代码质量普遍不高，并且使用
&lt;a href=&quot;https://github.com/SimulatedGREG/electron-vue&quot;&gt;electron-vue&lt;/a&gt;
进行搭建，也发现了不少问题，而那时候第一次接触
vue，也不理解其组件化思想，也不会组件抽离什么的，然后这次放假了，有老师对我们项目感兴趣，我们开始重构我们的软件，不再使用
electron-vue ，一方面因为 vue cli 3
生成的项目结构十分让我喜欢，约定大于配置也类似于 spring boot
的思想，所以我不需要太多的配置文件，一个就够，这是我非常喜欢的，但是目前
electron-vue 还不支持，而且 vue cli 3
拥有自己的图形化界面，可以更加方便的管理项目依赖以及插件；另一方面，我们以前的项目使用的
vue + element ui 进行开发，也发现很多 element 的组件在 electron-vue
中有着 bug 的存在，比如很简单的一个 MessageBox
弹框，使用的时候都会报错，然后造成整个软件其它部分的瘫痪，所以后面我们急冲冲的引入了其他的弹框组件。这次重构是对上次的一个功能上的完善，也是一个性能的优化。不过自己虽然是一个后端，自己来做前端的时候也发现一些异曲同工之处，而且因为以前使用
vert.x ，在接触 node
以后发现了很多地方的相似之处。今天这篇文章，主要是记录一下这个项目开始的重构过程，所以不会是一种教程似的画风，大多都是一些问题上的处理方法进行记录。&lt;strong&gt;不得不说的是，作为一个非专业的前端人员，在没有学过
webpack 、es6语法、babel
等等一些前端方面的知识就直接上手开发，还是遇到很多问题的。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;项目地址：https://github.com/GeneralAndKing/teacher-tools[teacher-tools]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot; &gt;
— bash
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_一些说明&quot; &gt;一些说明&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;为了统一代码风格，使用 eslint，并且统一使用 vscode 进行开发&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;element 换为 iview， 同时为了方便修改 iview 主题，使用 less 替换原来的
stylus&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;从 npm 改为使用 yarn&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;前端数据库依旧使用 nedb（暂定）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;为了实时聊天，学习 socketio（暂定）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题一_项目整合&quot; &gt;问题一： 项目整合&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们在使用 vue cli 3 初始化项目后，他是一个纯正的 web
项目，我们需要对他进行 electron
进行整合，我们寻找了很久方案，最后终于找到一款插件进行整合 ——
&lt;a href=&quot;https://github.com/nklayman/vue-cli-plugin-electron-builder&quot;&gt;vue-cli-plugin-electron-builder&lt;/a&gt;
, 安装很方便，直接图形化界面搜索安装即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/cf3427538b7d40b2a7ebd832cc082c1f_image.png&quot; alt=&quot;搜索安装&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;或者命令行模式安装&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;vue add electron-builder&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后通过&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;yarn electron:serve

yarn electron:build&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;进行使用。不过使用新的东西随之而来的问题就是，遇到什么问题或者其它需求的时候，只能自己摸索，而且没啥基础很难受。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_1_默认入口&quot; &gt;1. 默认入口&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们移动了插件生成的文件路径以及修改了文件名，那么如何保证他能够正确的使用并进入呢？我们卡在这问题很久，最后在
github 的
&lt;a href=&quot;https://github.com/nklayman/vue-cli-plugin-electron-builder/issues/44&quot;&gt;issue&lt;/a&gt;
上面找到答案，于是修改 vue.config.js 如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;pluginOptions: {
  electronBuilder: {
    builderOptions: {
      files: [
        {
          &apos;filter&apos;: [&apos;**/*&apos;]
        }
      ],
      extraFiles: [&apos;./extensions/&apos;],
      asar:  false
    },
    mainProcessFile:  &apos;src/main/main.js&apos;,
    mainProcessWatch: [&apos;src/main&apos;],
    // [1.0.0-rc.4+] Provide a list of arguments that Electron will be launched with during &quot;electron:serve&quot;,
    // which can be accessed from the main process (src/background.js).
    // Note that it is ignored when --debug flag is used with &quot;electron:serve&quot;, as you must launch Electron yourself
    mainProcessArgs: []
  }
},&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_2_打包目录&quot; &gt;2. 打包目录&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;与以往不同的是，我们有多个页面，除了 electron 的，也有 web
的，需要更具不同的进行打包，所以我们查找资料，修改 pages 参数如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;...
pages:  getPages(),
...
/**
* 根据 MODE 选择对应的 pages 进行打包
*/
function  getPages () {
  return  process.env.MODE  ===  &apos;web&apos;
  ? {
    client: {
      // entry for the page
      entry:  &apos;src/client/main.js&apos;,
      // the source template
      template:  &apos;public/index.html&apos;,
      // output as dist/index.html
      filename:  &apos;index.html&apos;
    }
  }
  : {
    app: {
      entry:  &apos;src/app/main.js&apos;,
      template:  &apos;public/index.html&apos;,
      filename:  &apos;app.html&apos;
    },
    communication: {
      entry:  &apos;src/communication/main.js&apos;,
      template:  &apos;public/index.html&apos;,
      filename:  &apos;communication.html&apos;
    },
    forms: {
      entry:  &apos;src/forms/main.js&apos;,
      template:  &apos;public/index.html&apos;,
      filename:  &apos;forms.html&apos;
    }
  }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_3_全局引入&quot; &gt;3. 全局引入&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;参照了官网的例子&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;...
chainWebpack:  config  =&amp;gt; {
  config.resolve.alias
  .set(&apos;app@&apos;, resolve(&apos;src/app&apos;))
  .set(&apos;_n&apos;, resolve(&apos;node_modules&apos;))
  .set(&apos;common@&apos;, resolve(&apos;src/common/&apos;))
  .set(&apos;communication@&apos;, resolve(&apos;src/communication/&apos;))
  .set(&apos;form@&apos;, resolve(&apos;src/form/&apos;))
  .set(&apos;client@&apos;, resolve(&apos;src/client/&apos;))
  const  types  = [&apos;vue-modules&apos;, &apos;vue&apos;, &apos;normal-modules&apos;, &apos;normal&apos;]
  types.forEach(type  =&amp;gt;  addStyleResource(config.module.rule(&apos;less&apos;).oneOf(type)))
}
...

/**
* 全局 less 引入
* @param  {*}  rule 传递规则
*/
function  addStyleResource (rule) {
  rule.use(&apos;style-resource&apos;)
    .loader(&apos;style-resources-loader&apos;)
    .options({
      patterns: [
        path.resolve(__dirname, &apos;./src/common/theme/iview-variables.less&apos;)
      ]
    })
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过对于 stylus 还有另外一种方式，不知道为啥 less 不行&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;css: {
  loaderOptions: {
    stylus: {
      import: path.resolve(__dirname, &apos;./src/styles/global.styl&apos;)
    }
  }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题二vue&quot; &gt;问题二：vue&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_1_滚动条问题&quot; &gt;1. 滚动条问题&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;由于我们自定义了标题，没有使用默认的标题栏，然后就会有一种情况，他的滚动条会在标题右侧了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/dd4e900c3f174729917af0077e547818_1.jpg&quot; alt=&quot;滚动条&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过 css 修改如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;@gak-no-visible: rgba(0, 0, 0, 0);
html, body {
  overflow: hidden;
  height: 100%;
}
.gak-bg-no-visible {
  background-color: @gak-no-visible;
}
.gak-scroll {
  height: 100%;
  -webkit-overflow-scrolling: touch;
  overflow-y: auto;
  /*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/
  &amp;amp;::-webkit-scrollbar {
    width: 8px;
    height: 4px;
    cursor: pointer;
    .gak-bg-no-visible;
  }
  /*定义滚动条轨道 内阴影+圆角*/
  &amp;amp;::-webkit-scrollbar-track {
    border: none;
    .gak-bg-no-visible;
  }
  /*定义滑块 内阴影+圆角*/
  &amp;amp;::-webkit-scrollbar-thumb{
    border-radius: 10px;
    background-color: rgba(110, 110, 110, 0.2);
  }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改后如图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/7d17cd6d68644ab6954d9c0d44237935_TIM20190115202528.jpg&quot; alt=&quot;滚动条&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_2_soketio&quot; &gt;2. soketio&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;找了很多组件，原本一开始使用的是
&lt;a href=&quot;https://github.com/MetinSeylan/Vue-Socket.io&quot;&gt;Vue-Socket.io&lt;/a&gt;，但是发现对于
vuex 他似乎已经不再支持，所以找了半天，改成使用了
&lt;a href=&quot;https://github.com/probil/vue-socket.io-extended&quot;&gt;vue-socket.io-extended&lt;/a&gt;，目前用起来十分方便。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用方式采用https://github.com/probil/vue-socket.io-extended/issues/91#issuecomment-397232621[外部文件扩展的方式]，能够在
action 里面调用是及其方便的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_3_打包问题&quot; &gt;3. 打包问题&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;因为我们包含的 vue 页面比较多，并且有一个不是 electron 项目而是 web
项目，需要指定不同的打包路径，最后查阅资料，使用https://cli.vuejs.org/zh/guide/build-targets.html#%E5%BA%94%E7%94%A8[官方文档中]的方法如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;&quot;scripts&quot;: {
  &quot;lint&quot;: &quot;vue-cli-service lint&quot;,
  &quot;electron:build&quot;: &quot;vue-cli-service electron:build&quot;,
  &quot;electron:serve&quot;: &quot;vue-cli-service electron:serve&quot;,
  &quot;postinstall&quot;: &quot;electron-builder install-app-deps&quot;,
  &quot;test:unit&quot;: &quot;vue-cli-service test:unit&quot;,
  &quot;web:serve&quot;: &quot;cross-env MODE=web vue-cli-service serve&quot;,
  &quot;web:build&quot;: &quot;cross-env MODE=web vue-cli-service build --dest ./extensions/dist&quot;
},&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为什么不用 -mode
&lt;a href=&quot;https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F&quot;&gt;模式&lt;/a&gt;
而是使用 cross-env MODE=web ？因为我们这里 -mode
读取不到，可能使用方式不对，所以采用以前的老办法了。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_待解决的问题&quot; &gt;待解决的问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;☐ &lt;code&gt;作业收取&lt;/code&gt; 和 &lt;code&gt;屏幕分享&lt;/code&gt;，如果单用 node
的话是完成不了的（或者我们不会），希望用c++来完成，由我队友负责&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☐
内存问题，上一次项目出现了一个典型情况就是内存占用比预期中的高，并且出现卡顿情况&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☐ 多页面情况 vuex 状态不共享&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☐ 开发时加载出现 首屏白屏情况，打包后不明显&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☐ vue devtools
不管用，多次尝试各种组件都上了还是不行（要不就是临时的），最后使用本地的，但是只有第一次运行有效，后面都是无效&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☐ …很多杂七杂八的小问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/70abbb3b474341849b67c77fba3cb906_image.png&quot; alt=&quot;imagepng&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;C++ 很强&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_小总结&quot; &gt;小总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实是非常喜欢 electron 这种的，因为他的跨平台真的太棒，我队友操作系统是
&lt;code&gt;主 windows + mint(移动硬盘)&lt;/code&gt;，我的是
&lt;code&gt;主 deepin + windows(移动硬盘)&lt;/code&gt;，正是这种跨平台性能够让我们在不同平台下进行协作开发、然后重构的时候也对目录进行修改，也更好的进行组织以及抽取多页面的公共部分，不过自己其实还是喜欢后端哈哈哈哈，自己来做前端也是因为我们学校这一届实在找不到人一起来做了，只有我们两个人，做起来时间上很是费力，然后又要学车，大多是队友一直在弄，做了很多东西，自己就晚上弄弄页面，希望开学能够看得到成果吧。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[spring boot restful API 从零到一完整实践]]></description><link>https://zyue.wiki/articles/2019/01/05/1546684795983.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/01/05/1546684795983.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_restful&quot;&gt;RESTFul&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_这篇文章能够带给你什么&quot;&gt;这篇文章能够带给你什么&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_需要做好的规划&quot;&gt;需要做好的规划&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_api_基本设计&quot;&gt;Api 基本设计&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_api_数据准备&quot;&gt;Api 数据准备&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_api_url_设计&quot;&gt;Api Url 设计&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_技术选型&quot;&gt;技术选型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_环境搭建&quot;&gt;环境搭建&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_初始化&quot;&gt;初始化&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_数据准备&quot;&gt;数据准备&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试工具&quot;&gt;测试工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_初步实现&quot;&gt;初步实现&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_第一步实现&quot;&gt;第一步：实现&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_第二步统一异常处理&quot;&gt;第二步，统一异常处理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用_spring_data_rest&quot;&gt;使用 spring data rest&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_引入依赖&quot;&gt;引入依赖&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_初体验&quot;&gt;初体验&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_发生了什么&quot;&gt;发生了什么&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_添加一个_v2_版本的_restful&quot;&gt;添加一个 v2 版本的 restful&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_关于_spring_data_rest&quot;&gt;关于 spring data rest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_关于测试&quot;&gt;关于测试&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_感触&quot;&gt;感触&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_参考链接&quot;&gt;参考链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己第一次接触 restful 是在学习 vue
的时候，第一次看见的时候，真的打心底里的喜欢。不仅是因为其一致的规范性，还有他的简单明了，都让我眼前一亮的感觉。现在对于一些程序，都是提倡的前后端分离，各干各的互不相干，事实上我也非常喜欢这种方式，虽然我希望的是成为一个全栈的工程师。但是前后端的分离却带来了一些质的飞跃，一方面业务上的逻辑不会太耦合，另一方面让更专业的人处理更专业的事，效率和质量上都会高上许多。Restful
Api 是目前比较成熟的一套互联网应用程序的 API
设计理论，就是作为其中一种统一的机制出现，方便不同的前端设备与后端进行通信。今天就利用
spring boot 的多个组件，来实现以下 restful 风格的 api，从自己使用
controller 到使用框架开始一步一步搭建。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_restful&quot; &gt;RESTFul&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;RESTFUl
一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件（源自 &lt;a href=&quot;https://baike.baidu.com/item/RESTful/4406165?fr=aladdin&quot;&gt;百度百科&lt;/a&gt;）。这是一篇如何使用
spring boot 来进行构建一个 restful Api
的记录，他的概念和核心我不再赘述，具体可查看文末的参考链接。在这之前，我们需要对我们
Api 进行一个简单的设计。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_这篇文章能够带给你什么&quot; &gt;这篇文章能够带给你什么&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;如何设计一个 Restful 风格的 Api&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;项目开发的数据初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过 spring boot 实现 Api，v1 版本&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过 spring boot 进行统一异常处理&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过 spring data rest 实现 Api，v2 版本&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;通过 spring data rest 进行参数校验&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;自定义 spring data rest 查询、删除等方法&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;接口测试工具以及测试spring mvc&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;所有代码均已上传到
&lt;a href=&quot;https://github.com/lizhongyue248/spring-boot-restful-api&quot;&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;博客地址： &lt;a href=&quot;https://echocow.cn/articles/2019/01/05/1546684795983.html&quot;&gt;spring
boot restful API 从零到一完整实践&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_需要做好的规划&quot; &gt;需要做好的规划&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_api_基本设计&quot; &gt;Api 基本设计&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 我们 api 足够简单，我们为他准备一个基础路径，即&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-markup&quot; data-lang=&quot;markup&quot;&gt;http://localhost:8080/api/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 我们 api 有多个版本，这里暂且定为一个v1版本，即&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-markup&quot; data-lang=&quot;markup&quot;&gt;http://localhost:8080/api/v1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。 &lt;a href=&quot;https://developer.github.com/v3/media/#request-specific-version&quot;&gt;Github&lt;/a&gt;采用这种做法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 我们选用五个常用的HTTP动词&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;GET（SELECT）：从服务器取出资源（一项或多项）。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;POST（CREATE）：在服务器新建一个资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;DELETE（DELETE）：从服务器删除资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 服务器向用户返回的状态码和提示信息，我们用到的有以下一些&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;204 NO CONTENT - [DELETE]：用户删除数据成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;404 NOT FOUND - 用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;500 INTERNAL SERVER ERROR - 服务器发生错误，用户将无法判断发出的请求是否成功。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_api_数据准备&quot; &gt;Api 数据准备&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要为数据准备一个实体，我将使用一个书单（Book）对象作为实体，他的具体属性如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;id&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;name 书名&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;author 作者&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;description 描述&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;status 状态&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_api_url_设计&quot; &gt;Api Url 设计&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;按照我们提供的五个动词，分别设计多个 api 如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;GET /api/v1/books 所有书单&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;GET /api/v1/books/{id} 获取一条书单&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;POST /api/v1/books 新建一条书单&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;PUT /api/v1/books/{id} 更新一条书单，提供全部信息&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;PATCH /api/v1/books/{id} 更新一条书单，提供部分信息&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;DELETE /api/v1/books/{id} 删除一条书单&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;DELETE /api/v1/books 删除所有书单，危险操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_技术选型&quot; &gt;技术选型&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;核心框架：spring boot&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;web： spring boot web&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;数据库：mysql&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;构建工具：gradle&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;应用框架：spring boot data jpa&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;restful：spring data rest&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;工具支持：spring boot devtools&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;测试框架：junit5、spring boot test&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;开发工具：idea&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_环境搭建&quot; &gt;环境搭建&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;首先我们要先通过 idea 对项目进行初始化&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_初始化&quot; &gt;初始化&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;新建项目&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/1cf250f196d3424da1c2d7c4011a2659__sunawtX11XDialogPeer_20190105191714.png&quot; alt=&quot;新建项目&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li &gt;
&lt;p&gt;填写基本属性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/ee1555cf87bc4cde9ac182408eab08c6__sunawtX11XDialogPeer_20190105191934.png&quot; alt=&quot;填写基本属性&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;3&quot;&gt;
&lt;li &gt;
&lt;p&gt;选择依赖&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/99b95787f4d9486691946ad183c866ea__sunawtX11XDialogPeer_20190105192653.png&quot; alt=&quot;选择依赖&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;4&quot;&gt;
&lt;li &gt;
&lt;p&gt;设置 gradle&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/af6c9b055e9043acbb5b6641be6d35c2__sunawtX11XDialogPeer_20190105192740.png&quot; alt=&quot;设置 gradle&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;5&quot;&gt;
&lt;li &gt;
&lt;p&gt;等待构建依赖的同时，修改一下仓库地址，不然下载很慢，如果一直下不下载就修改好仓库地址后重新打开idea让他自动重下。这就是为啥不喜欢直接建spring
的 gradle 项目的原因，他会自动导入，个人喜欢直接建 gradle
项目然后手动导入依赖。但是对于 spring 来说他也确实方便。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/64a8fe853f3b4535a43880edbfca7f0c__sunawtX11XFramePeer_20190105212711.png&quot; alt=&quot;修改仓库地址&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;5&quot;&gt;
&lt;li &gt;
&lt;p&gt;配置 spring boot 项目&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/c0e2a8e7136e480abd24412a1b46f020__sunawtX11XFramePeer_20190105213053.png&quot; alt=&quot;配置&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;spring:
  application:
    name: restful-api
  datasource:
    url: jdbc:mysql://localhost:3306/spring
    username: root
    password: 123456
    platform: mysql
  jpa:
    show-sql: true
 hibernate:
      ddl-auto: create
server:
  servlet:
    context-path: /api&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们就完成一个项目的初始化，接下来进行数据的准备&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_数据准备&quot; &gt;数据准备&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为什么要这一步？因为我们期望每次启动项目。数据都是一致的，这样会方便我们很多。比如有时候测试删除的时候，把数据全部删除完了，又要手动添加数据，比如你执行过了很多更新操作，造成数据乱七八糟的，不方便以后的测试，所以最好的办法就是每次启东时重新建表，重新插入指定的数据。并且在写测试类的时候，可以直接对期望结果，这样也会方便测试。当然，只针对开发环境。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 按照我们前面给出 Book 对象，建立实体类。
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/fa4e69192fc149d598fb3e668328c4f2__sunawtX11XFramePeer_20190105213745.png&quot; alt=&quot;Book&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.restfulapi.entity;

import lombok.Data;
import org.hibernate.annotations.ColumnDefault;
import javax.persistence.*;
import javax.validation.constraints.NotNull;

/**
 * 书籍的实体类
 *
 * @author Echo
 * @version 1.0
 * @date 2019-01-05 21:36
 */
@Entity
@Data
public class Book {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(insertable = false, length = 20, nullable = false)
  public Long id;
  @NotNull
  @Column(columnDefinition = &quot;varchar(50) comment &apos;书名&apos;&quot;)
  public String name;
  @NotNull
  @Column(columnDefinition = &quot;varchar(25) comment &apos;作者&apos;&quot;)
  public String author;
  @Column(columnDefinition = &quot;varchar(255) comment &apos;描述&apos;&quot;)
  public String description;
  @NotNull
  @ColumnDefault(&quot;1&quot;)
  @Column(columnDefinition = &quot;tinyint(1) comment &apos;是否存在&apos;&quot;)
  public Boolean status;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 建立生成数据的 sql 文件
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/ad4fc674b062494f80f09caf0d644eb9__sunawtX11XFramePeer_20190105214010.png&quot; alt=&quot;_sunawtX11XFramePeer_20190105214010png&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;INSERT INTO spring.book (id, author, description, name, status) VALUES (1, &apos;孟宁&apos;, &apos;本书从理解计算机硬件的核心工作机制（存储程序计算机和函数调用堆栈）和用户态程序如何通过系统调用陷入内核（中断异常）入手，通过上下两个方向双向夹击的策略，并利用实际可运行程序的反汇编代码从实践的角度理解操作系统内核，分析Linux内核源代码，从系统调用陷入内核、进程调度与进程切换开始，最后返回到用户态进程。&apos;, &apos;庖丁解牛Linux内核分析&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (2, &apos;孙亮&apos;, &apos;大数据时代为机器学习的应用提供了广阔的空间，各行各业涉及数据分析的工作都需要使用机器学习算法。本书围绕实际数据分析的流程展开，着重介绍数据探索、数据预处理和常用的机器学习算法模型。本书从解决实际问题的角度出发，介绍回归算法、分类算法、推荐算法、排序算法和集成学习算法。在介绍每种机器学习算法模型时，书中不但阐述基本原理，而且讨论模型的评价与选择。为方便读者学习各种算法，本书介绍了R语言中相应的软件包并给出了示例程序。&apos;, &apos;实用机器学习&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (3, &apos;托马斯·哈斯尔万特&apos;, &apos;本书以基础的统计学知识和假设检验为重点，简明扼要地讲述了Python在数据分析、可视化和统计建模中的应用。主要包括Python的简单介绍、研究设计、数据管理、概率分布、不同数据类型的假设检验、广义线性模型、生存分析和贝叶斯统计学等从入门到高级的内容。&apos;, &apos;Python统计分析&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (4, &apos;甘迪文&apos;, &apos;《Windows黑客编程技术详解》介绍的是黑客编程的基础技术，涉及用户层下的Windows编程和内核层下的Rootkit编程。本书分为用户篇和内核篇两部分，用户篇包括11章，配套49个示例程序源码；内核篇包括7章，配套28个示例程序源码。本书介绍的每个技术都有详细的实现原理，以及对应的示例代码（配套代码均支持32位和64位Windows 7、Windows 8.1及Windows 10系统），旨在帮助初学者建立起黑客编程技术的基础。&apos;, &apos;Windows黑客编程技术详解&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (5, &apos;科里•奥尔索夫&apos;, &apos;本书作者是一名自学成才的程序员，经过一年的自学，掌握了编程技能并在eBay找到了一份软件工程师的工作。本书是作者结合个人经验写作而成，旨在帮助读者从外行成长为一名专业的Python程序员。&apos;, &apos;Python编程无师自通——专业程序员的养成&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (6, &apos;威廉·史密斯&apos;, &apos;本书由浅入深地详细讲解了计算机存储使用的多种数据结构。本书首先讲解了初级的数据结构（如表、栈、队列和堆等），具体包括它们的工作原理、功能实现以及典型的应用程序等；然后讨论了数据结构，如泛型集合、排序、搜索和递归等；最后介绍了如何在日常应用中使用这些数据结构。&apos;, &apos;程序员学数据结构&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (7, &apos;张鑫旭&apos;, &apos;本书从前端开发人员的需求出发，以“流”为线索，从结构、内容到美化装饰等方面，全面且深入地讲解前端开发人员必须了解和掌握的大量的CSS知识点。同时，作者结合多年的从业经验，通过大量的实战案例，详尽解析CSS的相关知识与常见问题。作者还为本书开发了专门的配套网站，进行实例展示、问题答疑。&apos;, &apos;CSS世界&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (8, &apos;理查德·格里姆斯&apos;, &apos;作为一门广为人知的编程语言，C++已经诞生30多年了，这期间也出现并流行过许多种编程语言，但是C++是经得起考验的。如此经典的编程语言，值得每一位编程领域的新人认真学习，也适合有经验的程序员细细品味。&apos;, &apos;C++编程自学宝典&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (9, &apos;萨沙·戈德斯汀&apos;, &apos;本书详细解释了影响应用程序性能的Windows、CLR和物理硬件的内部结构，并为读者提供了衡量代码如何独立于外部因素执行操作的知识和工具。书中提供了大量的C#代码示例和技巧，将帮助读者zui大限度地提高算法和应用程序的性能，提高个人竞争优势，使用更低的成本获取更多的用户。&apos;, &apos;.NET性能优化&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (10, &apos;李伟&apos;, &apos;《C++模板元编程实战：一个深度学习框架的初步实现》以一个深度学习框架的初步实现为例，讨论如何在一个相对较大的项目中深入应用元编程，为系统性能优化提供更多的可能。&apos;, &apos;C++模板元编程实战：一个深度学习框架的初步实现&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (11, &apos;Ben Klemens 克莱蒙&apos;, &apos;本书展现了传统C语言教科书所不具有相关技术。全书分&apos;, &apos;C程序设计新思维（第2版）&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (12, &apos;王云&apos;, &apos;本书遵循由浅入深、循序渐进的原则，讲解单片机开发经典案例。本书以YL51单片机开发板为平台，通过案例逐个讲解开发板上各个器件模块的使用及其编程方法，包括单片机最小系统、数码管显示原理、中断与定时器、数模\\模数转换工作原理、LCD液晶显示、串行口通信、步进电机驱动原理、PWM脉宽调制与直流电机等内容。&apos;, &apos;51单片机C语言程序设计教程&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (13, &apos;胡振波&apos;, &apos;本书是一本介绍通用CPU设计的入门书，以通俗的语言系统介绍了CPU和RISC-V架构，力求为读者揭开CPU设计的神秘面纱，打开计算机体系结构的大门。&apos;, &apos;手把手教你设计CPU——RISC-V处理器篇&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (14, &apos;克劳斯·福勒&apos;, &apos;本书旨在通过实际的Python 3.0代码示例展示Python与数学应用程序的紧密联系，介绍将Python中的各种概念用于科学计算的方法。&apos;, &apos;Python 3.0科学计算指南&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (15, &apos;路彦雄&apos;, &apos;《文本上的算法 深入浅出自然语言处理》结合-作者多年学习和从事自然语言处理相关工作的经验，力图用生动形象的方式深入浅出地介绍自然语言处理的理论、方法和技术。本书抛弃掉繁琐的证明，提取出算法的核心，帮助读者尽快地掌握自然语言处理所必需的知识和技能。&apos;, &apos;文本上的算法——深入浅出自然语言处理&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (16, &apos;胡世杰&apos;, &apos;本书从云存储的需求出发讲述对象存储的原理，循序渐进地建立起一个分布式对象存储的架构，并且将软件实现出来。全书共8章，分别涉及对象存储简介、可扩展分布式系统、元数据服务、数据校验和去重、数据冗余处理、断点续传、数据压缩和数据维护等。本书选择用来实现分布式对象存储软件的编程语言是当前流行的Go语言。&apos;, &apos;分布式对象存储——原理、架构及Go语言实现&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (17, &apos;徐子珊&apos;, &apos;《趣题学算法》适于作为程序员的参考书，高校各专业学生学习“数据结构”“算法设计分析”“程序设计”等课程的扩展读物，也可以作为上述课程的实验或课程设计的材料，还可以作为准备参加国内或国际程序设计赛事的读者的赛前训练材料。&apos;, &apos;趣题学算法&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (18, &apos;鲁什迪·夏姆斯&apos;, &apos;现如今，数据科学已经成为一个热门的技术领域，它涵盖了人工智能的各个方面，例如数据处理、信息检索、机器学习、自然语言处理、数据可视化等。而Java作为一门经典的编程语言，在数据科学领域也有着杰出的表现。&apos;, &apos;Java数据科学指南&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (19, &apos;罗炳森&apos;, &apos;结构化查询语言（Structured Query Language，SQL）是一种功能强大的数据库语言。它基于关系代数运算，功能丰富、语言简洁、使用方便灵活，已成为关系数据库的标准语言。&apos;, &apos;SQL优化核心思想&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (20, &apos;弗兰克·D.卢娜&apos;, &apos;Direct3D是微软公司DirectX SDK集成开发包中的重要组成部分，是编写高性能3D图形应用程序的渲染库，适用于多媒体、娱乐、即时3D动画等广泛和实用的3D图形计算领域。&apos;, &apos;DirectX 12 3D 游戏开发实战&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (21, &apos;巴阿尔丁•阿扎米&apos;, &apos;Kibana是广泛地应用在数据检索和数据可视化领域的ELK中的一员。本书专门介绍Kibana，通过不同的用例场景，带领读者全面体验Kibana的可视化功能。&apos;, &apos;Kibana数据可视化&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (22, &apos;郝佳&apos;, &apos;《Spring源码深度解析（第2版）》从核心实现、企业应用和Spring Boot这3个方面，由浅入深、由易到难地对Spring源码展开了系统的讲解，包括Spring 整体架构和环境搭建、容器的基本实现、默认标签的解析、自定义标签的解析、bean的加载、容器的功能扩展、AOP、数据库连接JDBC、整合MyBatis、事务、SpringMVC、远程服务、Spring消息、Spring Boot体系原理等内容。&apos;, &apos;Spring源码深度解析（第2版）&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (23, &apos;Jon Bentley&apos;, &apos;书的内容围绕程序设计人员面对的一系列实际问题展开。作者JonBentley以其独有的洞察力和创造力，引导读者理解这些问题并学会解决方法，而这些正是程序员实际编程生涯中到关重要的。&apos;, &apos;编程珠玑（第2版•修订版）&apos;, 1);
INSERT INTO spring.book (id, author, description, name, status) VALUES (24, &apos;Mickey W. Mantle&apos;, &apos;这是一本系统阐述面对混乱而容易失控的技术开发团队时，如何管理、建设和强化团队，成功交付开发成果的大作。两位作者Mickey W. Mantle和Ron Lichty以合起来近70年的开发管理经验为基础，通过深刻的观察和分析，找到了软件开发管理的核心问题——人的管理，并围绕如何真正理解程序员、找到合适的程序员、与程序员沟通这几个核心话题，一步步展开，扩展到如何以人为本地进行团队建设、管理和项目管理。&apos;, &apos;告别失控：软件开发团队管理必读&apos;, 1);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 利用 idea 的数据库管理工具直接管理数据库
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/6d4916e39b8d4602bca9959cc21fb315__sunawtX11XFramePeer_20190105214128.png&quot; alt=&quot;数据库&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 启动应用进行测试，查看一下是否创建对应的表和数据
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/482a7e8a9ea7464a9dab6741ece8c37b__sunawtX11XFramePeer_20190105214506.png&quot; alt=&quot;启动测试&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就完成我们需要的环境，下面进行一些必要的测试工具安装。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_测试工具&quot; &gt;测试工具&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要一些接口测试工具来进行辅助开发，以便更快的得到及时反馈,以下工具选择根据需要即可。
1. &lt;a href=&quot;https://www.getpostman.com/apps&quot;&gt;postman
一款功能全面且强大的接口测试工具&lt;/a&gt; 2.
&lt;a href=&quot;https://plugins.jetbrains.com/plugin/10292-restfultoolkit&quot;&gt;idea plugin
RestfulToolkit 一套 RESTful 服务开发辅助工具集。&lt;/a&gt; 3. 使用
spring-boot-starter-test 进行 mockMvc 测试 4. 其它…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_初步实现&quot; &gt;初步实现&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这一步，我们会通过 rest controller 的方式进行创建一个 Restful 风格的
api。所以在这之前，我们要暂时不引入 spring boot 提供的 rest ，即
build.gradle 中的 &lt;code&gt;spring-boot-starter-data-rest&lt;/code&gt;
依赖,为什么？后面就知道啦。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/2f4b96bdb97040fa87593b88da1605fe___20190105215444.png&quot; alt=&quot;后面就知道啦&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_第一步实现&quot; &gt;第一步：实现&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 建立 BookRepository，对数据库进访问
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/451b676cde3a4bf7ac2f39b9e80cb7ca__sunawtX11XFramePeer_20190105215825.png&quot; alt=&quot;对数据库进访问&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 建立 BookController&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为什么不要 service？在开发过程中，我们都是
controller、service、repository 三层的，在这里我将它省去了
service。一方面因为我没有太多的复杂的逻辑要处理，加了service反而让我多写几个类甚至几个接口，另一方面，在实际开发的过程中也完全没有必要按照这么个设计来，自己开发得爽，代码易读性高，质量棒就行了，没必要拿着一套死不放。小型应用中，没有复杂的逻辑，我基本不会去写
service 层的。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/681265dce3714d94ba99296fce66eb37__sunawtX11XFramePeer_20190105220057.png&quot; alt=&quot;建立controller&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 书写具体逻辑
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/14abc1e30c774e829cddda7f2a2efb81__sunawtX11XFramePeer_20190105220547.png&quot; alt=&quot;1&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/da149cd90e4a43ebbabfc3f52f163297__sunawtX11XFramePeer_20190105220733.png&quot; alt=&quot;2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/78e7945cbcbf4b6eb21d0f200723161b__sunawtX11XFramePeer_20190105220741.png&quot; alt=&quot;3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.restfulapi.controller;

import cn.echocow.restfulapi.entity.Book;
import cn.echocow.restfulapi.repository.BookRepository;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.BeanWrapper;
import org.springframework.beans.BeanWrapperImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.beans.PropertyDescriptor;
import java.util.ArrayList;
import java.util.List;

/**
 * rest 风格 api
 *
 * GET     /api/v1/books        所有书单
 * GET     /api/v1/books/{id}   获取一条书单
 * POST    /api/v1/books        新建一条书单
 * PUT     /api/v1/books/{id}   更新一条书单，提供全部信息
 * PATCH   /api/v1/books/{id}   更新一条书单，提供部分信息
 * DELETE  /api/v1/books/{id}   删除一条书单
 * DELETE  /API/v1/books        删除所有书单
 *
 * @author Echo
 * @version 1.0
 * @date 2019-01-05 21:59
 */
@RestController
@RequestMapping(&quot;/v1&quot;)
public class BookController {
  private final BookRepository bookRepository;
  @Autowired
  public BookController(BookRepository bookRepository) {
    this.bookRepository = bookRepository;
  }

  /**
   * 获取所有书单
   * GET     /api/v1/books        所有书单
   *
   * @return http 响应
   */
  @GetMapping(&quot;/books&quot;)
  public HttpEntity&amp;lt;?&amp;gt; books() {
    return new ResponseEntity&amp;lt;&amp;gt;(bookRepository.findAll(), HttpStatus.OK);
  }

  /**
   * 获取一个书单 * GET     /api/v1/books/{id}   获取一条书单 * * @param id id
   * @return http 响应
   */  @GetMapping(&quot;/books/{id}&quot;)
  public HttpEntity&amp;lt;?&amp;gt; booksOne(@PathVariable Long id) {
    return new ResponseEntity&amp;lt;&amp;gt;(bookRepository.findById(id).get(), HttpStatus.OK);
  }

  /**
   * 添加一个书单
   * POST    /api/v1/books        新建一条书单
   *
   * @param book 书单
   * @return http 响应
   */
  @PostMapping(&quot;/books&quot;)
  public HttpEntity&amp;lt;?&amp;gt; booksAdd(@Valid @RequestBody Book book, BindingResult bindingResult) {
    book.setId(null);
    return new ResponseEntity&amp;lt;&amp;gt;(bookRepository.save(book), HttpStatus.CREATED);
  }

  /**
   * 更新一个书单,提供一个书单的全部信息
   * PUT     /api/v1/books/{id}   更新一条书单，提供全部信息
   *
   * @param id 更新的id
   * @param book 更新后的书单
   * @return http 响应
   */
  @PutMapping(&quot;/books/{id}&quot;)
  public HttpEntity&amp;lt;?&amp;gt; booksPut(@Valid @PathVariable Long id, @RequestBody Book book, BindingResult bindingResult) {
    Book exist = bookRepository.findById(id).get();
    book.setId(exist.getId());
    return new ResponseEntity&amp;lt;&amp;gt;(bookRepository.save(book), HttpStatus.OK);
  }

  /**
   * 更新一个书单,提供一个书单的部分信息
   * PATCH   /api/v1/books/{id}   更新一条书单，提供部分信息
   *
   * @param id 更新的id
   * @param book 更新后的书单
   * @return http 响应
   */
  @PatchMapping(&quot;/books/{id}&quot;)
  public HttpEntity&amp;lt;?&amp;gt; booksPatch(@PathVariable Long id, @RequestBody Book book) {
    Book exist = bookRepository.findById(id).get();
    BeanWrapper beanWrapper = new BeanWrapperImpl(book);
    PropertyDescriptor[] propertyDescriptors = beanWrapper.getPropertyDescriptors();
    List&amp;lt;String&amp;gt; nullPropertyNames = new ArrayList&amp;lt;&amp;gt;();
    for (PropertyDescriptor pd : propertyDescriptors) {
      if (beanWrapper.getPropertyValue(pd.getName()) == null) {
         nullPropertyNames.add(pd.getName());
      }
    }
    BeanUtils.copyProperties(book, exist, nullPropertyNames.toArray(new String[nullPropertyNames.size()]));
    return new ResponseEntity&amp;lt;&amp;gt;(bookRepository.save(exist), HttpStatus.OK);
  }

  /**
   * 删除一个书单
   * DELETE  /api/v1/books/{id}   删除一条书单
   *
   * @param id id
   * @return http 响应
   */
  @DeleteMapping(&quot;/books/{id}&quot;)
  public HttpEntity&amp;lt;?&amp;gt; booksDeleteOne(@PathVariable Long id) {
    Book exist = bookRepository.findById(id).get();
    bookRepository.deleteById(exist.getId());
    return new ResponseEntity&amp;lt;&amp;gt;(HttpStatus.NO_CONTENT);
  }

  /**
   * 删除所有书单
   * DELETE  /API/v1/books        删除所有书单
   *
   * @return http 响应
   */
  @DeleteMapping(&quot;/books&quot;)
  public HttpEntity&amp;lt;?&amp;gt; booksDeleteAll() {
    List&amp;lt;Book&amp;gt; books = bookRepository.findAll();
    bookRepository.deleteAll();
    return new ResponseEntity&amp;lt;&amp;gt;(HttpStatus.NO_CONTENT);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 进行测试
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/d43c2995597d45c3b3b32b828f647d75__sunawtX11XFramePeer_20190105221416.png&quot; alt=&quot;http://localhost:8080/api/v1/books 测试&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其余的测试都是成功的,但是都是理想的情况,如果发生其他的情况呢?比如,我查询不存在书籍呢?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;5、 进行错误测试:找不到资源&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个时候这个工具就不够用了,因为我们需要获取到他的状态码,所以我们需要使用
postman 了.
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/8d1da695d9fc491995f0c597804d03b7__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105221953.png&quot; alt=&quot;找不到资源&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;6、 进行错误测试:字段不符合、&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们在 Book 的实体中的 name 字段加入了 &lt;code&gt;@NotNull&lt;/code&gt;
注解,也就是非空验证。那么当客户端给的是错误的时候，会给出什么呢？
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/7e55b7e1ec144abb9c48ca1a9c0d0900__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105222450.png&quot; alt=&quot;字段不符合&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以这就涉及到统一异常处理了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_第二步统一异常处理&quot; &gt;第二步，统一异常处理&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_指定统一异常处理规范&quot; &gt;指定统一异常处理规范&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在我们遇到了两个问题，一个是 not found，应该给出 404，一个是 INVALID
REQUEST，应该给出 400.所以他们应该相应返回如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;404&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;status:404

data(可选):
{
  &quot;msg&quot; : &quot;Not found books!&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;400&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;status:400

data(可选):
{
  &quot;msg&quot; : &quot;invalid parameter&quot;,
  &quot;errors&quot;: [
    {
      &quot;resource&quot;:&quot;传过来的实体名称&quot;,
      &quot;field&quot;:&quot;字段&quot;,
      &quot;code&quot;:&quot;代码&quot;,
      &quot;message&quot;,&quot;信息&quot;
    },{
      &quot;resource&quot;:&quot;传过来的实体名称&quot;,
      &quot;field&quot;:&quot;字段&quot;,
      &quot;code&quot;:&quot;代码&quot;,
      &quot;message&quot;,&quot;信息&quot;
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_异常处理&quot; &gt;异常处理&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 如果大家细心应该可以注意到在 controller 之中，idea
给我们报了很多警告，对于我来说是绝对不允许这些警告出现的，而这些警告也是提醒了我们的可能会出现的错误所在。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/7bb71108a4774046be61bb4305da6af9__sunawtX11XFramePeer_20190105222747.png&quot; alt=&quot;controller&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt; 类 是 Java 8
新特性，是一个可以为null的容器对象。这里的提示的意思就是我们没有对获取到的
Optional
进行非空校验，校验他里面是否为空，这就是我们需要改进的地方。&lt;strong&gt;解决办法很简单，就是判断，当他为空的时候，抛出一个异常即可。&lt;/strong&gt;所以我们需要自定义自己的异常信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 自定义异常&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/07cca1aa09c94b73ad1c262415aff085__sunawtX11XFramePeer_20190105223726.png&quot; alt=&quot;ResourceNoFoundException&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/3bd738cdd2db494ea4d885bfca86578c__sunawtX11XFramePeer_20190105223732.png&quot; alt=&quot;InvalidRequestException&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 抛出异常&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在可能出现异常的地方，抛出异常。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/afa09c54e24e484a9661a465377fc640__sunawtX11XFramePeer_20190105224308.png&quot; alt=&quot;抛出异常&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时可以看到，右侧的警告全都没了，太爽！消除警告原则！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 重启，进行测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/6aca0ffcb1a94cc5a37693e693e18eb0__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105221953.png&quot; alt=&quot;进行测试&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;发现还是有点差距，这个就需要我们对响应进行封装了。我们查看控制台可以发现，抛出的使我们自定义的异常了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_封装错误信息&quot; &gt;封装错误信息&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 我们需要添加几个信息封装的类，作为响应返回的实体&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/5015e3b2d75d42edb0d8dce653e5d861__sunawtX11XFramePeer_20190105225300.png&quot; alt=&quot;ErrorResource&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/725a1d8e38864a4b918387c52db61db9__sunawtX11XFramePeer_20190105225306.png&quot; alt=&quot;FieldResource&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/bf7c83e3e64d4b51bcadbabf5b3cc74a__sunawtX11XFramePeer_20190105225314.png&quot; alt=&quot;InvalidErrorResource&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 添加一个全局异常处理，用来拦截所有的异常信息并进行封装。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/a9eb908088c942cca1633c2780422430__sunawtX11XFramePeer_20190105225717.png&quot; alt=&quot;拦截所有的异常信息并进行封装&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.restfulapi.handle;

import cn.echocow.restfulapi.exception.InvalidRequestException;
import cn.echocow.restfulapi.exception.ResourceNoFoundException;
import cn.echocow.restfulapi.resource.ErrorResource;
import cn.echocow.restfulapi.resource.FieldResource;
import cn.echocow.restfulapi.resource.InvalidErrorResource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.ArrayList;
import java.util.List;

/**
 * 对异常进行拦截然后封装到响应体
 *
 * @author Echo
 * @version 1.0
 * @date 2019-01-05 22:59
 */
@RestControllerAdvice
public class ApiExceptionHandler {

  private final Logger logger = LoggerFactory.getLogger(this.getClass());

  @ExceptionHandler(ResourceNoFoundException.class)
  public HttpEntity&amp;lt;?&amp;gt; handleNotFound(ResourceNoFoundException e) {
    ErrorResource errorResource = new ErrorResource(e.getMessage());
    logger.error(errorResource.toString());
    return new ResponseEntity&amp;lt;&amp;gt;(errorResource, HttpStatus.NOT_FOUND);
  }

  @ExceptionHandler(InvalidRequestException.class)
  public HttpEntity&amp;lt;?&amp;gt; handleInvalidRequest(InvalidRequestException e) {
    Errors errors = e.getErrors();
    List&amp;lt;FieldResource&amp;gt; fieldResources = new ArrayList&amp;lt;&amp;gt;();
    List&amp;lt;FieldError&amp;gt; fieldErrors = errors.getFieldErrors();
    for (FieldError fieldError : fieldErrors) {
      fieldResources.add(
          new FieldResource(fieldError.getObjectName(),
          fieldError.getField(),
          fieldError.getCode(),
          fieldError.getDefaultMessage())
      );
  }
    InvalidErrorResource invalidErrorResource = new InvalidErrorResource(e.getMessage(), fieldResources);
    logger.error(invalidErrorResource.toString());
    return new ResponseEntity&amp;lt;&amp;gt;(invalidErrorResource, HttpStatus.BAD_REQUEST);
  }

  @ExceptionHandler(Exception.class)
  public HttpEntity&amp;lt;?&amp;gt; handleException(Exception e){
    logger.error(e.getMessage());
    return new ResponseEntity&amp;lt;&amp;gt;(HttpStatus.INTERNAL_SERVER_ERROR);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 进行测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/25d2b143226c4ab8aac761b85e881432__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105221953.png&quot; alt=&quot;出现错误&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/62ffcebf2c8642678321e148402dbca4___20190105231339.png&quot; alt=&quot;解决&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 再次测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/a142a8c51c14451a95dfd59b49251dea__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105231459.png&quot; alt=&quot;再次测试&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就完成我们统一异常的处理。 第一版的 restful api
也就开发完毕～！当然，这只是一个简单的 restful
api，为什么说他简单？那就是他缺少了一个 Hypermedia
API！这是什么？可以访问 &lt;a href=&quot;https://api.github.com/&quot;&gt;github 的 restful api&lt;/a&gt;
就可以看到这么一个效果了。想要自己手动实现这个，自己能力还有些不足，不过欢迎大家交流学习。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用_spring_data_rest&quot; &gt;使用 spring data rest&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;上面我们自己使用 spring boot 实现了一个 restful 的
api。我们从三层，变为了两层。不过前面提到了我们没有使用的的一个依赖，spring-boot-starter-data-rest，现在，我们就基于它，来开发一个
restful api，相信我，你会很惊讶的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_引入依赖&quot; &gt;引入依赖&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/025e4ac4161046de9560066b7c28977a__sunawtX11XFramePeer_20190105232540.png&quot; alt=&quot;_sunawtX11XFramePeer_20190105232540png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_初体验&quot; &gt;初体验&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 然后你不需要修改任何代码，请直接访问 &lt;a href=&quot;http://localhost:8080/api/&quot; class=&quot;bare&quot;&gt;http://localhost:8080/api/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你会看到这么一个页面&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/4c57e6b2abd2402a92078388a507dd39___20190105232804.png&quot; alt=&quot;你会看到这么一个页面&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 然后你试着访问他给你的两个链接看看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/f283fe5780934066845334c3c1c6c157___20190105233750.png&quot; alt=&quot;然后你试着访问他给你的两个链接看看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;完美+2！同时还给出了我们需要的 Hypermedia API！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;不过值得注意，他的路径没有 v1 了&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 测试一下 api&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/db537f6b37a84cef9bef90c4fdb578a6__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235043.png&quot; alt=&quot;get&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/e742dcb8cd444b5b8eb3b7a173ff1f84__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235058.png&quot; alt=&quot;get&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/1e2850ef657a4f1ba173992ce22d82da__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235115.png&quot; alt=&quot;put&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/40990ce9fc904c1ebdec9994c71add4b__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235127.png&quot; alt=&quot;delete&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 测试一下异常情况&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/f0f8d81b5b8744a2920087b2e6077e6c__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235259.png&quot; alt=&quot;404&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/58afe28634924c7080c052f97bd59534__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190105235337.png&quot; alt=&quot;400&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;出现了意外状况，400 的期望，来了
500。。如何处理呢？在这之前，我们了解下吧。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_发生了什么&quot; &gt;发生了什么&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我，，，我也不知道啊=-=我就加了一个依赖，然后只要带有 &lt;code&gt;@Repository&lt;/code&gt;
注解且继承了 &lt;code&gt;Repository&lt;/code&gt;
及其他的子接口的接口的方法都暴露出去了。至于为什么我也不清楚，因为应该是使用了
&lt;code&gt;@RepositoryRestResource&lt;/code&gt;
注解的才应该会被暴露出去，我到现在还不能明白。这就是为啥前面要大家暂时不用那个依赖的原因。不过不碍事，我们继续。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_添加一个_v2_版本的_restful&quot; &gt;添加一个 v2 版本的 restful&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 添加 BookRestRepository&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/c779af7e12e74a28869b9aea2c1e1a59__sunawtX11XFramePeer_20190106012444.png&quot; alt=&quot;BookRestRepository&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 设置基础路径&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/4610cd26fe99456c8d39b390055e8c92__sunawtX11XFramePeer_20190106012738.png&quot; alt=&quot;设置基础路径&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 测试访问&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/653c4c84167247d79adb7d78cecbc300__crx_fhbjgbiflinjbdggehcddcbncdddomop_20190106013118.png&quot; alt=&quot;测试访问&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_关于_spring_data_rest&quot; &gt;关于 spring data rest&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;神奇的在于他的注解，关于 rest 的注解主要有四个&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;@RestController 完全自定义控制器，完全交由自己处理&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;@RepositoryRestResource 完全使用已设置的Spring Data
REST配置，不需要自定义控制&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;@RepositoryRestController 希望使用已设置的Spring Data
REST配置，但是部分需要自定义&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;@BasePathAwareController
如果您对特定于实体的操作不感兴趣但仍希望在basePath下构建自定义操作，例如Spring
MVC视图，资源等，请使用@BasePathAwareController（资料太少完全没人用的感觉）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果完全使用 spring data rest
进行处理就会暴露出我们继承的接口的方法。对于 Repository
接口主要有三个子接口，分别是 CrudRepository、
JpaRepository、PagingAndSortingRepository,他们的关系如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/df8271d33a7b48a191bbce456d70e015___20190108095946.png&quot; alt=&quot;__20190108095946png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以看到， CrudRepository 提供基础的
增删改查，PagingAndSortingRepository 又提供了分页和排序，JpaRepository
多继承了一个 QueryByExampleExecutor，用来对 QBE 的支持，对于 restful api
来说，只需继承 PagingAndSortingRepository 即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_处理参数校验&quot; &gt;处理参数校验&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前面我们测试了一下，如果我们的参数不合法，比如名称为null，他直接返回 500
的错误，我们期望的是 400 bad
request，那么我们如何修改呢？传统的controller-service-dao模式中，处理业务数据时，可以在service或者controller中处理，但是使用Spring
data
rest时，由于框架自己生成相关接口，处理相关业务就要实现监听才行。有多种方式实现监听操作，我选择其中一种进行演示：通过实现
RepositoryRestConfigurer 进行参数校验&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1、 创建 BookValidator ，实现 Validator 接口&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/7343feb284ed45b38a0b4472a94e71fc__sunawtX11XFramePeer_20190108111013.png&quot; alt=&quot;BookValidator&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2、 创建 RepositoryRestConfig，实现 RepositoryRestConfigurer 接口，覆盖
configureValidatingRepositoryEventListener 方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/9cf30d72db5f4047917956de98355eb9__sunawtX11XFramePeer_20190108111115.png&quot; alt=&quot;RepositoryRestConfig&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3、 让 BookRestRepository 继承 PagingAndSortingRepository&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/5a156227af6a4c469831d92f4fe2bf9d__sunawtX11XFramePeer_20190108111216.png&quot; alt=&quot;BookRestRepository&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;4、 运行测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/3fe843e3490a45c5937958b0f7a4870c__sunawtX11XFramePeer_20190108111359.png&quot; alt=&quot;运行测试&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;5、 对比异常&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/391e8d141c7948fc882776b478ddbb6d__sunawtX11XFramePeer_20190108111754.png&quot; alt=&quot;对比异常&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;6、 那么接下来就好办了，我们处理的异常的方式就和我们处理
InvalidRequestException 异常的方式一样的了。为什么一开始不直接用它的
RepositoryConstraintViolationException 呢？因为他是属于 spring data rest
下的，前面我们并没有引入这个包，所以不能使用，现在引入了，自然可以使用了，并且可以删除我们以前的那个
InvalidRequestException（我暂时不删除）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/5afdff176e4e42278ea8f5124fa29f79__sunawtX11XFramePeer_20190108112257.png&quot; alt=&quot;处理异常&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;7、 再次测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/9bf9be7e0c2a4553895183e518a76768__sunawtX11XFramePeer_20190108112543.png&quot; alt=&quot;再次测试&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;8、 查错&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/dd99a3d9cd9a4505ad4cb204a0f6e78f__sunawtX11XFramePeer_20190108112842.png&quot; alt=&quot;查错&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;9、 再次测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/67587e8fbd004abeac1563917d6d0259__sunawtX11XFramePeer_20190108112936.png&quot; alt=&quot;再次测试&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;10、 这样就完成了，那么测试一下更新的时候呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/e01fb9efe8294a67a51f2aa3955c0902__sunawtX11XFramePeer_20190108113149.png&quot; alt=&quot;测试一下更新&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样一个参数的校验和异常处理就完成了！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_方法自定义&quot; &gt;方法自定义&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们在实际时候，有很多他的方法我们是不希望暴露出来的，比如删除方法，如果我们不希望暴露出来，怎么办呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_隐藏方法&quot; &gt;隐藏方法&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;很简单，一个注解搞定！
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/0a07ae1ca6d9464fa21f6496c38f0f5f__sunawtX11XFramePeer_20190108113858.png&quot; alt=&quot;隐藏方法&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;为什么这里会报 500
错误，这里其实并不需要我们再次进行处理，其原因在于我们配置的全局异常处理导致的&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/f40896d2e65749fd9ec4d8ff89c05431__sunawtX11XFramePeer_20190108114706.png&quot; alt=&quot;统一异常处理&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以处理方式很简单，指定一下他要拦截的 controller 即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/46e268e8939f41cda577ea7b77be9e38__sunawtX11XFramePeer_20190108115504.png&quot; alt=&quot;controller&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/107c475d2e3c4565b07d73f62e7f1395__sunawtX11XFramePeer_20190108115558.png&quot; alt=&quot;测试&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/2db1f9635871403eac953e1d815db874__sunawtX11XFramePeer_20190108115810.png&quot; alt=&quot;测试&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_修改方法&quot; &gt;修改方法&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是在实际开发中，删除是要的有的，但是我们一般并不是真正的删除数据，而是通过修改他的
isEnabled 或者 status 达到删除的目的，这个时候就要我们自定义删除方法了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/75dc5e3d85df4de9b90344a4988defde__sunawtX11XFramePeer_20190108123753.png&quot; alt=&quot;修改方法&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_隐藏字段&quot; &gt;隐藏字段&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;查询的数据中，把实体的所有属性查出来了，那么我们要怎么隐藏其中的属性呢？很简单，一个注解即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/42576f7dcb054844ab05b84cdde36e97__sunawtX11XFramePeer_20190108124021.png&quot; alt=&quot;_sunawtX11XFramePeer_20190108124021png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot; &gt;
&lt;h5 id=&quot;_自定义查询方法&quot; &gt;自定义查询方法&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一种简单的实现就是直接利用 jpa，然后暴露出去即可，如下：
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/3b9994f7f7c74f7e8aba058f7b6f2cce__sunawtX11XFramePeer_20190108142720.png&quot; alt=&quot;然后暴露出去即可&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/24345e49bf3f4eb8ae3bc6f8ee016744__sunawtX11XFramePeer_20190108142947.png&quot; alt=&quot;然后暴露出去即可&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，这样你会发现他的url就是带有参数的了，这样也可以的。但是如果不想这样呢？比如根据作者来查询我希望的
url 是 &lt;code&gt;/api/v2/books/authors/{name}&lt;/code&gt;，那么就要用到扩充了。也就是
&lt;code&gt;@RepositoryRestController&lt;/code&gt; 注解，当然你也可以直接使用 &lt;code&gt;@RestController&lt;/code&gt;
注解的。然后在里面添加方法即可，我就不再赘述啦！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_关于测试&quot; &gt;关于测试&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们前面使用到了 2 种测试，使用 idea
的插件，功能有限，还有就是使用强大的 postman，那么如何使用 spring boot
的 test 测试呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在这之前确保你已经安装了如下依赖&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-markup&quot; data-lang=&quot;markup&quot;&gt;testImplementation(&apos;org.springframework.boot:spring-boot-starter-test&apos;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他自带的是 junit4，你也可以使用 junit5，也是非常方便的。现在我们先使用
junit4 进行测试。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/99648fea469047efae037dab43971bae__sunawtX11XFramePeer_20190108144243.png&quot; alt=&quot;_sunawtX11XFramePeer_20190108144243png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样我们便完成了一个接口的测试，你可以通过 &lt;code&gt;andExpect&lt;/code&gt;
详细的测试关于获取到的json对象的信息，你也可以接受一个返回值后进行打印查看。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果使用 junit5 呢？大体相同的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/8424aa58232e42a98d93f3c77f35063f__sunawtX11XFramePeer_20190108144503.png&quot; alt=&quot;_sunawtX11XFramePeer_20190108144503png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过要注意的是，因为在应用内进行测试，所以我们不需要添加 &lt;code&gt;/api&lt;/code&gt; 了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为什么要这样？直接用 postman 不好吗？开发的时候，我们可以使用 postman
一个一个测试，但是如果你想一整套的演示测试，这样一个一个的请求一个个测试是不是很麻烦？所以你可以将他直接书写到一个类中，比如书写一个
BookV1Test 类，然后开发完 V1
版本的，直接运行整个类，他会依次运行所有的方法，并且由于我们前面配置了测试时数据固定，不可变了，所以你可以对所有的获取到的数据进行预测，每次测试时运行的数据都是一致的，那么你就可以观察是否得到期望的值。一次性可以测试完所有的接口，是非常方便的（好像postman也有）。好就好在别人拿代码过去可以直接运行测试类查看结果了。但是我比较懒所以只写一个，大家知道就行了。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_感触&quot; &gt;感触&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己写文章总是拖拖拉拉，2019年的第一篇技术性文章（哪里有技术含量了？学渣的自我安慰。）上周六开始写的，到了周二才完工，中间无数事情打断，自己也找各种借口。而且写出来还不是很满意。不过收获颇多，在学习的时候就发现，对于spring
data
rest百度的资料都是重复性的，价值不大的一堆东西，迫不得已要科学上网使用Google，但大多时候答案都不是自己想要的。对于国内的环境，一些新的技术流入真的会有一定阻碍，需要自己不断去摸索，这个过程无疑有时候是难熬的特别是英文水平有限的时候。在这个过程中遇到的无数问题大多都是从官网上的文档中得到的答案而不是百度或者google。相比起来学习一门技术最好的文档莫过于官网了，一篇小小的博客自己也遇到很多问题，或许还有很多地方没有说清楚，自己也会努力改正的。代码中也有很多瑕疵也有很多值得优化的地方。后面也会慢慢努力，提高自己书写能力，同时也欢迎大家和我交流学习。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_参考链接&quot; &gt;参考链接&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/09/restful.html&quot;&gt;理解 RESTFul 架构
阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&quot;&gt;RESTful API
设计指南 阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html&quot;&gt;RESTful
API 最佳实践 阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/rest/docs/current/reference/html/&quot;&gt;spring
data rest&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[再见 manjaro，你好 deepin]]></description><link>https://zyue.wiki/articles/2019/01/02/1546399233990.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/01/02/1546399233990.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_成果&quot;&gt;成果&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_其它&quot;&gt;其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;从换 manjaro
到现在三个多月了吧。说实话，这个系统真的很棒，首先就是他的包管理系统真的天强，配合AUR基本都能搜到我想要的，而且装这个系统只要有点经验就挺顺利，或多或少的问题百度google也能帮上忙，不得不说果然是
arch
系的佼佼者。可是也带来了一些坏处。就是因为他包更新太过激进，每次都会提醒我该更新了，强迫症患者看到更新两个字我绝对会点的，不点心里一万个难受，三个月的时间，因为滚动更新，滚挂了三次（泪奔）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;第一次滚挂桌面，重装manjaro18&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;第二次滚挂pycharm，anaconda无法正常使用&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;第三次滚挂tim、wps，影响正常聊天和办公，回家后实在受不了了&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在犹豫了半天 &lt;a href=&quot;https://elementary.io/&quot;&gt;elementary OS&lt;/a&gt; 和
&lt;a href=&quot;https://www.deepin.org/&quot;&gt;deepin&lt;/a&gt; 后，最终选择
deepin，原因很简单，他是国产有较为完善的中文社区，能够给自己提高很好的帮助。装系统是拿来用的，不是用来折腾的。不过
deepin 的界面真的好看，不用 mint 是因为不喜欢那个界面，也不知道为什么
&lt;a href=&quot;https://distrowatch.com/&quot;&gt;distrowatch&lt;/a&gt; 上面为啥 deepin
排名那么低，一个能闯进distrowatch前10的发行版，要不就是老牌的（比如Debian、Fedora、Opensuse、Ubuntu），要不就是界面让人眼前一亮的（LinuxMint、Zorin、elementary、deepin、Solus），要不就是解决一个优秀发行版的大问题的（比如Manjaro，解决了
archlinux 安装太麻烦的问题，不过像 mx linux
这种都能够刷到前三去（他应该和 deepin 换个位置的哈哈哈），distrowatch
的排名也不太可信了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;折腾 deepin
只要半天就完事，独显也用起来了，wps、网易云、tim等等都完美运行简直太棒，以前
manjaro 折腾了三天才完事，感觉自己有点进步了哈哈哈。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_成果&quot; &gt;成果&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/706cb5bfd8a34df9a82a9cdf861e46c2__20190102113820.png&quot; alt=&quot;_20190102113820png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/8193efb218a948dbad1b8098d284889a__20190102114251.png&quot; alt=&quot;_20190102114251png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/2ac791f2e89446dbae4e8311986a47ce__20190102114312.png&quot; alt=&quot;_20190102114312png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/65b6ef6707a04006a15418cee672a19d__20190102114625.png&quot; alt=&quot;_20190102114625png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_其它&quot; &gt;其它&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;deepin 其实也出现了一些问题，安装时卡住，和 manjaro
一样修改启动项解决，进入系统后直接用显卡管理切换闭源的即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;tim 有时会崩溃&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;下方 dock 有时会突然消失&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;应用商店的应用有些过老了，而且安装真的没有 manjaro 方便。。。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;桌面特效方面不及 manjaro kde 的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[spring security + gradle + spring mvc 模板化配置]]></description><link>https://zyue.wiki/articles/2019/01/02/1546395090197.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2019/01/02/1546395090197.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_springmvcinitializer&quot;&gt;SpringMvcInitializer&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_configrootconfig&quot;&gt;config/RootConfig&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_configwebconfig&quot;&gt;config/WebConfig&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_configsecurityconfig&quot;&gt;config/SecurityConfig&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_configspringsecurityinitializer&quot;&gt;config/SpringSecurityInitializer&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_webhellocontroller&quot;&gt;web/HelloController&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_pagesadmin_html&quot;&gt;pages/admin.html&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_pageshello_html&quot;&gt;pages/hello.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;以前自己一直被安全的问题困扰，对这方面知识欠缺，最近学习了 spring
security，发现其实也别有一番洞天。写了一个简单
demo放在博客上，以便随用随取。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;目录结构如图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn//file/2019/01/74b6f15719c44d858fbd0aedc0d79751___20190102101236.png&quot; alt=&quot;__20190102101236png&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;附上对应的文件，已经写好了注释&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_springmvcinitializer&quot; &gt;SpringMvcInitializer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.spring;

import cn.echocow.spring.config.RootConfig;
import cn.echocow.spring.config.WebConfig;
import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

/**
 * 继承 AbstractAnnotationConfigDispatcherServletInitializer，在 servlet 3.0 环境中
 * 容器会在类路径中查找实现 ServletContainInitializer 接口的类，如果发现就使用他来配置 servlet
 * spring 提供了这个借口实现，名为 SpringServletContainerInitializer，这个类又会查找实现
 * WebApplicationInitializer 的类并将配置的任务交给他来完成，spring 3.2 引入一个基础实现，也就是
 * AbstractAnnotationConfigDispatcherServletInitializer，当继承后，一旦部署就会自动被发现
 * 简单地说相当于web.xml文件
 * @author Echo
 * @version 1.0
 * @date 2019-01-01 13:34
 */
public class SpringMvcInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {
  /**
   * 应用程序上下文配置文件，可以是多个，即相当于多个xml文件配置
   * 返回的带有 @Configuration 的类一般定义 ContextLoaderListener 应用上下文中的 bean
   * 此处一般配置应用中的其它 bean，通常是驱动应用后端的中间件或数据层组件
   * @return 类
   */
   @Override
   protected Class&amp;lt;?&amp;gt;[] getRootConfigClasses() {
     return new Class&amp;lt;?&amp;gt;[]{RootConfig.class};
   }

  /**
   * 获取应用程序上下文配置文件，即配置类
   * 如果所有配置已经在 RootConfig 中配置，则可以设为null
   * 返回的带有 @Configuration 的类一般定义 DispatcherServlet 应用上下文中的 bean
   * 加载包含 web 组件的 bean，如控制器、视图解析器以及处理器映射等
   * @return 类
   */
   @Override
   protected Class&amp;lt;?&amp;gt;[] getServletConfigClasses() {
     return new Class&amp;lt;?&amp;gt;[]{WebConfig.class};
   }

  /**
   * 即将 DispatcherServlet 映射到 “/”，表示处理所有进入应用的请求。可以为多个。
   * @return 类
   */
   @Override
   protected String[] getServletMappings() {
     return new String[]{&quot;/&quot;};
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_configrootconfig&quot; &gt;config/RootConfig&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.spring.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.FilterType;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

/**
 * 相当于spring的xml配置文件,排除掉有 EnableWebMvc 注解的类，因为它会被自动发现
 *
 * @author Echo
 * @version 1.0
 * @date 2019-01-01 13:33
 *
 @Configuration
 @ComponentScan(basePackages = { &quot;cn.echocow.spring&quot; },
       excludeFilters = {
            @ComponentScan.Filter(type = FilterType.ANNOTATION, value = EnableWebMvc.class)
       })
 public class RootConfig {

 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_configwebconfig&quot; &gt;config/WebConfig&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.spring.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.thymeleaf.spring5.SpringTemplateEngine;
import org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver;
import org.thymeleaf.spring5.view.ThymeleafViewResolver;

/**
 * 配置 spring mvc
 *
 * @author Echo
 * @version 1.0
 * @date 2019-01-01 15:53
 */
@EnableWebMvc
@Configuration
@ComponentScan({&quot;cn.echocow.spring.*&quot;})
public class WebConfig {
  /**
   * 配置模板解析
   * @return 模板解析
   */
  @Bean
  public SpringResourceTemplateResolver springResourceTemplateResolver() {
    SpringResourceTemplateResolver springResourceTemplateResolver = new SpringResourceTemplateResolver();
    springResourceTemplateResolver.setPrefix(&quot;/WEB-INF/pages/&quot;);
    springResourceTemplateResolver.setSuffix(&quot;.html&quot;);
    springResourceTemplateResolver.setTemplateMode(&quot;HTML&quot;);
    springResourceTemplateResolver.setCacheable(false);
    springResourceTemplateResolver.setCharacterEncoding(&quot;UTF-8&quot;);
    return springResourceTemplateResolver;
  }

  /**
   * 配置模板引擎
   * @return 模板引擎
   */
   @Bean
   public SpringTemplateEngine springTemplateEngine() {
     SpringTemplateEngine springTemplateEngine = new SpringTemplateEngine();
     springTemplateEngine.setTemplateResolver(springResourceTemplateResolver());
     return springTemplateEngine;
   }

  /**
   * 模板配置
   * @return 模板配置
   */
   @Bean
   public ThymeleafViewResolver thymeleafViewResolver() {
     ThymeleafViewResolver thymeleafViewResolver = new ThymeleafViewResolver();
     thymeleafViewResolver.setTemplateEngine(springTemplateEngine());
     thymeleafViewResolver.setCharacterEncoding(&quot;UTF-8&quot;);
     return thymeleafViewResolver;
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_configsecurityconfig&quot; &gt;config/SecurityConfig&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.spring.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

/**
 * 安全配置类 @EnableWebSecurity 启动 web 安全，此类必须继承 WebSecurityConfigurerAdapter
 * 相当于spring-security.xml中的配置
 *
 * @author Echo
 * @version 1.0
 * @date 2019-01-01 13:33
 */
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  /**
   * 在内存中设置三个用户
   * @param auth 授权
   * @throws Exception 异常
   */
   @Autowired
  public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
    auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder()).
                withUser(&quot;hongxf&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;USER&quot;);
    auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder()).
                withUser(&quot;admin&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;ADMIN&quot;);
    auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder()).
                withUser(&quot;dba&quot;).password(new BCryptPasswordEncoder().encode(&quot;123456&quot;)).roles(&quot;DBA&quot;);
  }

  /**
   * 配置权限要求
   * @param http http
   * @throws Exception 授权
   */
   @Override
   protected void configure(HttpSecurity http) throws Exception {
     http.authorizeRequests()
         .antMatchers(&quot;/admin/**&quot;).access(&quot;hasRole(&apos;ROLE_ADMIN&apos;)&quot;)
         .antMatchers(&quot;/dba/**&quot;).access(&quot;hasRole(&apos;ROLE_ADMIN&apos;) or hasRole(&apos;ROLE_DBA&apos;)&quot;)
         .and().formLogin();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_configspringsecurityinitializer&quot; &gt;config/SpringSecurityInitializer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.spring.config;

import org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;

/**
 * 继承AbstractSecurityWebApplicationInitializer类编写类文件SpringSecurityInitializer
 * spring 会发现他，并用它在 web 容器中注册 DelegatingFilterProxy
 * 可以选择重载他的 appendFilters 或 insertFilters 方法来注册自己选择的 filter
 * 只注册 DelegatingFilterProxy，就不用重载。
 * DelegatingFilterProxy 会拦截发往应用中的所有的请求，并委托给 id 为 springSecurityFilterChain bean
 * 启动时，会自动创建这些 bean
 * 相当于在web.xml中配置spring security的filter
 *
 * @author Echo
 * @version 1.0
 * @date 2019-01-01 13:34
 */
 public class SpringSecurityInitializer extends AbstractSecurityWebApplicationInitializer {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_webhellocontroller&quot; &gt;web/HelloController&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;package cn.echocow.spring.web;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

/**
 * @author Echo
 * @version 1.0
 * @date 2019-01-01 13:34
 */
@Controller
public class HelloController {
  @RequestMapping(value = { &quot;/&quot;, &quot;/welcome&quot; }, method = RequestMethod.GET)
  public ModelAndView welcomePage() {
    ModelAndView model = new ModelAndView();
    model.addObject(&quot;title&quot;, &quot;Spring Security Hello World&quot;);
    model.addObject(&quot;message&quot;, &quot;This is welcome page!&quot;);
    model.setViewName(&quot;hello&quot;);
    return model;
  }
  @RequestMapping(value = &quot;/admin&quot;, method = RequestMethod.GET)
  public ModelAndView adminPage() {
    ModelAndView model = new ModelAndView();
    model.addObject(&quot;title&quot;, &quot;Spring Security Hello World&quot;);
    model.addObject(&quot;message&quot;, &quot;This is protected page - Admin Page!&quot;);
    model.setViewName(&quot;admin&quot;);
    return model;
  }
  @RequestMapping(value = &quot;/dba&quot;, method = RequestMethod.GET)
  public ModelAndView dbaPage() {
    ModelAndView model = new ModelAndView();
    model.addObject(&quot;title&quot;, &quot;Spring Security Hello World&quot;);
    model.addObject(&quot;message&quot;, &quot;This is protected page - Database Page!&quot;);
    model.setViewName(&quot;admin&quot;);
    return model;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_pagesadmin_html&quot; &gt;pages/admin.html&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
&amp;lt;html lang=&quot;zh&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
  xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
 &amp;lt;title&amp;gt;admin&amp;lt;title&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1 th:text=&quot;|标题: ${title}|&quot;&amp;gt;Title : XXX&amp;lt;h1&amp;gt;
&amp;lt;h1 th:text=&quot;|信息: ${message}|&quot;&amp;gt;Message : XXX&amp;lt;h1&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_pageshello_html&quot; &gt;pages/hello.html&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
&amp;lt;html lang=&quot;zh&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
  xmlns:th=&quot;http://www.thymeleaf.org&quot;&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
 &amp;lt;title&amp;gt;hello&amp;lt;title&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1 th:text=&quot;|标题: ${title}|&quot;&amp;gt;Title : XXX&amp;lt;h1&amp;gt;
&amp;lt;h1 th:text=&quot;|信息: ${message}|&quot;&amp;gt;Message : XXX&amp;lt;h1&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[manjaro 笔记]]></description><link>https://zyue.wiki/articles/2018/09/16/1546344571882.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/09/16/1546344571882.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_成果&quot;&gt;成果&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_桌面&quot;&gt;桌面&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_浏览器&quot;&gt;浏览器&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_ide&quot;&gt;ide&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_配置&quot;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_问题&quot;&gt;问题&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_显卡问题&quot;&gt;显卡问题&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_双硬盘问题&quot;&gt;双硬盘问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这些天有点心力憔悴，被manjaro完虐。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;周二的时候不知道抽啥风，可能是忍不了那么乱的 windows
吧，然后下定决心要直接装 linux，于是在众多的发行版中，选择力 arch 系的
manjaro。原本第一打算是 ubunto 系的 deepin
的，但是朋友推荐了这款包管理方面排名第一并且还好用的
manjaro。不得不说我是一个懒人，在知道他强大的包后，就下定决心安装他了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;来看一张包的对比图（2018-3）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/manjaro/1.1.png&quot; alt=&quot;对比&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;顺手报了一个计算机二级，本想在二级考完以后再重装，但是实在刷不下去二级的题目，然后在前天忍不住就提前安装了这个系统。然后就一直被虐到今天=-=&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先来看看这些天安装下来的成果吧。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_成果&quot; &gt;成果&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_桌面&quot; &gt;桌面&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;目前比较满意的一款，配合右侧工具可随时查看自己电脑的状态&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/manjaro/1.4.png&quot; alt=&quot;桌面&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_浏览器&quot; &gt;浏览器&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;依旧 chrome ，更醒后这种简洁风简直美如画！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/manjaro/1.5.png&quot; alt=&quot;浏览器&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_ide&quot; &gt;ide&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己的开发环境自然要打扮一番！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/manjaro/1.6.png&quot; alt=&quot;idea1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/manjaro/1.8.png&quot; alt=&quot;idea2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_配置&quot; &gt;配置&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;系统配置感觉还不错&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/manjaro/1.7.png&quot; alt=&quot;配置&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题&quot; &gt;问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己折腾这个系统感觉都花了很长时间，遇到了各种各样的问题，自己也慢慢一个一个解决，选了几个典型的将它记录下来。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_显卡问题&quot; &gt;显卡问题&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不得不说，大多数的硬件厂家对 linux 的系统并不是那么友好的，我的配置是 i7
6700HQ + GTX960M
的笔记本，在第一次安装的时候顺利得一塌糊涂，就是分区的时候纠结了会儿，这个后面说道，不过第一次真的很顺利的安装成功了。不过后面开机后总是卡死，键盘鼠标没动静。。。后来没办法只有重新安装，而后面的安装出现的第一个问题就是显卡问题，导致进不去安装页面。后来就是各种百度，也一一解决了问题，不过自己也找到了一种解决办法。（用的ubunto的方法）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;安装时 在 &lt;code&gt;BOOT： Manjaro.x86_64 …​.&lt;/code&gt; 摁下 &lt;code&gt;E&lt;/code&gt; ，然后 在`quiet`
后面添加 &lt;code&gt;nouveau.modeset=0&lt;/code&gt; ，然后 摁下 F10 即可进入安装界面了。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;修改 &lt;code&gt;/etc/default/grub&lt;/code&gt; ，然后第四行 &lt;code&gt;quiet&lt;/code&gt; 后面添加
&lt;code&gt;nouveau.modeset=0&lt;/code&gt; ，重启即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然我也找到了其他可行的方法，比如修改 driver 为 intel ，或者添加
acpi_osi 都行，不过网上都有记载就不一一重复了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_双硬盘问题&quot; &gt;双硬盘问题&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己的配置是 &lt;code&gt;256G + 1T&lt;/code&gt;，但是 manjaro
提供的只是单硬盘分区，这很烦，系统安装在了 固态
里面，另外一个机械硬盘当然不能不用，而且 256
确实很小啊。网上没找到解决方案，就在自己苦恼的时候，突然想到一种方法：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;使用 256G 的存放系统&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;然后 1T 的将它挂载上去，划分逻辑卷&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;将文档还有占用大的放在 1T 里面，256 就存放系统的所有东西即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以目前我的分区是这样的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/manjaro/1.10.png&quot; alt=&quot;分区&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;总结下来是这样的 - 500 G —&amp;gt; hdd_software 挂载到 /opt 目录 ——&amp;gt; pacman
默认安装目录 - 500 G —&amp;gt; hdd_documents 挂载到/documents 目录 ——&amp;gt;
用来存放大文件的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就合理利用起来了 1T 的空间，现在如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/manjaro/1.11.png&quot; alt=&quot;分区&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 17 创建一个脚本]]></description><link>https://zyue.wiki/articles/2018/02/22/1546344580391.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/22/1546344580391.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在system1上创建一个名为/root/foo.sh的脚本，让其提供下列特性： -
当运行/root/foo.sh redhat,输出为fedora - 当运行/root/foo.sh
fedora,输出为redhat -
当没有任何参数或者参数不是redhat或者fedora时，其错误输出产生以下的信息：/root/foo.sh
redhat:fedora&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;切换到 root 目录，并编辑文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;cd ~
vim foo.sh&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;编写脚本&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;#!/bin/bash
case $1 in
   redhat)
     echo fedora
     ;;
   fedora)
     echo redhat
     ;;
   *)
   echo &apos;/root/foo.sh redhat:fedora&apos;
esac

:wq&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加可执行权限并测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;[root@system1 ~]# chmod +x foo.sh
[root@system1 ~]# ./foo.sh
/root/foo.sh redhat:fedora
[root@system1 ~]# ./foo.sh red
/root/foo.sh redhat:fedora
[root@system1 ~]# ./foo.sh redhat
fedora&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[CentOS7 tomcat 多域名 多应用 添加到 nginx]]></description><link>https://zyue.wiki/articles/2018/09/08/1546344581233.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/09/08/1546344581233.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_前提&quot;&gt;前提&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_问题&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_解决&quot;&gt;解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近遇到一个比较棘手的问题，以前给易班开发了两个应用 &lt;strong&gt;网薪商城&lt;/strong&gt; 和
&lt;strong&gt;座位预约&lt;/strong&gt; ，都是使用 ssh 开发，是自己学习初期开发出来，将它部署在了
centos + tomcat 的环境上，域名对应我的二级域名 yiban.echocow.cn/YBStore
和 yiban.echocow.cn/YBSeatOrder ，后面的路径对应不同的应用，用 tomcat
做的多域名配置。而后面，又开发了一个 &lt;strong&gt;易运动&lt;/strong&gt;
应用，但是这个应用完全是前后端分离的，使用 nginx 代理静态页面，vertx
做后端部署在服务器的 8000 端口，域名同样使用
yiban.echocow.cn，引用对应的路径为 /YBSport&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_前提&quot; &gt;前提&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;目前已有的应用，部署在 tomcat 之上&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;tomcat admin —— admin.echocow.cn&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;网薪商城 ———— yiban.echocow.cn/YBStore&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;座位预约 ———— yiban.echoocw.cn/YBSeatOrder&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置文件 server.xml 中 Service 如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;Service name=&quot;Catalina&quot;&amp;gt;
  &amp;lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot;
         URIEncoding=&apos;GBK&apos; acceptCount=&quot;500&quot; maxThreads=&quot;400&quot;  maxHttpHeaderSize=&quot;8192&quot; /&amp;gt;
  &amp;lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&amp;gt;
  &amp;lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&amp;gt;
    &amp;lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&amp;gt;
      &amp;lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;
           resourceName=&quot;UserDatabase&quot;/&amp;gt;
      &amp;lt;/Realm&amp;gt;
    &amp;lt;!-- 管理员 --&amp;gt;
    &amp;lt;Host name=&quot;admin.echocow.cn&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&amp;gt;
      &amp;lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;
           prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;
           pattern=&quot;%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b&quot; /&amp;gt;
    &amp;lt;/Host&amp;gt;
    &amp;lt;!-- 易班 --&amp;gt;
    &amp;lt;Host name=&quot;yiban.echocow.cn&quot; appBase=&quot;webapps/yiban&quot; port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;
        connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&amp;gt;
        &amp;lt;Context path=&quot;/YBSeatOrder&quot; docBase=&quot;YBSeatOrder&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&amp;gt;
        &amp;lt;Context path=&quot;/YBStore&quot; docBase=&quot;YBStore&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&amp;gt;
    &amp;lt;/Host&amp;gt;
  &amp;lt;/Engine&amp;gt;
&amp;lt;/Service&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;有一个新应用 &lt;strong&gt;易运动&lt;/strong&gt; ，部署在 nginx 上，配置如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;server {
    listen 80;
    server_name yiban.echocow.cn;
    access_log  logs/yiban.access.log  main;
    location /YBSport {
        root    /root/yiban/;
        index   index.html;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题&quot; &gt;问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;tomcat 与 nginx 同时占用了 80 端口，只能舍掉一个，但是只能使用 nginx
，因为 tomcat 对静态页面支持是没有 nginx 好的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;所以，我必须在 不改变原来应用 和 路径 的情况下，将 tomcat 部署到 nginx
之中&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_解决&quot; &gt;解决&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一开始不打算修改 tomcat 的配置的，但是后来发现不修改不行。不能使用
tomcat 的域名配置，只能使用 nginx 的域名配置，&lt;strong&gt;然后将 tomcat
的应用部署在本地不同端口上，使用 nginx
对不同路径的应用进行重定向至其本地端口上。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;tomcat server,xml修改配置文件如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;!-- 8080 端口 --- 管理员 --&amp;gt;
&amp;lt;Service name=&quot;Catalina&quot;&amp;gt;
   &amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot;
               redirectPort=&quot;8443&quot;  URIEncoding=&apos;GBK&apos;
              acceptCount=&quot;500&quot; maxThreads=&quot;400&quot;  maxHttpHeaderSize=&quot;8192&quot; /&amp;gt;
   &amp;lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&amp;gt;
   &amp;lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&amp;gt;
     &amp;lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&amp;gt;
     &amp;lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;
         resourceName=&quot;UserDatabase&quot;/&amp;gt;
     &amp;lt;/Realm&amp;gt;
     &amp;lt;!-- 部署到本地 --&amp;gt;
     &amp;lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&amp;gt;
        &amp;lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;
             prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;
             pattern=&quot;%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b&quot; /&amp;gt;
     &amp;lt;/Host&amp;gt;
  &amp;lt;/Engine&amp;gt;
&amp;lt;/Service&amp;gt;

&amp;lt;!-- 8081 端口 --- 易班引用 --&amp;gt;
&amp;lt;Service name=&quot;Catalina&quot;&amp;gt;
  &amp;lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot;
         URIEncoding=&apos;GBK&apos; acceptCount=&quot;500&quot; maxThreads=&quot;400&quot;  maxHttpHeaderSize=&quot;8192&quot; /&amp;gt;
  &amp;lt;Connector port=&quot;8010&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&amp;gt;
  &amp;lt;!-- 部署到本地 --&amp;gt;
  &amp;lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&amp;gt;
    &amp;lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&amp;gt;
    &amp;lt;Realm className=&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;
         resourceName=&quot;UserDatabase&quot;/&amp;gt;
    &amp;lt;/Realm&amp;gt;
    &amp;lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps/yiban&quot; port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;
        connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&amp;gt;
        &amp;lt;Context path=&quot;/YBSeatOrder&quot; docBase=&quot;YBSeatOrder&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&amp;gt;
        &amp;lt;Context path=&quot;/YBStore&quot; docBase=&quot;YBStore&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&amp;gt;
    &amp;lt;/Host&amp;gt;
  &amp;lt;/Engine&amp;gt;
&amp;lt;/Service&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样，对应下来就是&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;应用&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;url&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;管理员&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;localhost:8080&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;网薪商城&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;localhost:8081/YBStore&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;座位预约&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;localhost:8081/YBSeatOrder&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;nginx 就可以对其交给不同的端口的应用来处理了：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;server {
    listen 80;
    server_name yiban.echocow.cn;
    access_log  logs/yiban.access.log  main;
    # 易运动
    location /YBSport {
        root    /root/yiban/;
        index   index.html;
    }
    # 网薪商城
    location /YBStore {
        proxy_pass http://127.0.0.1:8081/YBStore;
        proxy_redirect default;
    }
    # 作为预约
    location /YBSeatOrder/ {
        proxy_pass http://127.0.0.1:8081/YBStore;
        proxy_redirect default;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样就能实现 nginx 即代理静态页面又代理 tomcat 了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[idea Error:failed to create a child event loop.]]></description><link>https://zyue.wiki/articles/2018/09/09/1546344585141.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/09/09/1546344585141.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_解决办法&quot;&gt;解决办法&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_其他办法&quot;&gt;其他办法&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_问题&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;今天学弟安装 idea 的时候遇到一个问题：&lt;strong&gt;idea Error:failed to create a
child event loop.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.1.png&quot; alt=&quot;idea错误&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后日志报错： &amp;gt; Cannot start internal HTPP server…..&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.2.png&quot; alt=&quot;日志错误&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_解决办法&quot; &gt;解决办法&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;按照提示，应该是被防火墙拦截了，于是寻找 windows 的防火墙&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.3.png&quot; alt=&quot;firewall&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;检查防火墙状态&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.4.jpg&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;点击左侧 允许应用或功能通过 windows defender 防火墙&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.5.jpg&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;点击右下侧 允许其他程序，添加 idea。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;按道理来说这样就可以了，但是后面给学弟运行的时候 jdk
又报错，还是需要重复的操作配置 jdk。于是想用其他的办法解决。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_其他办法&quot; &gt;其他办法&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;点击左侧 启用或关闭 windows defender 防火墙&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.6.jpg&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我将它们全部禁用&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.7.jpg&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后发现，可以运行了&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.8.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是不可能禁用他的防火墙啊，因为还是希望使用到的，所以我又使用推荐设置开启了防火墙&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.9.jpg&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;防火墙自动开启&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/other/1.10.jpg&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;开启以后发现，idea 依旧可以正常使用&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其实我也不太清楚原因，我的猜测是
先去添加应用通过，添加了后，idea是可以的，但是后面发现 jdk报错，检查 jdk
是在 d
盘，我还要单独配置jdk通过防火墙配置，很麻烦。于是，我尝试先关闭了防火墙，让idea能够建立了连接能够通过防火墙，然后再开启防火墙，他就默认能够通过防火墙了。这样防火墙还是在的。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题&quot; &gt;问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果 windows
更新，或者其他的防火墙操作，那么这个就会失效，还会报一样的错。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果有哪位大佬能够解决，望告知。！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[eclipse 快捷方式 打开报错]]></description><link>https://zyue.wiki/articles/2018/09/09/1546344576907.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/09/09/1546344576907.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_问题&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_解决办法&quot;&gt;解决办法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;今天室友重装系统，所有软件重新安装，然后安装到 eclipse
的时候，发现快捷方式无法打开，但是在 eclipse 的目录下可以打开
eclipse.exe，很是奇怪。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题&quot; &gt;问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;打开快捷方式报错如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/questions/eclipse1.1.png&quot; alt=&quot;错误啦&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我将 eclipse.exe 复制到桌面也不行，报错如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/questions/eclipse1.2.png&quot; alt=&quot;错误啦&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是打开安装目录的 eclipse.exe 是没有问题的:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/questions/eclipse1.3.jpg&quot; alt=&quot;成功打开&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_解决办法&quot; &gt;解决办法&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;查看出错原因，发现问题&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/questions/eclipse1.4.jpg&quot; alt=&quot;查看原因&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;去寻找目录，对比文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/questions/eclipse1.5.png&quot; alt=&quot;对比&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;发现文件夹名不对，修改文件夹的名字&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/questions/eclipse1.6.png&quot; alt=&quot;修改&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;再次打开，成功！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/questions/eclipse1.7.jpg&quot; alt=&quot;修改&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[vmware 安装 CentOS7 + 主机名 + 配置静态 ip]]></description><link>https://zyue.wiki/articles/2018/09/11/1546344587216.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/09/11/1546344587216.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_在这之前&quot;&gt;在这之前&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_1_打开编辑&quot;&gt;1. 打开编辑&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2_打开虚拟网络编辑器&quot;&gt;2. 打开虚拟网络编辑器&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_3_修改子网_ip&quot;&gt;3. 修改子网 IP&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_4_修改_dhcp&quot;&gt;4. 修改 DHCP&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_5_修改_nat_设置的网关_ip&quot;&gt;5. 修改 NAT 设置的网关 IP&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_6_新建虚拟机&quot;&gt;6.新建虚拟机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_centos7_安装&quot;&gt;CentOS7 安装&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_1_查看网卡配置是否为_nat&quot;&gt;1. 查看网卡配置是否为 NAT&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2_选择最小化安装&quot;&gt;2. 选择最小化安装&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_3_选择安装硬盘&quot;&gt;3. 选择安装硬盘&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_4_配置网络重点&quot;&gt;4. 配置网络（重点）&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_5_开始安装&quot;&gt;5. 开始安装&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_6_添加密码&quot;&gt;6. 添加密码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_检查网络&quot;&gt;检查网络&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_问题&quot;&gt;问题&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_q忘记了第四步就安装了怎么办&quot;&gt;Q：忘记了第四步就安装了怎么办？&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_qvi_如何保存退出&quot;&gt;Q：vi 如何保存退出？&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_q主机名忘记修改如何修改&quot;&gt;Q：主机名忘记修改如何修改？&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_qping_以后一直跳出_64_byte&quot;&gt;Q：ping 以后一直跳出 64 byte…？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;学习 Hadoop ，第一件事就是需要有 linux 环境，因为他最好的运行环境是
linux，而我们的选择，是在服务器端占有一席之地的 centos7
操作系统。作为老牌稳定的服务器系统，是非常值得我们花时间去学习的。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;环境说明： - 虚拟机：vmware - 操作系统：centos7 - 网络连接：NAT -
网络配置：静态 ip&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_在这之前&quot; &gt;在这之前&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们需要稍微配置下 vmware 的 nat （why？为了以后出现问题方便统一纠正）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_1_打开编辑&quot; &gt;1. 打开编辑&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.1.png&quot; alt=&quot;编辑&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_2_打开虚拟网络编辑器&quot; &gt;2. 打开虚拟网络编辑器&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.2.png&quot; alt=&quot;虚拟网络编辑器&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_3_修改子网_ip&quot; &gt;3. 修改子网 IP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;image::https://resources.echocow.cn/image/blog/hodoop/1.3.png[修改子网
IP]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_4_修改_dhcp&quot; &gt;4. 修改 DHCP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改 DHCP 设置的 IP 地址段&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.4.png&quot; alt=&quot;DHCP 设置&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_5_修改_nat_设置的网关_ip&quot; &gt;5. 修改 NAT 设置的网关 IP&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.5.png&quot; alt=&quot;NAT 设置&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_6_新建虚拟机&quot; &gt;6.新建虚拟机&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.6.png&quot; alt=&quot;新建&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;虚拟机的简历过程我就不多赘述。重点在于网络配置&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_centos7_安装&quot; &gt;CentOS7 安装&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_1_查看网卡配置是否为_nat&quot; &gt;1. 查看网卡配置是否为 NAT&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.7.png&quot; alt=&quot;编辑虚拟机设置&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.8.png&quot; alt=&quot;查看网络适配器&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_2_选择最小化安装&quot; &gt;2. 选择最小化安装&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.9.png&quot; alt=&quot;最小化&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_3_选择安装硬盘&quot; &gt;3. 选择安装硬盘&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.10.png&quot; alt=&quot;安装硬盘&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_4_配置网络重点&quot; &gt;4. 配置网络（重点）&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.11.png&quot; alt=&quot;点击网络配置&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_4_1_configure&quot; &gt;4.1 configure&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;点击右下角 configure&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.12.png&quot; alt=&quot;configure&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_4_2_配置_ipv4&quot; &gt;4.2 配置 ipv4&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;image::https://resources.echocow.cn/image/blog/hodoop/1.13.png[配置
ipv4]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_4_3_具体配置&quot; &gt;4.3 具体配置&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;选择方式，设置 ip、掩码、网关、dns，配置完成后，右下角 save&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.14.png&quot; alt=&quot;具体配置&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_4_4_开启网络&quot; &gt;4.4 开启网络&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;获取IP地址（图上多打了一个i），设置主机名，左上角保存&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.15.png&quot; alt=&quot;开启网络&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_5_开始安装&quot; &gt;5. 开始安装&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.16.png&quot; alt=&quot;开始安装&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_6_添加密码&quot; &gt;6. 添加密码&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.17.png&quot; alt=&quot;添加密码&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_检查网络&quot; &gt;检查网络&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你 &lt;strong&gt;电脑通网的&lt;/strong&gt; ，尝试
&lt;code&gt;ping www.baidu.com&lt;/code&gt;，出现如下信息，网络配置成功&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.18.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题&quot; &gt;问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_q忘记了第四步就安装了怎么办&quot; &gt;Q：忘记了第四步就安装了怎么办？&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_解决办法一修改配置文件&quot; &gt;解决办法一：修改配置文件&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;切换到网卡文件目录 &lt;code&gt;cd /etc/sysconfig/network-scripts/&lt;/code&gt;，查看目录文件
&lt;code&gt;ls&lt;/code&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.20.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;编辑文件 &lt;code&gt;vim ifcfg-ens33&lt;/code&gt;，按下 &lt;code&gt;i&lt;/code&gt;
进入编辑模式，修改`BOOTPROTO=&quot;dhcp&quot;` 为 &lt;code&gt;BOOTPRTO=none&lt;/code&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.21.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;下方添加如下内容，其中 IPADDR 可以自定义 128-255 区间
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.22.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;重启网络，尝试 &lt;code&gt;ping www.baidu.com&lt;/code&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.23.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_解决办法二使用命令修改&quot; &gt;解决办法二：使用命令修改&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此方法只要一条命令即可，如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;nmcli con modify ens33 ipv4.method static ipv4.addr 192.168.112.159/24 ipv4.gateway 192.168.112.2 ipv4.dns 192.168.112.2 connection.autoconnect yes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后重启网络，ping 一下即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;systemctl restart network
ping www.baidu.com&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_qvi_如何保存退出&quot; &gt;Q：vi 如何保存退出？&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_解决办法&quot; &gt;解决办法&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当你编辑完成后，按下 &lt;code&gt;ESC&lt;/code&gt; ，然后输入冒号 &lt;code&gt;:&lt;/code&gt; ，再输入
&lt;code&gt;wq&lt;/code&gt;，即可保存退出。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_q主机名忘记修改如何修改&quot; &gt;Q：主机名忘记修改如何修改？&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;查看主机名&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.24.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;或者输入 &lt;code&gt;hostname&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/1.25.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_解决办法一修改配置文件_2&quot; &gt;解决办法一：修改配置文件&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;修改配置文件 &lt;code&gt;vi /etc/hostname&lt;/code&gt;,保存退出 &lt;code&gt;:wq&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;重启即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_解决办法二使用命令修改_2&quot; &gt;解决办法二：使用命令修改&lt;/h4&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;使用如下命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;hostnamectl set-hostname 主机名&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li &gt;
&lt;p&gt;重启即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_qping_以后一直跳出_64_byte&quot; &gt;Q：ping 以后一直跳出 64 byte…？&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_解决办法_2&quot; &gt;解决办法&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你只要 按下 &lt;code&gt;ctrl + c&lt;/code&gt; 即可结束 ping。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[vmware 克隆 CentOS7 后 网络配置]]></description><link>https://zyue.wiki/articles/2018/09/11/1546344581641.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/09/11/1546344581641.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_克隆虚拟机&quot;&gt;克隆虚拟机&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_1_关闭虚拟机右键创建克隆&quot;&gt;1. 关闭虚拟机，右键创建克隆&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2_克隆&quot;&gt;2. 克隆&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_3_重新生成_mac_地址重要&quot;&gt;3. 重新生成 MAC 地址（重要）&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_4_打开并登录新的虚拟机查看网络还是上一台的&quot;&gt;4. 打开并登录新的虚拟机，查看网络还是上一台的&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_5_配置网络重要&quot;&gt;5. 配置网络（重要）&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_6_测试&quot;&gt;6. 测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_问题&quot;&gt;问题&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_q_我没记住新的_mac_地址怎么办&quot;&gt;Q 我没记住新的 MAC 地址怎么办？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在上一篇文章中说到了新建虚拟机，然后进行配置 主机名 + 静态
IP。这一篇我们将要使用 vmware 的克隆功能进行虚拟机的克隆以及重新配置 IP
地址。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;环境： - 已配置好网络的虚拟机一台 - 配置好的 nat&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_克隆虚拟机&quot; &gt;克隆虚拟机&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_1_关闭虚拟机右键创建克隆&quot; &gt;1. 关闭虚拟机，右键创建克隆&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.1.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_2_克隆&quot; &gt;2. 克隆&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_2_1_克隆向导&quot; &gt;2.1. 克隆向导&lt;/h4&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.2.png&quot; alt=&quot;克隆向导&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_2_2_克隆当前状态可自己创建快照创建快照时状态&quot; &gt;2.2. 克隆当前状态（可自己创建快照，创建快照时状态）&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.3.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_2_3_创建完整克隆&quot; &gt;2.3. 创建完整克隆&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.4.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_2_4_设置虚拟机名字&quot; &gt;2.4. 设置虚拟机名字&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.5.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_2_5_开始克隆&quot; &gt;2.5. 开始克隆&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.6.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_2_6_克隆完成&quot; &gt;2.6. 克隆完成&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.7.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_2_7_新的一个虚拟机&quot; &gt;2.7. 新的一个虚拟机&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.8.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_3_重新生成_mac_地址重要&quot; &gt;3. 重新生成 MAC 地址（重要）&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_3_1_编辑虚拟机设置&quot; &gt;3.1. 编辑虚拟机设置&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.9.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_3_2_选择_nat_高级&quot; &gt;3.2. 选择 NAT - 高级&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.10.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_3_3_生成&quot; &gt;3.3. 生成&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.11.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_3_4_记下新的_mac_地址&quot; &gt;3.4. 记下新的 MAC 地址&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.12.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_4_打开并登录新的虚拟机查看网络还是上一台的&quot; &gt;4. 打开并登录新的虚拟机，查看网络还是上一台的&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.13.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_5_配置网络重要&quot; &gt;5. 配置网络（重要）&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_5_1_修改配置文件&quot; &gt;5.1. 修改配置文件&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.14.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_5_2_修改_ip_地址&quot; &gt;5.2. 修改 IP 地址&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.15.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_5_3_修改_uuid添加编辑_mac_地址&quot; &gt;5.3. 修改 UUID，添加/编辑 MAC 地址&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.16.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_6_测试&quot; &gt;6. 测试&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.17.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，也可以使用 命令行 修改，但是单词太长，命令也长，所以我就不写啦。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_问题&quot; &gt;问题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_q_我没记住新的_mac_地址怎么办&quot; &gt;Q 我没记住新的 MAC 地址怎么办？&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;可以在不关闭虚拟机的情况下，右键虚拟机的名字
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.18.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;如下所示
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/hodoop/2.19.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[drcom 校园网教师帐号爆破工具]]></description><link>https://zyue.wiki/articles/2018/09/29/1546344583151.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/09/29/1546344583151.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_drcomtools&quot;&gt;DrcomTools&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_简述&quot;&gt;简述&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_技术选型&quot;&gt;技术选型&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_如何运行&quot;&gt;如何运行&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_截图&quot;&gt;截图&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_免责申明&quot;&gt;免责申明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_drcomtools&quot; &gt;DrcomTools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Drcom
校园网爆破工具，https://github.com/lizhongyue248/DrcomTools[GITHUB] 地址&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_简述&quot; &gt;简述&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;首先感谢两位大佬 FGR，https://rainss.cn[RAINSS]
带我，告诉我规律，然后自己抓包分析，解密密码，在得出这个程序，用于暴力破解校园网教师网。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;不过值得注意的是，我删除了网址（每个学校情况不一样）,同时密码加密方式可能不一样，请自行抓包分析。。。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行此程序之前，你必须要知道你们教师网的帐号和密码的规律，并知道那几个数字段较多。然后抓包分析加密方式，我们的是加了几个数字然后
md5 加密，你只需要抓包后反解密就大概能找到规律了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以在运行一个 &lt;code&gt;web&lt;/code&gt; 的时候，运行多个 &lt;code&gt;server&lt;/code&gt; ，测试同时开五个
&lt;code&gt;server&lt;/code&gt;，一个 &lt;code&gt;web&lt;/code&gt;，十分钟爆破十万个帐号（因电脑性能而异）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意，最好不要跑太多，不然怕被查水表。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_技术选型&quot; &gt;技术选型&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;核心框架：vertx-core&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;依赖管理：maven&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;开发工具：idea&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;strong&gt;java：jdk 8（务必）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;web：vertx-web&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;集群：vertx-hazelcast&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;日志：JUL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_如何运行&quot; &gt;如何运行&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;找到校园网登录网页，见下方的截图，复制网址至
&lt;code&gt;cn.echocow.drcom.utils.Constant&lt;/code&gt; ，替换 url 中的字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;先运行 &lt;code&gt;server&lt;/code&gt;，再运行 &lt;code&gt;web&lt;/code&gt;，可以直接在 &lt;code&gt;cn.echocow.drcom.web&lt;/code&gt;
运行，也可以运行多次 &lt;code&gt;cn.echocow.drcom.Application&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;生成的日志文件存放于当前用户的家目录下&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;windows 见 &lt;code&gt;C：//user/用户名/Drcom.log&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;linux 见 &lt;code&gt;/home/用户名/Drcom.log&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行多个会在 &lt;code&gt;log&lt;/code&gt; 加.1，例如 Drcom.log.1、Drcom.log.2。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_截图&quot; &gt;截图&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们的 drcom 官网：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/zaxiang/1.1.png&quot; alt=&quot;加密方式&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我校加密方式：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/zaxiang/1.2.png&quot; alt=&quot;drcom&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/zaxiang/1.3.png&quot; alt=&quot;运行结果&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_免责申明&quot; &gt;免责申明&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;本程序仅供技术交流，请勿用于商业及非法用途，如产生法律纠纷与本人无关！&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;CREATE BY &lt;a href=&quot;https://echocow.cn&quot;&gt;ECHOCOW&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[基于 spring boot + thymeleaf + jpa 增删改查登录注册demo]]></description><link>https://zyue.wiki/articles/2018/10/12/1546344581866.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/10/12/1546344581866.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_技术选型&quot;&gt;技术选型&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用&quot;&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_运行简述&quot;&gt;运行简述&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_登录注册&quot;&gt;登录注册&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_增删改查简述&quot;&gt;增删改查简述&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_其他简述&quot;&gt;其他简述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前段时间一直在看 spring
boot，但是一直没有动手去实战。这段时间才有时间，正好趁着学校 需要交一个
java 增删改查登录注册 的实例，原要求要使用 servlet + jsp 来做，但是因为
自己以前写 servlet
挺多了，如果不去看源码再写进步应该不大，所以想着使用以前一直想学的
spring boot 做一套，所以才有了这个 demo。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一开始打算使用前后段分离,前端用 nginx 反向代理静态页面，然后使用 redis
存储 session， 后端就是 spring-boot 提供 RestFul 风格提供 API
调用即可。但是最近事情真的多，所以做 了一个 ``阉割版&apos;&apos;
的，前后端半分离，为什么叫做半分离呢？因为我初始化页面还是使用了模板引擎
但是请求的时候依旧使用 ajax 调用 api
接口动态生成页面元素，不过前端依旧没有脱离后端独立 部署运行。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_技术选型&quot; &gt;技术选型&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;开发工具： IntelliJ IDEA&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;核心框架： spring-boot&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;模板引擎： thymeleaf&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;构建工具： maven 3.3.9&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;构建插件： mvnw&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;数据库： mysql&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;持久层： spring-data-jpa&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;验证码： kaptcha&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;缓存： redis&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;前端： jquery3 + bootstrap4 + bootbox4&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用&quot; &gt;使用&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;在你的 IDE 中导入项目，然后使用 maven 导入依赖，如果 maven
版本相差过大导致程序不能正常 运行，可以使用 mvnw 插件自动下载符合的
maven 版本，windows 请运行 &lt;code&gt;mvnw.cmd&lt;/code&gt;，linux 或 mac 请运行 &lt;code&gt;mvnw&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;配置文件见
&lt;code&gt;src/main/resources/application.yml&lt;/code&gt;，修改自己的数据库链接和 redis
链接， &lt;strong&gt;如果链接信息填写正确，数据库会自动建表，无需导入 sql。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;然后运行 &lt;code&gt;src/main/java/cn/echocow/web/WebApplication.java&lt;/code&gt; 即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_运行简述&quot; &gt;运行简述&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_登录注册&quot; &gt;登录注册&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;入口处进入 &lt;code&gt;/index&lt;/code&gt; 即 &lt;code&gt;MainController&lt;/code&gt; 的 &lt;code&gt;index&lt;/code&gt; 方法,
判断是否登录，没有登录就不 设置任何东西直接跳转到 &lt;code&gt;index.html&lt;/code&gt;, 使用
thymeleaf 判断有用户，没有就显示登录注册按钮。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;点击登录， &lt;code&gt;/login&lt;/code&gt; 即 &lt;code&gt;MainController&lt;/code&gt; 的 &lt;code&gt;login&lt;/code&gt;
方法，直接跳转到登录页面 &lt;code&gt;login.html&lt;/code&gt;, 同时图形验证码请求 &lt;code&gt;/captcha&lt;/code&gt; 即
&lt;code&gt;UtilController&lt;/code&gt; 获取验证码图片。填写完成后使用 form 表单直接 POST
提交到 &lt;code&gt;/login&lt;/code&gt; 即 &lt;code&gt;MainController&lt;/code&gt; 的 &lt;code&gt;postLogin&lt;/code&gt;
方法，在里面进行验证登录。&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;如果登录失败，携带 &lt;code&gt;msg&lt;/code&gt; 返回页面，同时前端模板引擎判断 &lt;code&gt;msg&lt;/code&gt;
是否显示并提示。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;如果登录成功直接跳转&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;登录成功后，又跳转 &lt;code&gt;1&lt;/code&gt; 中的 &lt;code&gt;/index&lt;/code&gt; 即 &lt;code&gt;MainController&lt;/code&gt; 的 &lt;code&gt;index&lt;/code&gt;
方法，由于登录了， 所以请求后端数据，然后携带后端数据返回 &lt;code&gt;index.html&lt;/code&gt;
页面，前端模板引擎判断然后显示列表。登录流
程即跑通了，注册、退出都是同理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_增删改查简述&quot; &gt;增删改查简述&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在增删改查中&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;增、查使用的是 模板引擎&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;删、改使用的是 ajax 提交，然后用 jq 控制元素的显示与删除&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为什么这么做？&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不管嘛。。。反正我喜欢。。。就像前面说的，一开始想前后端分离，但是又涉及到了认证、授权、跨域一堆问题，
然后又没时间，所以决定用模板引擎，为啥后面又用 ajax
了呢。。。因为要跳转页面实在不想让他有那么多跳转， 写多了 ajax
后真的会有依赖，异步真的是个好东西，可能这就是我为啥会喜欢 vert.x
的原因吧。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_其他简述&quot; &gt;其他简述&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;config 配置类，其中配置了登录拦截器、验证码生成&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;controller 控制器，里面包含拦截器和 api&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;entity 实体类，包括了统一响应&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;repository jpa、crud 接口实现&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;service 服务提供&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_总结&quot; &gt;总结&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;感觉比起来还是比较喜欢 vert.x 前面写了个基于 vert.x 的易班应用
&lt;a href=&quot;https://github.com/GZMZ-YIBAN/YBSport-vertx&quot;&gt;易运动&lt;/a&gt;
,感觉还是喜欢那种开发方式。不过真的，spring
的生态链实在太强大，基本上我遇到的问题网上都能够找到完美的
解决方案，虽然质量参差不齐，但是总归比 vert.x 一搜不到一页来得爽太多。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;无 xml 配置简直让我爱不释手，注解基本解决了大多问题，不论是 servlet 3.1
还是 servlet 4.0 都感觉没 有 spring boot 来得爽，果然 java EE 后端被
spring 系列占有大部分市场是有原因的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;期末的时候打算使用 vue + spring boot
做个后台管理系统，如果有时间会引入第三方登录，一直很想做的一个
东西。这段时间太忙，只能匆匆做一个交给老师了，质量不是很高，很多东西没有做，比如全局异常捕获都没做。。。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lizhongyue248/SpringBootPractice&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;© 2017-2018 By: &lt;a href=&quot;https://www.echocow.cn&quot;&gt;EchoCow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[基于 vertx web 应用 YBSport-vertx]]></description><link>https://zyue.wiki/articles/2018/10/18/1546344582189.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/10/18/1546344582189.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_ybsport&quot;&gt;YBSport&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_技术选型&quot;&gt;技术选型&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_使用&quot;&gt;使用&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_nginx_配置&quot;&gt;nginx 配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_idea_配置&quot;&gt;idea 配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_数据库配置&quot;&gt;数据库配置&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_基于易班使用&quot;&gt;基于易班使用&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_脱离易班使用&quot;&gt;脱离易班使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_home&quot;&gt;Home&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_api&quot;&gt;Api&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_获取当前是否在活动时间内或者长期&quot;&gt;获取当前是否在活动时间内或者长期&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_获取可兑换的类型信息&quot;&gt;获取可兑换的类型信息&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_获取当前步数以及最近三十天的运动步数&quot;&gt;获取当前步数以及最近三十天的运动步数&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_获取已经兑换的列表信息&quot;&gt;获取已经兑换的列表信息&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_发起兑换&quot;&gt;发起兑换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_ybsport_ui&quot;&gt;YBSport-UI&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_遇到的坑&quot;&gt;遇到的坑&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_感受&quot;&gt;感受&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_ybsport_web&quot;&gt;YBSport-web&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_异步处理&quot;&gt;异步处理&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_日志处理&quot;&gt;日志处理&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_dns_解析缓慢或错误&quot;&gt;DNS 解析缓慢或错误&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_字符串转_json_对象&quot;&gt;字符串转 JSON 对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_应用截图&quot;&gt;应用截图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_ybsport&quot; &gt;YBSport&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;易运动，通过易班app所记录的每日步数可兑换相应的网薪。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_简介&quot; &gt;简介&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你还在为没有网薪发愁吗？民大易运动上线啦&lt;sub&gt;现在，你只要在走路或跑步的时候开启易班app并给予权限，把它放在后台，将会自动记录你每日运动的步数哦&lt;/sub&gt;通过这个步数每天可以兑换一定数量的网薪！网薪可以去网薪商城兑换各种实物哦！还有其他更好玩儿的用途等你来发现！只要开启APP运动简单一步即可获得定量的网薪！快来行动吧，一起易运动！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;应用地址:http://yiban.echocow.cn/YBSport[贵民大易运动]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;测试帐号：15585291942&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;测试密码：LZY574196898&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_技术选型&quot; &gt;技术选型&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;核心框架: vert.x web、vert.x web client&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;配置管理: vert.x conf&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;单元测试: junit4、vert.x unit&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;反向代理: nginx&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;数据库: postgreSQL 10&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;日志：log4j2&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;前端：mui&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_使用&quot; &gt;使用&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;本应用为我校 易班工作站
开发，需要提供易班工作站的接口和用户信息方能使用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;环境：nginx + idea + postgresql 10&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_nginx_配置&quot; &gt;nginx 配置&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;nginx
用于反向代理静态页面，http://nginx.org/en/download.html[官网下载地址]&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;windows 可以直接 &lt;a href=&quot;http://nginx.org/download/nginx-1.15.2.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Centos7 可以借鉴此教程
&lt;a href=&quot;http://note.youdao.com/noteshare?id=c0e4bb495ad5ade62a546f4efc7773c2&amp;amp;sub=wcp1535266273108984&quot;&gt;Centos7安装Nginx实战
- 阿豪聊干货 - 博客园&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其他 linux 发行版需要自行寻找教程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;nginx 需要配置端口号和起始路径,请查看 conf/nginx.conf&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;我的如下配置：

    server {
        listen       8001;
        server_name  localhost;

        location / {
           root   E:\work\yiban\YBWorkSpace\YBSport\YBSport-UI;
           index  index.html index.htm;
        }
    }

其中 8001 为你 nginx 反向代理页面的端口号&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_idea_配置&quot; &gt;idea 配置&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;clone 下此项目后默认没有配置模块，请自行在 project structure 进行配置。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;依赖管理使用 maven，请在 idea 中自行引入 import 依赖&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请修改 YBSport-web / src / main / resources / conf / config-bak.json
配置文件，并重命名为 config.json&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后，修改 UI 模块的 index.html 中 ajax 请求的地址端口为 你配置
config.json 中 http 下的 port 端口号，默认 8888&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你需要修改日志输出位置（默认当前系统用户家目录/logs/YbSport/），请修改
log4j2.xml 即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;Properties&amp;gt;
    &amp;lt;property name=&quot;log_charset&quot;&amp;gt;UTF-8&amp;lt;/property&amp;gt;
    &amp;lt;property name=&quot;log_pattern&quot;&amp;gt;
        %d{yyyy-MM-dd HH:mm:ss} [%5p] [%t] (%F:%L) %m%n
    &amp;lt;/property&amp;gt;
    &amp;lt;!--修改此处--&amp;gt;
    &amp;lt;property name=&quot;logBaseFolder&quot;&amp;gt;${sys:user.home}/logs/YbSport/&amp;lt;/property&amp;gt;
    &amp;lt;property name=&quot;every_file_size&quot;&amp;gt;100MB&amp;lt;/property&amp;gt;
&amp;lt;/Properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_数据库配置&quot; &gt;数据库配置&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;数据库我用惯了 mysql，想尝试下新的，所以选择了 postgresql。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;三张表：ybsport_buy、ybsport_time、ybsport_type&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;ybsport_buy 易运动兑换记录：用来记录哪些兑换了&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;ybsport_time
易运动活动开始时间：用来记录什么时候开始什么时候结束，可以选择为长期活动&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;ybsport_type 易运动兑换的类型：记录了可以兑换哪些类型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;数据库结构文件存放于 doc/sql 下，可能需要你手动绑定下 &lt;strong&gt;ybsport_buy.type&lt;/strong&gt;
和 &lt;strong&gt;ybsport_type.id&lt;/strong&gt; 的外键信息&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意:在 sql 文件中,我将他的所有者给了 yiban
这个用户，可能你需要手动修改下，例如修改 alter table ybsport_type owner
to yiban 为你希望的用户&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意:ybsport_time 里面每次数据库都只查询第一条启用的数据，如果此数据的
&lt;strong&gt;备注&lt;/strong&gt; 字段为 &lt;strong&gt;长期&lt;/strong&gt; ，那么易运动
这个活动就是长期新的，否则就是指定时间内的，如果没有启用的数据，那么默认活动未开启。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意:ybsport_buy 中的 yb_user 字段为 json 格式&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_基于易班使用&quot; &gt;基于易班使用&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请登录 &lt;a href=&quot;https://open.yiban.cn/&quot;&gt;易班开放平台&lt;/a&gt; ，然后完成以下操作 1.
注册账户 → 申请成为开发者 2. 上方导航 管理中心 → 左侧 轻应用 →
创建轻应用 3. 填写资料时，维护地址可不填，应用地址为
&lt;a href=&quot;http://localhost:8001，8001&quot; class=&quot;bare&quot;&gt;http://localhost:8001，8001&lt;/a&gt; 即为你配置的 nginx 的端口号。 4. 进入
管理中心 → 轻应用 → 你创建的应用 → 点击名字 进入到应用详情，获取到
&lt;strong&gt;AppID&lt;/strong&gt; , &lt;strong&gt;AppSecret&lt;/strong&gt; 和 &lt;strong&gt;站内地址&lt;/strong&gt; 5. 将获取到的 &lt;strong&gt;AppID&lt;/strong&gt; , &lt;strong&gt;AppSecret&lt;/strong&gt;
, &lt;strong&gt;站内地址&lt;/strong&gt; 填入 &lt;strong&gt;cn.echocow.yiban.ybsport.utils.ConstEnum&lt;/strong&gt; 中 6. 修改
易班防跨站伪造参数 为你指定的值 7. 运行 nginx 、postgresql 、idea 中运行
cn.echocow.yiban.ybsport.Application&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：如果要在电脑端查看，请 修改应用 → 使用场景 →
兼容易班客户端、PC/手机浏览器&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_脱离易班使用&quot; &gt;脱离易班使用&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;由于接口是由易班提供，所以暂无法脱离易班使用。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_home&quot; &gt;Home&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;他们都说，易班都不给经费了，还帮他写啥。但是其实，我感觉我在帮我自己。每一次完整的写完一个应用，都会有不同的体验，才会真正的经历过一次项目完整的
0
到有，这个过程到最后一刻，都是很让人满足的。你看着自己的成品通过了审核，心理也是同样美滋滋的，并且每一个作品，都在见证你的成长。所以虽然没有钱，但是如果这个应用真的符合我的理念，那么我依旧还会去做的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_前言&quot; &gt;前言&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;易运动是我非常想做的一个项目，从五月底开始就一直很想做，当时一时兴起做好了前端，不得不说我前端功底不怎么样，但是却意外的达到了我期望的效果，让我十分喜欢。所以从几个月前就想做的。当时的技术选型就是
mui&lt;br&gt;
vert.x，但是不得不说我的实力有限，还不能很好的理解其异步思想，虽然说现在也是有点模糊，但是勉强写的出来了。放假实习完毕后，回来家的第一件事就是完成自己想做的这个应用，以前了解过vert.x也自己看过相关的资料，
但不得不说思想的转变是极其困难的，需要时间和努力去不断熏陶。直到今天都只是入门，然后磕磕碰碰的写出了第一个模块
&lt;strong&gt;YBSport-web&lt;/strong&gt; ，其对应的前端
&lt;strong&gt;YBSport-UI&lt;/strong&gt;。但是中间也出现很多很多问题，也算是解决了，能够写出成品来，还是很开心的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GZMZ-YIBAN/YBSport/wiki/Api&quot;&gt;Api&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GZMZ-YIBAN/YBSport/wiki/YBSport-UI&quot;&gt;YBStore-UI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GZMZ-YIBAN/YBSport/wiki/YBSport-web&quot;&gt;YBSport-web&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_api&quot; &gt;Api&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;本页主要说明了请求的 Api 接口,所有交互均是 json 格式&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_获取当前是否在活动时间内或者长期&quot; &gt;获取当前是否在活动时间内或者长期&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;接口描述：用来判断用户是否可以兑换&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求路径：/status&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求方式：GET&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求参数：无&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;返回结果示例:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;code&quot;: &quot;请求代码&quot;,
  &quot;msg&quot;: &quot;请求结果&quot;,
  &quot;data&quot;: {
    &quot;body&quot;: &quot;boolean 是否在活动时间内&quot;,
    &quot;start&quot;: &quot;活动开始时间&quot;,
    &quot;end&quot;: &quot;活动结束时间&quot;,
    &quot;long&quot;: &quot;是否是长期活动&quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;补充：此接口首先判断 body 是否在时间内，然后再判断 long
是否为长期活动，如果是，就不读取 start 和
end。如果不是，就读取并显示出来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_获取可兑换的类型信息&quot; &gt;获取可兑换的类型信息&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;接口描述：获取兑换类型的数据，生成可兑换类型的按钮&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求路径：/&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求方式：GET&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求参数：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;verify_request&quot; : &quot;加密授权参数&quot;,
    &quot;state&quot; : &quot;易班防跨站伪造参数&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;返回结果示例:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;code&quot;: &quot;请求代码&quot;,
  &quot;msg&quot;: &quot;请求结果&quot;,
  &quot;data&quot;: {
    &quot;list&quot;: [
      {
        &quot;id&quot;: &quot;主键&quot;,
        &quot;needSteps&quot;: &quot;需要的步数&quot;,
        &quot;getMoney&quot;: &quot;花费的网薪&quot;
      },
      {
        &quot;id&quot;: &quot;主键&quot;,
        &quot;needSteps&quot;: &quot;需要的步数&quot;,
        &quot;getMoney&quot;: &quot;花费的网薪&quot;
      }
    ]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_获取当前步数以及最近三十天的运动步数&quot; &gt;获取当前步数以及最近三十天的运动步数&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;接口描述：获取易班运动数据，初始化图和运动数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求路径：/steps&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求方式：GET&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求参数：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;verify_request&quot; : &quot;加密授权参数&quot;,
    &quot;state&quot; : &quot;易班防跨站伪造参数&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;返回结果示例:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;code&quot;: &quot;请求代码&quot;,
  &quot;msg&quot;: &quot;请求结果&quot;,
  &quot;data&quot;: {
    &quot;sport_steps&quot;: &quot;今日运动步数&quot;,
    &quot;date_time&quot;: &quot;今日时间&quot;,
    &quot;list&quot;: [
      {
        &quot;sport_steps&quot;: &quot;步数&quot;,
        &quot;date_time&quot;: &quot;时间&quot;
      },
      {
        &quot;sport_steps&quot;: &quot;步数&quot;,
        &quot;date_time&quot;: &quot;时间&quot;
      }
    ]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_获取已经兑换的列表信息&quot; &gt;获取已经兑换的列表信息&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;接口描述：获取已近数据，初始化兑换记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求路径：/buyList&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求方式：GET&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求参数：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;verify_request&quot; : &quot;加密授权参数&quot;,
    &quot;state&quot; : &quot;易班防跨站伪造参数&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;返回结果示例:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;code&quot;: &quot;请求代码&quot;,
  &quot;msg&quot;: &quot;请求结果&quot;,
  &quot;data&quot;: {
    &quot;sport_steps&quot;: &quot;今日运动步数&quot;,
    &quot;date_time&quot;: &quot;今日时间&quot;,
    &quot;list&quot;: [
      {
        &quot;date&quot;: &quot;兑换时间&quot;,
        &quot;get_money&quot;: &quot;获得网薪&quot;,
        &quot;is_enable&quot;: &quot;是否已经发放&quot;
      },
      {
        &quot;date&quot;: &quot;兑换时间&quot;,
        &quot;get_money&quot;: &quot;获得网薪&quot;,
        &quot;is_enable&quot;: &quot;是否已经发放&quot;
      }
    ]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_发起兑换&quot; &gt;发起兑换&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;接口描述：发起兑换请求&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求路径：/buy&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求方式：POST&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;请求参数：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;verify_request&quot; : &quot;加密授权参数&quot;,
    &quot;state&quot; : &quot;易班防跨站伪造参数&quot;,
    &quot;parameter.typeId&quot;: &quot;兑换类型&quot;,
    &quot;parameter.sportSteps&quot;: &quot;兑换步数&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;返回结果示例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;code&quot;: &quot;请求代码&quot;,
  &quot;msg&quot;: &quot;请求结果&quot;,
  &quot;data&quot;: {
    &quot;status&quot;: &quot;success | failed 是否成功&quot;,
    &quot;message&quot;: &quot;如果失败，回显信息&quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_ybsport_ui&quot; &gt;YBSport-UI&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;本着前后端分离，模块化开发的思想，将前后端分离开发，提供接口 API
，然后前端对接收到的数据进行处理即可。 事实上自己也是如此开发，以 nginx
进行静态页面反向代理，ajax 请求数据。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是存在的一个问题就是就是跨域问题，一旦解决了跨域问题就能够很好的解决所有的问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_遇到的坑&quot; &gt;遇到的坑&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_错误处理&quot; &gt;错误处理&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;本不是前端开发人员，所以自然不了解前端对请求会遇到哪些错误。一开始选用时使用简化版的
ajax 请求处理
&lt;code&gt;javascript 1.5 mui.post(&apos;http://server-name/login.php&apos;,{         username:&apos;username&apos;,         password:&apos;password&apos;     },function(data){         // 服务器返回响应，根据响应结果，分析是否登录成功；         // …​     },&apos;json&apos; );&lt;/code&gt;
但是后来发现，一旦网络出现问题，或者服务器响应时间过长，就不会有任何回显信息，会很尴尬的等待。所以我更换为有异常处理和超时等待的
ajax 请求
&lt;code&gt;javascript 1.5 mui.ajax(&apos;http://server-name/login.php&apos;,{     data:{         username:&apos;username&apos;,         password:&apos;password&apos;     },     dataType:&apos;json&apos;,// 服务器返回json格式数据     type:&apos;post&apos;,// HTTP请求类型     timeout:10000,// 超时时间设置为10秒；     headers:{&apos;Content-Type&apos;:&apos;application/json&apos;},                       success:function(data){         // 服务器返回响应，根据响应结果，分析是否登录成功；         // …​     },     error:function(xhr,type,errorThrown){         // 异常处理；         console.log(type);     } });&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这样，当处理出现不可预期问题的时候，也可以对客户端进行友好的提示。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_易班内置浏览器引入他库&quot; &gt;易班内置浏览器引入他库&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在我和国睿测试投票系统的时候，遇到的一个问题就是当我点击一个按钮的时候，出现多次触发时间的情况，卡了很久。最后国睿对其进行抓包分析，
发现了易班app在启动内置浏览器的时候自动引入了 zepto 库，我对此发起过提问&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Q：您好，我们开发的时候遇到易班APP的问题，希望给予回复，谢谢。

1易班app内置浏览器加载了zepto库，但是其中的某些方法与应用冲突，请问有什么办法禁止易班内置浏览器加载这个库？

2易班app内置浏览器在关闭时会删除cookie，请问有什么办法保存或者类似cookie可以保存对象方式？

提问时间 : 2018-06-04 22:00:55
A：您好。

1、该问题的确与开放平台相关设计期望不符，已向易班app开发组传达问题意见，但经过沟通目前易班app内置浏览器容器业务耦合程度较大，需要一个长时间的优化或者重构的评估规划。请开发者暂时寻找其它方案避免（比如自定义JS编写）；

2、关闭内置浏览器清除cookie是合理的安全机制，应用端可自行对cookie内容或功能标示存储。

回答时间 : 2018-06-05 11:00:02&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当初我负责的是前端页面处理，所以不得已我只能去适配客户端，目前发现的只有一个
点击事件 发生冲突，重复绑定的情况。
&lt;code&gt;javascript 1.5 // mui提供的绑定,为 tap 事件，同时 zepto 也是同样 tap 绑定，造成重复绑定 mui(document.body).on(&quot;tap&quot;, &quot;#help&quot;, function () {     // code })&lt;/code&gt;
所以我加入的识别易班浏览器的方法，以其自动适应用 tap 还是 click 绑定
&lt;code&gt;javascript 1.7 let cli; navigator.userAgent.indexOf(&quot;yiban_android&quot;) &amp;gt; (-1) ? cli = &quot;click&quot; : cli = &quot;tap&quot;; // 绑定 mui(document.body).on(cli, &quot;#help&quot;, function () {     // code })&lt;/code&gt;
为什么不直接用 click 呢？就是任性&lt;sub&gt;~&lt;/sub&gt;就想用 tap，然后用此方法防止冲突。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_javascript_兼容性问题&quot; &gt;JavaScript 兼容性问题&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这次开发应用就是遇到此问题，在我在电脑上，我的手机上（华为P9），测试均正常，然后测试云磊的手机，也是正常，但是却发现在某些手机上不能正常显示。
比如红米note，还有夜神模拟器。排查了几个小时，发现了一个问题，一直报的的语法错误语法错误语法错误，我重复检查前端半天，也是没找到什么错了，
最后尝试把 &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;const&lt;/code&gt; 改回 &lt;code&gt;var&lt;/code&gt; ，就正常了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我想了想，发现目前易班app使用的是用户手机操作系统自带的浏览器内核，如果目前用户手机系统自带的浏览器内核较低，是不支持
es6 的，所以需要去做适配。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然如果不使用 es6 自然可以忽略此问题了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_感受&quot; &gt;感受&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前端基本就这些了，六月初的时候就写完一部分，现在由于需求的增加，比如侧边栏，历史计步，兑换记录这些的添加又自己去改页面，当然是很笨的处理方法。
不过感觉前端所见即所得的方式比后端来的有趣多，各种语法糖还是很不错的。这是目前为止我写得最满意的一个前端了！虽然很简陋，但是我真心喜欢。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_ybsport_web&quot; &gt;YBSport-web&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;前面说过，很早前就接触了 vert.x ，但是当初只有 ssh
的经验，并且也是照着教程做的，感觉自己提升还是不高。在接触到这个框架的时候，查阅资料是十分困难的，
在国内的环境下感觉学起来很吃力，后来翻墙找了更多的资料学习，不过其实都没有视频学得容易。自己不断尝试，不断地改变思想，让自己去适应异步的氛围，每一步学习都是自己查的资料。
不得不说这样学起来很累，但是真的，提升真的很大。不论是从问题查找，代码风格还是思维方面，都提升了很多。他的性能与支持也没有让我失望，但是自己还是初步入门，
并没有真正领悟到他的核心，还需要不断地努力。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_异步处理&quot; &gt;异步处理&lt;/h3&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_多_verticle_部署&quot; &gt;多 Verticle 部署&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;项目开始的时候，深受&lt;strong&gt;横向切割&lt;/strong&gt;的思想影响，所以将他分为了两个 Verticle
，一个作为路由发送 eventBus
，一个接受并处理数据。但是实在自己思想局限，将所有的请求的处理都放在了一个
Verticle 里面，所有的数据处理都放在了一个 Verticle
里，所以造成的结果就是一个 class
十分冗长，甚至一个方法十分冗长。按照&lt;strong&gt;横向切割&lt;/strong&gt;的思想，应该包如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;loginService
  |—— LaginVerticle
  |—— LoginDbVerticle
infoService
  |—— InfoVerticle
  |—— InfoDbVerticle

...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我觉得我的理解实在不够深刻，一直没有想通有多个Verticle时候如何一起部署。。。而且当时的自己过于急躁，如今看下来结构实在不忍直视。。。而异步中如何处理两个
Verticle
呢？我当初找到的办法是在确认一个部署成功后，再依次部署第二个，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Future&amp;lt;String&amp;gt; dbVerticleDeployment = Future.future();
        vertx.deployVerticle(new ConvertDbVerticle(), dbVerticleDeployment.completer());
        dbVerticleDeployment.compose(id -&amp;gt; {
            Future&amp;lt;String&amp;gt; convertRestVerticleDeployment = Future.future();
            vertx.deployVerticle(
                    ConvertRestVerticle.class.getName(),
                    new DeploymentOptions().setInstances(1),
                    convertRestVerticleDeployment.completer());
            return convertRestVerticleDeployment;
        }).setHandler(ar -&amp;gt; {
            if (ar.succeeded()) {
                startFuture.complete();
            } else {
                startFuture.fail(ar.cause());
            }
        });&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;而在 Application 中直接部署 Application 即可。但是不够优雅，这是 vertx
的一个官网示例，但是却还是不明白多个 Verticle
如何处理。。。希望大神解答。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_配置读取&quot; &gt;配置读取&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;学习此框架的核心，无非就是 &lt;strong&gt;事件驱动&lt;/strong&gt; 和
&lt;strong&gt;异步处理(非阻塞)&lt;/strong&gt;。我一开始写的时候遇到的一个问题就是思想的转变，使用
vert.x conf 模块进行读取 json 配置文件，
但是由于是异步的，本着学习的思想，不用 jdk
自带的读取配置文件。所以遇到的一个问题就是异步处理不关心他的结果便向下执行，我因此在
stackoverflow 上
&lt;a href=&quot;https://stackoverflow.com/questions/51999544/in-vert-x-why-do-static-methods-run-before-static-code-blocks&quot;&gt;提问&lt;/a&gt;，
当然并没有很好地解决问题，遇到错误的概率还是很大，不过我还是采纳了他，因为的确给了我一定的思想。后来我依旧没有办法将他读取的方法独立为一个静态方法，所以只有将它放于代码中执行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ConfigFactory.retriever.getConfig(res -&amp;gt; {
    if (res.succeeded()) {
        JsonObject httpConfig = res.result().getJsonObject(&quot;http&quot;);
        server.requestHandler(router::accept)
                .listen(httpConfig.getInteger(&quot;port&quot;), httpConfig.getString(&quot;host&quot;),
                        listenResult -&amp;gt; {
                            if (listenResult.failed()) {
                                LOGGER.error(&quot;Http Server failed!&quot; + listenResult.cause());
                            } else {
                                LOGGER.info(&quot;Http Server started on &quot; + httpConfig.getString(&quot;host&quot;) + &quot;:&quot; + httpConfig.getInteger(&quot;port&quot;) + &quot;!&quot;);
                            }
                        });
    } else {
        LOGGER.error(&quot;Config get error! Something went wring during getting the config!&quot; + res.cause());
        throw new RuntimeException(&quot;Config get error! Something went wring during getting the config&quot;);
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;保证执行成功后才执行后面的代码，这是一开始处理异步的方式。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_事务管理&quot; &gt;事务管理&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以说这是我这个应用的败笔吧，我没有做事务处理。也就是说涉及到多个sql操作数据的时候，其中一个失败而另外一个成功，会造成数据不统一。不过在我的程序中，没有同时操作数据的sql存在，而是多个查询语句后只有一个数据操作，而我需要对查询出来的数据进行判断后再决定是否操作数据。而在不断的操作数据库的时候又面临回调地狱的问题所所以我选择使用
Future 来避免回调地狱&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Future&amp;lt;SQLConnection&amp;gt; connectionFuture = Future.future();
Future&amp;lt;ResultSet&amp;gt; dateFuture = Future.future();
Future&amp;lt;ResultSet&amp;gt; compareFuture = Future.future();
Future&amp;lt;ResultSet&amp;gt; queryFuture = Future.future();
Future&amp;lt;UpdateResult&amp;gt; updateFuture = Future.future();&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;异步查询数据，然后让每个 Future 接受处理结果，再单独拿出来 setHandler
处理数据，这样就避免了回调地狱。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot; &gt;
&lt;h4 id=&quot;_结果合并&quot; &gt;结果合并&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当我在 ConvertDbVerticle 接受 eventBus 接收到数据的时候，我希望返回的
JsonObject 包含多个从数据库查询出来的结果，例如 getInfo 方法中我希望获得
&lt;code&gt;ybsport_type&lt;/code&gt; 和 &lt;code&gt;ybsport_buy&lt;/code&gt; 表的数据然后合并至 JsonObject 的 reply
之中，但是数据查询是异步的，如何处理呢？我选择使用了 CompositeFuture 的
all 方法进行组合，只有当两个异步查询都成功的时候，才能够执行 all
的回调函数，然后在 all 的回调函数里面为 reply 填充结果即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;CompositeFuture.all(typeResult, userResult).setHandler(results -&amp;gt; {
    if (results.succeeded()) {
        LOGGER.info(&quot;Both results are ready for use!&quot;);
        JsonObject t = results.result().resultAt(0);
        JsonObject u = results.result().resultAt(1);
        reply.mergeIn(t);
        reply.mergeIn(u);
        message.reply(reply);
    } else {
        reportQueryError(message, results.cause(), &quot;Both or one result attempt failed!&quot;);
    }
});&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此时返回过去的 reply 即是一个合并力两个异步查询的结果集了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_日志处理&quot; &gt;日志处理&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;vert.x 默认使用的日志处理的是 JDK 内置的 JUL
，但是其输出方式我改了好久都不满意，而且资料太少，所以自己引入了他的日志框架，一开始打算引入
slf4j，后来还是使用了 log4j ，不过需要修改他的默认配置，如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    System.setProperty(&quot;vertx.logger-delegate-factory-class-name&quot;,
            &quot;io.vertx.core.logging.Log4j2LogDelegateFactory&quot;);&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_dns_解析缓慢或错误&quot; &gt;DNS 解析缓慢或错误&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;由于易班使用的 oauth
接口，我需要跳转到回调页面，但是发现解析他的域名的时候十分缓慢，查询后才发现他使用的
google 的 dns 解析，所以需要禁用他默认的 DNS，使用系统默认的 DNS 解析。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    System.getProperties().setProperty(DISABLE_DNS_RESOLVER_PROP_NAME, &quot;true&quot;);&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_字符串转_json_对象&quot; &gt;字符串转 JSON 对象&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己当初阅历有限，傻傻的一个属性一个属性的遍历存放，其实应该使用 jackson
来进行更好的处理的，自己写了一个 StringToPojoJson 实在太笨。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_documentation&quot; &gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;请查看 &lt;a href=&quot;https://github.com/GZMZ-YIBAN/YBSport/wiki&quot;&gt;wiki&lt;/a&gt; 以了解更多信息&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_应用截图&quot; &gt;应用截图&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我在 UI 模块提供 &lt;code&gt;static.html&lt;/code&gt;
可以直接看到成功的前端效果演示。当然现在也已经上线 易班应用广场 可以直接
&lt;a href=&quot;http://yiban.echocow.cn/YBSport/&quot;&gt;查看&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/%E9%A1%B9%E7%9B%AE/show.gif&quot; alt=&quot;avatar&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[最近好多朋友都在学C语言，作为软件工程的学生，是时候来装逼了哈哈哈！所以呢打算把自己以前老师要求做的C语言大作业给拿出来分享给大家。]]></description><link>https://zyue.wiki/articles/2018/01/01/1546344573492.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/01/01/1546344573492.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近好多朋友都在学C语言，作为软件工程的学生，是时候来装逼了哈哈哈！所以呢打算把自己以前老师要求做的C语言大作业给拿出来分享给大家。当然我学的不深，只是些非常非常非常非常非常基础的小程序（大牛绕道。。。），但是也是弄了一个方便老师检查作业的小程序，用于实现代码查看以及运行测试，也就是靠这个拿了C语言的全班第一虽然也不是很高=-=。所有程序全都来自于《C语言程序设计（第四版）》（谭浩强
著）&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.1.jpg&quot; alt=&quot;C语言程序设计&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;虽然不太喜欢这本书但是谁叫我们使用这本书做教材呢？当然我的代码不是最好的，而且还有许多瑕疵以及繁琐，所以请大家见谅！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;目录
一、第3章——顺序程序设计
    1、例  题
        a、例1 (3.1)华氏度转化为摄氏度
        b、例2 (3.3)大写字母转化为小写字母（输入错误可重新输入）
        c、例3 (3.4)求三角形面积（系统检查是否为三角形，输入错误可重新输入），
    2、作业题
        a、P82 1 计算n年后我国国民生产总值与现在相比增长多少百分比
        b、P83 3 计算购房贷款还清时间
        c、P84 6 China编译成密码
        d、P84 7 输入圆半径、高，求周长，面积，球表面积，球体积，圆柱体积。（自动保留两位小数）

二、第4章——选择结构程序设计
    1、例  题
        a、例1 （4.3）输入3个数，从小到大排列
        b、例2 （4.6）按照考试等级输出百分制分数段（switch）
        c、例3 （4.8）判断是否为闰年
    2、作业题
        a、P112  4 输入三个整数，输出其中最大的值
        b、P112  5 输入小于1000的正数（输入错误可重新输入），输出他的平方根的整数部分
        c、P113  8 输入一百分制成绩，输出对应等第
        d、P113 11输入4个整数，要求按从小到大的顺序输出

三、第5章——循环结构程序设计
    1、例  题
        a、例1 （5. 4）慈善募捐达到10万元时，统计此时巨款人数
        b、例2 （5. 8）Fibonacci数列（兔子繁殖）
        c、例3 （5. 9）输入一个大于3的整数，判断是否为素数
        d、例4 （5.10）求100—200间的全部素数
    2、作业题
        a、P140  5 Sn=a+aa+aaa+…+aa…a的值
        b、P140  6 1！+2！+…+20！的和
        c、P140  8 输出所有水仙花数
        d、P141 16 输出由*组成的菱形

四、第6章——利用数组处理批量数据
    1、例  题
        a、例1 （6.1）对十个数组元素依次赋值为0,1,2,3,4,5,6,7,8,9并按逆序输出
        b、例2 （6.3）输入10个地区的面积，把它们从小到大排列
        c、例3 （6.8）输入一行字符，统计其中有多少单词，单词之间用空格分开
    2、作业题
        a、P168  3 输入一个3×3的整形矩阵，求对角线元素之和（无初值）
        b、P168  4 已排序好的数组，插入一个数按原来规律排序
        c、P168  6 杨辉三角
        d、P168 10 输入三行文字，限定80字符，统计其中英文大小写、数字、空格及其  他字符个数。
        e、P168 11 输出由*组成的平行四边形

五、第7章——用函数实现模块化程序管理
    1、例  题.
        a、例1 （1. 3）比较两个数的大小（函数）
        b、例2 （7. 8）汉诺塔
        c、例3 （7. 9）输入10个数，输出最大者及他的位置
        d、例4 （7.17）输出1到5的阶乘
        e、例5 （7.19）给定b的值，输入a和m，求出a*b和a的m次方（调用外部）
        f、例6 （7.20）输入一串字符串及一个字符，输出的字符串中没有输入的字符
    2、作业题
        a、P218  1 输入两个数，求最大公约数和最小公倍数
        b、P218  3 判断素数
        c、P218  8 请输入一个4位数字，输出的4个数字每两个之间空一个空格
        d、P218 10 用“起泡法”对输入的10个字符按从小到大排列
        e、P219 13 用递归法求n阶勒让德多项式的值
        f、P219 16 输入一个十进制数，输出相应的二进制数

六、第8章——指针的利用
    1、例  题
        a、例1 （8.1）通过指针变量访问整型变量
        b、例2 （8.9）利用指针交换数组的位置
    2、作业题
        a、实验题 n个人围成的圈子，数到3的人退出，输出最后一个人的号数
        b、P291 2 输入3个字符串，按从小到大的顺序输出

七、其他程序设计
    1、实验报告题
        a、输入正数a，b，计算a2+b2并判断，输出不同的值。
        b、输入三角形的三边的值，判断三角形的类型，并输出其面积。
        c、输出3025类型四位数
        d、输入4乘4矩阵，求对角线以下元素
        e、输入一组正整数,统计奇数和偶数
        f、输入十个整数，删除其中的负数后输出
    2、课外练习题
        a、输出爱心图案
        b、关机程序
        c、猜拳游戏&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.2.jpg&quot; alt=&quot;界面一&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.3.jpg&quot; alt=&quot;界面二&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.4.jpg&quot; alt=&quot;界面三&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.5.jpg&quot; alt=&quot;界面四&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.6.jpg&quot; alt=&quot;界面五&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.7.jpg&quot; alt=&quot;界面六&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.8.jpg&quot; alt=&quot;界面七&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所用的是百度云分享。链接：http://pan.baidu.com/s/1eRYbIQA 密码：1shh
。另外附上目录，有需要的朋友自行下载。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot; &gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
PS：如果有哪位看得起小弟用到了小弟的框架。请说明出处，请尊重小弟的劳动成果，谢谢！在此说明，作业检查程序仅限于windows下产品。
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.9.png&quot; alt=&quot;说明1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/c1.10.png&quot; alt=&quot;说明2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[好快啊，一个学期又没了。四个月的时光，荒废了两个月，珍惜了两个月，学习了很多东西，自己也在慢慢成长，发觉自己又老了半岁了=-=。]]></description><link>https://zyue.wiki/articles/2018/01/01/1546344577314.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/01/01/1546344577314.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;好快啊，一个学期又没了。四个月的时光，荒废了两个月，珍惜了两个月，学习了很多东西，自己也在慢慢成长，发觉自己又老了半岁了=-=。&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/java1.1.jpg&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;写这个程序的原因，是因为在期末的那段时间，很多同学朋友都来问我这本书上的课后习题怎么做，我也仔细找过这本书到底有没有答案，可是到处找，官网上，文库里等等都找过，只有部分习题有只言片语，官网上的课件也没有习题答案。然后我们又在学习这本书，所以才想到做这么一个程序（如有错误欢迎指出）。下面贴上我们用的教材&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/java1.2.jpg&quot; alt=&quot;教材&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不得不说这本书涉及到的知识点很多很全，但是却不是那么易懂，前面几章我学者很是轻松，只要有一点编程基础的基本都能一遍就过，但是后面涉及到了java真正的核心的地方就有点难懂了。所以我建议大家买一本书作为辅助学习资料。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这个程序目前只更新到第十章，书总共十四章，原本期末前就开始弄的，但是后面花时间复习三门数学去了，然后期末完又是一个比赛初赛，上周三比赛完才开始真正的做的。到现在一周半的，零零散散的时间加起来大概两周不到的时间断断续续的完成了。代码大概两千行左右，用来简单的MVC框架（其实也不算）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己也遇到很多困难，一个人学习是很苦逼的，自己设计界面，自己添加功能，自己调试所有bug，然后自己测试。里面也有很多题我要花很多时间去想，去设计算法，然后一步一步的实现的。自己能力也有限，而且一直都是自学，有时候也会被一道题卡个几个小时，被一个bug卡个一天，但是终究是完成了。所以可能代码不是最好的，有些代码看看就好，不值得学习。后面几章难度较大，就没有花太多时间去做了。所以只做到了第十章，因为小学期也比较忙。原本想用sql数据库连接登录的，但是想到既然作为学习使用，就没必要那么麻烦，于是自己弄了一个简单登录，固定账号密码。然后对于界面的美化个人要求较高，一遍又一遍的改，然后自己找资料，自学图形界面和IO流，用到了少许的多线程技术。登录界面贴图：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/java1.3.jpg&quot; alt=&quot;login&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己设计的一个界面，觉得这是我最满意的成果了。这里感谢凡大给我找的图哈哈，配上真的感觉很不错。然后swing组件的界面真的不怎么样，然后自己重写了一下输入框的代码，再添加一个标签用来打开外部URL，个人觉得有难度的地方就是输入框的重写，还有标签的重写以及调用默认浏览器打开外部url。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;登录账号：SoftTwo&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;——————因为是软件工程二班的哈哈&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;登录密码：BYLZY&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;—————取自我名字首字母&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来就是主界面&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/java1.4.jpg&quot; alt=&quot;main&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我采用的是swing里面的JTree结构，树形结构个人还是比较喜欢的。而且相比起其他的组件更加美观好用，获取也很简单。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/java1.5.jpg&quot; alt=&quot;tree&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;把它加入到了JScrollPane里面，这样即使超出了范围，可以出现滚动条来查看。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过设置了框体高度900，因为我不是通过获取屏幕大小然后获取相应比例的方式设定其高度宽度的，而是自己固定的，所以如果你电脑的分辨率较小，可能会出现显示不完全的情况，我的分辨率是1920*1080，如果你的不是，比这个小的话，可能会显示不全。后续我更新的时候会补上的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;因为自己比较懒，概念题原本是wps下写的，应该是docx格式，还有些有图片，但我把他复制到了txt下，这时候就出现了一个问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;wps下部分是Unicode写的，保存时他转化为了ANSI编码，所以导致部分文字或英文有丢失，所以概念题最好在导出的文件夹中找对应的docx来看！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在然后自己写了一个简单的复制，可以把所有文件导出到电脑里面去，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我吧概念题单独封装了一个类，传入参数全部一起使用。
编程题则是把他们作为了一个方法来调用，下面贴图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/java1.6.jpg&quot; alt=&quot;页面&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;界面很丑，但是我不想再花
太多时间到swing上去，所以就简单做了一下，可以运行，把结果显示在下面的JTextArea里面，可以查看代码同样显示下面。然后后面几个章节，部分程序我则是为他们写了相应的图形界面，当然也很简陋。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后自己写了两个JDiago，作为提示和运行时的矿体（swing自带的真心太丑了，虽然我做的也不是很漂亮。。。）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注：在第十章输入输入流中，因为本人过懒=-=就没有为每一个拥有图形界面的程序做文件选择对话框，所以需要手动输入，请注意格式和使用英文下的符号输入，造成的使用不当请见谅！&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后自己简单的写了一个HTML网页，来记一个关于界面。也就是最下方的关于按钮。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;程序基本就是这样。但是就在昨天，原本我认为做完了，在IDE上可以运行的时候，我打包成jar拿出来，居然运行部了！！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/practice/java1.7.jpg&quot; alt=&quot;页面&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一直报异常，我查了下对应的错误码，找不到文件！！！也就是说他无法读取jar内部的文件。所以原本计划昨天发布的，一直到了今天。唉。然后昨天想了很久，想到的一个办法就是加入文件选择框，让用户选择文件，但是这样机会暴露出来，个人不太喜欢。不过今天下午还是花时间去实行了的。不过幸运的是，我遇到一个贵州的老乡，他也是软件工程的，所以我叫他学长哈哈，他帮我很好的解决了这个问题！十分感谢！ 知道今天下午六点才算解决这个问题，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后我又纠结于一个问题，倘若用户那里没有安装jre或者jdk，这个程序是无法打开的，虽然不太可能有这种情况，但是还是要考虑周到，所以我就打算将他们捆绑成一个exe文件，事实上jar转成exe很是简单，但是要捆绑一个jre就很烦。试了很多工具都不行，也不知道为什么exe4j也不行，可能我操作不对，然后没办法，自己写了个简单bat，用cmd调用指定jre运行jar，然后打包成exe，指定下bat运行，但时在打开的一瞬间会有黑框出现，虽然只是一闪即逝，但是很烦人。然后没办法，又写了个vbs（部分电脑不支持，后续会更新修改），同样调用cmd，但是没有那一闪即逝的黑框，但是运行速度慢了很多，只能凑合着用了。可是问题又来了，打包完我一旦修改图标，杀毒软件立马报毒立马删除（WTF？？？？？）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我都快抓狂了，然后试了很多工具，最后终于找到一个比较好用的ResHacker修改了图标和一些简单配置。再把jre打包进去。然后再跑去我朋友那儿用没有jre的电脑试了几次，终于成功了，整个过程有点复杂有点崩溃，但终究是成功了。成功后喜悦完全掩盖了之前所有的汗水和疲惫。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这款小程序也是花了不少心血，目前更新到第十章，以后会不定期更新。这个小程序只是希望能够帮助到大家。里面所有程序并不全都是我写的，部分题目答案来源于网络，如有侵权请联系本人删除，仅供参考学习。另外希望大家不要只是看看代码，多多动手，学习编程动手学是最快的。下面给上百度云链接：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;链接：http://pan.baidu.com/s/1qXXfGOc 密码：ahqj&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;PS：由于捆绑了jre所以有点大，后面有空我会把没捆绑jre的一起传上来，10M不到。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Pps：欢迎联系本人交流学习哈&lt;sub&gt;~&lt;/sub&gt; 2017.7.9&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;BY：LZY&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2017.7.15更新&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你的电脑上没有安装jdk或jre&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自带jre包—— 链接：http://pan.baidu.com/s/1qYFLsp2 密码：yukx&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你的电脑上安装了jdk或jre&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;无jre包 —— 链接：http://pan.baidu.com/s/1bpcqjj5 密码：qqqe&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[CentOS7 上安装 JDK1.8]]></description><link>https://zyue.wiki/articles/2018/02/02/1546344578809.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/02/1546344578809.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;通过 SecureCRT 连接到阿里云 CentOS7 服务器；&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;进入到目录 /usr/local/ 中：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd /usr/local/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;3&quot;&gt;
&lt;li &gt;
&lt;p&gt;创建目录 tools：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; mkdir -p tools&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;4&quot;&gt;
&lt;li &gt;
&lt;p&gt;进入到目录 /usr/local/tools 中：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; cd tools/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;5&quot;&gt;
&lt;li &gt;
&lt;p&gt;下载 jdk-8u91-linux-x64.tar.gz：&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;wget –no-check-certificate –no-cookies –header ``Cookie:
oraclelicense=accept-securebackup-cookie&apos;&apos;
&lt;a href=&quot;http://download.oracle.com/otn-pub/java/jdk/7u71-b14/jdk-7u71-linux-x64.rpm&quot; class=&quot;bare&quot;&gt;http://download.oracle.com/otn-pub/java/jdk/7u71-b14/jdk-7u71-linux-x64.rpm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;官网地址&lt;/a&gt;，找到需要的，然后加上头既可&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;加压缩 jdk-8u91-linux-x64.tar.gz 文件：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; tar -zxvf jdk-8u91-linux-x64.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;7&quot;&gt;
&lt;li &gt;
&lt;p&gt;返回到上一级并创建 /usr/local/jdk 目录： &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd .. mkdir -p jdk&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;8&quot;&gt;
&lt;li &gt;
&lt;p&gt;进入到 tools 目录后将 jdk1.8.0_91 移动到 jdk 目录中：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd ../tools/ mv jdk1.8.0_91/ ../jdk/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;9&quot;&gt;
&lt;li &gt;
&lt;p&gt;打开 /etc/ 目录下的 profile 文件：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vi /etc/profile&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;10&quot;&gt;
&lt;li &gt;
&lt;p&gt;将如下代码追加到 profile 文件末尾：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# idea - jdk8 settings start 2016-05-01

JAVA_HOME=/usr/local/jdk/jdk1.8.0_91
JRE_HOME=$JAVA_HOME/jre
PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin
CLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib/dt.jar
export JAVA_HOME JRE_HOME PATH CLASSPATH

# idea - jdk8 settings end - 2016-05-01&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;11&quot;&gt;
&lt;li &gt;
&lt;p&gt;按 Esc 键、输入 wq! 回车，保持并退出。即可启用新的配置：&lt;code&gt;source /etc/profile&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;12&quot;&gt;
&lt;li &gt;
&lt;p&gt;输入 java -version 查看 JDK 的版本：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; [root@iZ94hws2fzlZ jdk1.8.0_91]# java -version
 java version &quot;1.8.0_91&quot;
 Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
 Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[CentOS7 64位下 MySQL5.7 安装与配置（YUM）]]></description><link>https://zyue.wiki/articles/2018/02/02/1546344583722.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/02/1546344583722.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_1_配置yum源&quot;&gt;1. 配置YUM源&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2_安装mysql&quot;&gt;2. 安装MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_3_启动mysql服务&quot;&gt;3. 启动MySQL服务&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_4_开机启动&quot;&gt;4. 开机启动&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_5_修改root本地登录密码&quot;&gt;5. 修改root本地登录密码&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_6_修改密码策略&quot;&gt;6. 修改密码策略&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_7_添加远程登录用户&quot;&gt;7. 添加远程登录用户&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_8_配置默认编码为utf8&quot;&gt;8. 配置默认编码为utf8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装环境：CentOS7 64位 MINI版，安装MySQL5.7&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot; &gt;
— bash
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_1_配置yum源&quot; &gt;1. 配置YUM源&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在MySQL官网中下载YUM源rpm安装包：http://dev.mysql.com/downloads/repo/yum/&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下载mysql源安装包&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;shell&amp;gt; wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装mysql源&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;shell&amp;gt; yum localinstall mysql80-community-release-el7-1.noarch.rpm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;检查mysql源是否安装成功&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;shell&amp;gt; yum repolist enabled | grep &quot;mysql.*-community.*&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/centos/1.2.png&quot; alt=&quot;2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;看到上图所示表示安装成功。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可以修改vim
/etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。比如要安装5.6版本，将5.7源的enabled=1改成enabled=0。然后再将5.6源的enabled=0改成enabled=1即可。改完之后的效果如下所示：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/centos/1.3.png&quot; alt=&quot;2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_2_安装mysql&quot; &gt;2. 安装MySQL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;shell&amp;gt; yum install mysql-community-server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_3_启动mysql服务&quot; &gt;3. 启动MySQL服务&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;shell&amp;gt; systemctl start mysqld&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;查看MySQL的启动状态&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;shell&amp;gt; systemctl status mysqld
● mysqld.service - MySQL Server
   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)
   Active: active (running) since 五 2016-06-24 04:37:37 CST; 35min ago
 Main PID: 2888 (mysqld)
   CGroup: /system.slice/mysqld.service
           └─2888 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid

6月 24 04:37:36 localhost.localdomain systemd[1]: Starting MySQL Server...
6月 24 04:37:37 localhost.localdomain systemd[1]: Started MySQL Server.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_4_开机启动&quot; &gt;4. 开机启动&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;shell&amp;gt; systemctl enable mysqld
shell&amp;gt; systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_5_修改root本地登录密码&quot; &gt;5. 修改root本地登录密码&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;shell&amp;gt; grep &apos;temporary password&apos; /var/log/mysqld.log&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/centos/1.4.png&quot; alt=&quot;4&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;shell&amp;gt; mysql -uroot -p
mysql&amp;gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;mysql&amp;gt; set password for &apos;root&apos;@&apos;localhost&apos;=password(&apos;MyNewPass4!&apos;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR
1819 (HY000): Your password does not satisfy the current policy
requirements错误，如下图所示：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/centos/1.5.png&quot; alt=&quot;5&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过msyql环境变量可以查看密码策略的相关信息：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;mysql&amp;gt; show variables like &apos;%password%&apos;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/centos/1.6.png&quot; alt=&quot;6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;validate_password_policy：密码策略，默认为MEDIUM策略
validate_password_dictionary_file：密码策略文件，策略为STRONG才需要
validate_password_length：密码最少长度
validate_password_mixed_case_count：大小写字符长度，至少1个
validate_password_number_count ：数字至少1个
validate_password_special_char_count：特殊字符至少1个&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;上述参数是默认策略MEDIUM的密码检查规则。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;共有以下几种密码策略：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 46%;&quot;&gt;
&lt;col style=&quot;width: 54%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;策略&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;检查规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0 or LOW&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Length&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1 or MEDIUM&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Length; numeric, lowercase/uppercase, and special
characters&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2 or STRONG&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Length; numeric, lowercase/uppercase, and special
characters; dictionary file&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;MySQL官网密码策略详细说明：http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_6_修改密码策略&quot; &gt;6. 修改密码策略&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;# 选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件
validate_password_policy=0
# 如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：
validate_password = off
# 重新启动mysql服务使配置生效：
systemctl restart mysqld&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_7_添加远程登录用户&quot; &gt;7. 添加远程登录用户&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;mysql&amp;gt; GRANT ALL PRIVILEGES ON *.* TO &apos;echocow&apos;@&apos;%&apos; IDENTIFIED BY &apos;Yangxin0917!&apos; WITH GRANT OPTION;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_8_配置默认编码为utf8&quot; &gt;8. 配置默认编码为utf8&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;[mysqld]
character_set_server=utf8
init_connect=&apos;SET NAMES utf8&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重新启动mysql服务，查看数据库默认编码如下所示：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/centos/1.7.png&quot; alt=&quot;6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;默认配置文件路径： - 配置文件：/etc/my.cnf -
日志文件：/var/log//var/log/mysqld.log -
服务启动脚本：/usr/lib/systemd/system/mysqld.service -
socket文件：/var/run/mysqld/mysqld.pid&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[今天在学习hibernate框架时，使用的5.2.13稳定版本，而在 hibernate 5.2 版本以后，对于 Criteria 查询重点放在了 JPACriteriaQuery API 上。]]></description><link>https://zyue.wiki/articles/2018/02/09/1546344579701.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/09/1546344579701.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_一基本查询&quot;&gt;一、基本查询&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_二条件查询&quot;&gt;二、条件查询&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_三分页查询&quot;&gt;三、分页查询&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_四分页查询之查询总条数&quot;&gt;四、分页查询之查询总条数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;今天在学习hibernate框架时，使用的5.2.13稳定版本，而在 hibernate 5.2
版本以后，对于 Criteria 查询重点放在了 JPACriteriaQuery API 上，如图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.1.png&quot; alt=&quot;pic&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;所以造成的结果是&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.2.png&quot; alt=&quot;res&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.3.png&quot; alt=&quot;pic&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;方法的过时，同时其下对应的criteria查询的许多方法都属于过时的状态。怀着一颗与时俱进的心，我在网上百般寻找答案，但是百度给出的答案寥寥无几，有限的仅有简单的查询，后来去Google搜素，找寻多个网站以及翻官方文档和API，终于集合了解决方案用以应对criteria过时的问题。下面看看官方文档给出的API&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.4.png&quot; alt=&quot;pic&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.5.png&quot; alt=&quot;pic&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;官方给出的解决方案就是JPA 的
criteria，作为一名合格的爱学习的大学生，我当然不会一个一个的翻阅这些英文文档。不过呢，我还是先了解了下criteria查询的好处。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;hibernate 自创的，无查询语句，面向对象查询。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;全都通过调用方法查询&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;注意，很多方法在5.2版本的hibernate中已经弃用，官方API如下&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;*HQL相比，完全面向对象，不需要任何SQL基础 *&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当然，我是比较喜欢这种设置参数就可操作表的查询的，所以对其一些基本的操作在hibernate5.2版本以后进行了学习。由于百度收录的关于hibernate
5.2更新版本后的
criteria查询资料极其稀少，所以我就打算记下来。但是由于博客正在学习与建设中，只有暂时存放于此处以便取用。在这之前，做必要的准备，例如hibernate的基本配置、导包等都不再赘述，给出数据库表结构与数据如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.6.png&quot; alt=&quot;pojo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;pojo类如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.7.png&quot; alt=&quot;aaaa&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其中由于hibernate硬性规定使用id，而我的pid使用的是string类型，所以我建立了一个代理id，用来表的业务列中,没有某业务列符合但是却,必须有,并创建一个没有业务意义的列作为主键。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后，建立一个获取session对象的工具类。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.8.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_一基本查询&quot; &gt;一、基本查询&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;曾经的方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.9.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;但是同样，createCriteria已经属于过时的方法，Hibernate5.2中已不推荐使用Criteria，而是使用基于JPA规范的CriteriaQuery查询。通过百度以及API，采用新的第一种方法如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.10.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;创建一个CriteriaBuilder&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;获取 CriteriaQuery&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;指定实体 criteria.from(Product.class);&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;执行查询 session.createQuery 获取结果集 .getResultList()&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;简化后代码如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.11.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时，官网给出另外一种方法，&lt;strong&gt;选择根实体，示例如下图&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.12.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;根据官网给出的示例，书写代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.13.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不获取根实体的情况，分析如下： 1. 创建一个CriteriaBuilder&lt;br&gt;
2. 获取 CriteriaQuery&lt;br&gt;
3. 选择根实体 Root&lt;br&gt;
4. 执行查询 session.createQuery&lt;br&gt;
5. 获取结果集 .getResultList()&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;查询指定字段，通过CriteriaQuery的select具体设置&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.14.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_二条件查询&quot; &gt;二、条件查询&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;对于原方法，条件查询如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.15.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;由于方法的&lt;strong&gt;过时&lt;/strong&gt;，采用5.2新定义的方法，此时，必须为其定义根实体&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.16.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此处需要使用CriteriaQuery的where方法，其中参数为Predicate类型，所以我们用CriteriaBuilder的方法来进行查询，包括equal、gt等，对应如下：&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;关系&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;大于（&amp;gt;）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;gt&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;大于等于（&amp;gt;=）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ge&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;小于（&amp;lt;）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;lt&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;小于等于（⇐）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;le&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;等于（==）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;eq&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;不等于（！=）&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ne&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;between and&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;between&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;like&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;lisk&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;not null&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;isNotNull&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;is not null&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;isNull&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;or&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;or&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;and&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;and&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;不过在处理OR或者AND是，是一层又一层的嵌套。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.17.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此时即完成了条件查询&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;根据条件查询指定字段。将以上两种方式结合即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.18.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_三分页查询&quot; &gt;三、分页查询&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;hibernate 5.2以前&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.19.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;现在5.2修改后，找遍多种途径都没寻求到方法，不得已，我使用了其他的方法，采用
JPA 标准下的persistence 包下的 TypedQuery 来进行分页。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.20.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如此，hibernate 5.2的分页查询就实现了。当然此方法由文档所给出的如下 &amp;gt;
This is useful when the aim is to create dynamic, failure-safe queries.
In contrast to &lt;code&gt;hard-coded&apos;&apos;, &lt;/code&gt;string-based&apos;&apos; JQL or HQL queries, JPA
Criteria reduces run-time failures because the compiler dynamically
checks for query errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;翻译：当创建动态的、故障安全的查询时，这一点非常有用。相对于``硬编码&apos;&apos;、“基于字符串的“JQL
或HQL查询，JPA标准降低了运行时失败，因为编译器动态检查查询错误。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_四分页查询之查询总条数&quot; &gt;四、分页查询之查询总条数&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.21.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同样，由于使用JPA，我们不得不更换方式。这个时候就需要使用到mysql的聚合函数来处理数据，在百度查询无果后，去查询官方API文档，他给出了聚合函数使用如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.22.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;研究半天终于使用其聚合函数获取到了，后面的聚合函数都可以使用同样的方式&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.23.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/ssh/hibernate1.24.png&quot; alt=&quot;last&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如此即成功使用其聚合函数获取到了其总条数。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;致此，简单的查询就这些了。差不多如此，花了不少时间终于全部弄懂了。相比起HQL，在自己研究的下，还是Criteria
查询较为难，hibernate这个框架感觉相比于mybatis更加上升了一个高度，如果说jdbc底层，连接池上升一层，mybatis再升一层，那么hibernate相比于mybatis应该上升了两层吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;差不多就这些了，晚安各位~月亮&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;再吐槽一遍QQ空间的编辑器=-=要不是因为我博客还没建好，我也不会用这个=-=希望下次不用了。上传图片截屏排版键值要我老命。。。。唯一好点的就是挺喜欢荧光字体。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[配置防火墙对 SSH 的限制]]></description><link>https://zyue.wiki/articles/2018/02/15/1546344574537.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/15/1546344574537.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 serverx和 desktopx上设置防火墙，对 SSH实现访问限制： - 允许
example.com域的客户对 serverx和 desktopx进行 ssh访问。 - 禁止
my133t.org域的客户对 serverx和 desktopx进行 ssh访问。 - 备注：
my133t.org是在172．17．10℃/24网络。 - 根据考试实际提供的网段配置&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;—&amp;gt;防火墙会检查的部分&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（1）IP来源 （信任域、非信任域）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（2）访问的对象 （服务ssh/http、端口）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（3）访问的协议 （TCP/UDP）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;（4）目标IP （防火墙设备，例如路由器NAT）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;关闭与屏蔽 iptables 以及其他防火墙&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemctl  mask  ebtables.service
systemctl  mask  iptables
systemctl  mask  ip6tables&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;2&quot;&gt;
&lt;li &gt;
&lt;p&gt;开启 firewalld 防火墙以及开机启动&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemctl  enable  firewalld
systemctl  start  firewalld&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;3&quot;&gt;
&lt;li &gt;
&lt;p&gt;配置防火墙富规则&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mandb                   //更新 man
man  -k  rich              //查询防火墙副规则的 man 路径
man  firewalld.richlanguage     //防火墙富规则查询&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/2.1.png&quot; alt=&quot;规则查看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/2.2.png&quot; alt=&quot;规则&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 41%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 26%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;名称&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;含义&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;rule&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;类型&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;family=``ipv4&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ipv6&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;来源/源地址&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;source address=&lt;code&gt;address[/mask]&apos;&apos;
[invert=&lt;/code&gt;True&apos;&apos;]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;destination&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;目的地址&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;destination address=&lt;code&gt;address[/mask]&apos;&apos;
invert=&lt;/code&gt;True&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;service&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;服务&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;service name=``service name&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;port&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;端口&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;port port=&lt;code&gt;port value&apos;&apos; protocol=&lt;/code&gt;tcp&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;udb&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;protocol&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;协议&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;protocol value=``protocol value&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ICMP-Block&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;报文块&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;icmp-block name=``icmptype name&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Masquerade&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;伪装&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;masquerade&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward-Port&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;转发&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;forward-port port=&lt;code&gt;port value&apos;&apos;
protocol=&lt;/code&gt;tcp&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;udp&apos;&apos; to-port=&lt;code&gt;port value&apos;&apos; to-addr=&lt;/code&gt;address&apos;&apos;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Log&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;日志&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;log [prefix=&lt;code&gt;prefix text&apos;&apos;] [level=&lt;/code&gt;log level&apos;&apos;] [limit
value=``rate/duration&apos;&apos;]&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Action&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;审计&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;action&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;行为&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;accept, reject or drop&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置具体规则&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;firewall-cmd --add-rich-rule=&quot;rule family=ipv4 source address=172.25.47.10/24 service name=ssh reject&quot; --permanent&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;firewall-cmd --reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/2.3.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[配置 SeLinux 为 enforcing]]></description><link>https://zyue.wiki/articles/2018/02/14/1546344581049.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/14/1546344581049.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vim /etc/sysconfig/selinux&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/1.png&quot; alt=&quot;rhce&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改为题目所需要的即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;退出后，执行&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;setenforce  1             //使强制模式立即生效&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[配置 IPV6 地址]]></description><link>https://zyue.wiki/articles/2018/02/15/1546344586289.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/15/1546344586289.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_方法一&quot;&gt;方法一：&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_方法二&quot;&gt;方法二：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在你的考试系统上配置接口 eth0 使用以下 IPV6地址： -
serverx上的地址应该是 fddb:fe2a:ab1e::c0a8:1/64 -
根据考试实际提供的地址配置 - desktopx上的地址应该是
fddb:fe2a:ab1e::c0a8:2/64 - 两个系统必须能够与网络
fddb:fe2a:able/64内的系统通信。 - 地址必须在重启后依旧生效。 -
两个系统必须保持当前的 IPV4 地址并能通信&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_方法一&quot; &gt;方法一：&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改/etc/sysconfig/network-scripts/ifcfg-eth0&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/etc/sysconfig/network-scripts/ifcfg-eth0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;DEVICE=eth0
BOOTPROTO=static
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=yes
IPADDR=172.25.47.11
PREFIX=24
GATEWAY=172.25.47.254
DNS1=172.254.254.254
IPV6ADDR=&quot;fddb:fe2a:ab1e::c0a8:1/64&quot;
IPV6_AUTOCONF=no&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemctl restart network&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/3.1.png&quot; alt=&quot;see&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_方法二&quot; &gt;方法二：&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过nmcli控制&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nmcli connection show              //查看当前的连接&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/6.png&quot; alt=&quot;see&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nmcli connection modify &quot;System eth0&quot; ipv6.method manual ipv6.addresses &quot;fddb:fe2a:ab1e::c0a8:2/64&quot;

# 重启查看

systemctl restart NetworkManager&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置完毕后nmcli con show查看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/3.2.png&quot; alt=&quot;see&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重启reboot&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/3.3.png&quot; alt=&quot;see&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;只有一个&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[配置链路聚合]]></description><link>https://zyue.wiki/articles/2018/02/16/1546344579957.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/16/1546344579957.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_方法一修改配置文件&quot;&gt;方法一：修改配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_方法二nmcli_命令修改&quot;&gt;方法二：nmcli 命令修改&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_补充_常用的网卡绑定模式&quot;&gt;补充 常用的网卡绑定模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：此题最好切换成英文模式，查看一下其需要的模式是什么 - 在 serverX 和
desktopX 之间按以下要求配置： - 此链路使用接口 eth1 和 eth2 -
此链路在一个接口失效时仍然能工作 - 此链路在 serverX 使用下面的地址
192.168.0.101/255.255.255.0 - 此链路在 desktopX 使用下面的地址
192.168.0.102/255.255.255.0 - 此链路在系统重启之后依然保持正常状态&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;模式：activebackup&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可能出现 roundrobin&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;两台主机之间可以互 ping&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在练习前，需要启动网桥实验环境&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;lab teambridge setup&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/4.1.png&quot; alt=&quot;链路&quot;&gt;&lt;/span&gt; 存在 eno1 和
eno2，下面开始配置链路聚合，由于此链路在一个接口失效时仍然能工作，模式为
&lt;strong&gt;activebackup&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_方法一修改配置文件&quot; &gt;方法一：修改配置文件&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;从提供的文件复制过来，查看已提供的参考文件：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd /usr/share/doc/teamd-1.9/example_ifcfgs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/4.2.png&quot; alt=&quot;链路&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;分别对应不同模式的配置文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;1 —→ roundrobin&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;2 —→ lacp&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;3 —→ activebackup&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;需要的是 activebackup ，复制其下的三个文件到网络配置文件夹下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cp -r  3 /etc/sysconfig/network-scripts/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后移除并修改其名称与网卡对应，网卡名为 eno1、eno2&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mv ifcfg-eth1  ../ifcfg-eno1
mv ifcfg-eth2  ../ifcfg-eno2
mv ifcfg-team_test0 ../ifcfg-team_test0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;由于名称改变了，进入对应的配置文件修改为对应的名称&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/4.3.png&quot; alt=&quot;链路&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/4.4.png&quot; alt=&quot;链路&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;同时修改网桥的 ip 地址以及 TEAM_CONFIG&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/4.5.png&quot; alt=&quot;链路&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后重启网络以及网络管理&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemctl restart network
systemctl restart NetworkManager&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后 ip a 查看配置情况&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/4.6.png&quot; alt=&quot;链路&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;再尝试 ping 一下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/4.7.png&quot; alt=&quot;链路&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;成功&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_方法二nmcli_命令修改&quot; &gt;方法二：nmcli 命令修改&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加一个team类型的接口，配置名叫team0，接口名叫team0，JSON配置，由于需要一个接口失效的时候，依然能工作，所以指定的是
activebackup。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nmcli connection add type team con-name team0 ifname team0 config &apos;{&quot;runner&quot;:{&quot;name&quot;:&quot;activebackup&quot;}}‘&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;将eno1和eno2添加进，team0。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nmcli connection add type team-slave con-name team0-eth1 ifname eth1 master team0
nmcli connection add type team-slave con-name team0-eth2 ifname eth2 master team0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改IP地址&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;nmcli connection modify team0 ipv4.method manual ipv4.addresses &apos;192.168.0.101/24&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重启网络服务 &lt;code&gt;systemctl restart network&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;检验`ip addr` 和 &lt;code&gt;teamdctl &amp;lt;team name&amp;gt; state&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/4.8.png&quot; alt=&quot;链路&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/4.9.png&quot; alt=&quot;链路&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_补充_常用的网卡绑定模式&quot; &gt;补充 常用的网卡绑定模式&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;类型&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;activebackup&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;自动备援模式&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;loadbalance&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;负载均衡模式&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;roundrobin&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;轮换模式&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[自定义用户环境]]></description><link>https://zyue.wiki/articles/2018/02/17/1546344577581.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/17/1546344577581.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_测试自定义的命令&quot;&gt;测试自定义的命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在系统server0和desktop0上创建自定义命令为qstat
,此自定义命令将执行以下命令： - /bin/ps -Ao pid,tt,user,fname,rsz -
此命令对系统中的所有用户有效。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;默认使用bash shell，所以就修改它的配置文件。配置文件一般存在于： 1.
/etc/bashrc 全局生效 2. /home/用户家目录/.bashrc当前用户生效。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这里要求对所有用户生效，明显是修改前者。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;vim /etc/bashrc&lt;/strong&gt; 增加如下配置至文件末尾&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;alias qstat=&apos;/bin/ps -Ao pid,tt,user,fname,rsz&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;source /etc/bashrc&lt;/strong&gt; 重新加载一下，使得当前bash生效。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_测试自定义的命令&quot; &gt;测试自定义的命令&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;qstat&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/5.1.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[配置本地邮件服务]]></description><link>https://zyue.wiki/articles/2018/02/17/1546344576024.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/17/1546344576024.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_方法一直接修改配置文件&quot;&gt;方法一：直接修改配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_方法二使用_postconf_修改&quot;&gt;方法二：使用 postconf 修改&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_练习题&quot;&gt;练习题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在系统server0和desktop0上配置邮件服务，满足以下要求： -
这些系统不接收外部发送来的邮件 -
这些系统上本地发送的任何邮件都会自动路由到 classroom.example.com -
从这些系统上发送的邮件都显示来自 example.com -
你可以通过发送邮件到本地用户student来测试你的配置，&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;classroom.example.com已经配置好。把此用户的邮件转到下列URL
&lt;a href=&quot;http://classroom.example.com/cgi-bin/recevied_mail&quot; class=&quot;bare&quot;&gt;http://classroom.example.com/cgi-bin/recevied_mail&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;*使用 postfix
服务完成上述题目。一般都默认安装了这个服务，并处于默认开机启动状态。但是建议还是检查一下。
*&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;server47 和 desktop47 配置一致，仅用 server47 做演示。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_方法一直接修改配置文件&quot; &gt;方法一：直接修改配置文件&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;/etc/postfix/main.cf&lt;/strong&gt; 主要修改下面几处&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;inet_interfaces = loopback-only #监听本地回环接口
myorigin = example.com #设置来源域名
relayhost = [classroom.example.com] #中转的服务器，没有MX记录的用中括号包起来
mydestination =  #不接受任何邮件
mynetworks = 127.0.0.0/8, [::1]/128 #本地网络
local_transport = error: local delivery disabled #其实是非必须的&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;`systemctl restart postfix`重启邮件服务&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_方法二使用_postconf_修改&quot; &gt;方法二：使用 postconf 修改&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这是专门用来查看 postfix 配置和修改 postfix
配置的工具。个人也是推荐这种做法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;[root@server0 ~]# postconf -e &apos;inet_interfaces=loopback-only&apos;
[root@server0 ~]# postconf -e &apos;myorigin=example.com&apos;
[root@server0 ~]# postconf -e &apos;relayhost=[classroom.example.com]&apos;
[root@server0 ~]# postconf -e &apos;mydestination=&apos;
[root@server0 ~]# postconf -e &apos;mynetworks=127.0.0.0/8, [::1]/128&apos;
[root@server0 ~]# postconf -e &apos;local_transport=error: local delivery disabled&apos;
[root@server0 ~]# systemctl restart postfix&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;[root@server0 ~]# mail -s &apos;fuxk&apos; student@classroom.example.com
erwerwr
.
EOT
[root@server0 ~]# curl http://classroom.example.com/cgi-bin/recevied_mail

From root@example.com  Tue Jan  3 14:43:46 2017&amp;lt;br&amp;gt;Return-Path: &amp;lt;root@example.com&amp;gt;&amp;lt;br&amp;gt;X-Original-To: student@classroom.example.com&amp;lt;br&amp;gt;Delivered-To: student@classroom.example.com&amp;lt;br&amp;gt;Received: from server0.example.com (server0.example.com [172.25.0.11])&amp;lt;br&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbspby classroom.example.com (Postfix) with ESMTP id 1BB802ACC19&amp;lt;br&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbspfor &amp;lt;student@classroom.example.com&amp;gt;; Tue,  3 Jan 2017 14:43:46 +0800 (CST)&amp;lt;br&amp;gt;Received: by server0.example.com (Postfix, from userid 0)&amp;lt;br&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbspid D05FEEAEEA; Tue,  3 Jan 2017 14:43:44 +0800 (CST)&amp;lt;br&amp;gt;Date: Tue, 03 Jan 2017 14:43:44 +0800&amp;lt;br&amp;gt;To: student@classroom.example.com&amp;lt;br&amp;gt;Subject: fuxk&amp;lt;br&amp;gt;User-Agent: Heirloom mailx 12.5 7/5/10&amp;lt;br&amp;gt;MIME-Version: 1.0&amp;lt;br&amp;gt;Content-Type: text/plain; charset=us-ascii&amp;lt;br&amp;gt;Content-Transfer-Encoding: 7bit&amp;lt;br&amp;gt;Message-Id: &amp;lt;20170103064344.D05FEEAEEA@server0.example.com&amp;gt;&amp;lt;br&amp;gt;From: root@example.com (root)&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;erwerwr&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_练习题&quot; &gt;练习题&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在系统 serverX 和 desktopX 上配置邮件服务，满足以下要求：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这些系统不接收外部发送来的邮件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;这些系统上本地发送的任何邮件都会自动路由到 smtpX.example.com&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;从这些系统上发送的邮件都显示来自 desktopX.example.com&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你可以通过发送邮件到本地用户 student 来测试你配置，desktop47.example.com
已配置好&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：模拟环境只需配置 serverX 即可，但考试时需要同配置 serverX 和
desktopX&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;练习时务必在 serverX 和 desktopX 上先启动练习环境&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;lab smtp-nullclient setup&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 postconf 修改&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;postconf -e &quot;inet_interfaces=loopback-only&quot; 监听本地回环接口
postconf -e &quot;relayhost=[smtp47.example.com]&quot; 因为需要自动路由到 smtpX.example.com
postconf -e &quot;myorigin=desktop47.example.com&quot; 需要系统上发送的邮件都显示来自 desktopX.example.com
postconf -e &quot;mydestination=&quot; 不接受任何邮件
postconf -e &quot;mynetworks=127.0.0.0/8 [::1]/128&quot; 设置本地网络
postconf -e &quot;local_transport=error:local delivery disable&quot; 阻止本地空客户端所有邮件在本地转发到/var/spool邮箱中&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;systemctl restart postfix 重启服务&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;发送一封主题为 server47 null client 的邮件，内容为 null client test&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;mail -s &quot;server47 null client&quot; student@desktop47.example.com
null client test.

EOT&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用用户名 student 和密码 student 登录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/6.1.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/6.2.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/6.3.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/6.4.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;lab smtp-nullclient grade&lt;/code&gt; 测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/6.5.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 7 配置端口转发]]></description><link>https://zyue.wiki/articles/2018/02/19/1546344575180.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/19/1546344575180.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 serverX 上配置端口转发，要求如下：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;在 172.25.X.0/24 网络中的系统，访问 serverX 的本地端口 5423
将被转发到端口 80&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;此设置必须永久有效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;firewall-cmd --permanent --add-rich-rule &apos;rule family=ipv4 source address=172.25.0.0/24 forward-port port=5423 protocol=tcp to-port=80&apos; --permanent

firewall-cmd --permanent --add-rich-rule &apos;rule family=ipv4 source address=172.25.0.0/24 forward-port port=5423 protocol=udp to-port=80&apos; --permanent

firewall-cmd --reload&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/7.png&quot; alt=&quot;哈哈哈哈&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 8 通过 SMB 共享目录]]></description><link>https://zyue.wiki/articles/2018/02/19/1546344574210.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/19/1546344574210.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 serverX 上配置 SMB 服务 - 您的 SMB 服务器必须是 STAFF
工作组的一个成员 - 共享 /common 目录，共享名必须为 common - 只有
example.com 域内的客户端可以访问 common 共享 - common 必须是可以浏览的 -
用户 rob，samba 密码为 redhat，只读权限访问 common 共享 - 用户
brian，samba 密码为 redhat，读写权限访问 common 共享&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;备注：考试时，用户名和密码根据题目实际情况进行设定，有的时候题目简单一点，测试用户早已建立，有的时候题目较难一点，用户和密码都必须自己设定。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装 samba 和 samba-client&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;yum install samba samba-client&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过 camba-client 查看分享出来的目录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;smbclient -L server47 -U brian&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/8.1.png&quot; alt=&quot;查看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;查看是否存在用户 rob 和 brain&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;id rob
id brian&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;倘若不存在，创建用户，由于只仅限于 samba
的系统用户，所以必须锁定密码并防止直接用户登录和 ssh 远程登录。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;useradd -s /sbin/nologin rob
useradd -s /sbin/nologin brian&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;再次查看同时记录下 uid&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;id rob
id brian&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/8.2.png&quot; alt=&quot;查看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/8.3.png&quot; alt=&quot;查看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;因为用户作为 samba 用户，所以为 samba 用户库添加 rob 和brain
冰壶并设置密码。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;smbpasswd -a rob
smbpasswd -a brian&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建共享挂载目录 /common&lt;strong&gt;（注意根据题目要求）&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;mkdir /common&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;将目录共享文件添加至 SELinux 策略中，也就是为他们打标签&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;semanage fcontext -a -t samba_share_t &apos;/common(/.*)?&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使其目录立刻采用 SELinux 规则，F 代表强制重置文件环境，R
代表递归的变更文件和目录的文件标签，v 代表显示变更情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;restorecon -RFv /common/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为 samba 用户设置 ACL 权限&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;rob 只能读，&lt;strong&gt;但目录下的文件没有被执行的权限，所以为
X&lt;/strong&gt;，代表目录可以被访问。所以为 r-X brian 可读可写，所以为 rwx&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;setfacl -m u:rob:r-X /common/setfacl -m u:brian:rwx /common/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改配置文件，按照题目要求，将工作组设置为 STAFF&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;vim /etc/samba/smb.conf


workgroup = STAFF
security = user&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/8.4.png&quot; alt=&quot;查看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/8.5.png&quot; alt=&quot;查看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置共享目录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;[common]
path = /common                             //共享目录
write list = brian                              //可写的用户列表，默认 read-only
browseable = yes                           //是否可浏览
hosts allow = 172.25.47.0/24         //允许访问的域，必须使用 IP 地址&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/8.6.png&quot; alt=&quot;查看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;开启服务以及设置服务开机启动、开启防火墙&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;systemctl enable smb.service  nmb.service
systemctl start smb.service  nmb.service
firewall-cmd --permanent --add-service=samba
firewall-cmd --reload&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;服务器端 SMB 配置完成&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 9 配置多用户 SMB 挂载]]></description><link>https://zyue.wiki/articles/2018/02/20/1546344586111.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/20/1546344586111.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 desktopX 上完成以下要求的配置： - desktopX 把 serverX 的 common
共享通过多用户的方式挂载到本地的 /mnt/multiuser - 用户 rob，samba 密码为
redhat，只读权限访问 common 共享。 - 用户 brain，samba 密码为
redhat，读写权限访问 common 共享。 - 该共享要求在系统启动时自动挂载。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;备注：实际的共享和挂载点请根据考试题目设定&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装 cifs-utils 软件包以及 samb-client，因为其提供了 mount.cifs 命令&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;yum install cifs-utils.x86_64 -y
yum install samba-client.x86_64 -y&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建挂载目录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;mkdir /mnt/multiuser&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用 brian 的用户名和密码（使用权限较多的用户，如可读写的
brian）创建证书（凭据）文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;echo &apos;username=brian&apos; &amp;gt; /root/smb-multiuser.txt
echo &apos;password=redhat&apos; &amp;gt;&amp;gt; /root/smb-multiuser.txt&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;编辑挂载文件 &lt;code&gt;vim /etc/fstab&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;//server47.example.com/common  /mnt/multiuser  cifs  credentials=/root/smb-multiuser.txt,sec=ntlmssp,multiuser   0 0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;保存退出后，挂载 &lt;code&gt;mount -a&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;查看是否存在用户 rob 和 brian，如果不存在，创建，同时指定其 UID
和服务端相同&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;useradd -u 1001 robuseradd -u 1002 brian&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;设置密码&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;echo &quot;redhat&quot; | passwd --stdin rob
echo &quot;redhat&quot; | passwd --stdin brian&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;由于要测试 rob 用户的可读权限，所以先用 brian 用户测试创建文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;切换到 brian 用户&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt; su - brian&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加 brian 的 samba 凭据，只读&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;cifscreds add server47&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;尝试写入文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;echo &quot;multiuser&quot; &amp;gt; /mnt/multiuser/brian .txt&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;成功，&lt;code&gt;cat&lt;/code&gt; 读取查看。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;退出&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;切换到 rob 用户&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加 rob 的 samba 凭据，只读&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;cifscreds add server47&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;尝试写入文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt; echo &quot;multiuser&quot; &amp;gt; /mnt/multiuser/rob.txt&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;显示 &lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/9.1.png&quot; alt=&quot;显示&quot;&gt;&lt;/span&gt;
尝试读取 brian 创建的文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;cat /mnt/multiuser/brian.txt&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/9.1.png&quot; alt=&quot;查看&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;成功！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 10 配置 NFS 服务]]></description><link>https://zyue.wiki/articles/2018/02/20/1546344584166.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/20/1546344584166.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 serverX 配置 NFS 服务，要求如下： - 以只读的形式共享目录 /public
同时只能被 example.com 域中的系统访问。 - 以读写的形式共享目录
/protected 同时只能被 example.com 域中的系统访问。 - 访问 /protected
需要通过 Kerberos 安全加密，您可以使用下面提供的密钥：
&lt;a href=&quot;http://classroom.example.com/pub/keytabs/serverX.keytab&quot; class=&quot;bare&quot;&gt;http://classroom.example.com/pub/keytabs/serverX.keytab&lt;/a&gt; - 目录
/protected 应该包含名为 project 拥有人为 ldapuserX 的子目录 - 用户
ldapuserX 能以读写形式访问/ protected/project&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建目录&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;mkdir /publicmkdir -p /protected/project&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改目录权限，protected 需要有读写权限，project 需要修改拥有人身份&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;chmod o+w /protected/ -R
chown ldapuser0 /protected/project/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;打标签&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;semanage fcontext -a -t public_content_t &apos;/protected(/.*)?&apos;
restorecon -RvF /protected/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下载kerberos证书到 /etc/krb5.keytab&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;wget -O /etc/krb5.keytab http://classroom.example.com/pub/keytabs/server0.keytab&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;vim /etc/exports&lt;/code&gt; 修改文件，增加共享信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;/public 172.25.0.0/24(ro) #要共享的目录 允许访问的ip段 参数
/protected 172.25.0.0/24(rw,sec=krb5p)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;启动NFS相关服务，并设置开机启动 nfs-server 和 nfs-secure-server&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;systemctl restart nfs-server nfs-secure-server
systemctl enable nfs-server nfs-secure-server&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果没有下载kerberos证书，或者下载不正确，是不能正常启动nfs-secure-server的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置防火墙 允许相关服务 nfs、rpc-bind和mountd&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;firewall-cmd --permanent --add-service=nfs
firewall-cmd --permanent --add-service=rpc-bind
firewall-cmd --permanent --add-service=mountd
firewall-cmd --reload&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置到这里就完成了。如果想要查看输出的共享信息，可以使用
`exportfs -v`查看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;[root@server0 ~]# exportfs -v/public         172.25.0.0/24(ro,wdelay,root_squash,no_subtree_check,sec=sys,ro,secure,root_squash,no_all_squash)/protected      172.25.0.0/24(rw,wdelay,root_squash,no_subtree_check,sec=krb5p,rw,secure,root_squash,no_all_squash)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如果你修改了 /etc/exports 配置，不想重启服务又想立即生效，可以使用
&lt;code&gt;exportfs -arv&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 11 挂载一个NFS共享]]></description><link>https://zyue.wiki/articles/2018/02/20/1546344584550.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/20/1546344584550.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 desktopX 上挂载一个来自 serverX 上的 NFS 共享，并符合下列要求： -
/pulbic 共享挂载到本地的 /mnt/nfsmount。 - /protected 挂载到本地的/
mnt/nfssecure, 并使用安全的方式，密钥下载地址：
&lt;a href=&quot;http://classroom.example.com/pub/keytabs/desktop0.keytab&quot; class=&quot;bare&quot;&gt;http://classroom.example.com/pub/keytabs/desktop0.keytab&lt;/a&gt; - 用户
ldapuserX 能够在 /mnt/nfssecure/project 上创建文件。 -
这些文件系统在系统启动时自动挂载。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先 &lt;code&gt;showmount&lt;/code&gt; 查看一下server0的共享。如果没有，返回检查 server0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;showmount -e server0
Export list for server0:
/protected 172.25.0.0/24
/public    172.25.0.0/24&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;建立相应的挂载点 /mnt/nfsmount 、 /mnt/nfssecure&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;mkdir /mnt/nfsmount mkdir /mnt/nfssecure&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;下载kerberos证书到/etc/krb5.keytab&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;wget -O /etc/krb5.keytab http://classroom.example.com/pub/keytabs/desktop0.keytab&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;启动相关服务并设置开机启动&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;systemctl restart nfs-secure
systemctl enable nfs-secure&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;vim /etc/fstab&lt;/code&gt; 使得开机能自动挂载&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;172.25.0.11:/public        /mnt/nfsmount   nfs     defaults                                   0       0
172.25.0.11:/protected  /mnt/nfssecure   nfs     defaults,sec=krb5p,v4.2        0       0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重启服务&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;systemctl restart nfs-server.service&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;code&gt;mount -a&lt;/code&gt; 挂载所有选项&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;切换用户，尝试访问&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;su - ldapuserX&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/rhce/1.png&quot; alt=&quot;test&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[tomcat9 配置问题 403 Access Denied]]></description><link>https://zyue.wiki/articles/2018/05/08/1546344578486.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/05/08/1546344578486.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_1_需要配置&quot;&gt;1.需要配置：&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2_另外需要修改tomcatwebappsmanagermeta_infcontext_xml文件&quot;&gt;2.另外，需要修改Tomcat/webapps/manager/META-INF/context.xml文件：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;tomcat9.0 管理页面如：http://10.10.10.10:8080/manager/html出现如下错误：&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;403 Access Denied&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_1_需要配置&quot; &gt;1.需要配置：&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;Tomcat/conf/tomcat-users.xml加入：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt; &amp;lt;role rolename=&quot;manager&quot;/&amp;gt;
  &amp;lt;role rolename=&quot;admin&quot;/&amp;gt;
  &amp;lt;role rolename=&quot;admin-gui&quot;/&amp;gt;
  &amp;lt;role rolename=&quot;manager-gui&quot;/&amp;gt;
  &amp;lt;user username=&quot;xxx&quot; password=&quot;***&quot; roles=&quot;admin-gui,manager-gui&quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;以上配置好后本地可以访问，http://127.0.0.1:8080/manager/html&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_2_另外需要修改tomcatwebappsmanagermeta_infcontext_xml文件&quot; &gt;2.另外，需要修改Tomcat/webapps/manager/META-INF/context.xml文件：&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &amp;gt;
  &amp;lt;!--
    Remove the comment markers from around the Valve below to limit access to
    the manager application to clients connecting from localhost
  --&amp;gt;

  &amp;lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot;

         allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|\d+\.\d+\.\d+\.\d+&quot; /&amp;gt;
  -&amp;lt;/Context&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;或注释Value节点（tomcat9.0以下默认是注释的，所以不需修改）&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;!--
  &amp;lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot;
         allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&amp;gt;
  --&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;参考tomcat9.0文档：http://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Remote_Address_Filter&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[windows powershell 自定义颜色]]></description><link>https://zyue.wiki/articles/2018/05/22/1546344586774.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/05/22/1546344586774.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作流程&quot;&gt;操作流程&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_颜色对应的character&quot;&gt;颜色对应的character&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_示例&quot;&gt;示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;折腾了二十多分钟终于改好了，真的好气。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作流程&quot; &gt;操作流程&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;win+R→输入regedit→定位到HKEY_CURRENT_USERProcessor&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;输入颜色对应的字符，可以输入两个，第一个表示背景颜色，第二个表示文本颜色；如果只输入一个，则只改变文本颜色。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_颜色对应的character&quot; &gt;颜色对应的character&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;0=黑、8=灰&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;1=蓝、9=淡蓝&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;2=绿、A=淡绿&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;3=湖蓝色、B=淡浅绿&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;4=红、C=淡红&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;5=紫、D=淡紫&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;6=黄、E=淡黄&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;7=白、F=亮白&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_示例&quot; &gt;示例&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/windwos1.1.png&quot; alt=&quot;1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;输入3e：即背景湖蓝色，文本淡黄色&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;效果如下~~&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;img src=&quot;https://resources.echocow.cn/image/blog/windwos1.2.png&quot; alt=&quot;2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;即：输入3e，背景湖蓝色（3），文本淡黄色（e），效果如上所示。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[tomcat 上配置二级域名]]></description><link>https://zyue.wiki/articles/2018/03/04/1546344584354.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/03/04/1546344584354.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_环境&quot;&gt;环境&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_步骤&quot;&gt;步骤&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;今天在 Tomcat 上配置二级域名，说实话，Tomcat 的 server.xml
文件是我最不想碰的，上次真的被他搞出了阴影来。但是后面觉得还是有必要配一下，早晚都要经历的=-=所以还是花时间配置了。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_环境&quot; &gt;环境&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;一台已经安装好 Tomcat9 的 centos7 服务器，其使用 IP
地址必须能够正常访问。已经配置好dns 解析的域名，能够 ping
得通你所需要配置的二级域名。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_步骤&quot; &gt;步骤&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;进入 Tomcat9 目录下的 conf 文件夹，编辑 server.xml 文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;可选 ：寻找到标签 Connector ，将 port 设置为80&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/tomcat.2.1.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot;
           redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;继续向下，寻找到 name 为 localhost 的 Host
标签，修改为主域名（如www.echocow.cn），添加 port 等参数&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/tomcat.2.2.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;端口号、协议等按需求填写&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;Host name=&quot;www.echocow.cn&quot;  appBase=&quot;webapps&quot;  port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;
    connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第一个二级域名配置完毕，只是主要的二级域名。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其他二级域名方法相同，只不过需要多添加一个 Host 标签，下面我添加一个
yiban.echocow.cn 的二级域名。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/tomcat.2.3.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;其中 context 对应的其域名下的文件夹以及目录。这样既算是配置完毕&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;Host name=&quot;yiban.echocow.cn&quot;  appBase=&quot;webapps&quot; port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;
    connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&amp;gt;
    &amp;lt;Context path=&quot;/YBSeatOrder&quot; docBase=&quot;YBSeatOrder&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&amp;gt;
    &amp;lt;Context path=&quot;/YBStore&quot; docBase=&quot;YBStore&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&amp;gt;
&amp;lt;/Host&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/blog/tomcat.2.4.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;如此，访问 yiban.echocow.cn/YBStore 即是访问 YBStore 这个项目了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[RHCE 考试目录]]></description><link>https://zyue.wiki/articles/2018/03/01/1546344573160.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/03/01/1546344573160.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;☒ 1. 配置 SeLinux&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 2. 配置防火墙对 SSH 的限制&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 3. 配置 IPV6 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 4. 配置链路聚合&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 5. 自定义用户环境&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 6. 配置本地邮件服务&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 7. 配置端口转发&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 8. 通过 SMB 共享目录&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 9. 配置多用户 SMB 挂载&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 10. 配置 NFS 服务&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 11. 挂载一个 NFS 共享&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 12. 实现一个 web 服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 13. 配置安全 web 服务&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 14. 配置虚拟主机&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 15. 配置 web 内容的访问&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 16. 实现动态 web 内容 （新版已没有此题）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 17. 创建一个脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 18. 创建一个添加用户的脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 19. 配置 ISCSI 服务端&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 20. 配置 ISCSI 客户端&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 21. 部署 MariaDB 数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;☒ 22. 数据库查询填空&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[RHCE 2018 考试试题]]></description><link>https://zyue.wiki/articles/2018/02/28/1546344573952.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/28/1546344573952.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_1_配置selinux&quot;&gt;1. 配置SELINUX&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_2_配置ssh访问控制&quot;&gt;2. 配置SSH访问控制&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_3_自定义用户环境&quot;&gt;3. 自定义用户环境&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_4_配置端口转发&quot;&gt;4. 配置端口转发&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_5_配置链路聚合&quot;&gt;5. 配置链路聚合&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_6_配置_ipv6_地址&quot;&gt;6. 配置 IPV6 地址&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_7_配置本地邮件服务&quot;&gt;7. 配置本地邮件服务&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_8_通过_smb_共享目录&quot;&gt;8.通过 SMB 共享目录&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_9_配置多用户_smb_挂载&quot;&gt;9. 配置多用户 SMB 挂载&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_10_配置nfs服务&quot;&gt;10. 配置NFS服务&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_11_挂载一个nfs共享&quot;&gt;11. 挂载一个NFS共享&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_12_实现一个_web_服务器&quot;&gt;12. 实现一个 web 服务器&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_13_配置安全web服务&quot;&gt;13. 配置安全web服务&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_14配置虚拟主机&quot;&gt;14：配置虚拟主机&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_15_配置web内容的访问控制&quot;&gt;15. 配置web内容的访问控制&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_16实现动态web_内容&quot;&gt;16，实现动态WEB 内容&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_17_创建一个脚本&quot;&gt;17. 创建一个脚本&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_18_创建一个添加用户的脚本&quot;&gt;18. 创建一个添加用户的脚本&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_19_配置iscsi服务端&quot;&gt;19. 配置ISCSI服务端&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_20_配置iscisi的客户端&quot;&gt;20. 配置ISCISI的客户端&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_21_配置一个数据库&quot;&gt;21. 配置一个数据库&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_22_数据库查询&quot;&gt;22. 数据库查询&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;yum源地址为：http://server.group8.example.com/yum&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_1_配置selinux&quot; &gt;1. 配置SELINUX&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改 selinux 的状态为 Enforcing 模式&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_2_配置ssh访问控制&quot; &gt;2. 配置SSH访问控制&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;按以下要求配置SSH访问： &amp;gt; 1.用户能够从域 group8.example.com
内的客户端通过SSH远程访问您的两个虚拟机系统 &amp;gt; 2.在域
my133t.org（172.13.8.0/24）内的客户端不能访问您的两个虚拟机系统&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_3_自定义用户环境&quot; &gt;3. 自定义用户环境&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在系统 system2 和 system1 上创建自定义命令名为 qstat
，此自定义命令将执行以下命令： &amp;gt; /bin/ps -Ao pid,tt,user,fname,rsz&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此命令对系统中所有用户有效&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_4_配置端口转发&quot; &gt;4. 配置端口转发&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在系统 system2 配置端口转发，要求如下： &amp;gt; 1. 在 172.24.8.0/24
网络中的系统，访问 system2 的本地端口 5423 将被转发到 80 &amp;gt; 2.
此设置必须永久有效&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_5_配置链路聚合&quot; &gt;5. 配置链路聚合&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 system2 和 system1 之间按以下要求配置一个链路： &amp;gt; 1. 此链路使用接口
eth1 和 eth2 &amp;gt; 2. 此链路在一个接口失效时仍然能工作 &amp;gt; 3. 此链路在 system2
使用下面的地址 172.16.3.20/255.255.255.0 &amp;gt; 4. 此链路在 system1
使用下面的地址 172.16.3.25/255.255.255.0 &amp;gt; 5.
此链路在系统重启之后依然保持正常状态&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_6_配置_ipv6_地址&quot; &gt;6. 配置 IPV6 地址&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在您的考试系统上配置接口eth0 使用下列IPV6地址： &amp;gt; 1. system1
上的地址应该是2003:ac18::305/64 &amp;gt; 2. system2
上的地址应该是2003:ac18::30a/64 &amp;gt; 3. 两个系统必须能与网络 2003:ac18/64
内的系统通信 &amp;gt; 4. 地址必须在重启后依然生效 &amp;gt; 5. 两个系统必须保持当前的
IPV4 地址并能通信&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_7_配置本地邮件服务&quot; &gt;7. 配置本地邮件服务&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在系统 system2 和 system1 上配置邮件服务，满足以下要求： &amp;gt;
1.这些系统不接受外部发送来的邮件 &amp;gt;
2.在这些系统上本地发送的任何邮件都会自动路由到 mail.group8.example.com &amp;gt;
3.从这些系统上发送的邮件显示来自于 server.group8.example.com &amp;gt;
4.您可以通过发送邮件到本地用户’dave’来测试您的配置. &amp;gt;
5.已经配置把此用户的邮件转到下列URL
：server.group8.example.com/pub/received_mail/ &amp;gt;
你只需看到对应用户名文件的大小有变化即可&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_8_通过_smb_共享目录&quot; &gt;8.通过 SMB 共享目录&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 system1 上配置SMB服务 &amp;gt; 您的 SMB 服务器必须是 STAFF 工作组一个成员 &amp;gt;
共享 /common 目录，共享名必须为 common &amp;gt; 只有 group8.example.com
域内的客户端可以访问 common 共享,且 common 必须是可以浏览的 &amp;gt; 用户 andy
必须能够读取共享中的内容，需要的话，验证密码是 redhat&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_9_配置多用户_smb_挂载&quot; &gt;9. 配置多用户 SMB 挂载&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 system1 共享通过 SMB 目录 /devops 满足下列要求： &amp;gt; 1.共享名为 devops
&amp;gt; 2.共享目录 devops 只能 group8.example.com 域中的客户端使用 &amp;gt;
3.共享目录 devops 必须可以被浏览 &amp;gt; 4.用户 silene
必须能以读的方式访问此共享，访问密码是 redhat &amp;gt; 5.用户 akira
必须能以读写的方式访问此共享，访问密码是 redhat &amp;gt; 6.此共享永久挂载在
system2.group8.example.com 上的 /mnt/dev 目录，并使用用户 silene
作为认证任何用户，可以通过用户 akira 来临时获取写的权限&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_10_配置nfs服务&quot; &gt;10. 配置NFS服务&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在system1配置NFS服务，要求如下： &amp;gt;
1.以只读的方式共享目录/public，同时只能被group8.example.com域中的系统访问
&amp;gt;
2.以读写的方式共享目录/protected，需要通过Kerberos安全加密，您可以使用下面URL提供的密钥
&lt;a href=&quot;http://server.group8.example.com/pub/keytabs/system1.keytab&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/keytabs/system1.keytab&lt;/a&gt; &amp;gt;
3.目录/protected应该包含名为project拥有人为andres的子目录 &amp;gt;
4.用户andres能以读写方式访问/protected/project&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_11_挂载一个nfs共享&quot; &gt;11. 挂载一个NFS共享&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在system2上挂载一个system1.group8.example.com的NFS共享,并符合下列要求：
&amp;gt; 1、/public挂载在下面的目录上：/mnt/nfsmount /protected
挂载在下面的目录上：/mnt/nfssecure 并使用安全的方式，密钥下载URL如下：&lt;br&gt;
&lt;a href=&quot;http://server.group8.example.com/pub/keytabs/system2.keytab&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/keytabs/system2.keytab&lt;/a&gt; &amp;gt;
2、用户andres能够在/mnt/nfssecure/project上创建文件 &amp;gt;
3、这些文件系统在系统启动时自动挂载&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_12_实现一个_web_服务器&quot; &gt;12. 实现一个 web 服务器&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 system1 上配置一个站点 &lt;a href=&quot;http://system1.group8.example.com/&quot; class=&quot;bare&quot;&gt;http://system1.group8.example.com/&lt;/a&gt;
然后执行下述步骤： &amp;gt; 1、 从
&lt;a href=&quot;http://server.group8.example.com/pub/system1.html&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/system1.html&lt;/a&gt;
下载文件，并且将文件重名为 index.html 不要修改此文件的内容 &amp;gt; 2、 将文件
index.html 拷贝到您的 web 服务器的 DocumentRoot 目录下 &amp;gt; 3、 来自于
group8.example.com 域的客户端可以访问此web服务 &amp;gt; 4、 来自于 my133t.org
域的客户端拒绝访问此web服务&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_13_配置安全web服务&quot; &gt;13. 配置安全web服务&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为站点 &lt;a href=&quot;http://system1.group8.example.com&quot; class=&quot;bare&quot;&gt;http://system1.group8.example.com&lt;/a&gt; 配置TLS加密， &amp;gt;
一个已签名证书从
&lt;a href=&quot;http://server.group8.example.com/pub/tls/certs/system1.crt&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/tls/certs/system1.crt&lt;/a&gt; 获取 &amp;gt;
此证书的密钥从
&lt;a href=&quot;http://server.group8.example.com/pub/tls/private/system1.key&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/tls/private/system1.key&lt;/a&gt; 获取 &amp;gt;
此证书的签名授权信息从
&lt;a href=&quot;http://server.group8.example.com/pub/tls/certs/ssl-ca.crt&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/tls/certs/ssl-ca.crt&lt;/a&gt; 获取&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_14配置虚拟主机&quot; &gt;14：配置虚拟主机&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 system1 上扩展您的web服务器，为站点 &lt;a href=&quot;http://www8.group8.example.com&quot; class=&quot;bare&quot;&gt;http://www8.group8.example.com&lt;/a&gt;
创建一个虚拟主机，然后执行下述步骤： &amp;gt; 1.设置 DocumentRoot 为
/var/www/virtual &amp;gt; 2.从 &lt;a href=&quot;http://server.group8.example.com/pub/www8.html&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/www8.html&lt;/a&gt; &amp;gt;
3.下载文件重名为index.html 不要对文件index.html 中的内容做任何修改 &amp;gt;
4.将文件 index.html 放到虚拟主机的 DocumentRoot 的目录下 &amp;gt; 5.确保 andy
用户能够在 /var/www/virtual 目录下创建文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：原始站点 &lt;a href=&quot;http://system1.group8.example.com/&quot; class=&quot;bare&quot;&gt;http://system1.group8.example.com/&lt;/a&gt;
必须仍然能够访问，名称服务器 server.group8.example.com 提供对主机名
www8.group8.example.com 的域名解析。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_15_配置web内容的访问控制&quot; &gt;15. 配置web内容的访问控制&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在您的system1
上的web服务器的DocumentRoot目录下，创建一个名为private的目录，要求如下：
&amp;gt; 1.从 &lt;a href=&quot;http://server.group8.example.com/pub/private.html&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/private.html&lt;/a&gt;
下载一个文件副本到这个目录，并且重命名为index.html. &amp;gt;
2.不要对这个文件的内容做任何修改 &amp;gt; 3.从system1
上，任何人都可以浏览private的内容，但是从其它系统不能访问这个目录的内容&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_16实现动态web_内容&quot; &gt;16，实现动态WEB 内容&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 system1 上配置提供动态web内容，要求如下： &amp;gt; 1. 动态内容由名为
wsgi.group8.example.com 的虚拟主机提供 &amp;gt; 2. 虚拟主机侦听在端口 8909 &amp;gt; 3.
从 &lt;a href=&quot;http://server.group8.example.com/pub/webinfo.wsgi&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/webinfo.wsgi&lt;/a&gt;
下载一个脚本，然后放在适当的位置，无论如何不要求修改此文件的内容 &amp;gt; 4.
客户端访问 &lt;a href=&quot;http://wsgi.group8.example.com:8909/&quot; class=&quot;bare&quot;&gt;http://wsgi.group8.example.com:8909/&lt;/a&gt;
时，应该接收到动态生成的web页面 &amp;gt; 5. 此
&lt;a href=&quot;http://wsgi.group8.example.com:8909/&quot; class=&quot;bare&quot;&gt;http://wsgi.group8.example.com:8909/&lt;/a&gt; 必须能被 group8.example.com
域内的所有系统访问&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_17_创建一个脚本&quot; &gt;17. 创建一个脚本&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在system1上创建一个名为/root/foo.sh的脚本，让其提供下列特性： &amp;gt; 1.
当运行/root/foo.sh redhat,输出为fedora &amp;gt; 2. 当运行/root/foo.sh
fedora,输出为redhat &amp;gt; 3.
当没有任何参数或者参数不是redhat或者fedora时，其错误输出产生以下的信息：/root/foo.sh
redhat:fedora&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在考试的时候注意看题目要求的创建的文件名称，如果不带sh后缀则不要加后缀，否则不得分。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_18_创建一个添加用户的脚本&quot; &gt;18. 创建一个添加用户的脚本&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在system1上创建一个脚本，名为 /root/mkusers
,此脚本能实现为系统system1创建本地用户，并且这些用户的用户名来自一个包含用户名列表的文件，同时满足下列要求：
&amp;gt; 1. 此脚本要求提供一个参数，此参数就是包含用户名列表的的文件 &amp;gt; 2.
如果没有提供参数，此脚本应该给出下面的提示信息Usage：/root/mkusers然后退出并返回相应的值
&amp;gt; 3. 如果提供一个不存在的文件名，此脚本应该给出下面的提示信息Input file
not found 然后退出并返回相应的值 &amp;gt; 4. 创建的用户登录shell为/bin/false &amp;gt;
5. 此脚本不需要为用户设置密码 &amp;gt; 6.
您可以从下面的URL中获取用户名列表作为测试用
&lt;a href=&quot;http://server.group8.example.com/pub/userlist&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/userlist&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在考试的时候注意看题目要求的创建的文件名称，如果不带sh后缀则不要加后缀，否则不得分。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_19_配置iscsi服务端&quot; &gt;19. 配置ISCSI服务端&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置system1提供一个ISCSI 服务磁盘名为 iqn.2014-08.com.example:system1
并符合下列要求： &amp;gt; 1. 服务端口为3260 &amp;gt; 2.
使用iscsi_store作其后端卷名称，其大小为3G &amp;gt; 3.
此服务只能被system2.group8.example.com访问&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_20_配置iscisi的客户端&quot; &gt;20. 配置ISCISI的客户端&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置system2使其能链接在system1上提供的 iqn.2014-08.com.example:system1
并符合以下要求： &amp;gt; 1. ISCISI设备在系统启动的期间自动加载 &amp;gt; 2.
块设备ISCISI上包含一个大小为2100MIB的分区，并格式化为ext4 &amp;gt; 3.
此分区挂载在/mnt/data上 同时在系统启动的期间自动挂载&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_21_配置一个数据库&quot; &gt;21. 配置一个数据库&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 system1上创建一个Maria DB数据库，名为Contacts，并符合以下条件： &amp;gt; 1.
数据库应该包含来自数据库复制的内容，复制文件的URL为&lt;br&gt;
&lt;a href=&quot;http://server.group8.example.com/pub/users.mdb&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/users.mdb&lt;/a&gt; ，数据库只能被 localhost
访问 &amp;gt; 2. 除了root用户，此数据库只能被用户Luigi查询，此用户密码为 redhat
&amp;gt; 3. root 用户的数据库密码为 redhat，同时不允许空密码登录&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_22_数据库查询&quot; &gt;22. 数据库查询&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在系统 system1 上使用数据库 Contacts ，并使用相应的SQL
查询以回答下列问题： &amp;gt; 1. 密码是 tangerine 的人的名字？ &amp;gt; 2.
有多少人的姓名是 John 同时居住在 Santa Clara ？&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;关于题库的重要提醒：
1、考试时，有关url路径、用户名、密码、域名、ip等一定会不一样，请注意！
2、有些目录比如/public等在考试时可能已经创建好，不需要再创建，请注意！
3、有些软件包在考试时可能已经安装好，不需要再安装，请注意！
一句话，就是一定不要死记题库中的目录、用户名、路径等这些可能变化的东西，而是记住解题步骤、思路，验证、及排错方法！&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 22 数据库查询]]></description><link>https://zyue.wiki/articles/2018/02/25/1546344582745.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/25/1546344582745.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在系统 system1 上使用数据库 Contacts ，并使用相应的SQL
查询以回答下列问题： 1. 密码是 tangerine 的人的名字？ 2.
有多少人的姓名是 John 同时居住在 Santa Clara ？&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;登录数据库，查看表和表结构&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    [root@system1 ~]# mysql -uroot -p
    Enter password:
    Welcome to the MariaDB monitor.  Commands end with ; or \g.
    Your MariaDB connection id is 16
    Server version: 5.5.35-MariaDB MariaDB Server

    Copyright (c) 2000, 2013, Oracle, Monty Program Ab and others.

    Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.

    MariaDB [(none)]&amp;gt; SHOW DATABASES;
    +--------------------+
    | Database           |
    +--------------------+
    | information_schema |
    | Contacts           |
    | mysql              |
    | performance_schema |
    +--------------------+
    4 rows in set (0.01 sec)

    MariaDB [(none)]&amp;gt; USE Contacts;
    Reading table information for completion of table and column names
    You can turn off this feature to get a quicker startup with -A

    Database changed
    MariaDB [Contacts]&amp;gt; SHOW TABLES;
    +--------------------+
    | Tables_in_Contacts |
    +--------------------+
    | u_loc              |
    | u_name             |
    | u_passwd           |
    +--------------------+
    3 rows in set (0.00 sec)

    MariaDB [Contacts]&amp;gt; DESC u_loc;
    +----------+-------------+------+-----+---------+----------------+
    | Field    | Type        | Null | Key | Default | Extra          |
    +----------+-------------+------+-----+---------+----------------+
    | uid      | int(11)     | NO   | PRI | NULL    | auto_increment |
    | location | varchar(50) | NO   |     | NULL    |                |
    +----------+-------------+------+-----+---------+----------------+
    2 rows in set (0.00 sec)

    MariaDB [Contacts]&amp;gt; DESC u_name;
    +-----------+-------------+------+-----+---------+----------------+
    | Field     | Type        | Null | Key | Default | Extra          |
    +-----------+-------------+------+-----+---------+----------------+
    | userid    | int(11)     | NO   | PRI | NULL    | auto_increment |
    | firstname | varchar(50) | NO   |     | NULL    |                |
    | lastname  | varchar(50) | NO   |     | NULL    |                |
    +-----------+-------------+------+-----+---------+----------------+
    3 rows in set (0.00 sec)

    MariaDB [Contacts]&amp;gt; DESC u_passwd;
    +----------+-------------+------+-----+---------+----------------+
    | Field    | Type        | Null | Key | Default | Extra          |
    +----------+-------------+------+-----+---------+----------------+
    | uid      | int(11)     | NO   | PRI | NULL    | auto_increment |
    | password | varchar(50) | NO   |     | NULL    |                |
    +----------+-------------+------+-----+---------+----------------+
    2 rows in set (0.00 sec)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第一问，只需要用到 u_name 和 u_passwd 表就可以&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    //嵌套子查询
    MariaDB [Contacts]&amp;gt; SELECT firstname FROM u_name WHERE userid=(SELECT uid FROM u_passwd WHERE password = &quot;tangerine&quot;);
    +-----------+
    | firstname |
    +-----------+
    | Georgexx  |
    +-----------+
    1 row in set (0.00 sec)

    //多表查询
    MariaDB [Contacts]&amp;gt; select firstname from u_name,u_passwd where u_name.userid=u_passwd.uid and u_passwd.password=&apos;tangerine&apos;;
    +-----------+
    | firstname |
    +-----------+
    | Georgexx  |
    +-----------+
    1 row in set (0.00 sec)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;第二问，只需要用到 u_name 和 u_loc 表就可以&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    MariaDB [Contacts]&amp;gt; SELECT COUNT(*) FROM u_loc l,u_name n WHERE l.uid = n.userid and n.firstname = &apos;John&apos; and l.location = &apos;Santa Clara&apos;;
    +----------+
    | COUNT(*) |
    +----------+
    |        4 |
    +----------+
    1 row in set (0.01 sec)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 21 部署 mariadb 数据库]]></description><link>https://zyue.wiki/articles/2018/02/24/1546344582926.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/24/1546344582926.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 system1上创建一个Maria DB数据库，名为Contacts，并符合以下条件： 1.
数据库应该包含来自数据库复制的内容，复制文件的URL为&lt;br&gt;
&lt;a href=&quot;http://server.group8.example.com/pub/users.mdb&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/users.mdb&lt;/a&gt; ，数据库只能被 localhost
访问 2. 除了root用户，此数据库只能被用户Luigi查询，此用户密码为 redhat
3. root 用户的数据库密码为 redhat，同时不允许空密码登录&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装 mariadb 所需组件，为了防止遗漏，此处全部安装&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    yum install  mariadb*
    //设置开机启动并开启服务
    [root@system1 ~]# systemctl enable mariadb.service
    ln -s &apos;/usr/lib/systemd/system/mariadb.service&apos; &apos;/etc/systemd/system/multi-user.target.wants/mariadb.service&apos;
    [root@system1 ~]# systemctl start mariadb.service&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;mariadb 安装向导，设置 root 密码&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    [root@server47 ~]# mysql_secure_installation
    /usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found

    NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
          SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

    In order to log into MariaDB to secure it, we&apos;ll need the current
    password for the root user.  If you&apos;ve just installed MariaDB, and
    you haven&apos;t set the root password yet, the password will be blank,
    so you should just press enter here.

    Enter current password for root (enter for none):
    OK, successfully used password, moving on...

    Setting the root password ensures that nobody can log into the MariaDB
    root user without the proper authorisation.

    Set root password? [Y/n]
    New password:
    Re-enter new password:
    Password updated successfully!
    Reloading privilege tables..
     ... Success!


    By default, a MariaDB installation has an anonymous user, allowing anyone
    to log into MariaDB without having to have a user account created for
    them.  This is intended only for testing, and to make the installation
    go a bit smoother.  You should remove them before moving into a
    production environment.

    Remove anonymous users? [Y/n]
     ... Success!

    Normally, root should only be allowed to connect from &apos;localhost&apos;.  This
    ensures that someone cannot guess at the root password from the network.

    Disallow root login remotely? [Y/n]
     ... Success!

    By default, MariaDB comes with a database named &apos;test&apos; that anyone can
    access.  This is also intended only for testing, and should be removed
    before moving into a production environment.

    Remove test database and access to it? [Y/n]
     - Dropping test database...
     ... Success!
     - Removing privileges on test database...
     ... Success!

    Reloading the privilege tables will ensure that all changes made so far
    will take effect immediately.

    Reload privilege tables now? [Y/n]
     ... Success!

    Cleaning up...

    All done!  If you&apos;ve completed all of the above steps, your MariaDB
    installation should now be secure.

    Thanks for using MariaDB!&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;获取表结构以及信息&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    [root@system1 ~]# wget http://server.group8.example.com/pub/users.mdb
    --2018-02-28 18:45:37--  http://server.group8.example.com/pub/users.mdb
    Resolving server.group8.example.com (server.group8.example.com)... 172.24.8.254
    Connecting to server.group8.example.com (server.group8.example.com)|172.24.8.254|:80... connected.
    HTTP request sent, awaiting response... 200 OK
    Length: 4577 (4.5K)
    Saving to: ‘users.mdb’

    100%[===========================================================================================&amp;gt;] 4,577       --.-K/s   in 0s

    2018-02-28 18:45:37 (234 MB/s) - ‘users.mdb’ saved [4577/4577]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;登录数据库，并创建库和导入&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    [root@system1 ~]# mysql -uroot -p
    Enter password:
    Welcome to the MariaDB monitor.  Commands end with ; or \g.
    Your MariaDB connection id is 12
    Server version: 5.5.35-MariaDB MariaDB Server

    Copyright (c) 2000, 2013, Oracle, Monty Program Ab and others.

    Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.

    MariaDB [(none)]&amp;gt; CREATE DATABASE Contacts;
    Query OK, 1 row affected (0.00 sec)

    MariaDB [(none)]&amp;gt; SHOW DATABASES;
    +--------------------+
    | Database           |
    +--------------------+
    | information_schema |
    | Contacts           |
    | mysql              |
    | performance_schema |
    +--------------------+
    4 rows in set (0.00 sec)

    MariaDB [(none)]&amp;gt; USE Contacts;
    Database changed
    MariaDB [Contacts]&amp;gt; source /root/users.mdb
    Query OK, 0 rows affected (0.00 sec)

    ······

    Query OK, 0 rows affected (0.00 sec)

    MariaDB [Contacts]&amp;gt; SHOW TABLES;
    +--------------------+
    | Tables_in_Contacts |
    +--------------------+
    | u_loc              |
    | u_name             |
    | u_passwd           |
    +--------------------+
    3 rows in set (0.00 sec)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;设置用户权限，通过 ==help grant== 获取帮助&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    MariaDB [(none)]&amp;gt; help grant
    Name: &apos;GRANT&apos;
    Description:
    Syntax:

    ······

    Normally, a database administrator first uses CREATE USER to create an
    account, then GRANT to define its privileges and characteristics. For
    example:

    CREATE USER &apos;jeffrey&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;mypass&apos;;
    GRANT ALL ON db1.* TO &apos;jeffrey&apos;@&apos;localhost&apos;;
    GRANT SELECT ON db2.invoice TO &apos;jeffrey&apos;@&apos;localhost&apos;;
    GRANT USAGE ON *.* TO &apos;jeffrey&apos;@&apos;localhost&apos; WITH MAX_QUERIES_PER_HOUR 90;

    ······

    MariaDB [Contacts]&amp;gt; GRANT SELECT ON Contacts .* to Luigi@&apos;localhost&apos; IDENTIFIED BY &apos;redhat&apos;; Query OK, 0 rows affected (0.00 sec)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;完成！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 20 配置 ISCSI 的客户端]]></description><link>https://zyue.wiki/articles/2018/02/24/1546344585841.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/24/1546344585841.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置system2使其能链接在system1上提供的 iqn.2014-08.com.example:system1
并符合以下要求： 1. ISCISI设备在系统启动的期间自动加载 2.
块设备ISCISI上包含一个大小为2100MIB的分区，并格式化为ext4 3.
此分区挂载在/mnt/data上 同时在系统启动的期间自动挂载&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装 ISCSI 客户端工具&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    yum install iscsi-initiator-utils.i686 -y&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;编辑配置文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    vim /etc/iscsi/initiatorname.iscsi
    //编辑
    InitiatorName=iqn.2014-08.com.example:system2&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;通过 ==man iscsiadm== 查找命令发现服务端 ISCSI 并连接&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;···
EXAMPLES
       Discover targets at a given IP address:

            iscsiadm --mode discoverydb --type sendtargets --portal 192.168.1.10 --discover

       Login, must use a node record id found by the discovery:

            iscsiadm --mode node --targetname iqn.2001-05.com.doe:test --portal 192.168.1.1:3260 --login

       Logout:

            iscsiadm --mode node --targetname iqn.2001-05.com.doe:test --portal 192.168.1.1:3260 --logout
···

    [root@system2 Desktop]# iscsiadm --mode discoverydb --type sendtargets --portal 172.24.8.11 --discover
    172.24.8.11:3260,1 iqn.2014-08.com.example:system1
    [root@system2 Desktop]# iscsiadm --mode node --targetname iqn.2014-08.com.example:system1 --portal 172.24.8.11:3260 --login
    Logging in to [iface: default, target: iqn.2014-08.com.example:system1, portal: 172.24.8.11,3260] (multiple)
    Login to [iface: default, target: iqn.2014-08.com.example:system1, portal: 172.24.8.11,3260] successful.
    [root@system2 Desktop]# lsblk
    NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
    sda      8:0    0   20G  0 disk
    ├─sda1   8:1    0  9.8G  0 part /
    └─sda2   8:2    0    2G  0 part [SWAP]
    sdb      8:16   0    3G  0 disk&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;按照要求，对已成功获取的 ==sdb== 进行分区&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    [root@system2 Desktop]# fdisk /dev/sdb
    Welcome to fdisk (util-linux 2.23.2).

    Changes will remain in memory only, until you decide to write them.
    Be careful before using the write command.

    Device does not contain a recognized partition table
    Building a new DOS disklabel with disk identifier 0xaeacfbad.

    Command (m for help): n
    Partition type:
       p   primary (0 primary, 0 extended, 4 free)
       e   extended
    Select (default p): p
    Partition number (1-4, default 1):
    First sector (8192-6291455, default 8192):
    Using default value 8192
    Last sector, +sectors or +size{K,M,G} (8192-6291455, default 6291455): +2100MIB
    Unsupported suffix: &apos;MIB&apos;.
    Supported: 10^N: KB (KiloByte), MB (MegaByte), GB (GigaByte)
                2^N: K  (KibiByte), M  (MebiByte), G  (GibiByte)
    Last sector, +sectors or +size{K,M,G} (8192-6291455, default 6291455): +2100MB
    Partition 1 of type Linux and of size 2 GiB is set

    Command (m for help): w
    The partition table has been altered!

    Calling ioctl() to re-read partition table.
    Syncing disks.
    [root@system2 Desktop]# partprobe
    [root@system2 Desktop]# mkdir /mnt/data
    [root@system2 Desktop]# mkfs.ext4 /dev/sdb1
    mke2fs 1.42.9 (28-Dec-2013)
    Filesystem label=
    OS type: Linux
    Block size=4096 (log=2)
    Fragment size=4096 (log=2)
    Stride=0 blocks, Stripe width=1024 blocks
    128256 inodes, 513024 blocks
    25651 blocks (5.00%) reserved for the super user
    First data block=0
    Maximum filesystem blocks=526385152
    16 block groups
    32768 blocks per group, 32768 fragments per group
    8016 inodes per group
    Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912

    Allocating group tables: done
    Writing inode tables: done
    Creating journal (8192 blocks): done
    Writing superblocks and filesystem accounting information: done&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;实现永久挂载、并查看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    [root@system2 Desktop]# vim /etc/fstab
    /dev/sdb1                       /mnt/data               ext4    _netdev                         0 0
    [root@system2 Desktop]# mount -a
    [root@system2 Desktop]# df -hT
    Filesystem       Type      Size  Used Avail Use% Mounted on
    /dev/sda1        xfs       9.8G  3.1G  6.7G  32% /
    devtmpfs         devtmpfs  765M     0  765M   0% /dev
    tmpfs            tmpfs     773M  176K  773M   1% /dev/shm
    tmpfs            tmpfs     773M  8.9M  765M   2% /run
    tmpfs            tmpfs     773M     0  773M   0% /sys/fs/cgroup
    /dev/sdb1        ext4      1.9G  5.9M  1.8G   1% /mnt/data&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;完成&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 19 配置ISCSI服务端]]></description><link>https://zyue.wiki/articles/2018/02/23/1546344587014.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/23/1546344587014.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置system1提供一个ISCSI 服务磁盘名为 iqn.2014-08.com.example:system1
并符合下列要求： 1. 服务端口为3260 2.
使用iscsi_store作其后端卷名称，其大小为3G 3.
此服务只能被system2.group8.example.com访问&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装 target 、开启服务并开机启动&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;yum install targetcli.noarch -y
systemctl enable target
systemctl start target
firewall-cmd --permanent --add-port=3260/tcp    //需要配置访问控制、富规则
firewall-cmd --reload&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为其创建后端卷并查看&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;[root@system1 ~]# fdisk /dev/sda
Welcome to fdisk (util-linux 2.23.2).

Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help): n
Partition type:
   p   primary (2 primary, 0 extended, 2 free)
   e   extended
Select (default p): p
Partition number (3,4, default 3):
First sector (26626048-41943039, default 26626048):
Using default value 26626048
Last sector, +sectors or +size{K,M,G} (26626048-41943039, default 41943039): +3G
Partition 3 of type Linux and of size 3 GiB is set

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.

WARNING: Re-reading the partition table failed with error 16: Device or resource busy.
The kernel still uses the old table. The new table will be used at
the next reboot or after you run partprobe(8) or kpartx(8)
Syncing disks.
[root@system1 ~]# lsblk
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      8:0    0   20G  0 disk
├─sda1   8:1    0  9.8G  0 part /
└─sda2   8:2    0    3G  0 part [SWAP]
[root@system1 ~]# partprobe
[root@system1 ~]# lsblk
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      8:0    0   20G  0 disk
├─sda1   8:1    0  9.8G  0 part /
├─sda2   8:2    0    3G  0 part [SWAP]
└─sda3   8:3    0    3G  0 part
配置 ISCSI 并重启服务
[root@system1 ~]# targetcli
Warning: Could not load preferences file /root/.targetcli/prefs.bin.
targetcli shell version 2.1.fb34
Copyright 2011-2013 by Datera, Inc and others.
For help on commands, type &apos;help&apos;.

/&amp;gt; ls
o- / ......................................................................................................................... [...]
  o- backstores .............................................................................................................. [...]
  | o- block .................................................................................................. [Storage Objects: 0]
  | o- fileio ................................................................................................. [Storage Objects: 0]
  | o- pscsi .................................................................................................. [Storage Objects: 0]
  | o- ramdisk ................................................................................................ [Storage Objects: 0]
  o- iscsi ............................................................................................................ [Targets: 0]
  o- loopback ......................................................................................................... [Targets: 0]
/&amp;gt; /backstores/block create name=iscsi_store dev=/dev/sda3
Created block storage object iscsi_store using /dev/sda3.
// 创建后端卷

/&amp;gt; ls
o- / ......................................................................................................................... [...]
  o- backstores .............................................................................................................. [...]
  | o- block .................................................................................................. [Storage Objects: 1]
  | | o- iscsi_store ................................................................... [/dev/sda3 (3.0GiB) write-thru deactivated]
  | o- fileio ................................................................................................. [Storage Objects: 0]
  | o- pscsi .................................................................................................. [Storage Objects: 0]
  | o- ramdisk ................................................................................................ [Storage Objects: 0]
  o- iscsi ............................................................................................................ [Targets: 0]
  o- loopback ......................................................................................................... [Targets: 0]
/&amp;gt; /iscsi create wwn=iqn.2014-08.com.example:system1
Created target iqn.2014-08.com.example:system1.
Created TPG 1.

/&amp;gt; ls
o- / ......................................................................................................................... [...]
  o- backstores .............................................................................................................. [...]
  | o- block .................................................................................................. [Storage Objects: 1]
  | | o- iscsi_store ................................................................... [/dev/sda3 (3.0GiB) write-thru deactivated]
  | o- fileio ................................................................................................. [Storage Objects: 0]
  | o- pscsi .................................................................................................. [Storage Objects: 0]
  | o- ramdisk ................................................................................................ [Storage Objects: 0]
  o- iscsi ............................................................................................................ [Targets: 1]
  | o- iqn.2014-08.com.example:system1 ................................................................................... [TPGs: 1]
  |   o- tpg1 ............................................................................................... [no-gen-acls, no-auth]
  |     o- acls .......................................................................................................... [ACLs: 0]
  |     o- luns .......................................................................................................... [LUNs: 0]
  |     o- portals .................................................................................................... [Portals: 0]
  o- loopback ......................................................................................................... [Targets: 0]
/&amp;gt; /iscsi/iqn.2014-08.com.example:system1/tpg1/acls create
add_mapped_luns=  wwn=
...........................................................wwn|keyword=
/&amp;gt; /iscsi/iqn.2014-08.com.example:system1/tpg1/acls create iqn.2014-08.com.example:system2
Created Node ACL for iqn.2014-08.com.example:system2
//访问控制

/&amp;gt; ls
o- / ......................................................................................................................... [...]
  o- backstores .............................................................................................................. [...]
  | o- block .................................................................................................. [Storage Objects: 1]
  | | o- iscsi_store ................................................................... [/dev/sda3 (3.0GiB) write-thru deactivated]
  | o- fileio ................................................................................................. [Storage Objects: 0]
  | o- pscsi .................................................................................................. [Storage Objects: 0]
  | o- ramdisk ................................................................................................ [Storage Objects: 0]
  o- iscsi ............................................................................................................ [Targets: 1]
  | o- iqn.2014-08.com.example:system1 ................................................................................... [TPGs: 1]
  |   o- tpg1 ............................................................................................... [no-gen-acls, no-auth]
  |     o- acls .......................................................................................................... [ACLs: 1]
  |     | o- iqn.2014-08.com.example:system2 ...................................................................... [Mapped LUNs: 0]
  |     o- luns .......................................................................................................... [LUNs: 0]
  |     o- portals .................................................................................................... [Portals: 0]
  o- loopback ......................................................................................................... [Targets: 0]
/&amp;gt; /iscsi/iqn.2014-08.com.example:system1/tpg1/luns
@last      cd         delete     get        ls         refresh    status
bookmarks  create     exit       help       pwd        set
....................................................command
/&amp;gt; /iscsi/iqn.2014-08.com.example:system1/tpg1/luns create /backstores/block/iscsi_store
Created LUN 0.
Created LUN 0-&amp;gt;0 mapping in node ACL iqn.2014-08.com.example:system2
/&amp;gt; ls
o- / ......................................................................................................................... [...]
  o- backstores .............................................................................................................. [...]
  | o- block .................................................................................................. [Storage Objects: 1]
  | | o- iscsi_store ..................................................................... [/dev/sda3 (3.0GiB) write-thru activated]
  | o- fileio ................................................................................................. [Storage Objects: 0]
  | o- pscsi .................................................................................................. [Storage Objects: 0]
  | o- ramdisk ................................................................................................ [Storage Objects: 0]
  o- iscsi ............................................................................................................ [Targets: 1]
  | o- iqn.2014-08.com.example:system1 ................................................................................... [TPGs: 1]
  |   o- tpg1 ............................................................................................... [no-gen-acls, no-auth]
  |     o- acls .......................................................................................................... [ACLs: 1]
  |     | o- iqn.2014-08.com.example:system2 ...................................................................... [Mapped LUNs: 1]
  |     |   o- mapped_lun0 ........................................................................... [lun0 block/iscsi_store (rw)]
  |     o- luns .......................................................................................................... [LUNs: 1]
  |     | o- lun0 .................................................................................. [block/iscsi_store (/dev/sda3)]
  |     o- portals .................................................................................................... [Portals: 0]
  o- loopback ......................................................................................................... [Targets: 0]
/&amp;gt; /
/*            /backstores/  /iscsi/       /loopback/
...path
/&amp;gt; /iscsi/iqn.2014-08.com.example:system1/tpg1/portals
@last      cd         delete     get        ls         refresh    status
bookmarks  create     exit       help       pwd        set
.......................................................command
/&amp;gt; /iscsi/iqn.2014-08.com.example:system1/tpg1/portals create 172.24.8.11
Using default IP port 3260
Created network portal 172.24.8.11:3260.
/&amp;gt; saveconfig
Last 10 configs saved in /etc/target/backup.
Configuration saved to /etc/target/saveconfig.json
/&amp;gt; exit
Global pref auto_save_on_exit=true
Last 10 configs saved in /etc/target/backup.
Configuration saved to /etc/target/saveconfig.json
[root@system1 ~]# systemctl restart target.service
[root@system1 ~]# systemctl enable target.service&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 18 创建一个添加用户的脚本]]></description><link>https://zyue.wiki/articles/2018/02/23/1546344585394.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/23/1546344585394.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在system1上创建一个脚本，名为/root/mkusers
,此脚本能实现为系统system1创建本地用户，并且这些用户的用户名来自一个包含用户名列表的文件，同时满足下列要求：
1. 此脚本要求提供一个参数，此参数就是包含用户名列表的的文件 2.
如果没有提供参数，此脚本应该给出下面的提示信息Usage：/root/mkusers然后退出并返回相应的值
3. 如果提供一个不存在的文件名，此脚本应该给出下面的提示信息Input file
not found 然后退出并返回相应的值 4. 创建的用户登录shell为/bin/false 5.
此脚本不需要为用户设置密码 6.
您可以从下面的URL中获取用户名列表作为测试用http://server.group8.example.com/pub/userlist
&lt;strong&gt;注意题目要求的脚本文件名称是否带.sh后缀，有就加没有就不加&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;切换到 root 目录，并编辑文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;    cd ~
    vim mkusers&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;编写脚本&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;#! /bin/bash
if [ $# -eq 0 ];then
 echo &apos;Usage:/root/mkusers&apos;
  exit 1
fi
if [ ! -f $1 ]; then
 echo &apos;Input file not found&apos;
 exit 1
fi
while read line
do
  useradd -s /bin/false $line
done &amp;lt; $1

:wq&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;chmod  +x  mkusers.sh
wget  -O /root/userlist http://server.group8.example.com/pub/userlist
./mkusers userlist

id 用户名  查看用户是否添加
然后测试文件不存在和没有输入参数的情况是否符合题目要求

[root@system1 ~]# ./mkusers userl
Input file not found
[root@system1 ~]# ./mkusers
Usage:/root/mkusers&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;自己写的&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;#!/bin/bash
[ ! &quot;$1&quot; ] &amp;amp;&amp;amp; {
    echo &quot;Usage：/root/mkusers&quot;;
    exit 1;
}
path=&quot;$1&quot;;
[ ! -f &quot;$path&quot; ] &amp;amp;&amp;amp; {
    echo &quot;Input file not found&quot;;
    exit 2;
}

for u in `cat $path`
do
    echo $u;
    useradd -s /bin/false $u;
done&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 16 实现动态WEB 内容]]></description><link>https://zyue.wiki/articles/2018/02/21/1546344579104.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/21/1546344579104.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 system1 上配置提供动态web内容，要求如下： -
动态内容由名为wsgi.group8.example.com 的虚拟主机提供 -
虚拟主机侦听在端口 8909 - 从
&lt;a href=&quot;http://server.group8.example.com/pub/webinfo.wsgi&quot; class=&quot;bare&quot;&gt;http://server.group8.example.com/pub/webinfo.wsgi&lt;/a&gt;
下载一个脚本，然后放在适当的位置，无论如何不要修改此文件的内容 -
客户端访问 http:// wsgi.group8.example.com:8909/
时，应该接收到动态生成的web页面 - 此 http://
wsgi.group8.example.com:8909/ 必须能被 group8.example.com
域内的所有系统访问&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装 wsgi 的模块，才能运行 .wsgi 后缀的文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;yum &amp;nbsp;install mod_wsgi&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建文件夹并获取文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;mkdir /var/www/webappcd /var/www/webapp
wget -O webinfo.wsgi http://server.group8.example.com/pub/webinfo.wsgi&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置虚拟主机&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;vim wsgi.conf

Listen 8908
&amp;lt;VirtualHost *:8908&amp;gt;
  DocumentRoot &quot;/var/www/webapp&quot;
  ServerName wsgi.group8.example.com
  WSGIScriptAlias      /    /var/www/webapp/webinfo.wsgi
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;apachectl configtest&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;开启防火墙，只允许 group8.example.com 域内的所有系统访问&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;firewall-cmd --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=&quot;172.24.8.0/24&quot; port port=&quot;8909&quot; protocol=&quot;tcp&quot; accept&apos; --permanent&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重启防火墙，并设置端口，重启服务&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;firewall-cmd --reloadsemanage port -a -t http_port_t -p tcp 8909
systemctl restart httpd&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://resources.echocow.cn/image/rhce/16.1.png&quot; alt=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 15 配置 web 内容的访问]]></description><link>https://zyue.wiki/articles/2018/02/21/1546344577105.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/21/1546344577105.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在你的 serverX 上的 web 服务器的 DocumentRoot 目录下创建一个名为 private
的目录，要求如下： - 从
&lt;a href=&quot;http://classroom.example.com/materials/private.html&quot; class=&quot;bare&quot;&gt;http://classroom.example.com/materials/private.html&lt;/a&gt;
下载一个文件副本到这个目录，并且重命名为 index.html -
不要对这个文件的内容作任何修改。 - 从 systemX 上，任何人都可以浏览
private
的内容，但是从其他系统就不能访问这个目录的内容。（注意题目要求谁可以访问，灵活变化）&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot; &gt;
— bash
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;备注，此题是接着上一题，所以这里的 DocumentRoot 指的就是上面的
/var/www/virtual/。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建文件夹&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;mkdir /var/www/virtual/private&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;获取文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;wget -O /var/www/virtual/private/index.html http://classroom.example.com/materials/private.html&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;编辑虚拟主机配置文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;vim www47.conf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加配置&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;VirtualHost *:80&amp;gt;
  ServerName www47.example.com
  DocumentRoot &quot;/var/www/virtual&quot;
  &amp;lt;Directory &quot;/var/www/virtual&quot;&amp;gt;
    Require all granted
  &amp;lt;/Directory&amp;gt;
  &amp;lt;!--添加一下内容--&amp;gt;
  &amp;lt;Directory &quot;/var/www/virtual/private&quot;&amp;gt;
    Require all granted
    Require local
  &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试配置是否有误&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;apachectl  configtest&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后重启服务&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;systemctl  restart   httpd&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 14 配置虚拟主机]]></description><link>https://zyue.wiki/articles/2018/02/21/1546344576678.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/21/1546344576678.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 serverX 上扩展你的 web 服务器，为站点 &lt;a href=&quot;http://wwwX.example.com&quot; class=&quot;bare&quot;&gt;http://wwwX.example.com&lt;/a&gt;
创建一个虚拟主机，然后执行以下步骤 - 设置 DocumentRoot 为
/var/www/virtual - 从 &lt;a href=&quot;http://classroom.example.com/materials/www.html&quot; class=&quot;bare&quot;&gt;http://classroom.example.com/materials/www.html&lt;/a&gt;
下载文件并重命名为 index.html ，不要对文件 index.html 内容做任何修改。 -
将 index.html 文件放到虚拟主机的 DocumentRoot 目录下，确保floyd
用户能够在 /var/www/virtual 目录下创建文件。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;注意：原始站点 &lt;a href=&quot;http://serverX.example.com&quot; class=&quot;bare&quot;&gt;http://serverX.example.com&lt;/a&gt;
必须仍然能够访问，站点的所用的域名网络中已有 DNS 服务器解析&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建文件夹，并下载文件&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;mkdir -p /var/www/virtual
wget -O /var/www/virtual/index.html http://classroom.example.com/materials/www.html&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;创建新的虚拟主机&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;vim /etc/httpd/conf.d/www47.conf
&amp;lt;VirtualHost *:80&amp;gt;
  ServerName www47.example.com
  DocumentRoot &quot;/var/www/virtual&quot;
  &amp;lt;Directory &quot;/var/www/virtual&quot;&amp;gt;
    Require all granted
  &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试配置是否有误&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;apachectl  configtest&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;添加用户，并设置 ACL 权限&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;useradd floyd
setfacl -m u:floyd:rwX /var/www/virtual&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后重启服务&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;systemctl  restart   httpd&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 13 配置安全web服务]]></description><link>https://zyue.wiki/articles/2018/02/21/1546344572836.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/21/1546344572836.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;站点 &lt;a href=&quot;http://serverX.example.com&quot; class=&quot;bare&quot;&gt;http://serverX.example.com&lt;/a&gt; 配置 TLS 加密。 - 一个已经签名证书从
&lt;a href=&quot;http://classroom.example.com/pub/tls/certs/server47.crt&quot; class=&quot;bare&quot;&gt;http://classroom.example.com/pub/tls/certs/server47.crt&lt;/a&gt; 获取 -
此证书的密钥从 &lt;a href=&quot;http://classroom.example.com/pub/tls/private/server47.key&quot; class=&quot;bare&quot;&gt;http://classroom.example.com/pub/tls/private/server47.key&lt;/a&gt;
获取 - 此证书的授权信息从
&lt;a href=&quot;http://classroom.example.com/pub/example-ca.crt&quot; class=&quot;bare&quot;&gt;http://classroom.example.com/pub/example-ca.crt&lt;/a&gt; 获取&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;*备注：由于这里说法比较模糊，理解成为上一题配置加密 https 即可 *&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;安装 mod_ssl&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;yum install mod_ssl&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;获取证书&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;wget -O /etc/pki/tls/certs/server47.crt http://classroom.example.com/pub/tls/certs/server47.crt
wget -O /etc/pki/tls/private/server47.key http://classroom.example.com/pub/tls/private/server47.key
wget -O /etc/pki/tls/certs/example-ca.crt http://classroom.example.com/pub/example-ca.crt&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改 ssl.conf&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;vim /etc/httpd/conf.d/ssl.conf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;修改为获取的路径以及名称&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;SSLCertificateFile /etc/pki/tls/certs/server47.crt
SSLCertificateKeyFile /etc/pki/tls/private/server47.key
SSLCACertificateFile /etc/pki/tls/certs/example-ca.crt&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;重启服务，添加服务&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;systemctl  restart   httpd
firewall-cmd  --permanent  --add-service=https
firewall-cmd  --reload&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[rhce 12 实现一个web服务器]]></description><link>https://zyue.wiki/articles/2018/02/20/1546344585618.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/02/20/1546344585618.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_操作&quot;&gt;操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在 server0 上配置一个站点 &lt;a href=&quot;http://server0.example.com，然后执行以下步骤&quot; class=&quot;bare&quot;&gt;http://server0.example.com，然后执行以下步骤&lt;/a&gt;:
- 从 &lt;a href=&quot;http://classroom.example.com/materials/station.html&quot; class=&quot;bare&quot;&gt;http://classroom.example.com/materials/station.html&lt;/a&gt; 下载文件，并且
- 将文件重命名为 index.html,绝对不能修改此文件的内容。 - 将 index.html
拷贝到你的 web 服务器的 DocumentRoot 目录下。 - 来自 example.com
172.25.0.0/24 域的客户端可以访问此 web 站点。 - 来自 my133t.org
172.17.10.0/24 域的客户端拒绝访问此 web 站点。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;&lt;strong&gt;备注：网站的 DocumentRoot 如果题目没有指定，那么随意。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_操作&quot; &gt;操作&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;先获取题目指定的 index.html&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;wget -O /var/www/html/index.html  http://classroom.example.com/materials/station.html&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;建立一个虚拟主机&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;vim  /etc/httpd/conf.d/server47.conf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;配置文件如下&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;&amp;lt;VirtualHost *:80&amp;gt;
  ServerName server47.example.com
  DocumentRoot &quot;/var/www/html&quot;
  &amp;lt;Directory &quot;/var/www/html&quot;&amp;gt;
    &amp;lt;RequireAll&amp;gt;
      Require all granted
      Require not ip 172.17.10.0/24
    &amp;lt;/RequireAll&amp;gt;
  &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;测试配置是否有误&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;apachectl  configtest&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然后重启服务，开放防火墙&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;systemctl  enable  httpd
systemctl  restart   httpd
firewall-cmd  --permanent  --add-service=http
firewall-cmd  --reload&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[No title]]></title><description><![CDATA[为什么 Github 没有记录你的 Contributions]]></description><link>https://zyue.wiki/articles/2018/07/18/1546344587551.html</link><guid isPermaLink="false">https://zyue.wiki/articles/2018/07/18/1546344587551.html</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div id=&quot;toc&quot; class=&quot;toc&quot; &gt;
&lt;div id=&quot;toctitle&quot; &gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_为什么你的_contributions_没有在你的_profile_里显示&quot;&gt;为什么你的 Contributions 没有在你的 Profile 里显示？&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_什么样的贡献才会被github统计&quot;&gt;什么样的贡献才会被Github统计?&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_issues_和_pull_requests&quot;&gt;Issues 和 pull requests&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_commits&quot;&gt;Commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_contributions未被github计入的几个常见原因&quot;&gt;Contributions未被Github计入的几个常见原因&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_如何排查&quot;&gt;如何排查&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_补救措施&quot;&gt;补救措施&lt;/a&gt;&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_变更作者信息&quot;&gt;变更作者信息&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot; &gt;
&lt;li &gt;&lt;a href=&quot;#_使用脚本来改变某个repo的git历史&quot;&gt;使用脚本来改变某个repo的Git历史&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li &gt;&lt;a href=&quot;#_如何正确设置你的_git_个人信息&quot;&gt;如何正确设置你的 git 个人信息&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot; &gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;本文转载，出处未找到&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;最近在给同学看我的github时，突然发现我的Contributions
Graph上一篇空白居然只有两三个小绿块，所以一直没发现个人repo的commit记录都没有被记录，于是外事不决问Google，发现原来是因为git初始化设定时没有设定正确的用户名和邮箱（主要是邮箱），具体可以参考Github官方写的help文档&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_为什么你的_contributions_没有在你的_profile_里显示&quot; &gt;为什么你的 Contributions 没有在你的 Profile 里显示？&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;那么问题来了，什么是Contributions呢，Github官网上有这么一句话 &amp;gt; Your
profile contributions graph is a record of contributions you’ve made to
&amp;gt; GitHub repositories. Contributions are only counted if they meet
certain criteria. &amp;gt; In some cases, we may need to rebuild your graph in
order for contributions to &amp;gt; appear. &amp;gt; &amp;gt; &amp;gt;
你的个人简介中的贡献图记录的是你给Github上的仓库的贡献。它仅仅只记录某些符合标准
&amp;gt;
的commits。在某些情况下，我们需要重新建立你的贡献图以便让所有的贡献都显示出来。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_什么样的贡献才会被github统计&quot; &gt;什么样的贡献才会被Github统计?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;英语好的同学请移步
&lt;a href=&quot;https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/&quot;&gt;Why
are my contributions not showing up on my profile?&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_issues_和_pull_requests&quot; &gt;Issues 和 pull requests&lt;/h3&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;这个操作是在一年之内&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;这个操作是针对一个独立的仓库，不能是fork&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_commits&quot; &gt;Commits&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;当你的commits满足以下条件时，它才会被展示出来：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;一年之内提交的commits&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;commits使用的email地址是与你的Github账号相关联的&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;这些commits是在一个独立的仓库而不是fork仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;这些commits是在：&lt;/p&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;在默认分支上（通常是==master==）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;在==gh-pages==分支(包含
&lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages/#project-pages&quot;&gt;Project
Pages sites&lt;/a&gt; 的仓库)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;此外，至少满足下面条件中的一个（主要针对你Commit的仓库不是你创建的）：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;你是这个仓库的协作者，或者是这个版本库的拥有组织中的一员&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;你fork过这个仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;你对这个仓库发起过pull request或者issue&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;你对这个仓库标记了Star&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意：私有库的贡献仅仅对私有库成员显示&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_contributions未被github计入的几个常见原因&quot; &gt;Contributions未被Github计入的几个常见原因&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;ulist&quot; &gt;
&lt;ul &gt;
&lt;li &gt;
&lt;p&gt;进行Commits的用户没有被关联到你的Github帐号中。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;不是在这个版本库的默认分支进行的Commit。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;这个仓库是一个Fork仓库，而不是独立仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_如何排查&quot; &gt;如何排查&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;你可以在你的本地 repo 里用 ==git log== 命令查看 commit
记录上的个人邮箱是否正确，像我就是因为之前切换到 Mac
平台开发之后用户名没有配置，所以我之后的 commit 记录上的邮箱一直是
==&lt;a href=&quot;mailto:Leo@Leo-MacBook-Pro.local&quot;&gt;Leo@Leo-MacBook-Pro.local&lt;/a&gt;==，所以 Github 就会认为这些 commits
都不是你提交的！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_补救措施&quot; &gt;补救措施&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;然而这也并不是没有补救办法的，Github官网上就有给出详细的补救过程，英语好的同学请自行移步https://help.github.com/articles/changing-author-info/[Changing
author info]，下面是我翻译自Github Help的简要步骤：&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_变更作者信息&quot; &gt;变更作者信息&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;为改变已经存在的 commits 的用户名和/或邮箱地址，你必须重写你 Git repo
的整个历史。 &amp;gt; 警告： 这种行为对你的 repo 的历史具有破坏性。如果你的
repo
是与他人协同工作的，重写已发布的历史是一种不好的习惯。仅限紧急情况执行该操作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;使用脚本改变你 repo 的 Git 历史 我们写了一段能把 commit
作者旧的邮箱地址修改为正确用户名和邮箱的脚本。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; &gt;
&lt;h3 id=&quot;_使用脚本来改变某个repo的git历史&quot; &gt;使用脚本来改变某个repo的Git历史&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;我们已经创建了一个脚本，使用正确的姓名和电子邮件地址提交后，你以前提交的所有的commits中的作者信息及提交者字段中的旧的用户名和邮箱地址都将被更正&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot; &gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;注意： 执行这段脚本会重写 repo 所有协作者的历史。完成以下操作后，任何
fork 或 clone 的人必须获取重写后的历史并把所有本地修改 rebase
入重写后的历史中。&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;在执行这段脚本前，你需要准备的信息：&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li &gt;
&lt;p&gt;Mac、Linux下打开Terminal，Windows下打开命令提示符（command prompt）&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;给你的repo创建一个全新的clone&lt;/p&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;git clone –bare &lt;a href=&quot;https://github.com/user/repo.git&quot; class=&quot;bare&quot;&gt;https://github.com/user/repo.git&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;cd repo.git&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;复制粘贴脚本，并根据你的信息修改以下变量：==旧的Email地址==，==正确的用户名==，==正确的邮件地址==&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;#!/bin/sh
git filter-branch --env-filter &apos;
OLD_EMAIL=&quot;旧的Email地址&quot;
CORRECT_NAME=&quot;正确的用户名&quot;
CORRECT_EMAIL=&quot;正确的邮件地址&quot;
if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]
then
    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;
    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;
fi
if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]
then
    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;
    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;
fi
&apos; --tag-name-filter cat -- --branches --tags&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;4&quot;&gt;
&lt;li &gt;
&lt;p&gt;按 ==Enter键== 执行脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;用 ==git log== 命令看看新 Git 历史有没有错误&lt;/p&gt;
&lt;/li&gt;
&lt;li &gt;
&lt;p&gt;把正确历史 push 到 Github&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;git push --force --tags origin &apos;refs/heads/*&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot; &gt;
&lt;ol class=&quot;arabic&quot; start=&quot;7&quot;&gt;
&lt;li &gt;
&lt;p&gt;删掉刚刚临时创建的 clone&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;cd ..
rm -rf repo.git&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot; &gt;
&lt;h2 id=&quot;_如何正确设置你的_git_个人信息&quot; &gt;如何正确设置你的 git 个人信息&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot; &gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;接下来全局设置好你的正确信息，以后就放心的用Github进行版本管理吧 &lt;sup&gt;_&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;git config --global user.email &quot;你的邮件地址&quot;
git config --global user.name &quot;你的Github用户名&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;查看你的Git全局设置信息 ==git config -l==&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot; &gt;
&lt;div class=&quot;content&quot; &gt;
&lt;pre&gt;Air:slime admin$ git config -l
user.name=XXXXXX
user.email=XXXXXX@mail.com
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
Air:slime admin$&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; &gt;
&lt;p&gt;转载请注明原文链接：http://xunli.xyz/2016/01/09/github-not-count/&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>